

# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas



# Chapters



# 1.0 Gambas Online Book

Yes, it's time to write. The book is and never will be ready - so let's start.
It should become clear that
Which contents are to be expected on the pages?
In the individual chapters and their parts the necessary theoretical elements for the language Gambas are presented. This includes the properties, methods and events of the selected classes. These classes are then used in a Gambas project. The source code is presented in parts or completely and commented at the important places. After each chapter, the project is optionally provided as a source code archive for download.
The chosen form of online book will make it possible to quickly incorporate changes in the language of Gambas into the book. We sincerely hope that the readers of our book have the same fun programming with gambas as the authors.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas



# Chapters



# 1.1 The Gambas project

The Gambas project is version managed via SVN - this is where all the official source code is located, such as for the compiler, interpreter or archiver, and for the officially supported and maintained components.
The group of Gambas developers is difficult to name, however, because everyone can participate in the development and everyone decides for themselves when, how intensively and in which specific area they contribute to the Gambas project. In the 'Hall Of Fame' of developers you can see who cares about certain areas. As a developer, you need to create a user account on sourceforge.net. Minisini as the administrator of the Gambas project can grant your sourceforge.net account write access. You have to ask him for this in an email. This Sourceforge account will then be used for all actions with the SVN repository.
In general, the responsibility for additions to the Gambas project lies with the respective authors. Development is entirely casual, with 'development' referring to different areas:
Gambas development is led by Benoit Minisini, who maintains the core programs. He also looks after a large number of the components - his own on the one hand and those no longer maintained by their authors on the other. When developers write classes for Gambas, these classes provide an interface to Gambas through their properties, methods, events and constants. To ensure consistency of syntax, Minisini needs to check these interfaces, possibly request changes and give hints to the developers. If the story of the pot and the many cooks comes to mind, you are exactly right. Not for nothing does every good kitchen have a chef!
Even if you don't want to become a developer, Gambas users are still called upon to help. The Gambas language is currently undergoing major changes - especially in the course of the transition from Gambas2 to the Gambas3 version and its development. Could you see your favourite in one of the entries below?


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas



# Chapters



# 1.1.1 Gambas versions

If you have decided to program with Gambas in the future, you should choose a stable version 3 from the package sources of the Linux distribution or install the current stable Gambas version 3 from the project sources.

Currently, most programmers work with the stable Gambas version 3 and only a few use the developer version via GIT.    Late changes from stable version 2 to stable version 3 should follow the following instructions:
If you change from Gambas2 to Gambas3 or from Gambas3 - version smaller than version 3.4.0 - to a higher version you have to note that the installation directories have changed! This requires a clean and complete de-installation of the current Gambas version and a new installation of the development environment of Gambas.
The de-installation and (new) installation are described in separate chapters in the online book.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas



# Chapters



# 1.1.2 Gambas documentation

The only official documentation available for the Gambas development environment is the documentation on the Internet.For Gambas version 3, there is a new official Gambas wiki athttp://gambaswiki.org/wiki.
Searching works easiest with Google search using this search string for example for information on the definitionRichTextor onPaint:
Figure 1.1.2.1: The new Gambas documentation.
Under the linkhttp://gambasdoc.org/help?enyou will find the old documentation for version 2, which is no longer maintained. You can switch directly to the documentation for version 3 (→ red marked area):
Figure 1.1.2.2: Gambas documentation (read-only)
You will get help for the following areas, among others:
Unfortunately, there are only a few passages in the documentation for which there is also a German translation.
Athttp://gambas.sourceforge.net/en/main.html#(./Help/Books) you can find also online books for Gambas 3:
Figure 1.1.2.3: Online book in german
An English translation of the German Gambas-Buch introduced above. Start reading the English version athttps://gambas-buch.de/dwen/doku.php.
Figure 1.1.2.3: Online book in english
Very informative is the overview on the start page ofhttp://gambas.sourceforge.net/en/main.htmlon Gambas projects, compiled from different fields of application. Often the developers not only make the programme available under a stated licence, but also the complete Gambas project - including all source code. The authors have also made a project on 'Data Type Struct' available for download:
Figure 1.1.2.4: Project 'Struct' on the 'Applications' page


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas



# Chapters



# 1.1.3 Gambas on the Internet

You should know these websites on the internet:
Suggestions and help in German can be found on the following websites:
This overview (as of1.1.2022) of websites from different countries can be recommended because they not only provide information, but in many cases also enable a direct exchange in the connected forums:
You can also find more websites on the Gambas project page under Resources/Mailing Lists & Forums on Gambas. Many programmers have published their projects on the Gambas project page.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas installation



# Chapters



# 2.0 Installation of Gambas

If you want to work with Gambas, you should install the development environment Gambas on your computer. There are four alternative ways to install gambas, for example for the Linux distribution Ubuntu and its derivatives:
For other Linux distributions, the second variant is the most promising one if the installation from the package sources of the Linux distribution used is not possible, the version is faulty or outdated. Whether you choose to use a stable version of Gambas or the development version depends on the goals you want to achieve.
Good to know for nostalgics: You can convert a Gambas2 project (semi-automatic) into a Gambas3 project in the development environment of Gambas3.
Figure 2.0.1: Stable development environment Gambas 3.6.2 (–> 12.11.2014)


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas installation



# Chapters



# 2.1 Installation from the package sources of the used Linux distribution (Ubuntu)

At present, it is not advisable to use the installation from the package sources of the Ubuntu versions used up to 14.10 at this time:
If, for whatever reason, you decide to install Gambas version 3.5.4 from the package sources under Ubuntu 14.10, you will find installation instructions here. There are two alternative ways to install it:
Variant 1 –> Ubuntu Software Center
You first search for' gambas' in the search mask. Then you will be offered Gambas 3.5.4. You can first view more information or install Gambas 3.5.4.
Variant 2 –> Synaptic package management
In the synaptic package management,' gambas' is entered in the quick selection filter and searched for' gambas' using the' Search' button. Then all relevant Gambas packages are selected and marked for installation. Please also scroll down, because some packages are shown in the list below. With' Apply' the installation of gambas is started.
Advantages:
Disadvantages:
Conclusion:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas installation



# Chapters



# Table of Contents



# 2.2 Installation from the sources of the Gambas project

If the installation of Gambas from the package sources of the Linux distribution used is not possible, then it is worthwhile to install the current stable version of Gambas3 from the sources of the Gambas project. This installation has the advantage of being similar for many Linux distributions. The descriptions in this chapter follow the instructions for installing gambas on the Gambas project page.


# 2.2.1 Preparations

Before you start installing Gambas3 in the current stable version, you should make sure that an existing older version of Gambas has been properly uninstalled! In the chapter' De-Installation of Gambas' you will find a detailed description how to uninstall Gambas.
An overview of the developer packages can currently be found here:http://gambaswiki.org/wiki/install#t5. In addition, the installation of Gambas is described in general after the overview. Special features of selected Linux distributions are pointed out.
You must ensure that all necessary developer packages needed to install Gambas3 are installed on your computer - which is to be verified - or installed. For Ubuntu these are the following developer packages (?http://gambaswiki.org/wiki/install/ubuntu#t6):


```
$ sudo apt-get install build-essential g++ automake autoconf libbz2-dev libmysqlclient-dev unixodbc-dev
libpq-dev libsqlite0-dev libsqlite3-dev libglib2.0-dev libgtk2.0-dev libcurl4-gnutls-dev libgtkglext1-dev
libpcre3-dev libsdl-sound1.2-dev libsdl-mixer1.2-dev libsdl-image1.2-dev libsage-dev libxml2-dev libxslt1-dev
librsvg2-dev libpoppler-dev libpoppler-glib-dev libasound2-dev libesd0-dev libdirectfb-dev libxtst-dev
libffi-dev libqt4-dev libglew1.5-dev libimlib2-dev libv4l-dev libsdl-ttf2.0-dev libgnome-keyring-dev
libgdk-pixbuf2.0-dev linux-libc-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libcairo2-dev
libgsl0-dev libncurses5-dev libgmime-2.6-dev llvm-3.1-dev libalure-dev libgmp-dev libgtk-3-dev
```



# 2.2.2 Downloading a Gambas3 archive

Either visit the Gambas project site athttp://gambas.sourceforge.net/en/main.htmland click on the appropriate download button for Gambas3, for example, or call up the download directly for the marked version:


```
http://sourceforge.net/projects/gambas/files/gambas3/gambas3-3.6.2.tar.bz2/download
```

Figure 2.2.2.2.1: Download dialog
Under Ubuntu 12.04 LTS a download dialog opens, in which you choose the second option where the archive is saved in the standard download folder. After downloading you have to unpack the archive with a suitable program. Then rename the generated folder gambas3-3.6.2 to gb362 and copy it into the home directory.


# 2.2.3 Installation of Gambas3

Then execute these 5 commands one after the other in a terminal to install Gambas3 safely:


```
$ cd ~/gb362
$ ./reconf-all
$ ./configure -C  # ← during the first installation without -C !
$ make
$ sudo make install
```

Explanations:
Then Gambas3 is installed under root privileges - with sudo make install.


# 2.2.4 Starting the program Gambas

You start the installed version of Gambas3 in a console with:


```
hans@linux:~$ /usr/bin/gambas3
hans@linux:~$ gambas3 # Alternative
```

It is advantageous if you place a starter for Gambas3 on the desktop, to which you give a suitable icon:
Figure 2.2.4.1: Icon for the Gambas3-Starter


# 2.2.5 Notes

The described procedure has been successfully implemented by the author for many years. Before a new stable Gambas version finds its place on the PC, however, a predecessor version is consistently deleted (–> chapter 2.5 De-installation of Gambas)!


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas installation



# Chapters



# Table of Contents



# 2.3 Installation from alternative sources - PPA

If you cannot find suitable Gambas software in the selected category in the Software Center or in Ubuntu's Synaptic Package Management, you can add external package sources to Ubuntu's package sources, provided you have the right to install software on the system.


# 2.3.1 Personal Package Archive (PPA)

The Personal Package Archives are a special variant of external package sources. For this PPA, you need the address of the package source and often a package key to check the signatures of the packages. You will find a suitable Gambas PPA under:


```
https://launchpad.net/ubuntu/+ppas?name_filter=gambas
```

If the search was successful, you can view all external package sources and decide whether a suitable PPA with the desired Gambas version is included. Keep in mind that a PPA is on the one hand a foreign software source and on the other hand is often only offered for a certain Ubuntu version!


# 2.3.2 External packet sources

There are three PPAs for Ubuntu, which are maintained by the' Gambas Ubuntu Maintainers' team:
The installation is done either via console or package management. In any case, you need the exact name of the PPA or the addresses of the PPA source.


# 2.3.3 Installing the stable gambas version from external package sources (PPA)

This call in a web browser


```
https://launchpad.net/~gambas-team/+archive/ubuntu/gambas3
```

takes you to the Gambas Stable Builds page:
Figure 2.3.1: Information page on a special PPA


# 2.3.3.3.1 Installation Console

To install the stable, current version of Gambas under Ubuntu 14.10:
Open a terminal!   * Execute the following three commands one after the other:


```
$ sudo add-apt-repository ppa:gambas-team/gambas3
$ sudo apt-get update
$ sudo apt-get install gambas3
```

The list of available package sources is extended to include the external source and the required key is automatically imported. Fine - that's the way it should be! After you have re-imported the package sources, you can install Gambas3 from the external source in the Package Manager.
Note: Use these instructions to install the day-precise Gambas version:


```
$ sudo add-apt-repository ppa:gambas-team/gambas-daily
$ sudo apt-get update
$ sudo apt-get install gambas3
```



# 2.3.3.3.2 Installation via package management

You can also go to the Package Sources menu item in the Ubuntu package management and add the following sources, whose exact description for your Ubuntu version can be found under' Technical Details…' (–> Figure 2.3.1):


```
deb http://ppa.launchpad.net/gambas-team/gambas3/ubuntu utopic main
deb-src http://ppa.launchpad.net/gambas-team/gambas3/ubuntu utopic main
```

You can then install Gambas3 after updating the package list in the package management.


# 2.3.4 Remove a PPA

If you want to delete a PPA and all installed/updated packages, you can use the' ppa-purge' program, which can be installed in a console like this:


```
$ sudo apt-get install ppa-purge
```

This command separates you from the PPA' Gambas Stable Builds':


```
$ sudo ppa-purge ppa:gambas-team/gambas3
```



# 2.3.5 Excursus

With the' Y PPA Manager' you can manage PPAs under Ubuntu. The' Y PPA Manager' is also a PPA and you can find the way to thisGUIunder this link:


```
https://launchpad.net/~webupd8team/+archive/ubuntu/y-ppa-manager
```

The name of the PPA is ppa: webupd8team/y-ppa-manager.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas installation



# Chapters



# Table of Contents



# 2.5 De-installation of gambas

The change from Gambas3 version 3.3.3.3 to Gambas3 version 3.3.4 and the installation of Gambas3 via SVN from revision 5227 onwards resulted in a change of the installation paths. In these cases, you have to remove the old version completely, because otherwise an update will result in effects that cannot be traced. On October 12,2012, Minisini wrote something like this:
… For this reason, you must uninstall everything related to Gambas 3 before you compile and install a newer version, otherwise random crashes may occur. … Please forgive this inconvenience….


# 2.5.1 Variant 1

This variant applies as of Gambas 3.3.5 under the aspect “Delete previous version”:


```
hans@linux:~$ sudo rm -i /usr/bin/gb*
[sudo] password for hans:
rm: Remove normal file "/usr/bin/gba3"? y
rm: Remove normal file "/usr/bin/gbc3"? y
rm: Remove normal file "/usr/bin/gbi3"? y
rm: remove symbolic link "/usr/bin/gbr3"? y
rm: remove symbolic link "/usr/bin/gbs3"? y
rm: remove normal file "/usr/bin/gbs3.gambas"? y
rm: remove symbolic link "/usr/bin/gbw3"? y
rm: Remove normal file "/usr/bin/gbx3"? y

hans@linux:~$ sudo rm -rf /usr/lib/gambas3

hans@linux:~$ sudo rm -rf /usr/share/gambas3
hans@linux:~$
```

The -i (interactive) option prompts you whether or not to delete the displayed file or SymLink. You should not do without these security questions!
Variant 1 is always used by the author before installing a new, stable Gambas version from the project sources of the Gambas project.


# 2.5.2 Variant 2

If gambas were installed via SVN, then these commands are used in a console


```
$ cd $HOME/gb353_trunk #  → Gambas-Source directory
$ sudo make uninstall
```

removed all files of Gambas 3.5.3 that were installed by the created Makefile during the installation of Gambas 3.5.3. You can then safely delete the source directory of the Gambas source directory.


# 2.5.3 Variant 3

If you have installed Gambas2 or Gambas3 (version? 3.3.3) from the package sources of the Linux distribution you are using, then alternatively uninstall Gambas with one of these commands in a console:


```
$ sudo apt-get purge gambas2
$ sudo apt-get purge gambas3
```



# 2.5.4 Variant 4

However, you can also use the installation tool of the Linux distribution - for Ubuntu these are the synaptic package management or the software center - to separate from all relevant folders and files of Gambas.
If packages have been installed via package management, the package management is informed which files of the packages are in the installation paths and can cleanly remove them again.


# 2.5.5 Variant 5

However, if you have installed Gambas2 or Gambas3 (version < 3.3.3) from the sources of the Gambas project, you should delete all relevant directories in this way:


```
hans@linux:~$ sudo rm -i /usr/local/bin/gb*
[sudo] password for hans:
rm: Remove normal file "/usr/local/bin/gba3"? y
rm: Remove normal file "/usr/local/bin/gbc3"? y
rm: Remove normal file "/usr/local/bin/gbi3"? y
rm: remove symbolic link "/usr/local/bin/gbr3"? y
rm: remove symbolic link "/usr/local/bin/gbs3"? y
rm: remove normal file "/usr/local/bin/gbs3.gambas"? y
rm: remove symbolic link "/usr/local/bin/gbw3"? y
rm: Remove normal file "/usr/local/bin/gbx3"? y
hans@linux:~$ sudo rm -rf /usr/local/lib/gambas3
hans@linux:~$ sudo rm -rf /usr/local/share/gambas3
hans@linux:~$
```

Alternative:
If the source folder still exists, a makefile is also available. You simply delete the installed gambas with it:


```
$ sudo make uninstall
```

You can then delete the Gambas source directory in this case as well.


# 2.5.6 Variant 6 (Christof Thalhofer)

This variant is needed if you want to reinstall Gambas.
Find all Gambas packages installed:


```
$ dpkg -l | grep gambas3 | awk '{print $2}' | tr '\n' ' '
```

Excerpt from the issue at the author's with Gambas 3.16.3 (Status: 13.01.2022):


```
gambas3 gambas3-dev-tools gambas3-devel gambas3-gb-args gambas3-gb-cairo gambas3-gb-chart gambas3-gb-clipper gambas3-gb-complex gambas3-gb-compress gambas3-gb-compress-bzlib2 gambas3-gb-compress-zlib gambas3-gb-compress-zstd gambas3-gb-crypt gambas3-gb-data gambas3-gb-db gambas3-gb-db-form gambas3-gb-db-mysql gambas3-gb-db-odbc gambas3-gb-db-postgresql gambas3-gb-db-sqlite2 gambas3-gb-db-sqlite3
...
gambas3-gui gambas3-ide gambas3-runtime gambas3-scripter
```

Remove all packages:


```
$ sudo apt remove $(dpkg -l | grep gambas3 | awk '{print $2}' | tr '\n' ' ')
```

After that Gambas can be installed as usual.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas IDE



# Chapters



# Table of Contents



# 4.0 IDE - Integrated Development Environment for Gambas

In the chapter `2.0 Installation of Gambas` several ways are described how to install Gambas on your computer. The rest of the descriptions assume that Gambas has been installed.
Use the following commands to find out in which path Gambas has been installed. You need this information to start the integrated development environment (IDE):


```
hans@mint-183 ~ $ whereis gambas3
gambas3: /usr/bin/gambas3 /usr/lib/gambas3 /usr/share/gambas3 /usr/share/man/man1/gambas3.1.gz
```

Not only the path to the executable programme file is output, but also the paths for the documentation (man pages) and other files.
Alternatively use:


```
hans@mint-183 ~ $ which gambas3
/usr/bin/gambas3
```

This has the advantage that an executable file is only searched for in the directories specified in the environment variable PATH ($ printenv | grep PATH=/home).


# 4.0.1 Gambas - Start

You can start Gambas
This is how you can start Gambas3 in the console:


```
hans@mint-183 ~ $ /usr/bin/gambas3
```

This also works with the following command, as the search path is entered in the PATH environment variable:


```
hans@mint-183 ~ $ gambas3
```

Figure 4.0.1.1: Gambas - Start Dialogue


# 4.0.2 Notes

For testing, you can temporarily start Gambas in an English environment, for example:


```
hans@mint-183 ~ $ LC_ALL=en_GB.utf8 /usr/bin/gambas3
hans@mint-183 ~ $ LC_ALL=en_GB.utf8 gambas3
```

It is also possible to temporarily commit to a specific QT library in addition, if that is required:


```
hans@mint-183 ~ $ LC_ALL=en_GB.utf8 GB_GUI=gb.qt4 gambas3
```

However, you can start Gambas permanently in an English environment for extensive tests - for example, to check necessary translations in a larger project. For information on this, see chapter 11.5.2.8.4 Testing the programme in a changed locale.
To work consistently with the QT4 library, enter the variableGB_GUIwith the value gb.qt4 for the current project under Menu> Project> Properties> Environment by hand. Alternatively, use the menu button and select the entry 'GB_GUI=gb.qt4'.
The configuration of Gambas is described in the next chapter '3.1 IDE - Configuration'. The (global) configuration file of Gambas can be found under $HOME/.config/gambas3/gambas3.conf.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas IDE



# Chapters



# Table of Contents



# 4.1 IDE - Configuration

There is only one global configuration for Gambas - stored in a file in the path ~/.config/gambas3. You make the configuration in a dialogue under IDE> Tools> Settings.
In addition to the global configuration, you always edit the project-related configuration under IDE> Menu> Project> Properties. This configuration file is located in the project folder.


# 4.1.1 Configuration 1

Figure 4.1.1.1: Identity
The identity details are optional; as are the provider name and provider prefix details. They are automatically transferred to the dialogue for creating an installation package (Chapter 11.10) and therefore do not have to be entered again each time.
Figure 4.1.1.2: Projects
All further details on the global configuration of Gambas in this chapter correspond to the configuration of the Gambas version (3.12.2 - 7 April 2019) used by the author. They are tried and tested and have been used this way for many years.
Figure 4.1.1.3: Interface
Specifying `Minimise at runtime` hides the IDE window, which you then have to show again manually when the programme has finished.
Figure 4.1.1.4: Fonts
The specification 'standard font' refers to texts in the IDE. For the editor and the output in the console of the IDE, the author has changed the font.
Figure 4.1.1.5: Themes
All predefined specifications were taken over. The option `Adapt colours to dark themes` depends of course on the chosen colour scheme. Go ahead and experiment! If it brings a gain in readability for you, then it is worth it.
Figure 4.1.1.6: Editor
The specification 'Show preview' creates a window - docked at the right margin - in which the source text is additionally displayed. Find out whether the preview offers you any added value.
Figure 4.1.1.7: Code formatting
If you format the source code in a special way, you should not activate the option 'Format on load & save'. The automatic closing of brackets was deactivated after a short time by the author - it disturbed the writing flow.
Figure 4.1.1.8: Code shortcuts
Only a few of the code shortcuts are used intensively by the author. No use has yet been made of the possibility to create own commands (New…).
Figure 4.1.1.9: Background
The background chosen by the author is only slightly structured and fits well with the design of the IDE. If you like it more colourful, you can also set the background to be monochrome and without structure.
Figure 4.1.1.10: Help and applications
The specification 'Use offline documentation' is not activated for the author. It is set to online help, but this requires access to the Internet.


# 4.1.2 Configuration 2

The notes in this chapter refer to the configuration of the three menu bars in the IDE. The description of the menu and sub-menus and their actions are described in chapter 4.3 IDE - Menu.


# 4.1.2.1 Menu bar

The following describes the individual actions that are triggered when a tool button in the menu bar is pressed.  Afterwards, you will learn how to customise the menu bar within narrow limits - which was done at the author's in the displayed menus:
Figure 4.1.2.1.1: Toolbar menu


# 4.1.2.2 'Editor' menu bar

Figure 4.1.2.2.1: 'Editor' menu bar


# 4.1.2.3 Menu bar 'Form'

Figure 4.1.2.3.1: 'Form' menu bar


# 4.1.2.4 Configure menu bars

You can change all three menu bars within narrow, predefined limits. You call up the context menu with the right mouse button in each case over an empty area of a menu bar:
Figure 4.1.2.4.1: Context menu menu bar
Select the entry `Configure…`. A window opens that contains different elements depending on the menu bar:
Figure 4.1.2.4.2: Selection
Figure 4.1.2.4.3: Selection `form
Figure 4.1.2.4.4: Selection `Source Editor`
Drag and drop the selected menu icon from the configuration window onto the menu bar or from there onto the window if it is to be removed from the current menu bar. You can preset the size of the menu icons in the pop-up menu in the second entry or also set them in four levels in the current toolbar.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas IDE



# Chapters



# Table of Contents



# 4.2 IDE - Structure

This chapter introduces you to the structure of the Gambas IDE and describes how you can change this structure. You can change it by adding or deleting individual windows to the workspaces or by hiding them and by changing the arrangement of the individual windows in the workspace. When you create a new project in the IDE or open an existing project, the IDE starts with a preset structure.


# 4.2.1 IDE

It is assumed that you open an existing Gambas project. You will then see the IDE with the following structure:
Figure 4.2.1.1: IDE - Form Editor
Comment
Figure 4.2.1.2: IDE - source code editor
Figure 4.2.1.3: IDE - Image Editor
If you have started a Gambas programme or want to create an executable file, then output will be seen in the console and possibly other windows will be displayed, in which, for example, a warning will be issued:
Figure 4.2.1.4: Console - Output of `PRINT Application.Version`
Figure 4.2.1.5: Fixed breakpoints
Figure 4.2.1.6: Troubleshooting
If you have set breakpoints, then execution stops at the first breakpoint. This gives you the possibility to display the current value of a property or properties and their values of a control. This way you can track down a possible error. You only have to double-click on the property or control of interest to read its properties:
Figure 4.2.1.7: Tasks - Value of the property `.Text` of the textbox txbInputA
Continuing in the programme flow, for example, use the function key F5.
Figure 4.2.1.8: Tasks
Figure 4.2.1.9: Warnings
Comment


# 4.2.2 IDE - Changes

Changes to the structure of the IDE relate to showing or hiding certain windows. This is done automatically when switching between editors such as the shape editor and source editor → Figure 4.2.1.1: IDE - Shape editor marker (arrow button ⑥ ). You can use the function key F12 to switch between the shape editor and the source text editor at lightning speed. You can use selected F keys to change the structure. Note that these changes depend on the current editor type. For example:
Figure 4.2.2.1: IDE - Image Editor


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas IDE



# Chapters



# Table of Contents



# 4.3 IDE - Menus

In this chapter, menus of the IDE and their sub-menus are introduced. The descriptions of the actions are informative, so that additional explanations are largely dispensed with.


# 4.3.1 Menus in the menu bar of the IDE

Figure 4.3.1.1: Project menu
Figure 4.3.1.2: Edit menu
Figure 4.3.1.3: Project menu
Figure 4.3.1.4: Project - Create menu
A dialogue opens for each of the three entries, which is particularly extensive for creating an installation package → Chapter 11.10.0 Installation package.
Figure 4.3.1.5: Project - Patch menu
Chapter `11.7 Project Maintenance` describes in detail how to create and apply a patch.
Figure 4.3.1.6: Debug menu
The entry 'Execute with' refers to arguments that you can give to the programme. In the dialogue you define the required arguments. By default, no arguments are used. If you connect a terminal emulator, the output, for example, with the instructions Print or Debug or Error is not displayed in the console of the IDE, but in a terminal window. Profiling as a form of dynamic programme analysis is described in chapter `11.5.0.3.3 Profiling`.
Figure 4.3.1.7: View Menu
It is worthwhile if you remember the function keys for the first three entries well, because switching between the windows mentioned can then be done very quickly.
Figure 4.3.1.8: Tools menu
The entry 'Open a terminal' is interesting because it gives you access to the system's console for quick research. If you want to share the current project with others, you will appreciate the possibility to send the complete project by email without much fuss. Select 'Send project by e-mail…' to open the standard e-mail client. The project name is already entered as the subject and the project is already attached as an archive. Finally, enter the email addresses and explanatory text - and then: Off you go! The entry 'Settings…` opens the dialogue for the global configuration of Gambas.
Figure 4.3.1.9: Menu `?`
With the function key F1 you can reach the complete Gambas documentation (Wiki) - assuming an internet connection. The entry `System Information` provides all the information about the system and the current Gambas version that you absolutely need for reporting a bug.


# 4.3.2 Context - Menus

You should all be familiar with the context menus for selected objects in the IDE. However, whether you use all the context menus depends on your preferred way of working.
Figure 4.3.2.1: Project context menu ► New
Figure 4.3.2.2: Context menu project ► Filter
Figure 4.3.2.3: Context menu project - Source ► New
Figure 4.3.2.4: Context menu project - source - object ► New
Figure 4.3.2.5: Context menu project - data ► New
Comment
Figure 4.3.2.6: Context menu project - data object ► New
Figure 4.3.2.7: Context menu project - data object ► Open with
Figure 4.3.2.8: Context menu Shape - Control
Comment
Figure 4.3.2.9: Context menu Shape - Control - Transform
Figure 4.3.2.10: Context menu Shape - Control - Select
Comment
Figure 4.3.2.11: Context menu Shape - Control - Arrangement
Comment


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas IDE



# Chapters



# Table of Contents



# 4.4 IDE - Form Editor

For the development of graphical user interfaces (→ Graphical User Interface orGUI), the IDE provides you with a form editor and, via it, access to theGUItoolkits GTK+ and Qt in different versions. These program libraries are used for programming graphical user interfaces in desktop applications and provide a selection of controls. Depending on the toolkit selected, the toolbox contains different numbers of controls. Note that for the Gambas book all projects withGUIare developed with QT4 ①.
Figure 4.4.1: IDE - Form Editor
Note: If you have selected gb.gui.qt, use gb.qt4.* or gb.qt5.* components equally in the IDE. The gb.qt*.ext components are not considered by gb.gui.qt - you do not have a gb.gui.qt.ext component. Consequence: If you need a text editor, use gb.form.editor. If, on the other hand, you need a rich text editor, then you need gb.qt4.ext or gb.qt5.ext explicitly, and so you need gb.qt4 or gb.qt5.


# 4.4.1 Start

There should be a concept for the layout and design of the graphical user interface (GUI) for a new project - preferably in the form of a tangible sketch:
Figure 4.4.1.1:GUI- Concept for the layout of controls.
The concept should include the following for the controls, among others:
In the Gambas IDE, you will find the (standard) controls in the toolbox under several headings (Form, View, Chooser, Container and Special). If special controls are needed, then you have to activate the components in the project properties that provide these controls.With the controls, a distinction must be made between containers (the form is also a (global) container) and native controls. A container (parent) - first and foremost the shape itself - can contain further controls (children). Some of the containers, such as VSplit, specify a certain arrangement of the inserted controls and thus support the layout of theGUI.
In addition to the global configuration, you always edit the project-related configuration under IDE> Menu> Project> Properties. This configuration file .project is located in the project folder.


# 4.4.2 Populate form with controls

Double-clicking on a control in the toolbox inserts it into the form. You can also select the symbol of the control and then drag it onto the form with Drop&Down and drop it there at the intended position. If you have marked a control or are standing over a control with the mouse, then a click on the right mouse button opens the help browser for the control - but only if you are online or the offline help is active. In the shape editor, all controls are displayed on the shape:
Figure 4.4.2.1: Arrangement of controls on the shape
Note that the control labelled 'x end' as in Figure 4.4.1.1 has not been dragged and dropped onto the shape. This control is not created, inserted into the HBox and displayed until the programme runs!
With the following source code, insert a button into the container HBox on the shape and set its properties (width, height, icon and caption). With the Show() method, the button is displayed when the programme window opens. Afterwards, you define the required functionality via the click event btnClose_Click(): The programme window is closed. As you can see, further instructions are given before the programme window is closed:


```
PublicNewButton1AsButtonPublicSubForm_Open()FMain.Center()...NewButton1=NewButton(HBox1)As"btnClose"' Observer-NameNewButton1.W=120NewButton1.H=28NewButton1.Picture=Picture["icon:/16/cancel"]NewButton1.Caption="Ende"NewButton1.Show()EndPublicSubbtnClose_Click()FMain.Close()EndPublicSubForm_Close()IfTCPIP_Socket.Status>0ThenClose#TCPIP_SocketIfTimeOut.Enabled=TrueThenTimeOut.Stop()End
```



# 4.4.3 Fine-tune controls

Arranging or moving or resizing controls is always preceded by selecting the controls! Selecting a control is done with a simple click on the control. By keeping the CTRL key pressed, you can freely select further controls. In another variant you select several controls lying together while holding down the Shift key (lasso function). Single-click on the shape or press the ESC key to cancel the selection. Note that if at least two controls are selected, the corresponding toolbar changes to the shape editor. After selecting, you can move or resize the controls. With CTRL+Z you can undo the action.
Normally, the control elements are moved on the form in the given grid (default = 7). If it is necessary to fine-tune or resize the control elements only by a few pixels vertically or horizontally, do it like this:
(1) Select one control element or several control elements with the lasso function and then move control element(s) with the mouse (carefully) in the grid (± 7).
(2) Mark control element(s) and then move them finely:
(3)Select control element(s) and then change width or height of a control element:
You can also change the width, height and position of a selected control using the corresponding properties Control.W, Control.H, Control.X and Control.Y in the Properties window.


# 4.4.4 Notes



# 4.4.4.1 Form template

If you have followed the concept of theGUIas shown in Figure 4.4.1 and inserted all the controls into the form and saved the project, then the file FMain.form is created in your project in the (hidden) folder .src, in which the layout of theGUIis saved. This file is always needed when you open a form in the form editor. Here is an extract from the FMain.form file for theGUI:


```
# Gambas Form File 3.0

{ Form Form
  MoveScaled(34,23.7143,52,31)
  Text = ("Client-Socket  *  Port 37  *  TCP ")
  Icon = Picture["Symbole/form_icon.png"]
  Resizable = False
  { btnConnect Button
    MoveScaled(1,12,26,4)
    Text = ("Connect to the time server")
  }
  { btnDisconnect Button
    MoveScaled(28,12,23,4)
    Enabled = False
    Text = ("Disconnect from time server")
  }
  ...
  { HBox1 HBox
    MoveScaled(1,26,50,4)
    Spacing = True
    { cPanel Panel
      MoveScaled(0.7143,0,2,4)
      { pboxStatus PictureBox
        MoveScaled(0,1,2,2)
        Picture = Picture["LED/led_red.svg"]
        Stretch = True
        Alignment = Align.Center
      }
    }
    { panSpace Panel
      MoveScaled(8,0,19,4)
      Expand = True
    }
  }
}
```



# 4.4.4.2 Insert form into project

You insert further forms into the sources by creating a new form using the context menu in the project window (→ Chapter 12.2.0.2). Click on a form symbol in the sources to open the form in another form editor.


# 4.4.4.3 Hierarchy of controls

In the Object Inspector you can switch to the 'Hierarchy' tab. In addition to the symbols, you will also see the assigned names for the controls and their hierarchy on the form. All controls from the button with the name 'btnConnect' to the horizontal box 'HBox1' are on the shape. There are two panels in the container HBox1. The panel with the name 'cPanel' is a container for a picture box.
Only in this hierarchy dialogue is it possible to define the tab order. This is not possible in the source text. This order determines the sequence in which the controls are scrolled through when the TAB key is pressed. With the 4 arrow keys marked in red, you can move the controls in the container to set the tab order.
Figure 4.4.4.3.1: Hierarchy of controls
The Control.SetFocus method allows you to set the focus on the selected control at any time - regardless of the set hierarchy.


# 4.4.4.4 Duplicate control

You can duplicate a selected control by pressing CTRL+CV and paste it into the form. Note that the insertion position is always X=0 and Y=0. All properties of the original control are taken over - except for the name. The original name is supplemented by a consecutive number starting with 2.
Note: If you want to insert a duplicated control - which is on the form - into a container, you first have to cut the control with CTRL+X, then select the container and insert the control with CTRL+V. Finally, you have to copy the control to the container. Finally, you must finally position the control inserted at the container position X=0 and Y=0. Often it will be necessary to change the name and selected properties.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas IDE



# Chapters



# Table of Contents



# 4.5 IDE - Source code editor

Figure 4.5.1: IDE - source code editor
In addition to the normal editor functions such as create file, open file, close file, save file, save file as …, select text, copy text, paste text, delete text, select text completely, search text, search and replace text, undo action, repeat action and extensive context menu, the source code editor of the IDE offers the following features, among others:
Open the source editor


# 4.5.1 Notes on the basic configuration of the source code editor

The basic configuration of the source text editor has already been described in Chapter 4.1.1 Configuration 1. Included is the specification of the fonts, syntax highlighting via the themes, code formatting and code shortcuts. In the configuration, you can configure the syntax highlighting under Tools> Settings.
Figure 4.5.1.1: Settings - Source Code Editor


# 4.5.2 Change source editor window

You can maximise the editor window with the function keys F10 and F11 or return it to its original size. You can divide the editor window into two adjacent windows with the key combination CTRL+H. Use CTRL+J to divide the editor window into two windows on top of each other. The contents of the two windows are automatically synchronised.
The two key combinations CTRL+H and CTRL+J and the function keys F10 and F11 each act as a toggle switch.


# 4.5.3 Comments

In Gambas you can insert four types of comments in the source text:


# 4.5.3.1 Simple comments

Simple comments in the source text start with an apostrophe and go to the end of the line. A comment is ignored by the interpreter.


```
PublicSubTBGroup_KeyPress()' Applies to the *TextBox group* ↦ TBGroup!IfLeft$(Format$(0,".0"))=","ThenCheckInput("+-,|0123456789")ElseCheckInput("+-.|0123456789")EndifEnd' NOT used internally as the group event has a higher priority.'' Public Sub txbInputA_KeyPress()'   CheckInput("+-,|0123456789")' End...' Public Sub txbInputC_KeyPress()'   CheckInput("+-,|0123456789")' End
```

In the source text, you can mark a line or block of text and format it as a comment with the key combination CTRL+K or remove it again via the editor menu or with CTRL+U.
An alternative for longer comments is to copy the comment text from another source and then paste it into the source text as a comment using the 'Special Paste' in the dialogue that opens.


# 4.5.3.2 Comments as tasks

Any comment in the source code that starts with 'TODO:, 'FIXME: or 'NOTE: is automatically listed in a new tab labelled 'Tasks' in the lower debugging panel. The keywords TODO, FIXME and NOTE - after a '-character - must be capitalised and terminated with a colon. The colon before the task text should be followed by a space (optional).


```
' NOTE: A text file `VERSION` in the parent folder to the project folder is used!
  Print "Application.Version = "; Application.Version
```



```
' FIXME: Check the format string `"+0.###"` and change it if necessary.
  lblValue.Text = Format$(Deg(ACos(fCosinusAlpha)), "+0.###") & " °"
```



```
' TODO: Use the function IsVector(sInput As String) to use valid data.
Private Function IsVector(sInput As String) As Boolean
```

These three special comments in the source code produce this output under `tasks`:
Figure 4.5.3.2.1: Display of specified tasks


# 4.5.3.3 Symbol-level help comments

A symbol-level help comment starts with two '-characters followed by a space before the comment and comes before the line containing the procedure declaration. In this case, the comment can also be multi-line.


```
'' Set the path to a Markdown project folder in the dialog.'' The function value is an empty string -> dialog was aborted.'' The function value is a path specification for a directory.PrivateFunctionSetMDProjectDir()AsStringDimsDialogDirAsStringsDialogDir=FNewDir.RunDialog()IfsDialogDir=""ThenbCancelDialog=TrueReturn""ElsesCurrentMDDir=sDialogDirReturnsDialogDirEndifEnd
```

If you then write SetMD… in the source code. in the source code, the auto-completion already jumps in and shows you the help comment of the function in a small window:
Figure 4.5.3.3.1: Help comment on symbol level
If the comment comes after a declaration, it is always single-line:


```
PropertyNameAsString'' The Name property shows the name of the client who owns this account.
```



# 4.5.3.4 (Help) comments at class level

Class-level help comments must be separated from the first line in the class header `Gambas class file` by one or more blank lines, and separated from any subsequent comments or source code by at least one blank line.
The following example shows a source code section from the file DegTableView.class with all 4 types of comments:


```
' Gambas class file''' Deganius DegTableView, delivers a Gambas TableView''' based on data of an array or db-result or a class DegOrm.'''''' Can display a DegComboBox inside and bind it's index to a column.'TODO: BeforeUpdate - Cancel does not work rightExportInheritsTableView' Component DefinitionPublicConst_GroupAsString="Deg"PublicConst_FamilyAsString="Form"PublicConst_DrawWithAsString="TableView"PublicConst_PropertiesAsString="*, ComboButtons, Readonly, AllowDelete, AllowInsert, AllowCopyPaste"' Constants for ShowAsPublicConstAsStringAsInteger=0PublicConstAsCheckboxAsInteger=1PublicConstAsRichTextAsInteger=2'' Number of row that has been changed. If nothing changed, it is -1.PropertyRowChangedAsInteger...
```

Athttps://gitlab.com/christhal/gb.deg.form/blob/master/.src/Comp/DegTableView.classyou will find the complete source code of the component developed by Christof Thalhofer.
You can extend help comments on symbol and class level by using text in Markdown syntax.


# 4.5.4 Bookmark

To set a bookmark, you must first select a source text line and then define the bookmark with CTRL+B (Bookmark). You can recognise a set bookmark in the source text editor by a blue symbol at the beginning of the line .


# 4.5.5 Show list of all existing declarations

To navigate quickly in the source text, you can display the list of all existing declarations in the categories methods (public, private) and events. The list in the source code editor menu is preceded by this symbol. If you select an entry with a click (MenuButton), the cursor jumps to this selected declaration. You can then read or change the source text. This is a functionality that you will certainly use.


# 4.5.6 Shortcuts and keyboard shortcuts

The Gambas IDE provides a modifiable set of source code shortcuts that can ease the writing burden in the source code editor. The default source code shortcuts shipped with the IDE can be found under Menu> Tools> Settings> Code Shortcuts. To use the predefined source code shortcuts, the check box (switch button) 'Enable code shortcuts' must be activated. With the button 'New…' you can create your own short commands in the dialogue, the so-called trigger strings, also with multi-line source text sections in the extension macros. Notes on the trigger strings and the syntax of the extension macros can be found athttp://gambaswiki.org/wiki/ide/idesnippets.
Figure 4.5.6.1: (Predefined) source code shortcuts.
If you enter a source code shortcut at the beginning of a line and then press the tab key, the source code shortcut automatically expands to a defined source code section. For example, there is the short command “_c” for the _compare method. You enter “_c” and then press the tab key. This activates the source text section stored in the extension macro.
Example: From the source text short command


```
if
```

becomes after pressing the tabulator key


```
IfTestThenEndif
```

In any case, you should try out the source code shortcuts gpl, f and pf and then look at the syntax of the extension macro in each case.
Note that under Menu> Tools> there is also the entry `Shortcuts…`, but these refer to the menus in the IDE.
For example, you can use the shortcut CTRL+H to switch to a split view with two source text editors. A differentiated display of the currently defined shortcuts can be found under Menu> ?> Shortcuts… .


# 4.5.7 Notes on Tooltips

Since a tooltip text also supportsHTMLtags, you can, among other things, freely define the tooltip width by inserting anHTMLtable and then defining the table size with the Width property. For example, the ToolTip text is specified in the properties window of the control 'Button' with the name btnFlaecheABCV2 under the property 'ToolTip':


```
<table width=400>
<tr>
<td>
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor
invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.
</td>
</tr>
</table>
```

or in the source code for the selected button:


```
btnFlaecheABCV2.ToolTip="<table width=400><tr><td>Lorem ipsum dolor sit amet, consetetur sadipscing elitr,
sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.</td></tr></table>"
```

The result looks identical in both cases:
Figure 4.5.7.1: ToolTip text window with adjustable width


# 4.5.8 Help

In general, you can display the complete Gambas documentation in the IDE with the function key F1 - provided you have network access.
Help on definitions is displayed if you highlight a (key) word in the source text and then press the function key F2. It is sufficient if the cursor is in the (key) word or at its end. A help browser opens with the help text for the selected (key) word as a section of the Gambas documentation. The English text is displayed if no German translation exists:
Figure 4.5.8.1: Help on definitions


# 4.5.9 Insert colour values

You can select a colour value in the dialogue via the menu itemand assign it to a colour property in three different formats, for example, like this:


```
lblValue.Foreground = &HFF0000
```

Figure 4.5.9.1: Assign colour value - 1st format is used


# 4.5.10 Insert current date

In this list of current date values under the symbolyou are guaranteed to find a format you need and insert it into the source text at the cursor position with one click:
Figure 4.5.10.1: Date formats


# 4.5.11 Insert special characters

Just one more click away onin the source editor menu, this selection of special characters is available for insertion, as in Figure 4.5.1.1!
Figure 4.5.11.1: Special characters


# 4.5.12 Inserting text and 'Special insertion of text'

Inserting text via a click onis done quickly with the three options given:
Figure 4.5.12.1: Inserting text
The last item in the menu also has its own menu and provides you with several options for the form in which the text is inserted. The mime type of the clipboard content is automatically detected:
Figure 4.5.12.2: Special Paste
If you copied a file, for example, you will be offered 'URIlist' as recognised content. If you select this option and then 'Paste with PRINT', the absolute path to the file will be inserted like this:


```
Print"file:///home/hans/BildTon/apple-red.png\r"
```



# 4.5.13 Format source text

You can have text sections in the source text formatted automatically if you activate the option `Format on Load & Save` in the settings under the heading Code Formatting. After that, a CTRL+SHIFT+F is enough to format the complete source text according to the IDE's defaults - which you cannot change.


# 4.5.14 Lock source text

You can set the entire text in the source text editor to `write-protected` via Menu> Edit> Locked or unlock it again.


# 4.5.15 Use of prefixes

The Gambas book follows the guidelines athttp://gambaswiki.org/wiki/doc/namingconventionfor prefixes for controls and variables in an adapted form. Source texts for the numerous projects for the individual chapters thus have a uniform diction and are above all easier to read.


# 4.5.15.1 Prefix for controls:



```
DateChooser: 	dach, dac
DirChooser: 	dich, dic
FileChooser: 	fich, fic
ColorChooser:	coch, coc
FontChooser 	foch, foc
---------------------------------------
ButtonBox: 	bubox, bub
CheckBox: 	ckbox, ckb
ComboBox: 	cobox, cmb
MovieBox: 	mobox, mbox
PictureBox: 	pibox, pib
SliderBox: 	slbox
SpinBox: 	sbox
TextBox: 	txbox
ValueBox: 	vabox, vbox
MaskBox: 	mabox
DateBox: 	dabox
DirBox: 	dibox
FontBox: 	fobox
ListBox: 	libox
---------------------------------------
Button: 	btn
ColorButton: 	cobtn
MenuButton: 	mebtn, mbtn
RadioButton:	opt, rabtn, rbtn, opb
SwitchButton:	swbtn, sbtn
ToggleButton:	tglbtn, tbtn
ToolButton: 	tobtn
---------------------------------------
ProgressBar: 		pbar
ScrollBar: 		sbar
Separator: 		sep
Slider: 		sld
Spinner: 		spi
ColorPalette:		cop
TextArea: 		txa
TextEdit: 		txe
Dial: 			dial
Editor: 		edi
FileProperties:	        fip
IconPane:l 		icp
ListEditor: 		lie
Form:			frm
---------------------------------------
Label: 	        lbl
TextLabel: 	txl
URLLabel: 	ulbl, urll
LCDLabel 	lcdlbl, lcdl
---------------------------------------
ColumnView: 	cov
DirView: 	div
DocumentView:	dov
FileView: 	fiv
GridView: 	grv
IconView: 	icv
ListView: 	liv
ImageView:	imv
TableView: 	tav
TreeView: 	trv
WebView: 	wev
MessageView:	mev
MapView: 	mav
```



# 4.5.15.2 Prefix for variables (data type)



```
Boolean:	b
Integer: 	i
Byte: 		ib
Short: 	        is
Long: 		il
Single: 	si
Float: 	        f
Date: 		d, date
String: 	s
Variant: 	v
Array: 	        a
Collection:	c
Struct: 	str, struc
Pointer: 	p
Objekt: 	o, h
```

Example source code:


```
PublicSubTCPIP_Socket_Read()DimsResult, sDate, sTimeAsStringDims1900AsString="01/01/1900"Dims1935AsString="01/01/1935"Dims1970AsString="01/01/1970"Dimi, iCurrentSecondsAsIntegerDimilNTPSeconds, ilSeconds19001970AsLongDimdDate1970, dCurrentDateUTCAsDate' The timestamp in the NTP is 64 bits long.' 32 bits encode the (past) seconds since January 1st 1900 00:00:00 (!)IfTCPIP_Socket.Status=Net.ConnectedThenRead#TCPIP_Socket, sResult,Lof(TCPIP_Socket)' Conversion of the transmitted 32-bit data word into an integer number (typ long)Fori=1ToLen(sResult)ilNTPSeconds=ilNTPSeconds*256+Asc(Mid$(sResult, i,1))NextEndif' Alternative: Number of seconds = b3*256³ + b2*256² + b1*256 + b0lTimeResult=ilNTPSeconds
  ilSeconds19001970=DateDiff(s1900, s1935, gb.Second)+DateDiff(s1935, s1970, gb.Second)iCurrentSeconds=ilNTPSeconds-ilSeconds19001970
  dDate1970=Date(1970,01,01,0,0,0)dCurrentDateUTC=DateAdd(dDate1970, gb.Second, iCurrentSeconds)sDate=Format$(dCurrentDateUTC,"dddd")&", "&Format$(dCurrentDateUTC,"d. mmmm yyyy")sTime=Format$(Time(dCurrentDateUTC),"hh:nn:ss")&" Uhr"' txbDateTime.Text = "Date  " & String.Chr(187) & "  " & sDate & " - " & sTimetxbDateTime.Alignment=Align.CentertxbDateTime.Text=sDate&" - "&sTimeEnd' TCPIP_Socket_Read
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# 5.0 Gambas architecture

Gambas programs are mainly developed and tested in the IDE. This chapter provides some impressions of the Gambas architecture and shows you how the programs compilers, archiver and interpreters of Gambas work together internally. You will learn what binary P code means and how to start programs with parameters.
Figure 5.0.1: Gambas architecture (http://gambas.sourceforge.net/de/main.html)
In a further chapter 5.3.3 you will learn how to have the interpreter evaluate Gambas expressions in a comfortable way. Gambas as a scripting language is easy to get used to, because you can use all the instructions of gambas in your Gambas scripts. The contents of chapter 5.4 Gambas scripting provides you with the tools for these local scripts. You will recognize the close reference to the chapter CGI when handling the web-based scripts if it shows how to use the Gambas program gbw3.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.1 A Gambas Project

In this chapter the question will be examined: What files are necessary for a Gambas project? Admittedly, the answer is especially interesting for purists who want to develop and test their gambas projects without the graphical user interface of Gambas (IDE). On the other hand, the study of the topic “A Gambas Project Internally” provides insights into the complex working methods of Gambas.


# 5.1.1 Gambas Project - Example

For a Gambas project, you need at least three files in the project folder before you compile for the first time, with the class and form files in a hidden folder called. src. The project file. project is located in the project folder and is also hidden. These three files can be supplemented by additional folders and files. Module files are also located in the. src folder, while files with help texts or images are located in the project folder. Since the content and diction of a form file is not an everyday task when programming with Gambas, the presented project was first developed and tested in the Gambas IDE. In addition, the project to be examined should contain a module and a folder with different images as an icon for the project. Afterwards, all files generated in the IDE and not needed were deleted in the project folder. The project was further developed without IDE and tested with the programs Compiler, Archiver and Interpreter in one console.
Only the following folders and files remained in the project folder' dwconvert':


```
hans@linux:~$tree-a$HOME/dwconvert/home/hans/dwconvert
├── .project
├── .src
│   ├── FMain.class
│   ├── FMain.form
│   └── MS.module
└── symbols
    ├── form_icon.png
    └── project_icon.png2directories,6fileshans@linux:~$
```

This is the content of the minimal version of the project file. project that was successfully compiled:


```
Startup=FMain
Component=gb.qt4
Component=gb.settings
```

If, for example, the component gb. settings is missing, this error message appears when compiling:


```
hans@linux:~$gbc3--all$HOME/dwconvert
MS.module:4: error: Unknown identifier: Settingshans@linux:~$
```

This version of the project file. project contains additional entries, whereby the first two lines are only comments and can therefore be omitted:


```
# Gambas Project File 3.0
# Compiled with Gambas 3.3.4
Title=Table-conversion OL2DW
Startup=FMain
Icon=symbols/project_icon.png
Version=0.0.13
Component=gb.qt4
Component=gb.form
Component=gb.form.dialog
Component=gb.settings
Description="Converting a table from OpenLibre to DokuWiki format"
Authors="Hans Lehmann * Osterburg * 2013"
```



# 5.1.2 Project test in a console

After minor changes to the source code, the project was compiled and an executable file was created and the program started in a console.
When using the gba3 (Archiver) program with the -v option, it is easy to see which folders and files have been created at the runtime ofgba3:


```
hans@linux:~$gbc3--all$HOME/dwconvert
OKhans@linux:~$gba3-v$HOME/dwconvert
Format version:2.startup ->.startup
Addingfile.startup(109bytes)->0.project ->.project
Addingfile.project(347bytes)->1symbols ->symbols
Adding directory symbols ->2.action ->.action
Adding directory .action ->3.gambas ->.gambas
Adding directory .gambas ->4symbols/form_icon.png ->/2:form_icon.png
Addingfile/2:form_icon.png(2232bytes)->5symbols/project_icon.png ->/2:project_icon.png
Addingfile/2:project_icon.png(337bytes)->6.gambas/MS ->/4:MS
Addingfile/4:MS(1436bytes)->7.gambas/FMAIN ->/4:FMAIN
Addingfile/4:FMAIN(5488bytes)->8hans@linux:~$gbx3$HOME/dwconverthans@linux:~$
```

The program is started with the last statement mentioned above in a console:
Figure 5.1.2.1: Conversion program? OpenLibre2DokuWiki
Figure 5.1.2.2: Contents of the project folder after the first program start
At the first start of the program, the folderlastfileis created and contains a list of the files that were last edited. The maximum number of entries is 5, the oldest entry is deleted when the maximum number of entries has been reached. Depending on the structure of the Gambas project, additional folders such as. hiddenor other files like. settingscan be created automatically.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# 5.2 Gambas - IDE

If you develop and test your programs in the Gambas IDE in a delimited Gambas project, you will mainly run the program with F5. You can also just compile the program or extend the compilation to all already compiled classes and modules. You can always be sure that all Gambas programs are working in the background and will show you the direction with various messages, if it is stuck in a module or a function or if you need help with the components:
Program development and testing in a graphical development interface - an advantage of working with gambas - which you already got to know in chapter 3:
Figure 5.2.1: The IDE of Gambas


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# 5.3.0 Gambas - Console

Gambas offers excellent possibilities to develop graphical user interfaces (GUI) for console programs. Using the example of the project' gui_gnuplot' as an example, chapter 5.3.1 introduces aGUIfor the console program' gnuplot' and shows how to compile the project with the compiler, generate an executable program with the archiver and use the interpreter to start the program for the user interface.
Figure 5.3.0.1:GUIfor the console program' gnuplot'.
If you call the gambas interpreter gbx3 in a terminal with the option -e, you can evaluate an expression passed as a parameter and display the result. Chapter 5.3.2 describes how to evaluate a Gambas printout and which special features you have to pay attention to with the Gambas expressions.


```
hans@linux:~$gbx3-e2*(3+log(2))7,38629436112hans@linux:~$gbx3-esin(rad(30))bash: syntax error near unexpected token`('
 
hans@linux:~$ gbx3 -e "sin(rad(30))"
0,5
```

How to startGambas programs with parametersin a console is explained in chapter 5.3.3.3.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.3.1 Gambas - Console

This chapter is preceded by the following considerations:
After every change to the source code, the program must first be recompiled for a program test, then an executable program file must be generated, and then the program must be restarted. The necessary programs compiler, archiver and interpreter have already been introduced in chapters 5.0.1 and 5.0.2.


# 5.3.1.1 Use of compiler

To compile the sample project, the following commands are alternatively executed in the console:


```
Syntax:	gbc3[options][<project directory>]hans@linux:~$gbc3$HOME/gui_gnuplot
OKhans@linux:~$gbc3 –all$HOME/gui_gnuplot
OKhans@linux:~$gbc3-ag$HOME/gui_gnuplot
OKhans@linux:~$cd$HOME/gui_gnuplot
hans@linux:~/gui_gnuplot$ gbc3--allOKhans@linux:~$gbc3-agv$HOME/gui_gnuplot# Extensive comments and informationOKhans@linux:~$gbc3-agv$HOME/gui_gnuplot>gui_gnuplot.log
```

If the compilation was successful, OK is returned as a confirmation and there is a new hidden folder. gambas in the project folder or the content is overwritten. This folder contains files with the file names of the files in the. src folder - here FMAIN and MTERMINAL (in capital letters).
If an error occurs during compilation, a note is displayed with a reference to the line in which the error occurred:


```
hans@linux:~$gbc3-ag$HOME/gui_gnuplot
FMain.class:58: error: Unknown identifier: Enhans@linux:~$
```

Here it was a simple clerical error: En dif instead of Endif. Even in case of an error, a hidden - but empty - folder. gambasis created in the project folder. This is not critical, since the contents of the folder are overwritten during a further, error-free compilation run.


# 5.3.1.2 Use of Archiver

Only if the project has been compiled successfully, the executable filegui_gnuplot. gambasor an update will be created in a further step by the program Archiver in the project folder.


```
Syntax:	gba3 [options] [<project directory>]
```

No acknowledgement is issued if the generation of the executable file was successful. The executable file (archive file) is given the project name (default) and file extension gambas. These commands generate an executable file:


```
hans@linux:~$gba3$HOME/gui_gnuplothans@linux:~$cd$HOME/gui_gnuplot# Alternativehans@linux:~/gui_gnuplot$ gba3
 
If you want to give the executablefilea differentfilename,thenyou must use the following synatx:hans@linux:~$gba--output=ZIEL QUELLEhans@linux:~$gba3--output=$HOME/gui_gnuplot/gnuplot44.gambas$HOME/gui_gnuplothans@linux:~$gba3-o$HOME/gui_gnuplot/gnuplot44.gambas$HOME/gui_gnuplothans@linux:~$cd$HOME/gui_gnuplot# Alternativehans@linux:~/gui_gnuplot$ gba3-o$HOME/gui_gnuplot/gnuplot44.gambas
```

Excursion
If you set the -x option, you can display the contents of selected files in the Gambas archive - if the file exists in the Gambas archive:


```
Syntax:	gba3 -x <archive-path> <file>
```

This call was successful:


```
hans@linux:~$gba3-x$HOME/gui_gnuplot/gui_gnuplot.gambas .project# Gambas Project File 3.0# Compiled with Gambas 3.3.4Title=GnuPlot&ProcessStartup=FMainIcon=Symbols/projekt_icon.pngVersion=0.0.78Component=gb.image
..Authors="Dr. Hans Lehmann ~ Osterburg ~ 2014"TabSize=2SourcePath=/home/hans/Desktophans@linux:~$In thiscase, too, the result is clear:hans@linux:~$gba3-x$HOME/gui_gnuplot/gui_gnuplot.gambas .settings
gba:filenot foundinarchivehans@linux:~$
```



# 5.3.1.3 Use of interpreter

To execute the file projektname. gambas or neu_name. gambas you need the interpreter gbx3, which must be installed on the system. The archive file is marked as a script with the' Magic Header' #! /usr/bin/gbr3' and shows Linux how to execute the script. Linux executes the script by calling the interpreter specified in the header:


```
Syntax:	gbx3 [options] [<project-file>] [--<list of arguments: arg_1 arg_2 … arg_k>]
```

By default, gui_gnuplot. gambas is searched for and - if available - started by the interpreter; otherwise the path to the archive file must be specified and the symbolic link to the interpreter must be used:


```
hans@linux:~$ gbx3 $HOME/gui_gnuplot ' Standard projectname.gambas
hans@linux:~$ gbr3 $HOME/gui_gnuplot/gnuplot44.gambas ' Changed name of the archive file
```

A separate chapter is dedicated to starting gambas programs with parameters: 5.3.3' Programs with parameters'.


# 5.3.1.4 Use of compiler, archiver and interpreter

Here you can find the Compile, Archive and Interpret actions for the sample project in the $HOME/gui_gnuplot directory in a tried and tested summary:


```
hans@linux:~$gbc3-ag$HOME/gui_gnuplot
OKhans@linux:~$gba3$HOME/gui_gnuplothans@linux:~$gbx3$HOME/gui_gnuplot
```

The result is impressive:
Figure 5.3.1.4.1:GUIfor the console program' gnuplot'.
Figure 5.3.1.4.2: The console program' gnuplot' in action


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.3.2 Evaluation of expressions

If you call the gambas interpreter gbx3 in a terminal with the option -e, you can evaluate an expression passed as a parameter and display the result:


```
Usage: gbx3 -e <expression>
Option: -e evaluate an expression

hans@linux:~$ gbx3 -e -2*5+8^3-36/77
501,532467532467

hans@linux:~$ gbx3 -e "sin(rad(30))"
0,5
```



# 5.3.2.1 Notes

Note that some expressions in the following examples are enclosed in quotation marks. This is especially necessary if the expression contains parentheses. This has nothing to do with the Gambas interpreter, it is the shell that interprets these special characters in different ways: In the event of a syntax error or an error in the evaluation of an expression, an error message and a comment are output. The comment indicates the type of error.


# 5.3.2.2 Selected examples

The following list of examples of how to use the interpreter with the -e option is sufficiently representative:


```
hans@linux:~$gbx3-e3-4*5.66+1-18,64hans@linux:~$gbx3-e22/7'  Approximation of Pi
3,142857142857
 
hans@linux:~$ gbx3 -e "pi-(355/113)" 'Approximation of Pi with7valid digits!-2,66764189405E-7hans@linux:~$gbx3-enow
09.01.201218:21:19hans@linux:~$gbx3-e2*(3-pi)-0,28318530718hans@linux:~$gbx3-elog(2)bash: syntax error near unexpected token`('
 
hans@linux:~$ gbx3 -e 2*(3+log(2))
7,38629436112
 
hans@linux:~$ gbx3 -e sin(rad(30))
bash: syntax error near unexpected token `('hans@linux:~$gbx3-e"sin(rad(30))"0,5hans@linux:~$gbx3-e"sqr(-8)"Mathematic errorhans@linux:~$gbx3-e"cbr(sqr(4)-10)"-2hans@linux:~$gbx3-e"date(now)"09.03.12hans@linux:~$gbx3-e"year(now)"2012hans@linux:~$gbx3-e"bin(2301)"100011111101hans@linux:~$gbx3-e"hex(244)"F4hans@linux:~$gbx3-e"hex(678)"2A6hans@linux:~$gbx3-e"Int(Rnd(1, 7))"6hans@linux:~$gbx3-e"Int(Rnd(1, 7))"2hans@linux:~$gbx3-e3.77*pi-37-25,156195695966hans@linux:~$gbx3-e"fix(3.77*pi-37)"-25
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.3.3 Gambas programs with parameters

You are sure to know how to start programs with parameters in the console. The following command starts the editor program' gedit', opens the file' set_color. sh' in the home directory and places the cursor in line 5 at the 9th position:


```
hans@linux:~$gedit ./set_color.sh +5:9
```



# 5.3.3.1 Excursion - Programs with parameters

The function of the presented program (bash script)' set_color. sh' consists of assigning values internally to the parameters $1 to $3 via the command' let' 3, depending on the number of parameters passed, and then assigning values to the variables R, G and B or the variables R, G and B with the values of the exactly 3 passed parameters. A (colour) value is then calculated and displayed with the variables R, G and B.


```
#!/bin/bash#if[$#-ne3]# If the number of parameters is not equal to 3, then ...thenset22020180# → $1=220 , $2=20 , $3=180R=$1G=$2B=$3elseR=$1G=$2B=$3filetcolor=$R*256*256+$G*256+$Bechocolour value =$colorechoContinue with ENTER...readdummy
```

In general:
The script' set_color. sh' is started first with exactly three parameters and then only with two parameters. The parameters are not checked for validity in the context of RGB color values:


```
hans@linux:~$chmod+x set_color.sh# Make the script executable
```



```
hans@linux:~$ ./set_color.sh 10 20 128
Colour value = 660608
Continue with ENTER...

hans@linux:~$ $HOME/set_color.sh 0 128
Colour value = 14423220
Continue with ENTER...
```



# 5.3.3.2 Gambas programs with parameters

Of course, you can also start a Gambas program with parameters in a console:


```
hans@linux:~$gbx3$HOME/color_select--22511060hans@linux:~$gbx3 ./color_select--22511060hans@linux:~$gbr3$HOME/color_select/color_select.gambas--22511060
```

As a separator between the Gambas project path and the arguments,“–” is used. This is also indicated in the help of gbx3:Usage: gbx3[options][<project file>] [– <arguments>]/, if <arguments> is interpreted as a placeholder for a parameter list separated by blanks.
With Application. Args, Gambas provides an array with the given arguments of the program from the console. The first argument Application. Args[0] is (? $0) is always the name of the started Gambas program and the property Application. Args. Count returns the number of all - not only the passed - parameters. In this point, working with the array of arguments in Gambas differs from determining the number of arguments in a bash script, because the source code of the Gambas project' color_select' is similar to the above-mentioned bash script. With the values of the 3 parameters - which are not checked in this variant - a color value is calculated, which serves as default value for the used component ColorChooser1:


```
PublicSubForm_Open()DimR, G, BAsIntegerFColor.CenterFColor.Resizable=FalseIfApplication.Args.Count<>4ThenR=220G=20B=180ElseR=Val(Application.Args[1])G=Val(Application.Args[2])B=Val(Application.Args[3])Endif'  Application.Args.Count <> 4 ?ColorChooser1.Value=Color.RGB(R, G, B)End' Form_Open
```

The call:


```
hans@linux:~$gbx3 ./color_select--3313333
```

starts the program for color selection with the default color medium-green:
Figure 5.3.3.2.1: Color selection program - default color via 3 parameters
The following modified section of the source code contains a check of the parameter values:


```
PublicSubForm_Open()DimsMessageAsStringFColor.CenterFColor.Resizable=FalseIfApplication.Args.Count<>4ThenColorChooser1.Value=Color.RGB(220,20,180)' Colour: pinkElseIfParameterTest(Application.Args[1],Application.Args[2],Application.Args[3])=TrueThenColorChooser1.Value=Color.RGB(Val(Application.Args[1]),Val(Application.Args[2]),Val(Application.Args[3]))ElsesMessage="At least one parameter has a wrong value!"sMessage&=gb.NewLinesMessage&="Parameterliste: "&Application.Args[1]&Chr(32)&Application.Args[2]&Chr(32)&Application.Args[3]sMessage&=gb.NewLinesMessage&="The programme will be terminated immediately!"Message.Error(sMessage)FColor.CloseEndifEndif' Application.Args.Count = 4 ?End' Form_OpenPublicFunctionParameterTest(p_1AsString, p_2AsString, p_3AsString)AsBooleanDimbOKAsBooleanIfIsInteger(p_1)=TrueAndIsInteger(p_2)=TrueAndIsInteger(p_3)=TrueThenIf(Val(p_1)>=0)And(Val(p_1)<=255)ThenbOK=TrueElsebOK=FalseEndifIf(Val(p_2)>=0)And(Val(p_2)<=255)ThenbOK=TrueElsebOK=FalseEndifIf(Val(p_3)>=0)And(Val(p_3)<=255)ThenbOK=TrueElsebOK=FalseEndifElsebOK=FalseEndifReturnbOKEnd' Function ParameterTest(...) As Boolean
```

This follows a call of the program in the console:


```
hans@linux:~$ gbx3 ./color_select -- 128 128 294
```

this error message:
Figure 5.3.3.2.2: Error message - 294 ∉ [0…255]


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# 5.4.0 Gambas scripting

With the Gambas scripting another scripting language has been created. It is not in competition with the known scripting languages, but complements them in a special way because language elements of gambas are used. The question about aGUIdoes not arise - it is not needed because a Gambas script is called in a console or executed on a web server.
The program' gbs3' compiles a Gambas script and allows you to execute this script in a console (local). For example, with the program' gbw3' you will be able to start web pages on a web server. The special feature of the illustrations in chapter 5.4.2 for using the program' gbw3' is that no web server has to be used.
Information on the use of CGI scripts and' Gambas WebPages' can be found in chapter 24, while only local Gambas scripts are presented afterwards, for example a simple Gambas script:


```
#!/usr/bin/env gbs3

PUBLIC SUB Main()
  PRINT
  PRINT " Current date: " & SetDateToGerman(Now) & "."
  PRINT " It was precisely" & Format$(Now, "hh:nn:ss") & " Clock!"
  PRINT
END ' Main()

PRIVATE FUNCTION SetDateToGerman(dDatum AS Date) AS String

  DIM aMonatMatrix, aWochenTagMatrix AS NEW String[]
  DIM sWochenTag, sTag, sMonat, sJahr AS String

  aMonatMatrix.Clear
  aMonatMatrix = "January", "February", "March", "April", "May", "June", "July", "August",
              "September", "October", "November", "December"]
  aWochenTagMatrix.Clear
  aWochenTagMatrix = Split("Sunday Monday Tuesday Wednesday Thursday Friday Saturday", " ")

  sWochenTag = aWochenTagMatrix[WeekDay(dDate)]
  sTag = Str(Day(dDate))
  sMonat = aMonatMatrix[Month(dDate) - 1]
  sJahr = Str(Year(dDate))

  RETURN sWochenTag & " - " & sTag & ". " & sMonat & " " & sJahr

END
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.4.1 Gambas scripts (local)

All language elements of gambas can be used in the Gambas scripts. The structure of a Gambas script as a text file is not formalized except for the header. You can freely assign the file extension. You should follow the suggestion to use gbs3 as extension. The following script shows a proven format:


```
#!/usr/bin/env gbs3

PUBLIC SUB Main()
  PRINT
  PRINT " Current date: " & SetDateToGerman(Now) & "."
  PRINT " It was precisely " & Format$(Now, "hh:nn:ss") & " Clock!"
  PRINT
END ' Main()

PRIVATE FUNCTION SetDateToGerman(dDatum AS Date) AS String

  DIM aMonatMatrix, aWochenTagMatrix AS NEW String[]
  DIM sWochenTag, sTag, sMonat, sJahr AS String

  aMonatMatrix.Clear
  aMonatMatrix = ["January", "February", "March", "April", "May", "June", "July", "August",
              "September", "October", "November", "December"]
  aWochenTagMatrix.Clear
  aWochenTagMatrix = Split("Sunday Monday Tuesday Wednesday Thursday Friday Saturday"., " ")

  sWochenTag = aWochenTagMatrix[WeekDay(dDatum)]
  sTag = Str(Day(dDatum))
  sMonat = aMonatMatrix[Month(dDatum) - 1]
  sJahr = Str(Year(dDatum))

  RETURN sWochenTag & " - " & sTag & ". " & sMonat & " " & sJahr ' Formatierter String

END
```

Comments:
The above-mentioned content is stored in the file date_time2. gbs3 in the home directory. The file is then made executable:


```
hans@linux:~$chmodu+x ./date_time2.gbs3hans@linux:~$ls-l# Kontrolle-rwxr-xr-x1hans hans1041Dez3015:24date_time2.gbs3
```

The Gambas script file date_time2. gbs3 is called in a console. The current date and the (system) time are displayed:


```
hans@linux:~$gbs3 ./date_time2.gbs3
 
 Current date: Tuesday -1January2013.
 It was exactly15:26:25!hans@linux:~$
```

The function SetDateToGerman (..) could also have been replaced by this line:


```
PRINT " Current date: " & Format(Now, "dddd - dd. mmmm yyyy" ) & "."
```

Using the functionSetDateToGerman (..)should only show you how to use different language elements of Gambas in the script source code. This is an advantage compared to conventional scripting languages, which you will only recognize with extensive scripts - a language for different tasks!


# 5.4.1.1.1 Example 1

The following script reads and displays the environment variables:


```
#!/usr/bin/env gbs3

PUBLIC SUB Main()
  Print
  Print "Display environment variables"
  Print "--------------------------------"
  Print
  GetEnviroment()
END ' Main()

Public Sub GetEnviroment()
  DIM sElement as String

  FOR EACH sElement IN Application.Env
      Print sElement & " ---> " & Application.Env[sElement]
  NEXT ' sElement

End
```

The call in the console is made with


```
hans@linux:~$gbs3 ./enviroment.gbs3
```

and returns the environment variables as name-value pairs, each separated by the symbol' —→':


```
LC_PAPER ---> de_DE.UTF-8
LC_ADDRESS ---> de_DE.UTF-8
SSH_AGENT_PID ---> 1856
LC_MONETARY ---> de_DE.UTF-8
GPG_AGENT_INFO ---> /tmp/keyring-XpXASO/gpg:0:1
TERM ---> xterm
SHELL ---> /bin/bash
..
XAUTHORITY ---> /home/hans/.Xauthority
LC_NAME ---> de_DE.UTF-8
_ ---> /usr/local/bin/gbs3
```



# 5.4.1.2 Example 2

This Gambas script outputs the currently used memory, ignoring some memory segments:


```
#!/usr/bin/env gbs3

Public Sub Main()
  Print "--> The currently used memory is " & CStr(GetUsedMemory()) & " Byte."
End ' Main()

Private Function GetUsedMemory() As Integer
  Dim sExecResult, sValue As String
  Dim aResult As String[]
  Dim cValue As New Collection

  Exec ["cat", "/proc/meminfo"] To sExecResult
  For Each sValue In Split(sExecResult, "\n", "", True)
      aResult = Split(sValue, " ", "", True)
      cValue[Left$(aResult[0], -1)] = aResult[1]
  Next ' sValue

  Return cValue!MemTotal - cValue!MemFree - cValue!Buffers - cValue!Cached +
         cValue!SwapTotal - cValue!SwapFree - cValue!SwapCached
End
```

The script can then be called in a terminal and outputs the used memory:


```
hans@linux:~$gbs3 ./speicher.gbs3
-->The currently used memory is649116bytes.hans@linux:~$
```

It is also possible to display the more than 40 memory segments directly in a terminal - but without the manipulations in the GetUsedMemory () function, which are only possible and used in one script:


```
hans@linux:~$ cat /proc/meminfo
MemTotal:        8093648 kB
MemFree:         6519468 kB
Buffers:          145764 kB
..
DirectMap4k:       63104 kB
DirectMap2M:     8241152 kB
hans@linux:~$
```



# 5.4.1.3 Example 3

Connecting to a database and reading and displaying selected database data is also no problem for a Gambas script. Here is the source code for the tb_sqlite3. gbs3 script:


```
#!/usr/bin/env gbs3

USE "gb.db"
USE "gb.db.sqlite3"

Public cDBVerbindung As New Connection

Public Sub Main()
  Dim iDatensatzNummer, iSpaltenNummer As Integer
  Dim sFehler, sFeldName, sSQL_Anweisung As String
  Dim rDBResult As Result

' Syntax:   goDBServer(  TYP,     HOST,               USER,PASS, DATENBANK,    PORT,TABELLE)
  sFehler = goDBServer("sqlite3", User.Home &/ "Liste", "", "", "liste.sqlite", "", "liste")
  If sFehler = "DBError" Then
     Print " A DB connection to the DB server could not be established!"
     Return
  Endif ' sFehler = "DBError" ?

  sSQL_Anweisung = "SELECT * FROM liste"
  rDBResult = cDBVerbindung.Exec(sSQL_Anweisung)

  If rDBResult.Count = 0 Then
     Print "The number of selected records is zero!"
     Return
  Endif

  Print
  Print "Report vom " & Format(Now, "dd. mmmm yyyy") & " - " & Format$(Now, "hh:nn") & " Clock"
  Print "-------------------------------------------------"
  Print

  IF rDBResult.Available THEN

  For iDatensatzNummer = 0 To rDBResult.Count - 1
   rDBResult.MoveTo(iDatensatzNummer)
   For iSpaltenNummer = 0 To rDBResult.Fields.Count - 1
    Print Upper(rDBResult.Fields[iSpaltenNummer].Name) & " ---> " & rDBResult[iSpaltenNummer]
   Next ' Spalte
    Print
  Next ' Dataset

  Endif ' MDataBase.rDBResult.Available

  Print "===== DB-Report-Ende ==========================="
  Print

End ' Main()

Private Function goDBServer(DBType As String, DBHost As String, DBUserName As String,
                 DBUserPassword As String, DBName As String, DBPort As String,
                 DBTabellenName As String) As String

  cDBVerbindung.Type = Lower(DBType)      ' The type must be written in lower case!
  cDBVerbindung.Host = DBHost
  cDBVerbindung.User = DBUserName         ' ---> Only for MySQL and PostgreSQL
  cDBVerbindung.Password = DBUserPassword ' ---> Only for MySQL and PostgreSQL
  cDBVerbindung.Name = DBName
  cDBVerbindung.Port = DBPort             ' ---> Only for MySQL and PostgreSQL

  Try cDBVerbindung.Open()
  If Error Then Return "DBFehler" ' ERROR

End
```

With the Gambas script mentioned above, the data records are only displayed in blocks and lines:


```
hans@linux:~$ gbs3 ./tb_sqlite3.gbs3

Database Report from 30 December 2012 - 16:22 hrs
-------------------------------------------------

ID ---> 1
SURNAME ---> Eagle
Forename ---> Anne
PLACE OF RESIDENCE ---> Osterburg
POSTCODE ---> 39606
STREET ---> Werbener Strasse 20
TELEPHONE LANDLINE ---> 03937864322
MOBILE PHONE ---> 01712323456
EMAIL ADDRESS ---> adler.anne@web.de
WEB ADDRESS --->
DATE OF BIRTH ---> 06/22/2005
NOTES ---> "Jugend forscht" - 2013
```

Error messages are also displayed in the console. In the first case, the error is caught and displayed by a separate error message, while in the second case, only the internal error routine is triggered:


```
hans@linux:~$gbs3 ./tb_sqlite3.gbs3
 A DB connection to the DB server could not be established!hans@linux:~$
```



```
hans@linux:~$gbs3 ./tb_sqlite3.gbs3
MMain.Main.26: Query failed: SQL error or missing database1: MMain.Main.26hans@linux:~$
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# 5.4.2 Gambas scripts - WebPages

With the program' gbw3' it is possible to start Gambas scripts which are located on a web server. You should use gbw3 as an extension for these types of scripts. This specification is necessary for your system because this extension is entered in configuration files of the used web server. To be able to run Gambas scripts on a web server, some prerequisites have to be fulfilled:
A description of how to install the web serverLighttpdcan be found in chapter 24https://gambas-buch.de/dwen/doku.php?id=k24:k24.13:startand basic information about configuring the web server.
Normally the following script is executed on a web server, because the program' gbw3' generatesHTMLcode - in the sections marked blue with Gambas statements - which is sent to the calling web browser and displayed there. So that you can see the content of the generatedHTMLcode, the generatedHTMLcode is saved in a file and passed on as parameters to the Firefox web browser. Of course, you do not need a web server for this procedure!


```
#!/usr/bin/env gbw3
<%
  DIM sElement AS String
%>
<html>
<head>
<title>WebPage</title>
<style>
body {background-color: #DFDFC3;}
table {width:100%; border:1px solid #708090; border-collapse:collapse; font-family:Verdana, Arial, Helvetica, Sans-Serif; font-size:12px; color:#000000;}
th {border: 1px solid #708090; text-align: left; background-color: #C3DDFF; padding: 3px;}
td {border: 1px solid #708090; text-align: left; background-color: #E6E6E6; padding: 3px;}
h1 {text-align: left; font-family: Verdana, Arial, Helvetica, Sans-Serif; font-size: 20px;
color: #FF0000;}
</style>
</head>
  <h1>Umgebungsvariablen</h1>
  <table border="1" cellspacing="0" cellpadding="2">
    <tr>
      <th>Name</th>
      <th>Wert</th>
    </tr>
    <% FOR EACH sElement IN Application.Env %>
    <tr valign="top">
      <td><%= sElement %></td><td><%= Application.Env[sElement] %>&nbsp;</td>
    </tr>
    <% NEXT %>
  </table>
</html>
```

Comments:
The call:


```
hans@linux:~$gbw3 ./enviroment.gbw3>ev.html&&firefox ev.html
```

follows the output of the environment variables of the system in the Web browser Firefox in a table, of which only a small section can be seen here, if the file ev. html was generated successfully:
Figure 5.4.2.1: Display of the environment variables in a table in the Web browser
The advantage of calling this script is that you get all environment variables displayed in anHTMLtable and do not need a Web server, as would normally be necessary for CGI scripts.
The editor BlueFish is especially recommended for working with Gambas scripts (WebPages):
Figure 5.4.2.2: Editor' BlueFish' in action….


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.5 Just-In-Time-Compiler

As you may know, Gambas had a JIT (Just-In-Time) component based on LLVM (Low-Level-Virtual-Machine) - a library of programs for building highly optimized compilers, optimizers, and runtime environments. The old JIT-compiler no longer worked because newer versions of the LLVM are not backward compatible. Therefore, Benoît Minisini decided to write a new JIT-compiler from scratch which compiles Gambas code into C.
The new JIT-compiler is implemented using the gb.jit component in Gambas version 3.12.0. It is loaded automatically when required. It has a C part that implements the GambasToC_Code translator and a Gambas part that deals with the extraction of Gambas source code from executable archive files and the compilation of all translations in one large file.
This is how the Gambas JIT compiler works:
This construction has advantages:
with the disadvantage that code generation is slower (and with gcc even slower) than the old JIT compiler.


# 5.5.1 Syntax

The syntax with FAST has not changed: Place the keyword FAST at the beginning of a Gambas class file for a class that is to provide all functions JIT-compiled instead of interpreted, or at the beginning of a function declaration so that only this function is jit-compiled.
The new keyword, UNSAFE, has been introduced, which is only used together with the keyword FAST. When a function is declared as “FAST UNSAFE”, it is jit-compiled, but all security checks are removed (null objects, out-of-array bounds, division by zero, …)! It allows you to speed up the code a little if you are sure it is declared correctly. Otherwise, you will get a memory and/or segmentation error.


# 5.5.2 Notes



# 5.5.3 Debugging

These environment variablesGB_NO_JIT,GB_JIT_DEBUG,GB_JIT_CC andGB_JIT_CFLAGS control the behavior of the JIT compiler in Gambas Version 3.12.0. The following applies


# 5.5.4 Software test

If you use a stable Gambas and the JIT compiler in your programs, then you are surely interested in the advantage this has for your programs. Tested program runtimes can be found athttp://gambaswiki.org/wiki/doc/benchmark. The following adapted Gambas script achieved very different runtimes:


```
[1]#!/usr/bin/env gbs3[2][3]FAST' Change it![4]PublicSubMain()[5]DimIAsInteger[6]DimStartTimeAsFloat[7][8]StartTime=Timer[9]ForI=1To2' Runs[10]PrintI&". Run: "&Test(0.2)&" basic calculations"[11]Next[12]Print"----------------------------------"[13]Print"Program runtime = "; GetTime(StartTime,Timer);" seconds"[14]End[15][16]PrivateFunctionTest(XAsFloat)AsFloat[17][18]DimMuAsFloat=10.0[19]DimPu, SuAsFloat[20]DimI, J, NAsInteger[21]DimaPolyAsNewFloat[100][22][23]N=500000[24]ForI=0ToN-1[25]ForJ=0To99[26]Mu=(Mu+2.0)/2.0[27]aPoly[J]=Mu[28]Next[29]Su=0.0[30]ForJ=0To99[31]Su=X*Su+aPoly[J][32]Next[33]Pu+=Su[34]Next[35]ReturnPu[36]End[37][38]PrivateFunctionGetTime(StartTimeAsFloat, EndTimeAsFloat)AsFloat[39]ReturnRound(EndTime-StartTime,-3)[40]End
```

The Gambas script - stored in the file jit_p.gbs3 - is called in the console:


```
hans@mint-183 ~ $ gbs3 ./jit_p.gbs3
1. Run: 1250000 basic calculations
2. Run: 1250000 basic calculations
----------------------------------
Program runtime = 0,755 seconds
```



```
hans@mint-183 ~ $ gbs3 ./jit_p.gbs3
1. Run: 1250000 basic calculations
2. Run: 1250000 basic calculations
----------------------------------
Program runtime = 16,688 seconds
```

With the keyword FAST, which utilizes the JIT-compiler, resulted in a runtime of only 0.755 seconds, which corresponds to a runtime ratio of about 22:1 between Gambas and Gambas with JIT-compiler!
You can also use the keywords 'FAST UNSAFE' by deleting the upper line 3 completely and rewriting line 16:


```
[16] FAST UNSAFE Private Function Test(X As Float) As Float
```

Then only this function Test(..) is jit-compiled! In another test the same results were shown as expected with the runtimes.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# 5.6 Gambas preprocessor

A closer look at this source code reveals preprocessor directives that begin with a # character in the source code:


```
#IfDebugIfBoxThen' Draw the rectangle in which the text is to be placed.Cairo.Rectangle(Box.X, Box.Y, Box.Width, Box.Height)Cairo.Dash=[5]Cairo.Stroke()Endif#Endif
```

Gambas has a rudimentary preprocessor. This is a unit that precedes the lexical analysis - the first step in compiling. You can find out what the Gambas preprocessor does in the Gambas documentation athttp://gambaswiki.org/wiki/lang/.if.
A preprocessor directive has this syntax:


```
#If Preprocessor-Expression ... [ #Else If Preprocessor-Expression ... ] [ #Else ... ] #Endif
```

A #IF…. EndIf preprocessor directive allows conditional compilation of source code. A preprocessor expression is a rudimentary Boolean expression that can include the following:
These are valid preprocessor constants:
Table 5.6.1: Overview of preprocessor constants
In the sample source code below, only one of the four' Print' statements is compiled:


```
PublicSubMain()#IfSystem="Linux"#If Architecture="x86_64"Print"Linux 64 bits"#ElsePrint"Linux 32 bits"#Endif
  #ElseIfSystem="FreeBSD"Print"FreeBSD ?"#ElsePrint"Other !?"#EndifEnd' Main()
```

Observe this note:
By using the conditional compilation based on the' operating system' or' CPU architecture', an executable file specific to the operating system or CPU architecture is generated during compilation. That's usually not a good idea. Instead, try to detect as much of the operating system or CPU architecture in your code as possible at runtime by checking the values' System. Family' and' System. Architecture'.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# 5.7 Interfaces

An interface in Gambas is an interface between a class and the interpreter. Interfaces are currently only available for native classes - classes that are not written in gambas. In addition, only Gambas developers can use interfaces and very few classes implement interfaces.
The description of the effects when using interfaces should be shown with the example of the class Matrix, because the class Matrix (gb. gsl) internally uses both the _convert interface and the _operator interface.
Example 1:


```
Private Sub CreateAndShowMatrix()
  mMatrix = New Matrix(Columns.Value, Rows.Value, True) ' Columns, lines
  mMatrix = [[1, 1, 1, 7 + 2i, 8], [2, 2, 2, 4, 5], [1, 0, 3, 9, 5], [-1, -2i, -3, 4, 5 + 1i]]     ***
' Matrix-Display items in the TableView
  MatrixToTableView(mMatrix)
End ' CreateMatrix()
```

The _convert interface allows you to perform automatic data type conversions. A class that implements the _convert interface accepts certain data types as convertible and provides a method for converting suitable data. In this case, the array of arrays (in the background) is converted to a matrix and the assignment (3*) succeeds. The _operator interface specifies the behavior of objects when operators are applied to them. Whenever two objects (or an object and a value of native data type) are linked to an operator, the _operator interface is in play.
The Gambas user is only interested in this fact, that you can write matrix = [[z1, z2],[z3, z4]] and the interpreter recognizes this as matrix in certain assignment contexts.
The class Matrix (gb. gsl) also partially implements the _operator interface, which controls the applicability of certain operators to matrices. This is sure to succeed
Example 2:


```
PublicSubbtnMatrixMatrixProdukt_Click()DimmMatrixAsNewMatrix(3,3,False)' Real coefficients onlyDimmResultAsMatrix
 
  mMatrix=[[1,5,6],[4,-3.3,-9],[7,2,8.8]]PrintmMatrix.ToString(True)' True → Local language setting activemMatrix=2*mMatrix' Skalar-Matrix-ProduktPrintmMatrix.ToString(True)mResult=mMatrix*mMatrix.Trans()' Matrix-Matrix-ProductPrintmResult.ToString(True)End
```

The display in the console of the Gambas IDE shows these results:


```
[[1 5 6][4 -3,3 -9][7 2 8,8]]
[[2 10 12][8 -6,6 -18][14 4 17,6]]
[[248 -266 279,2][-266 431,56 -231,2][279,2 -231,2 521,76]]
```

There are two other specialized interfaces - Paint and PaintMatrix - that have something to do with drawing operations on selected classes.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.8.0 Gambas programs with options and arguments

You know how to start programs in the console with program options and arguments from working with Linux. So the first command starts the editor program' gedit', opens the file' set_color. sh' in the home directory and places the cursor in the opened file in the 5th line at position 9:


```
hans@linux:~$ gedit ./set_color.sh +5:9
hans@linux:~$ gnome-terminal --geometry 80x20+100+100 -t 'ROOT-TERMINAL' -e command.sh
```



# 5.8.0.1 Digression - Programs with arguments

The function of the presented program (bash script)' set_color. sh' consists of assigning 3 (start) values to arguments $1 to $3 by means of the command' let' internally, depending on the number of arguments passed, and then assigning these values to the variables R, G and B or the variables R, G and B with the values of the 3 arguments passed. A (colour) value is then calculated and displayed with R, G and B.


```
#!/bin/bash
if [ $# -ne 3 ]		# If the number of arguments passed is not equal to 3, ...
  then
    set 220 20 180 	# then set RGB default values: $1=220(R), $2=20(G) and $3=180(B) ...
    R=$1
    G=$2
    B=$3
  else			# otherwise set R, G and B from the three arguments
    R=$1
    G=$2
    B=$3
fi
let color=$R*256*256+$G*256+$B # Calculate colour value
echo colour value = $color
echo Continue with ENTER...
read dummy
```

In general:
The script' set_color. sh' is started first with exactly three arguments and then only with two arguments. The arguments are not checked for validity in the context of RGB color values[0… 255]:


```
hans@linux:~$ chmod +x set_color.sh # Das Skript ausführbar machen
```



```
hans@linux:~$ ./set_color.sh 10 20 128 # 3 Argumente
Farbwert = 660608
Weiter mit ENTER...
```



```
hans@linux:~$ $HOME/set_color.sh 0 128 # 2 Argumente
Farbwert = 14423220   (Kommentar: $1=220 , $2=20 , $3=180)
Weiter mit ENTER...
```



# 5.8.0.2 Gambas program with arguments

Of course, you can also pass arguments to a Gambas program - which should be executed by the Gambas interpreter:


```
hans@linux:~$ gbx3 $HOME/ColorSelectBP -- 225 110 60
Anzahl der übergebenen Argumente = 3
0. Agument = ColorSelectBP
1. Agument = 225
2. Agument = 110
3. Agument = 60
```

As a separator symbol between the Gambas project directory and the arguments,“–” is used, as indicated in the help for the interpreter gbx3, if you interpret <arguments> as a placeholder for a list of arguments separated by spaces:


```
hans@linux:~$ gbx3 -h
...
Usage: gbx3 [options] [<project file>] [-- <arguments>]
```



# 5.8.0.3 Gambas program with options and arguments

In the following two examples exactly one option k is passed to the interpreter gbx3. The $HOME/E/OSMapA project is started and a Gambas program option s and exactly three Gambas program arguments are passed:


```
hans@linux:~$ gbx3 -k $HOME/E/OSMapA -- -s n -- 52.7904 11.7533 15
hans@linux:~$ gbx3 -k $HOME/E/OSMapA -- --shape j -- -30 -50 4
```

The value of the -s or --shape% (j (a) or n (one)) option determines whether or not to display a symbol indicating the geographic start coordinate. A detailed description of the project can be found in? chapter 5.8.2 Projects.
Figure 5.8.0.3.1: GeoMap with symbol
The use of options for a Gambas program is optional. In the next example, a Gambas project is passed to the interpreter - without using an option - but with three arguments:


```
hans@linux:~$ gbx3 $HOME/ColorSelectBP -- 225 110 60
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.8.1 Options and arguments for Gambas programs

Gambas provides special class properties, a class, and a component for working with options and arguments in Gambas programs that are passed to the gambas interpreter gbx3:


# 5.8.1.1 Class Args

This class Args (gb) implements an array containing the arguments passed to a Gambas program on the console. This class behaves like a static read-only array. The following For-Each control structure, for example, runs through all arguments in the argument list:


```
DimsElementASStringForEachsElementInArgsPrintsElementNext
```

For example, you can determine the program name using the first element in the Args array (index = 0):


```
Dim sArgumentPN As String
sArgumentPN = Args[0] ' Program name
```

The native class Args of the component gb has only 3 properties:
Table 5.8.1.1.1.1: Properties of class Args (gb)
With these statements


```
Print "Number of array elements = "; Args.Count
Print "List of all arguments:"
Print Args.All.Join(" | ")
```

you will see these outputs in a console after starting the program:


```
hans@linux:~$ gbx3 $HOME/E/ColorSelectA2 -- 50 120 30
Number of array elements = 4
List of all arguments:
ColorSelectA2 | 50 | 120 | 30
hans@linux:~$
```



# 5.8.1.2 Selected property of the Application class of the component gb

From the class Application only the property Application. Args, which returns an array of the data type Args (? chapter 5.8.1.1), which can only be read out, is of interest in connection with arguments for Gambas programs.


# 5.8.1.3 Component Args

The component gb. args allows you to do this:
The class Args has these five methods:
Table 5.8.1.3.1: Methods of the class Args
Hints:
Depending on the function parameters of the functions listed in the table above, the following description applies:


# 5.8.1.4 Example

The following source code is an excerpt from the source code of a project, which is presented in chapter 5.8.3:


```
[1]PublicsShapeAsString[2]PublicaArgumentsAsVariant[][3][4]PublicSubForm_Open()[5]FMain.Center[6]FMain.Caption="Gambas-Programm '"&Application.Name&"' with 1 option and 3 arguments".[7][8]Args.Begin(SetHelpContent())[9]' Deklaration einer Gambas-Programm-Option: shape[10]sShape=Args.Get("s","shape","StartPunkt? (j)a oder (n)ein","j|n")[11]aArguments=Args.End()' Args.End() = Array of the 'real' programme arguments[12][13]***[14][15]IfNotsShapeAndaArguments.Count=0Then[16]SetDefaultArguments()[17]Else[18]SetOptionAndArguments()' Including analysis of the option and the 3 arguments[19]Endif[20][21]ShowMap()[22]End' Form_Open()[23][24]PrivateFunctionSetHelpContent()AsString[25]DimsUsageAsString[26][27]sUsage=gb.NewLine[28]sUsage&="Runs a Gambas program to display maps from OpenStreetMap"&gb.NewLine[29]sUsage&=gb.NewLine[30]sUsage&="Aufruf: "&"gbx3 ProjektPfad "&"-- [Optionen] [-- <Breite> <Länge> <Zoom>]"[31]sUsage&="Usage : "&"gbx3 ProjectPath "&"-- [options]  [-- <latitude> <longitude> <zoom>]"[32]sUsage&=gb.NewLine[33]sUsage&="Syntax:"&gb.NewLine[34]sUsage&="gbx3 ProjektPfad -- -s [j|n] [-- LAT LON ZOOM] (without °unit)"&gb.NewLine[35]sUsage&="gbx3 ProjektPfad -- --shape [j|n] [-- LAT LON ZOOM]"&gb.NewLine[36]sUsage&=gb.NewLine[37]sUsage&="Format for the geographical coordinates latitude (LAT) and longitude (LON)"&gb.NewLine[38]sUsage&="Decimal degree -90° < latitude "&String.Chr(8804)&" +90°"[39]sUsage&=" | -180° < Length° "&String.Chr(8804)&" +180°"&gb.NewLine[40]sUsage&=gb.NewLine[41]sUsage&="Example 1: gbx3 $HOME/Map -- -s j -- 52,787969 11,752522 15"&gb.NewLine[42]sUsage&="Example 2 : gbx3 $HOME/Map -- --shape n -- 0.02 -90.01 7"&gb.NewLine&gb.NewLine[43]sUsage&="The zoom factor is in the interval: 1 "&String.Chr(8804)&" ZOOM "&\[44]String.Chr(8804)&" 18 ( ZOOM "&String.Chr(8714)&" Integer )."[45][46]ReturnsUsage[47][48]End' Function SetUsage()
```

For demonstration purposes, this source code section has been inserted at (3*):


```
' Control:
  Print "Option value 'Shape' = "; sShape
  For i = 0 To Args.End().Max
    Print i + 1; ". Argument: Value = "; Args.End()[i]
  Next
  Print "-----------------------------"
  For Each sElement In aArguments
    Print "Argument value = "; sElement
  Next
```

Comment:
The syntax of the following line is interesting:


```
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 52.7904 1.0200 9
```

These are the (alternative) calls and the output in the console:


```
hans@linux:~$ gbx3 $HOME/E/OSMapA -- -s j -- 52.7904 1.0200 9
hans@linux:~$ gbx3 $HOME/E/OSMapA -- -shape j -- "52.7904" "1.0200" "9"  → Alternative call
Option value 'Shape' = j
1. Argument: Value = 52.7904
2. Argument: Value = 1.0200
3. Argument: Value = 9
-----------------------------
Value of the argument = 52.7904
Value of the argument = 1.0200
Value of the argument = 9
hans@linux:~$
```

To access the program help:


```
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --help
hans@linux:~$ gbx3 $HOME/E/OSMapA -- -h

Runs a Gambas programme to display maps from OpenStreetMap

Aufruf: gbx3 ProjektPfad -- [Optionen] [-- <Breite> <Länge> <Zoom>]
Usage : gbx3 ProjectPath -- [options]  [-- <latitude> <longitude> <zoom>]

Syntax:
gbx3 Project path -- -s [j|n] [-- LAT LON ZOOM] (without °unit)
gbx3 Project path -- --shape [j|n] [-- LAT LON ZOOM]

Format for the geographical coordinates latitude (LAT) and longitude (LON)
Decimal degree -90° < latitude° ≤ +90° | -180° < longitude° ≤ +180°

Example 1: gbx3 $HOME/Map -- -s j -- 52,787969 11,752522 15
Example 2 : gbx3 $HOME/Map -- --shape n -- 0.02 -90.01 7

The zoom factor is in the interval: 1 ≤ ZOOM ≤ 18 ( ZOOM ∊ Integer ).

Options:
 -s --shape <j|n>                       StartPunkt? (j)a oder (n)ein
 -V --version                           Display version
 -h --help                              Display this help
hans@linux:~$
```

Nothing more was to be expected after this call as an issue:


```
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --version
0.1.28
hans@linux:~$
```

Two special features when entering options and program arguments are briefly discussed with examples.
Example 1:Since all arguments are read in as a string, it is necessary to mask certain characters in the console within the string:


```
hans@linux:~$ gbx3 $HOME/E/OSMapB -- --modus s -- 52°47\'20\'\'N 11°45\'36\'\'E 13
hans@linux:~$ gbx3 $HOME/E/OSMapB -- --modus s -- "52°47'20''N" "11°45'36''E" "13"
```

Example 2:If an option has been defined, you must enter the two double strokes before the list of options - even if you explicitly deal with the missing entry of an option in the source code:


```
hans@linux:~$ gbx3 $HOME/E/OSMapA -- -- 52.7904 1.0200 9
The option 'shape' is set from 'non-defined' to j(a).
hans@linux:~$
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas architecture



# Chapters



# Table of Contents



# 5.8.2 Projects

This chapter presents three projects that demonstrate the use of options and arguments for Gambas programs in different ways.
Another interesting variant is presented in the' Chapter 2.6 Sharing Gambas programs - installation package' in a well-documented project.


# 5.8.2.1 Project 1 - Gambas program with 3 arguments

In this project for color selection in a ColorChooser, you can optionally transfer exactly 3 color values (RGB) to the program in order to define an individual start value for the color to be displayed after the program start.
The source code of the Gambas project' ColorSelectA1' is similar to the script in chapter 5.8.0.


```
' Gambas class filePublicSubForm_Open()DimsArgumentAsStringDimR, G, BAsIntegerFMain.CenterFMain.Resizable=FalseFMain.Text="Programme with 3 arguments (optional)"IfApplication.Args.Count<>4ThenPrint"Error! At least 1 argument is missing."R=220G=20B=180ElseR=Val(Application.Args[1])G=Val(Application.Args[2])B=Val(Application.Args[3])Endif' Application.Args.Count <> 4 ?ColorChooser1.SelectedColor=Color.RGB(R, G, B)End' Form_Open
```

With Application. Args, Gambas provides an object with all the arguments of the Gambas program that you can use like an array:
In this point, working with the array of arguments in Gambas differs from determining the number of arguments for a bash script in the console!
When called in a console:


```
hans@linux:~$ gbx3 $HOME/ColorSelectA1 -- 225 110 60
```

the Gambas interpreter starts the program for color selection with the default color ochre:
Figure 5.8.2.1.1: Color selection program - default color via 3 arguments
The next time you call up the program, you receive a note and the program is started with a standard color value (? source code) in this case:


```
hans@linux:~$ gbx3 $HOME/E/ColorSelectA1 -- 50 120
Hint! At least 1 argument is missing.
```



# 5.8.2.2 Project 2 - Gambas program with 3 arguments

The special features of this second project can be described in this way:
The source code reflects the above-mentioned special features:


```
' Gambas class filePublicaArgumenteAsString[]PublicSubForm_Open()FColor.CenterFColor.Resizable=FalseFColor.Text="Programme with 3 arguments (optional)"' String array as a copy of the array of all argumentsaArgumente=Args.All' aArgumente[0] = ProgrammNameIfGetErrorVector(aArgumente).ToString(True)="[0 0 0 0 0 0 0]"ThenColorChooser1.Value=Color.RGB(Val(aArgumente[1]),Val(aArgumente[2]),Val(aArgumente[3]))ElseErrorAnalysis(GetErrorVector(aArgumente))Endif' Without error ?End' Form_OpenPublicSubColorChooser1_Change()DimcColorAsIntegercColor=ColorChooser1.SelectedColor' Synonym for ColorChooser1.Value, DataType: IntegerEnd' ColorChooser1_Change()PrivateFunctionGetErrorVector(aArgsAsString[])AsVectorDimvFAAsVector' vFA → Error-ArrayDimiAsInteger=1vFA=NewVector(7,False)vFA=[0,0,0,0,0,0,0]' (1) Determine number of argumentsIfaArgs.Count=1ThenvFA=[3,0,0,0,0,0,0]IfaArgs.Count=2ThenvFA=[2,0,0,0,0,0,0]IfaArgs.Count=3ThenvFA=[1,0,0,0,0,0,0]IfaArgs.Count=4ThenFori=1ToaArgs.MaxIfNotIsInteger(aArgs[i])Then' (2) Check whether integer numbervFA[i]=1ElseIfVal(aArgs[i])<0OrVal(aArgs[i])>255Then' (3) Test for the interval [0..255]vFA[i+3]=1EndifEndifNextEndifReturnvFA' Return Error VectorEnd' Function Error Vector(..)PrivateSubErrorAnalysis(vVektorAsVector)Dimi, jAsIntegerPrint"ERROR!"' Differentiated evaluation error vector: element A0 (number of missing arguments)IfvVektor[0]<>0ThenIfvVektor[0]=1ThenPrint"It lacks precisely "; vVektor[0];" Argument!"IncjElsePrint"It lacks precisely "; vVektor[0];" Arguments!"IncjEndifEndif' Evaluation Error Vector: A1-A3 (Which argument cannot be converted to integer?)Fori=1To3IfvVektor[i]<>0ThenPrint"Das "; i;". Argument is not an integer."IncjEndifNext' Evaluation error vector: A4-A6 (Which argument is not in the interval [0..255]?)Fori=4To6IfvVektor[i]<>0ThenPrint"Das "; i-3;". Argument is not in the interval [0..255]!"IncjEndifNextPrint"Therefore, 3 standard colour values are used."ColorChooser1.Value=Color.RGB(220,20,180)' Start arguments - colour: pinkEnd' ErrorAnalysis(vVektor As Vector)
```

Here you can see three calls of the program for color selection in the console and the corresponding program reactions depending on the number and type of arguments passed:


```
hans@linux:~$ gbx3 $HOME/E/ColorSelectA2 -- 222 133
Hint!
Exactly 1 argument is missing!
Therefore 3 default colour values are used.
hans@linux:~$
```



```
hans@linux:~$ gbx3 $HOME/E/ColorSelectA2 -- 22O, 344 1E2
Hint!
The 1st argument is not an integer.
The 3rd argument is not an integer number.
The 2nd argument is not in the interval [0..255]!
Therefore 3 standard colour values are used.
hans@linux:~$
```



```
hans@linux:~$ gbx3 $HOME/E/ColorSelectA2 -- "50 120 30" ' Exactly 1 character string is transferred
Hint!
Exactly 2 arguments are missing!
Therefore 3 standard colour values are used.
hans@linux:~$
```

At these two program starts, the arguments determine the same default color:


```
hans@linux:~$ gbx3 $HOME/E/ColorSelectA2 -- "50" "120" "30"
hans@linux:~$ gbx3 $HOME/E/ColorSelectA2 -- 50 120 30
```



# 5.8.2.3 Project 3 - Gambas program with option and arguments

Project 3 (? Chapter 24.8.1 Projects to demonstrate the component gb. map) allows you to display maps of openstreetmap. org (OSM). To view a map you need
It makes sense, depending on the intended purpose


```
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 52,7904 11,7533 15
hans@linux:~$ gbx3 $HOME/E/OSMapA -- -s n -- 52.7904 11.7533 15
```

Figure 5.8.2.3.3.1: Galapagos (– –shape j – 0.01 -90.002 7)
The project archive can be found in the download area. If you unpack the archive into the $HOME/E path, you can immediately test the program with these calls in a console:


```
hans@linux:~$ gbx3 $HOME/E/OSMapA
hans@linux:~$ gbx3 $HOME/E/OSMapA -- -h
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --help
hans@linux:~$ gbx3 $HOME/E/OSMapA -- -v
hans@linux:~$ gbx3 $HOME/E/OSMapA -- -V
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --version

hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 52,7904 1,0 6
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape n -- 52.7904 1.0 6
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 0 0 3

hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- -30,0 -50,9 3
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape y -- 52.7904 1.0 6

hans@linux:~$ gbx3 $HOME/E/OSMapA -- -- 52.7904 1.0 6
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape n
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape -- 52.7904 1.0 6

hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 0.01 -90.002 7

hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 52.7904 331.0 6
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 52.7904 12

hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 52.7904 1.0 1o
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 52.7904 1.0 19
hans@linux:~$ gbx3 $HOME/E/OSMapA -- --shape j -- 52.7904 1.0 11.5

hans@linux:~$ gbx3 $HOME/E/OSMapA -- -30,0 -50,9 4
hans@linux:~$ gbx3 $HOME/E/OSMapA -- 30,0 50,9 4
```

In the project source code, you can see that the error functions in error handling provide numeric values as function values, as shown in the following section of the source code:


```
Private Function IsDecimalDegree(sDegree As String, sFlag As String) As Integer
  If Upper(sFlag) Not Like "{LAT,LON}" Then Return 1

  If Upper(sFlag) = "LAT" Then
     If IsFloat(sDegree) Then
        If (Val(sDegree) <= -90) Or (Val(sDegree) > 90) Then
           Return 2
        Else
           Return 0
        Endif
     Else
        Return 3
     Endif
  Endif

  If Upper(sFlag) = "LON" Then
     If IsFloat(sDegree) Then
        If (Val(sDegree) <= -180) Or (Val(sDegree) > 180) Then
           Return 4
        Else
           Return 0
        Endif
     Else
        Return 5
     Endif
  Endif

End ' Function IsDecimalDegree(..)
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.0 Class Stream (gb)

A stream is to be understood as a data stream flowing between processes or a process and a data end connection.
Overview of the different types of data end connections, globally referred to as a file in Linux:
Notes:
The interface stream specifies which methods are implemented. A stream has these four methods, among others:


```
Open,
Read file,
Write file,
Close.
```

The Stream class is the parent class for any Gambas object that represents a stream. This means that every class that inherits from the class Stream (gb) as a base class has at least these four methods. You cannot create this (base) class. Which functionality of a Stream object you can use depends on its exact class and also on the way the object is created.
For practical work, it is thus largely irrelevant whether you write data to or read data from, for example, a regular file, a serial port or a Unix socket.Here is the list of classes that inherit from the Stream class and are described in the Gambas book:


```
Compress    	Chapter 28.1.1
Uncompress  	Chapter 28.1.2
Process     	Chapter 21
SerialPort  	Chapter 24.1.5
Curl        	Chapter 24 (FTPClient and HTTPClient.)
File        	Chapter 6.5
Named Pipe	Chapter 6.2.1
Socket      	Chapter 24 (TCP- and Local-Unix-Socket)
VideoDevice 	Chapter 24
```



# 6.0.1 Properties

In Gambas, a Stream is an object that inherits from the Stream class (gb) and therefore implements its properties and methods. The Stream class has these properties:
Table 6.0.1.1 : Properties of the Stream class


# 6.0.2 Methods

The Stream class has these six methods:
Table 6.0.2.1 : Methods of the class Stream


# 6.0.3 Digression



# 6.0.3.1 Project

The project in the download area demonstrates how to use the Type property of a Stat object to determine the type of file:
Figure 6.0.3.1.1: Determining the type of files
The characters -, d, l, b, c, p and s characterise the type of a file in the context of the command ls -l and displaying the output in a console.


# 6.0.3.2 Use file command

Also in a console, you can use the file command to quickly determine what type of file a given file is:


```
Regular file
-------------------------------
hans@mint-183 ~ $ file nwm.xml
nwm.xml: exported SGML document, ASCII text

Directory
-------------------------
hans@mint-183 ~/BildTon $ file Fractals
Fractals: directory

Symbolic links
---------------------------------
hans@mint-183 ~/Schreibtisch $ file Formatting_DokuWiki_Tables
Formatting_DokuWiki_Tables: symbolic link to /home/hans/DW/0_DW_Convert/librewriter2dokuwiki.gambas

Blocked devices (block devices)
--------------------------------------
hans@mint-183 ~/Schreibtisch $ file /dev/sdd1
/dev/sdd1: block special (8/49)

Character-oriented devices (char devices)
---------------------------------------
hans@mint-183 ~ $ file /dev/ttyUSB0
/dev/ttyUSB0: character special (188/0)

Data links between processes (named pipe)
-------------------------------------------------
hans@mint-183 ~ $ mknod mypipe p 	' Generate Named Pipe
hans@mint-183 ~ $ file mypipe
mypipe: fifo (named pipe)
hans@mint-183 ~ $ rm mypipe	' Delete Named Pipe

Communication endpoint (unix socket)
------------------------------------
hans@mint-183 ~ $ file /run/user/1000/unix_socket.sock
/run/user/1000/unix_socket.sock: socket
```



# 6.0.3.3 The # character

For example, the documentation states.


```
FLUSH [ [ # ] Stream ]
```

where the # sign is marked as optional. In Gambas, you can prepend the # character to the variable name of a stream object, but only for the CLOSE, READ, WRITE, SEEK, INPUT, LINE INPUT, PRINT, UNLOCK and FLUSH instructions. This does not work in function calls like LOF(…),EOF(…) or the instruction LOCK.
In a Socket_Read event, you can use the following assignment, for example:


```
vData = Read #Last, -4096
```

In Last, the Socket object is returned that triggered the Read event and from which data can be read. You should prefer the “#Last” to “Last” because “Last” alone is not seen to be a stream in this case.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# 6.1.0 Paths in Gambas

The focus of the following three chapters is on the descriptions of paths for files and directories in Gambas - including the static properties Desktop.ConfigDir, Desktop.DataDir, Desktop.RuntimeDir and Desktop.CacheDir of the Desktop (gb.desktop) class.
In the last chapter, the theory elements are implemented in a project. The project implements a simple database client. A SQLite3 database with a table and further files (help file, script file, sound files and image files) are provided in special directories in the project directory or created there. The database table can be read and changed.
Figure 6.1.0.1: 'Paths in Gambas' demonstration programme


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.1.1 Paths in Gambas

Paths in Gambas refer to:
You should always choose the file path specifications in such a way that a project P can always be executed without problems in the following three cases:
There are two types of paths in Gambas:


# 6.1.1.1 Absolute paths

Absolute paths begin with the characters / or ~. They are interpreted as in a shell. If a path begins with the tilde character ~ - followed by the character / - then the character ~ is replaced by the home directory of the current user.
Table 6.1.1.1 : Paths in Gambas
Never use absolute paths pointing to your project directory in your projects, as these paths will no longer exist when you create an executable *.gambas file! You must use relative paths instead.


# 6.1.1.2 Relative paths

Relative paths are paths that do not begin with the / or ~ character. They refer to files or directories located within the current project executable or component. Relative paths do not refer to files in the current working directory, as there is no concept of the current working directory in Gambas! You can use the static method File.IsRelative(sPath As String) to check whether the path sPath passed in the parameter is a relative path or not.
Following the Gambas documentation, the following applies: Files that are inside the project directory or in subfolders of it and are archived in an executable file *.gambas are readable - but write-protected. If you run your project in the IDE, project files could be modified using absolute paths. But don't do that! Once your project is run as an executable, these absolute paths no longer exist.
In response to a question on the Gambas mailing list about using relative paths, B. Minisini thus:
The current syntax of relative paths is:
'../<path>' =⇒ access to a file located in the calling component, i.e. the component of the first method in the stack backtrace that is not in the same component than the current one ; the top-level component being the current project.
'…/<path>' =⇒ access to a file located in the current project.
' /<component>/<path>' =⇒ access to a file located in the specified component, provided that, of course, the component has been loaded.
Otherwise, './<path>' or just '<relative path>' =⇒ access to a file located in the current component.
I hope it's more clear now.
The './<component>/<path>' syntax may change before the 3.12 release.
Maybe for something like '.[<component>]/<path>', or '..<component>/<path>', or something else.


# 6.1.1.2.1 Syntax of relative paths

These above statements about the syntax of relative paths have been tested in many projects. The results are summarised in the following sections and the examples presented as exemplarily.
It is assumed that in a (main) project P both a component C and a library L are included. Component C has the file c.ext in its project directory and library L has the file l.ext in its project directory:


```
File p.ext
               |
            Project P
Component C            Library L
     |                       |
  File c.ext             File l.ext
```

Example AAccess from P to files in the project directory:


```
PublicSubForm_Open()DimsImagePathAsStringFMain.Icon=Picture.Load(".../symbols/form_icon.png")' ◀———— Consistently this .../- use Syntax!sImagePath=".../images/hgb.png"piboxImage.Picture=Picture.Load(sImagePath)...End
```

Example BAccess from C to the (hidden) file `.project` in the project directory:


```
' Gambas class file''' The C component class implements only 2 properties.''' The class is used only to demonstrate access from a component to files in the main program.ExportPropertyReadVersionAsStringPropertyReadVendorAsString'------------------------------Private$sVersionAsStringPrivate$sVendorAsStringPrivate$sContentAsStringPrivate$aContentAsString[]PublicSub_new()DimsRowAsStringIfExist("../.project")Then$sContent=File.Load("../.project")' ◀———— ../-Syntax$aContent=Split($sContent, gb.NewLine)ForEachsRowIn$aContentIfsRow Begins"Version"Then$sVersion=Scan(sRow,"*=*")[1]IfsRow Begins"Vendor"Then$sVendor=Scan(sRow,"*=*")[1]NextEndifEndPrivateFunctionVendor_Read()AsStringReturn$sVendorEndPrivateFunctionVersion_Read()AsStringReturn$sVersionEnd
```

Example CAccess from L to the file p.ext in P:


```
sContent=File.Load("../p.ext")' ◀———— ../-Syntax
```

Example D - Access from P to the file c.ext in CExample E - access from P to the file l.ext in L
For the last two cases, you should declare a private function in each of C and L in a module that provides the contents of c.ext and l.ext in a read-only property. A module is well suited in this case because you only need one instance of the static class.
In the following concrete example, the content of the help file help_mqt.txt in component C is provided in the module MHelp.module as a read-only property Help:


```
' Gambas module file''' The MHelp module implements only one property: HelpExportPropertyReadHelpAsStringPrivateFunctionHelp_Read()AsStringIfExist("./help_mqt.txt")ThenReturnFile.Load("./help_mqt.txt")' ◀———— ./-SyntaxElseError.Raise("Help file not found!")EndifEnd
```

In the download area you will find the two source code archives for component C and the main programme P.


# 6.1.1.3 Path specifications in gambas-specific format



# 6.1.1.3.1 Case

Many control elements have the .Picture property, to which you can assign a suitable icon from Gambas' inventory, for example, with btnClose.Picture = Picture[“icon:/16/close”]. The pictures from the stock of Gambas (in /usr/lib) are in the file gb.form.stock.gambas. They are only available in this archive! If the Picture class recognises a path in gambas-specific format with “icon:/” at the beginning, then it searches in the compiled files and loads the picture from the archive using the Gambas interpreter's path resolution for relative paths.
You can use the following alternative assignments to use your own images - stored for example in the image directory `leds` in the project directory:


```
pboxOnOff.Picture=Picture.Load(".../leds/green16.png")pboxOnOff.Picture=Picture["leds/green16.png"]
```



```
pboxOnOff.Picture=Picture[.../leds/green16.png"]
```

If you need suitable icons (coloured/grey) from the Gambas stock for your projects, you will find them in the source code of Gambas in the directory ../comp/src/gb.form.stock/gambas/32. You can then save these, for example, in a sub-folder /icons of the project directory.


# 6.1.1.3.2 2nd case

If you load a Gambas library at runtime, then you can do this with Component.Load(“:gambasbook/mylibrary:2.1”), for example. The path specification in gambas-specific format starts with a colon, followed by the vendor name 'gambasbook', the character “/” and the name of the library 'mylibrary'. Another colon is followed by the version '2.1'. The interpreter looks for Gambas libraries in these paths: ~/.local/share/gambas3/lib/ or in /usr/lib/gambas3/.
If you include an external library in Gambas, then the path follows the syntax “NameOfExternalLibrary:VersionOfExternalLibrary” as used in the following two examples:


```
LIBRARY "libc:6"
EXTERN getgid() AS Integer
```



```
EXTERN getgid() AS Integer IN "libc:6"
```



# 6.1.1.3.3 3rd case

To load a Gambas component, it is sufficient to specify the name of the component as the specific path:


```
PublicSub_new()Component.Load("gb.desktop")' Print Component.IsLoaded("gb.desktop")End
```



# 6.1.1.3.4 4th case

If you use a file or directory selection dialogue, then you should check carefully whether the full path or only the name is available as a result. For example, the IsDir(…) function always checks the full path.


# 6.1.1.4 File names

For a file name in Gambas, all characters except the slash “/” and the null character (NUL or U+2400) are allowed.


# 6.1.1.5 Excursus: Structure of a project directory

On a data carrier, there is a Gambas project in a directory with a Gambas-specific directory structure. The project directory and its basic structure are created *automatically* when a project is created in the integrated development environment (IDE). The directory name of the generated project is the project name! If you open a project directory via your file browser and switch on the display of hidden files/directories, you will see not only some hidden files but also hidden directories that Gambas uses for control files as well as files and directories that you yourself have copied into the project directory or created there. Especially beginners are surprised how much the directory structure differs from the display in the browser of the IDE when you open a project in the IDE. To describe the difference, the following applies: A directory is called “physical” if it is on a data carrier and you can view it with the file browser. A directory, on the other hand, is of the type “logical” if the Gambas IDE attaches special importance to a particular physical directory. In the file browser you only see physical directories, in the Gambas IDE mainly logical ones (project (.hidden), sources (.src) and data). The logical directory “project” in the IDE corresponds to the physical directory .hidden. Files and directories that you have copied to or created in the physical project directory can be seen in the IDE in the logical directory “data”. Only directories and files from the “data” directory are included in the executable file *.gambas when compiling. However, there are also files - such as files of type *.class - that you do not see in the logical directory .src! However, you can open these files with F12 or via the corresponding button in the editor of the IDE. A detailed description can be found in chapter 2.6.0.7 Directory paths.
Note: Only files that you store in the hidden directory .hidden are displayed in the IDE in the directory “Project” and only files from this directory can be copied to a directory of your choice on the target computer when you create an installation package in the IDE. For a description, seehttps://www.gambas-buch.de/doku.php?id=k11:k11.10:start.


# 6.1.1.6 Defaults for paths in Gambas



# 6.1.1.6.1 Executable file *.gambas

When you create an executable file in the IDE, the archive file *.gambas is automatically saved in the project directory. The file name of the archive is the same as the project name you entered in the dialogue when creating a new project. However, you can also freely select the name of the file and the storage location in the dialogue in the IDE.
Alternatively, you can also create the archive file in two steps:


```
hans@mint-183~ $ gbc3-ag$HOME/GB3BUCH/6K_Stream/6.1_Pfade/BuchProgramm/PathProject
OK
hans@mint-183~ $ gba3$HOME/GB3BUCH/6K_Stream/6.1_Pfade/BuchProgramm/PathProject
```

It is recommended not to rename the archive file later, because this can lead to unexpected page effects if you use the Application.Name property as an implementation detail.


# 6.1.1.6.2 Gambas library

If you create an executable file library_name.gambas from a project of type 'library', then the IDE will ensure that the library is automatically saved in the project directory and additionally also in the library base directory with the path


```
~/.local/share/gambas3/lib/<vendorname>/<projektname:version1.version2.gambas>.
```

The library such as ~/.local/share/gambas3/lib/gambasbook/libmath:2.3.gambas and its exported(!) classes and methods can thus be used in other projects.
If your project uses a self-developed Gambas library, the Gambas interpreter knows the paths to the library base directories in which to search. You have to explicitly add and confirm the appropriate library in each case in the project properties under 'Libraries'! This user-based path is actually quite practical, as you as a developer and/or tester can always use the latest version of the library. This means that you can use your test version without having to overwrite a possibly existing system-wide stable version. If you are using an external Gambas library, then the path should be either:
(case 1) ~/.local/share/gambas3/lib/$vendor or with.(case 2) /usr/lib/gambas3/$vendor
start with.
The first case is when you install a library library_name.gambas as a simple user or you install a library from the Gambas farm.The second is when you install the library as root. In this case, the path applies system-wide. Note: If the project type was set to 'Library' in the project properties, the vendor name is mandatory. You should assign a suitable developer name (vendor name) to the value of Vendor in the project properties. If you do not enter a developer name there, Gambas automatically inserts '(unknown)' as the value for Vendor. This is a problematic procedure if you want to use the path to a library in a console, for example, because this error message appears: -bash: Syntax error on unexpected word '(' !


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.1.2 Base directories

Before turning to the static properties Desktop.ConfigDir, Desktop.DataDir, Desktop.RuntimeDir and Desktop.CacheDir of the Desktop (gb.desktop) class, you should read the information athttps://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html[1] carefully. The chapter in [1] gives a good introduction to the concept of base directories defined by environment variables such as $XDG_CONFIG_HOME or $XDG_DATA_HOME, to name two.
In a console, for selected environment variables, these values were read out for the user 'hans' (that is the author):


```
hans@mint-183~ $echo$XDG_CONFIG_HOME(blank or notset)hans@mint-183~ $echo$XDG_DATA_HOME(blank or notset)hans@mint-183~ $echo$XDG_RUNTIME_DIR/run/user/1000hans@mint-183~ $echo$XDG_CACHE_HOME(blank or notset)
```

With this source code snippet you can query the current paths on your system as Gambas has read them out and defined them in case they are empty or not set:


```
Print"ConfigDir  = ";Desktop.ConfigDir' $XDG_CONFIG_HOMEPrint"DataDir    = ";Desktop.DataDir' $XDG_DATA_HOMEPrint"RuntimeDir = ";Desktop.RuntimeDir' $XDG_RUNTIME_DIRPrint"CacheDir   = ";Desktop.CacheDir' $XDG_CACHE_HOME
```

In the Gambas IDE console, the author produced the following output (B):


```
ConfigDir  =/home/hans/.config
DataDir    =/home/hans/.local/share
RuntimeDir =/run/user/1000CacheDir   =/home/hans/.cache
```

The difference between the two outputs (A) and (B) is quickly explained: If one of the above environment variables is empty or not set, Gambas will fall back on standard directories according to the specification in [1].
In addition, if the environment variable $XDG_RUNTIME_DIR is empty or not set, then applications should fall back on a substitute directory such as /tmp with similar functionality. In the file in the Gambas source code gambas_source_code/comp/src/gb.desktop/.src/Desktop.class, the Desktop.ConfigDir, Desktop.DataDir, Desktop.RuntimeDir and Desktop.CacheDir properties of the Desktop (gb.desktop) class are defined as function values like this:


```
StaticPrivateFunctionConfigDir_Read()AsStringReturnGetDir("XDG_CONFIG_HOME",User.Home&/".config")EndStaticPrivateFunctionDataDir_Read()AsStringReturnGetDir("XDG_DATA_HOME",User.Home&/".local/share")EndStaticPrivateFunctionCacheDir_Read()AsStringReturnGetDir("XDG_CACHE_HOME",User.Home&/".cache")EndStaticPrivateFunctionRuntimeDir_Read()AsStringDimsPathAsString=Env["XDG_RUNTIME_DIR"]IfNotsPathThensPath=File.Dir(Temp$())Error"gb.desktop: warning: XDG_RUNTIME_DIR is not set default to "; sPathEndifReturnsPathEnd
```



# 6.1.2.1 Base Directory 1 - Desktop.ConfigDir



```
Static Property Read ConfigDir As String
```

Returns the base directory where user-specific configuration files should be stored.
Examples:


```
PublicsConfigDirAsStringPublicSub_new()...sGlobalConfigDir=Desktop.ConfigDir&/sVendor&/Lower(sAppName)' ~/.config/gambasbook/pathprojectIfNotExist(sGlobalConfigDir)ThenShell.MkDir(sGlobalConfigDir)...hSettings=NewSettings(sGlobalConfigDir&/File.SetExt(Lower(sAppName),"conf"))' ~/.config/gambasbook/pathproject/pathproject.conf...EndPublicSubForm_Open()...IfhSettings["First/Value",0]<2Then' The 'About' window is displayed exactly 2 timesi=hSettings["First/Value",0]Inci
     hSettings["First/Value"]=i
     hSettings.Save()FAbout.ShowModal()EndifEnd
```

Some Gambas programs store scripts - for example in shell, Perl, Python or Gambas - as `hooks` that are executed by the Gambas program on certain events. In this way, the script intervenes in the configuration of the programme. These scripts or the agreed directory that is searched by your programme should then be located in the base directory Desktop.ConfigDir.In programming, according tohttps://de.wikipedia.org/wiki/Hook_(computer science), `hook` refers to an interface with which programme source code of other languages can be integrated into a programme in order to extend it, to change their flow or to intercept certain events.


# 6.1.2.2 Base Directory 2 - Desktop.DataDir



```
Static Property Read DataDir As String
```

Returns the base directory where user-specific data files are to be (permanently) stored.


# 6.1.2.2.1 Example 1

In this base directory, among other things, the projects from the Gambas software farm are stored, which have been selected and installed in the start window of the IDE under 'Software farm …' in the dialogue. Example: /home/hans/.local/share/gambas3/src/ajmsoftware/gbAutoMount or Desktop.DataDir &/ “gambas3/src/ajmsoftware/gbAutoMount”.
The `ajmsoftware` stands for the developer name (vendor) and `gbAutoMount` for the project name.


# 6.1.2.2.2 Example 2

Scripts (shell scripts and scripts in other languages such as Gambas or Python or Perl or PHP) that you have copied into the project directory or newly created there can be executed in the IDE without any problems if the script file has the necessary permissions, which are set for the case of a new script file with `rw-rw-r–'. Therefore, you must change these rights so that at least the owner has the right to execute the script file.
Case 1 - Script Test in the Gambas IDE
While the statement


```
txaResult.Insert(File.Load(sScriptPath))
```

with the path sScriptPath = “…/scripts/test_script.sh” displays the contents of the script file in the project directory in the TextArea txaResult, the following statement generates an error:


```
CHMOD sScriptPath To "..x......"
```

The reason is that the CHMOD instruction - just like the SHELL instruction - requires an absolute path! Therefore, the following two instructions work without problems:


```
CHMOD SetFullPath(sScriptPath) To "..x......"
SHELL SetFullPath(sScriptPath) To sStore
```

This is the source code for the function SetFullPath(sPath As String):


```
PublicFunctionSetFullPath(sPathAsString)AsStringDimsFullPathAsStringIfLeft(sPath,1)="~"ThensFullPath=User.Home&Mid(sPath,1+1)ElseIfExist(sPath)AndLeft(sPath,1)<>"/"ThensFullPath=Application.Path&/sPathElsesFullPath=sPathEndifReturnsFullPathEnd
```

Case 2 - Script test in the project directory.
You have to take a completely different approach if you create an executable file *.gambas, open it in the project directory and start the programme there.


```
hans@mint-183 ~/Schreibtisch/RunScriptCHMOD $ gbr3 ./runscript.gambas
```

The reason is that files in a Gambas archive can only be read - execution fails! The following approach has proven successful for this case:
Source code:


```
PublicSubbtnRunScript_Click()DimsStoreAsStringsRelativeScriptPath=".../scripts/test_script.sh"sAbsoluteScriptPath=Desktop.DataDir&/File.BaseName(sRelativeScriptPath)&".sh"CopysRelativeScriptPathTosAbsoluteScriptPath' Chmod sAbsoluteScriptPath To "r-xr-xr-x" ' All rights are explicitly resetChmod sAbsoluteScriptPathTo"..x......"' Only the "Execute" right is set for the owner - all others are retained!txaResult.Clear()ShellsAbsoluteScriptPathTosStoreIfsStoreThentxaResult.Text=sStore
     txaResult.Pos=0ElseMessage.Error(Error.Text&"!")EndifIfExist(sAbsoluteScriptPath)ThenKillsAbsoluteScriptPathEnd
```

Or you can decide to copy the script file into a temporary file and choose /tmp as the base directory. Since the script is only needed temporarily, the above source text changes:


```
PublicSubbtnRunScript_Click()DimsStoreAsStringsRelativeScriptPath="scripts/test_script.sh"sTempScriptPath=Temp(File.BaseName(sRelativeScriptPath))&".sh"' Absolute Path: /tmp/gambas.1000/4979/test_script.tmp.shIfNotExist(sTempScriptPath)ThenCopysRelativeScriptPathTosTempScriptPath' Chmod sTempScriptPath To "r-xr-xr-x"  ' All rights are explicitly resetChmod sTempScriptPathTo"..x......"' Only the "Execute" right is set for the owner - all others are retainedtxaResult.Clear()ShellsTempScriptPathTosStoreIfsStoreThentxaResult.Text=sStore
     txaResult.Pos=0ElseMessage.Error(Error.Text&"!")EndifEnd
```

Good to know: The file with the path sTempScriptPath is automatically deleted when the Gambas programme is terminated.
Example 3
If you take a look at the source code (app/src/gambas3/.src/Project/Farm/CSoftware.class) regarding the software to maintain the database of installed software from the software farm:


```
PublicSubGetInstalledDir()AsStringReturnDesktop.DataDir&/"gambas3/src"&/LCase(Vendor)&/NameEnd
```

you will see that Desktop.DataDir is selected as the installation directory. The name of the developer can be specified via the 'Vendor' entry in the project properties.


# 6.1.2.3 Base directory 3 - Desktop.CacheDir



```
Static Property Read CacheDir As String
```

Returns the base directory where user-specific, non-essential files should be stored. It is defined by the environment variable $XDG_CACHE_HOME. If $XDG_CACHE_HOME is not set or is empty, the default ~/.cache is used.


# 6.1.2.4 Base Directory 4 - Desktop.RuntimeDir



```
Static Property Read RuntimeDir As String
```

Returns the (base) directory /run/user/User-ID such as /run/user/1000 where user-specific, runtime-only files and other file objects such as local Unix sockets or named pipes are to be (temporarily) stored. The directory must belong to the user. He must be the only one who has read and write access to it. His Unix access mode must be 0700. The directory is defined by the environment variable $XDG_RUNTIME_DIR:


```
hans@mint-183 ~ $ echo $XDG_RUNTIME_DIR
/run/user/1000
```

The /run directory a virtual, temporary file system. It exists in the main memory and is automatically emptied when the computer is restarted.
Example


```
PublicSub_new()...sGlobalRuntimeDir=Desktop.RuntimeDir&/sVendor&/Lower(sAppName)' /run/user/1000/gambasbook/pathprojectIfNotExist(sGlobalRuntimeDir)ThenShell.MkDir(sGlobalRuntimeDir)...sGlobalScriptsDir=sGlobalRuntimeDir&/GetDirPath(sLocalScriptsDir)' /run/user/1000/gambasbook/pathproject/scriptsIfNotExist(sGlobalScriptsDir)ThenShell.MkDir(sGlobalScriptsDir)EndifForEachsFileInDir(sLocalScriptsDir,"*.{sh,sql,pl,py,gbs}")IfNotExist(sGlobalScriptsDir&/sFile)ThenCopysLocalScriptsDir&/sFileTosGlobalScriptsDir&/sFile
       Chmod sGlobalScriptsDir&/sFileTo"..x......"EndifNext...End
```

First, all scripts with the appropriate filter for the extension are temporarily stored in the base directory sGlobalScriptsDir: /run/user/user_id/gambasbook/pathproject/scripts).For each copied script file, the right to execute (user) is set.
This is how the script dump.sh is called in an EXEC instruction:


```
PrivateSubGetDBDumpExec()DimaExecCommandAsString[]' The file extension .sql is automatically supplemented with the Dump command!aExecCommand=[sTempScriptPath, sGlobalDBHostDir&/sDBName, sGlobalDBHostDir&/"dump."&sDBTableName]ExecaExecCommandWaitEnd
```

In the directory ~/.local/share/gambasbook/pathproject/data/databases the file contacts.sql is saved.
Using base directories for permanent storage of selected files may require three different base directories to be used for a project. This certainly promotes the idea of always using the base paths for certain files in the same way.
In my opinion, however, there is nothing to be said against permanently storing all relevant files for a project in a base directory such as Desktop.DataDir with a trailing NameSpace/ProjectName.


# 6.1.2.5 Application.Name, Application.Dir and Application.Path

Using the Application.Name, Application.Path and Application.Dir properties of the Application (gb) class holds some surprises. If you want to use these properties in your projects, then you should read the following sections carefully. The considerations presented also apply to the project type 'Library' and 'Component'.


# 6.1.2.5.1 Application.Name

The documentation says: 'Return the application name, as defined in the IDE project properties dialog.' This text is inaccurate and should be changed to:
'Returns the name of the application to run.'
If the application is executed in the IDE, it is the project name - as defined in the 'New Project' dialog.The project name is also the name of the automatically created project directory.If the application is executed outside the IDE directly or with `gbr3 path2project/archive_name.gambas`, it is the name of the executable file archive_name.gambas.If the application is executed outside the IDE with `gbx3 path2project_directory`, it is the name of the project directory.'
The following 4 cases demonstrate the use of the Application.Name property in a project.
Case 1: Running the application in the IDE - project name 'GetAppName'.
Figure 6.1.2.5.1: Start in the IDE
Case 2: Execution in the project directory GetAppName.


```
$gbx3 ~/GB3BUCH/6K_Stream/6.1_Pfade/BuchProgramm/GetAppName
```

Figure 6.1.2.5.2: Start in the project directory
Case 3: Execution in the project directory GetAppName.
The name of the executable file has been changed from the (default) name GetAppName.gambas to get.app.name.gambas


```
$gbr3 ~/GB3BUCH/6K_Stream/6.1_Pfade/BuchProgramm/GetAppName/get.app.name.gambas
```

Figure 6.1.2.5.3: Start in the project directory
Case 4 - Running a copy of the project directory.
The original project directory ../GetAppName was copied to ../GetAppNameCopy and the programme was started there.


```
hans@mint-183 ~ $ gbx3 ~/GB3BUCH/6K_Stream/6.1_Pfade/BuchProgramm/GetAppNameCopy
```

Figure 6.1.2.5.4: Start in a copy of the project directory
Conclusion: you should refrain from renaming a project directory or the existing Gambas archive *.gambas - without necessity - if you want to safely use the Application.Name property as an implementation detail in your project.


# 6.1.2.5.2 Application.Dir

For the Application.Dir property, the documentation states:
'Returns the application directory. It is the current working directory defined at application startup.' 'Returns the programme directory. It is the current working directory defined at application startup'.
Here is a suggestion for an extended definition:
A) Returns the application directory as default working directory if in Gambas execution mode.B) Returns the user home directory as default working directory if in development mode (inside the IDE).
The Application.Dir property returns the CWD (current working directory) - as it is set at the time the programme is started.
The Gambas process inherits its CWD from the IDE. If you start the IDE from your “Programs” menu, the CWD is the home directory.In all other cases, it is the directory from which you started the program. Do this experiment: Open a terminal. Type 'cd /tmp'. Start the Gambas IDE with 'gambas3'. Now you are in the IDE. In a project, 'Print Application.Dir' returns /tmp!
Gambas has no concept of relative file system paths. Any relative path you pass to, for example, OPEN, File.Load(…) or similar is interpreted as relative to the files in the project directory. To get into the computer's file system, you must use absolute paths. In this case, the use of the Application.Dir property can become useful.
Example:
Assume that you have created a program myprogram.gambas that needs to be passed a file 'myfile' for processing with a command line argument. For example, in order for the File.Load(absolutepath2myfile) or Picture.Load(absolutepath2myfile) methods to load the file, the file path must be absolute, which is user-unfriendly. As a user, instead of


```
$ gbr3 ./myprogram.gambas absolutepath2myfile
```



```
$ gbr3 ./myprogram.gambas myfile
```

instead of <code_b_14>, as you are used to from programmes in other programming languages with relative paths. You can use Application.Dir for exactly this case:
Source code excerpt for the ShowImageD project.


```
' Gambas class filePublicSubForm_Open()DimsImagePathAsString' Assumption: The image path is relative to the CWD - as in all other languages.' The image is located in the project directory.sImagePath=Application.Args[1]IfsImagePathNotBegins"/"ThensImagePath=Application.Dir&/sImagePath
 
  piboxImage.Picture=Picture.Load(sImagePath)End
```

Program start in two variants:


```
hans@mint-183~/Schreibtisch/ShowImageD $ gbr3 ./ShowImageD.gambas hgb.png
hans@mint-183~/Schreibtisch/ShowImageD $ gbx3/home/hans/Schreibtisch/ShowImageD--hgb.png
```

Figure 6.1.2.5.5: Start with the image hgb.png
Conclusion: You can also use the Application.Env[“PWD”] property for Application.Dir. It uses the appropriate environment variable to display the CWD if it is set correctly. Taking up this idea, using the $PWD environment variable directly in Bash or in another shell could be a mediating approach:


```
$ gbr3 ./myprogram.gambas $PWD/myfile
```

Source code excerpt ShowImageP


```
' Gambas class filePublicSubForm_Open()DimsImagePathAsStringsImagePath=Application.Args[1]piboxImage.Picture=Picture.Load(sImagePath)End
```

Programme start:


```
hans@mint-183~/Schreibtisch/ShowImageP $ gbr3 ./ShowImageP.gambas$PWD/hgb.png
hans@mint-183~/Schreibtisch/ShowImageP $ gbx3/home/hans/Schreibtisch/ShowImageP--$PWD/hgb.png
```

Conclusion: the current working directory [CWD] is only interesting for command line programs and in Gambas one writesGUIprograms much more often. The latter resort to file selection dialogues and these dialogues return absolute paths. The Application.Dir property is therefore used quite little.


# 6.1.2.5.3 Application.Path

The `Application.Path` property always returns the project directory where the source code of the project is located.
This gives rise to the following considerations:
(1) The Application.Path property is at most to be used for debugging or for phases of program development in the IDE, for example to store files created by the program in a special developer mode in the project directory.
(2) The Application.Path property should not be used as an implementation detail of a project because otherwise the program will not work if a user decides to create an executable archive file *.gambas from the project and open it. In this case all project files are stored in an archive and Application.Path makes no sense!
Example project 'Intro':
When the program is started, an image is displayed as an intro. The image hgb.png is in the project folder in the (sub-)folder 'images'. The executable archive file is named show.intro.gambas. The source code is short:


```
' Gambas class filePublicSubForm_Open()DimsImagePathAsStringFMain.Icon=Picture.Load(".../symbols/form_icon.png")sImagePath=Application.Path&/"images/hgb.png"piboxImage.Picture=Picture.Load(sImagePath)End
```

(a) Start in the IDE with F5 or via the button in the toolbar with the symbol ► → ok(b) The program is started directly in the project directory → ok(c) Start console: hans@mint-183 ~/Desk $ gbr3 Intro/show.intro.gambas → ok(d) Start console: hans@mint-183 ~/desk $ gbx3 Intro → ok
Finally, copy only the executable archive file show.intro.gambas to the home directory and start it directly there:
Figure 6.1.2.5.6: Start in the home directory
The error is understandable because the Application.Path property no longer points to the /home/hans/Desk/Intro directory but to /home/hans and therefore the image file cannot be loaded. What now - what to do? Here is a suggestion:
Replace the line


```
sImagePath = Application.Path &/ "images/hgb.png"
```

with


```
sImagePath = ".../images/hgb.png"
```

and the error is eliminated because the resolution of the relative path is now always correct!


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# 6.1.3 Project

After the explanations in the last two chapters, you will be introduced to the project PathProject, which creates the executable file PathProject.gambas as a Gambas archive. The programme was designed and tested for the following three scenarios under the aspect of 'working with paths in Gambas':
1. start in the IDE (F5 or via the button in the toolbar with the ► symbol).2. start in the project directory with2.1 $ gbx3 $HOME/GB3BOOK/6K_Stream/6.1_Paths/BookProgram/PathProjector2.2 $ gbr3 $HOME/GB3BOOK/6K_Stream/6.1_Paths/BookProgram/PathProject/PathProject.gambas3. start on the desktop with hans@mint-183 ~/Desk $ ./PathProject.gambas, if for example only the Gambas archive was copied to the desktop.
The project implements a simple database client. A SQLite3 database with a table (file contacts.s3db) and further files (help file, script file, sound files and image files) are provided in special directories in the project directory or created there. The database table can be read and changed.


```
|~/GB3BUCH/6K_Stream/6.1_Pfade/BuchProgramm/PathProject
├── data
│   ├── databases
│   │   ├── contacts_original.s3db
│   │   └── contacts.s3db
│   ├── texts
│   └── xml
├── help
│   └── help.txt
├── leds
│   ├── gray16.png
│   ├── green16.png
│   └── red16.png
├── scripts
│   └── dump.sh
├── sounds
│   ├── sound_e.wav
│   ├── sound_s.wav
│   └── start.ogg
└── symbols
    ├── db32.png
    ├── form_icon.png
    ├── logo3.png
    └── project_icon.png
```

Initial considerations with regard to working with files are also generally applied in this project to the answers to questions such as these:
In case you need to copy files to a suitable directory in the system temporarily or permanently, you should follow the following general suggestions and recommendations.
Configuration file:For configuration files, consistently use the gb.settings component. Do not use the default path as the path for the configuration file. In this case, set ~/Desktop.ConfigDir/… as the base directory. as the base directory. In the case of aCSSfile, for example, you must decide whether it is to be regarded as a configuration file or as a data file.
Data file:If data must be available (permanently) even after a system restart, then these data files belong in the basic directory ~/Desktop.DataDir/… . Data that is generated and stored as intermediate results at runtime should be stored in temporary files either in /tmp/… or ~/Desktop.RuntimeDir/… . After /tmp/… or ~/Desktop.RuntimeDir/… also belong NamedPipes and local UnixSockets, because they are bound to the runtime of the Gambas process.
Database (DB):A database or its DB tables only need to be read if you only want to display its records. If changes to the DB tables are permitted, the database and its tables must be readable and writable by the user. Note: After creation, an SQLite3 database automatically has only the rights: rw-r–r– .
Script file:Scripts “*.{sh,sql,pl,py,gbs,…}” must be able to be read and executed. Since the shell and exec instructions require absolute paths, you must copy the scripts to a suitable directory in the system and make them executable with CHMOD path2script TO permission_string. Since shell scripts are only used temporarily, they belong in /tmp/… or ~/Desktop.RuntimeDir/… .
It has been specified that the shell script dump.sh is only used temporarily and is therefore copied to the directory /run/user/user-id/gambasbook/pathproject/scripts.
Sound file:A sound file must only be read. However, if you give the user the chance to replace the sound files - under the old file names - then you must copy the sound files into a suitable base directory such as ~/Desktop.DataDir/… permanently.
Image file:If you need a special icon for each of certain controls, then these only need to be read.
Help file:
A help file must normally be read only. However, the user may be interested in modifying the help file outside the programme, for example to insert a translation in another language.If there is no such interest, then it remains hidden in the project files - otherwise it must be copied permanently to a suitable basic directory such as ~/Desktop.DataDir/…. permanently.
In the following table you can see an overview of the intended paths of special directories:
Table 6.1.3.1 : Overview of the used (base) directories
The combination of provider-name/project-name as gambasbook/pathproject consistently serves as NameSpace. Note that both the vendor name (Vendor) - often it is the name of the developer - and the name of the application have been hard coded in the two variables sVendor and sAppName. The reason for the project name is that you cannot safely use the Application.Name property, which was discussed in the previous chapter. You could read out the name of the vendor from the (hidden) file .project - but this presupposes that this name has been entered in the project properties. If this is not the case, then it is set:


```
IfExist(".../.project")ThenForEachsRowInSplit(File.Load(".../.project"), gb.NewLine)IfsRow Begins"Vendor"ThensVendor=Scan(sRow,"*=*")[1]EndifNextEndifIfNotsVendorThensVendor="gambasbook"' The vendor for all projects of the author is `gambasbook`.
```

Figure 6.1.3.1: 'Paths in Gambas' demonstration programme
The source code for the class FMain.class for the project `PathProject` is given in full. All other classes and modules can be found in the download directory in the project archive.


```
' Gambas class file' SQLite has no concept of users. Access to a database is controlled by the actual file permissions' of the database file. This means that the Login is always the user id executing the Gambas program.PubliccCAsComponentPublicsTempDirAsString'----------------------------------PublicsGlobalConfigDirAsStringPublicsGlobalRuntimeDirAsStringPublicsGlobalDataDirAsStringPublicsGlobalDBHostDirAsStringPublicsGlobalScriptsDirAsStringPublicsGlobalSoundsDirAsString'----------------------------------PublicsLocalDataDirAsStringPublicsLocalDBHostDirAsStringPublicsLocalHelpDirAsStringPublicsLocalLEDsDirAsStringPublicsLocalScriptsDirAsStringPublicsLocalSoundsDirAsStringPublicsLocalSymbolsDirAsString'----------------------------------PublicsVendorAsStringPublicsAppNameAsStringPublicsDBNameAsStringPublicsFileAsStringPublichSettingsAsSettingsPublicsMessageAsStringPublicsDBTableNameAsStringPublicSub_new()DimsRowAsStringIfExist(".../.project")ThenForEachsRowInSplit(File.Load(".../.project"), gb.NewLine)IfsRow Begins"Vendor"ThensVendor=Scan(sRow,"*=*")[1]EndifNextEndifIfNotsVendorThensVendor="gambasbook"sAppName="PathProject"sDBName="contacts.s3db"sDBTableName="contacts"'------------------------------sLocalDataDir="data"sLocalDBHostDir="databases"sLocalHelpDir="help"sLocalLEDsDir="leds"sLocalScriptsDir="scripts"sLocalSoundsDir="sounds"sLocalSymbolsDir="symbols"'------------------------------------------------------------------------------------------------sGlobalConfigDir=Desktop.ConfigDir&/sVendor&/Lower(sAppName)IfNotExist(sGlobalConfigDir)ThenShell.MkDir(sGlobalConfigDir)'------------------------------------------------------------------------------------------------sGlobalRuntimeDir=Desktop.RuntimeDir&/sVendor&/Lower(sAppName)IfNotExist(sGlobalRuntimeDir)ThenShell.MkDir(sGlobalRuntimeDir)'------------------------------------------------------------------------------------------------sGlobalDataDir=Desktop.DataDir&/sVendor&/Lower(sAppName)&/GetDirPath(sLocalDataDir)IfNotExist(sGlobalDataDir)ThenShell.MkDir(sGlobalDataDir)'------------------------------------------------------------------------------------------------sGlobalDBHostDir=sGlobalDataDir&/sLocalDBHostDirIfNotExist(sGlobalDBHostDir)ThenShell.MkDir(sGlobalDBHostDir)ForEachsFileInDir(sLocalDataDir&/sLocalDBHostDir,"*.s3db")IfNotExist(sGlobalDBHostDir&/sFile)ThenCopysLocalDataDir&/sLocalDBHostDir&/sFileTosGlobalDBHostDir&/sFileEndifNext'------------------------------------------------------------------------------------------------sGlobalScriptsDir=sGlobalRuntimeDir&/GetDirPath(sLocalScriptsDir)IfNotExist(sGlobalScriptsDir)ThenShell.MkDir(sGlobalScriptsDir)EndifForEachsFileInDir(sLocalScriptsDir,"*.{sh,sql,pl,py,gbs}")IfNotExist(sGlobalScriptsDir&/sFile)ThenCopysLocalScriptsDir&/sFileTosGlobalScriptsDir&/sFile
       Chmod sGlobalScriptsDir&/sFileTo"..x......"EndifNext'------------------------------------------------------------------------------------------------sGlobalSoundsDir=Desktop.DataDir&/sVendor&/Lower(sAppName)&/GetDirPath(sLocalSoundsDir)IfNotExist(sGlobalSoundsDir)ThenShell.MkDir(sGlobalSoundsDir)EndifForEachsFileInDir(sLocalSoundsDir,"*.{ogg,wav}")IfNotExist(sGlobalSoundsDir&/sFile)ThenCopysLocalSoundsDir&/sFileTosGlobalSoundsDir&/sFileEndifNext'------------------------------------------------------------------------------------------------hSettings=NewSettings(sGlobalConfigDir&/File.SetExt(Lower(sAppName),"conf"))SetNotification("dialog-information","Attention!")EndPublicSubForm_Open()DimiAsIntegerIfNotSystem.Exist("sqlite3")ThensMessage="<b><font size='+1', color='DarkRed'>"sMessage&="The application requires the program 'sqlite3'."sMessage&="</b></font><hr>"sMessage&="Installation console (MINT): $ sudo apt-get install sqlite3"sMessage&="\nThe application is therefore terminated!"MAddOns.PlaySound(sGlobalSoundsDir&/"sound1.ogg")Message.Info(sMessage)QuitElse' Message.Info("The programm path from 'sqlite3' is: " & System.Find("sqlite3"))Endif' The 'About ...' window is displayed exactly twice.IfhSettings["First/Value",0]<2Theni=hSettings["First/Value",0]Inci
     hSettings["First/Value"]=i
     hSettings.Save()FAbout.ShowModal()EndifDataSource1.Connection=DBCS.DBConnectionsGlobalDBHostDir=DBCS.DBConnection.HostDataSource1.Table=sDBTableName
 
  SetDBBrowserProperties()SetDataControlProperties()btnShowDumpData.Enabled=FalsepboxOnOff.Picture=Picture.Load(".../leds/green16.png")' pboxOnOff.Picture = Picture["leds/green16.png"] ' AlternativeFMain.Icon=Picture[sLocalSymbolsDir&/"project_icon.png"]EndPublicSubbtnDBSicherungDumpE_Click()btnShowDumpData.Enabled=TrueMAddOns.PlaySound(sGlobalSoundsDir&/"sound_e.wav")pboxOnOff.Picture=Picture["leds/red16.png"]GetDBDumpExec()Wait0.2pboxOnOff.Picture=Picture["leds/green16.png"]EndPublicSubbtnDBSicherungDumpS_Click()btnShowDumpData.Enabled=TrueMAddOns.PlaySound(sGlobalSoundsDir&/"sound_s.wav")pboxOnOff.Picture=Picture.Load(".../leds/red16.png")GetDBDumpShell()Wait0.2pboxOnOff.Picture=Picture.Load(".../leds/green16.png")EndPublicSubbtnHelp_Click()FHelp.ShowModal()EndPublicSubbtnShowDumpData_Click()FShowDump.ShowModal()btnShowDumpData.Enabled=FalseEndPublicSubbtnHelpLibrary_Click()DimclAsClasscC=Component.Load(":gambasbook/LPathProject:1.2")cl=Class.Load("Module1")Object.Call(cl, cl.Symbols[0], Zero)CatchMessage.Error(Error.Text)EndPrivateSubSetDBBrowserProperties()DataBrowser1.Labels=["ID","First name","Surname","Postcode","Residence","Street","E-mail address"]DataBrowser1.CanCreate=TrueDataBrowser1.CanDelete=TrueDataBrowser1.Editable=FalseDataBrowser1.View.Clear()DataBrowser1.Columns=["id","first name","surname","postcode","residence","street","e-mail address"]DataBrowser1.View.Columns[0].Width=30DataBrowser1.View.Columns[1].Width=90DataBrowser1.View.Columns[2].Width=90DataBrowser1.View.Columns[3].Width=45DataBrowser1.View.Columns[4].Width=120DataBrowser1.View.Columns[5].Width=125DataBrowser1.View.Columns[6].Width=1DataBrowser1.View.MoveTo(0,0)' … necessary!EndPrivateSubSetDataControlProperties()dcVorname.Field="first name"' Data control - DB fields are data-sensitive!dcNachname.Field="surname"dcPLZ.Field="postcode"cdWohnort.Field="residence"dcStrasse.Field="street"dcEMailAdresse.Field="e-mail"EndPrivateSubGetDBDumpShell()DimsShellCommand, sParameter1, sParameter2AsString' The file extension .sql is automatically supplemented with the Dump command!' The quotation marks prevent the interpretation of the blanks as a tax mark.sParameter1=Shell$(sGlobalDBHostDir&/sDBName)sParameter2=Shell$(sGlobalDBHostDir&/"dump."&sDBTableName)sShellCommand=Subst$("sqlite3 &1 .dump .quit > &2.sql", sParameter1, sParameter2)ShellsShellCommandWaitEndPrivateSubGetDBDumpExec()DimaExecCommandAsString[]DimsTempScriptPath, sLocalScriptPathAsStringsLocalScriptPath=sLocalScriptsDir&/"dump.sh"sTempScriptPath=Temp(File.BaseName(sLocalScriptPath))&".sh"' Absolute path!' The query is necessary because an existing file is not overwritten.IfNotExist(sTempScriptPath)ThenCopysLocalScriptPathTosTempScriptPath' Chmod sTempScriptPath To "rwxr--r--"  ' All rights are *explicitly* set anew!' Only the "Execute" permission is set for the owner - all others are retained.Chmod sTempScriptPathTo"..x......"' The file extension .sql is automatically supplemented with the Dump command!aExecCommand=[sTempScriptPath, sGlobalDBHostDir&/sDBName, sGlobalDBHostDir&/"dump."&sDBTableName]ExecaExecCommandWaitEndPrivateFunctionGetDirPath(sDirAsString)AsStringIfsDirNotBegins"."ThenReturnsDirElseReturnScan(sDir,"*/*")[1]EndifEndPrivateSubSetNotification(IconAsString, BaseTextAsString)DimsNotificationIcon, sNotificationBaseText, sNotificationTextAsStringsNotificationIcon=Icon' Options: "dialog-information" or "dialog-warning"sNotificationBaseText=BaseText' For example: "Attention!"sNotificationText=("The program demonstrates the use of file paths in Gambas.")MAddOns.SendNotification(sNotificationIcon, sNotificationBaseText, sNotificationText,-1)MAddOns.PlaySound(sGlobalSoundsDir&/"start.ogg")EndPublicSubbtnClose_Click()IfDBCS.DBConnection.OpenedThenDBCS.DBConnection.Close()FMain.Close()EndPublicSubForm_Close()DBCS.DBConnection.Close()End
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.2.0 Stream Input-Output Functions

The following sections introduce you to stream input-output functions. Examples supplement the descriptions.


# 6.2.0.1 OPEN



```
Stream = OPEN FileName [ FOR [ READ | INPUT ] [ WRITE | OUTPUT ] [ CREATE | APPEND ] [ WATCH ] ]
```

Opens a stream for reading, writing, creating or adding data - optionally also for watching. The stream must exist or the keyword CREATE must also be used.


# 6.2.0.2 CLOSE



```
CLOSE [ # ] hStream
hStream.Close()
```

Both statements close an open stream. These statements never fail. When you have a process stream open, it closes its standard input - just as if you were typing the key combination CTRL+D in a terminal. Standard input and standard output refer to the data channels in a console.


# 6.2.0.3 OPEN STRING



```
Stream = OPEN STRING [ aString ] [ FOR [ READ ] [ WRITE ] ]
```

Use the OPEN STRING command to access a string with the stream interface.
If you set the tag property with a value - like hStringStream.Tag = “open” - after opening, then you have the possibility to check if the StringStream has already been closed.


# 6.2.0.4 CLOSE StringStream



```
String = CLOSE [ # ] StringStream
```

Closing a string stream returns the complete contents of the internal string stream buffer.
Example


```
' Gambas class filePublicsLogAsStringPublichLogStreamAsStreamPublicfTemperatureAsFloatPublicSubForm_Open()hLogStream=OpenStringsLogForWriteSetLogHeader()LogTimer.Delay=1*1000LogTimer.Start()EndPublicSubbtnReadFromStreamString_Click()TextArea1.Text=Close#hLogStream
  hLogStream=OpenStringsLogForWriteSetLogHeader()EndPublicSubSetLogHeader()Write#hLogStream,"PROTOKOLL"&gb.NewLineWrite#hLogStream,"Datum: "&Format(Now,"dd. mmmm yyyy")&gb.NewLineWrite#hLogStream,String$(38,"-")&gb.NewLineEndPublicSubLogTimer_Timer()' fTemperature = Round(RS232_Value,-2)fTemperature=Round(Rnd(19,20),-1)Write#hLogStream,Format(Now,"hh:nn:ss")&"  |  "&"T = "&Str(fTemperature)&" °C"Write#hLogStream, gb.NewLineEnd
```

For practical use, you can also read the randomly generated temperature values in the above example by the temperature values of an RS232 interface with temperature sensor.
This is what a protocol extract looks like:


```
PROTOKOLL
Datum: 08. November 2018
--------------------------
09:36:31  |  T = 19,7 °C
09:36:32  |  T = 20,0 °C
09:36:33  |  T = 19,1 °C
09:36:34  |  T = 19,2 °C
09:36:35  |  T = 20,0 °C
09:36:36  |  T = 19,9 °C
```



# 6.2.0.5 WRITE

(a) Writing data of a specific data type
The first syntax writes an expression to the stream wStream by using its binary representation.
Example
You can save a string array to a file and export it that way. An array is written serialised to a file via Write. The content of the file has a gambas-specific file format:


```
PublichFileAsFilePublicaNamesAsString[]...' Data exportIfDialog.SaveFile()ThenReturnhFile=OpenDialog.PathForWriteCreateWrite#hFile, aNamesAsARRAYClose#hFile
```

(b) Writing the contents of a string
The second syntax writes a specified number of bytes - specified by the Length value - from the string wString to the specified stream.
If the stream is not specified, the standard output is used.If Length is not specified, the length of wString is used.
(c) Writing the memory content
The third syntax writes a specified number of bytes - specified by the Length value - from the Pointer memory address to the specified stream.


# 6.2.0.6 PRINT



```
PRINT [ # hStream , ] Expression [ { ; | ;; | , } Expression ... ] [ { ; | ;; | , }  ]
```

The instruction writes the contents of Expression to the stream hStream.


# 6.2.0.7 READ



```
(a)	Variable = READ [ # rStream ] AS Datatype
(b)	Variable = READ [ # rStream , ] iLength
```

(a) Read data of a specified data type *.  * The first syntax reads the stream as a data stream whose type is specified by Datatype.
Example
If an array was written serialised into a (file) stream via Write, the array can be read from it with Read:


```
PublichFileAsFilePublicaNamesAsString[]...' Data importIfDialog.OpenFile()ThenReturnhFile=OpenDialog.PathForReadaNames=Read#hFileAsARRAYClose#hFile
```

(b) Read the contents of a stream
Example


```
PublicsTemperatureDigitAsStringhRS232=NewSerialPortAs"hRS232"PublicSubhRS232_Read()sTemperatureDigit=Read#hRS232,Lof(hRS232)End
```



# 6.2.0.8 LINE INPUT



```
LINE INPUT [ # hStream , ] Variable
```

Reads a line of text from the text stream into a string variable.
If the stream hStream is not specified, then the standard input is used. The complete line is always read - with the exception of the end-of-line character. By default, it is the constant gb.Unix, which represents a single Chr$(10) character. The end-of-line character can be defined with the Stream.EndOfLine property.
Example 1


```
PublicSubAddTextToFile(FilePathAsString, TextAsString)DimhFileAsFileTryhFile=OpenFilePathForAppendPrint#hFile, TextFinallyIfExist(FilePath)ThenClose#hFileCatchMessage.Error("Error:\n"&Error.Text&" in "&Error.Where)EndPublicFunctionGetTextFromFile(FilePathAsString)AsStringDimhFileAsFileDimsLine, TextAsStringTryhFile=OpenFilePathForReadWhileNotEof(hFile)LineInput#hFile, sLine
    Text&=sLine&"\n"WendReturnTextFinallyIfExist(FilePath)ThenClose#hFileCatchMessage.Error("Error:\n"&Error.Text&" in "&Error.Where)EndPublicSubbtnAddTextToFile_Click()DimsLogDirAsStringsLogDir=Desktop.DataDir&/"gambasbook"&/Application.NameIfNotExist(sLogDir)ThenShell.MkDir(sLogDir)AddTextToFile(sLogDir&/"rs232.log","Time = "&Format(Now,"hh:nn:ss"))CatchMessage.Error("Error:\n"&Error.Text&" in "&Error.Where)EndPublicSubbtnGetTextFromFile_Click()DimsLogPathAsStringsLogPath=Desktop.DataDir&/"gambasbook"&/Application.Name&/"rs232.log"txaLog.Text=GetTextFromFile(sLogPath)End
```

Example 2
Characters are read in via standard input (terminal) to control the MediaPlayer. Notes can be found at:http://www.mplayerhq.hu/DOCS/man/de/mplayer.1.html.


```
' Gambas module filePublicmPlayerAsNewMediaPlayerPublicSubMain()IfmPlayerThenmPlayer=NullStart()EndPublicSubStart()mPlayer=NewMediaPlayer
  mPlayer.URL="http://mp3channels.webradio.rockantenne.de/classic-perlen"mPlayer.Play()mPlayer.Audio.Volume=1.0Print#File.Out,""Print#File.Out,"-------------------------------------"Print#File.Out,"Instructions for use"Print#File.Out,"-------------------------------------"Print#File.Out,"+  ▶ Audio.Volume ▲"Print#File.Out,"-  ▶ Audio.Volume ▼"Print#File.Out,"p  ▶ Player.Pause"Print#File.Out,"r  ▶ Player.Run (After a pause)"Print#File.Out,"m  ▶ Audio.Mute (off/on)"Print#File.Out,"q  ▶ Player.Stop"Print#File.Out,"-------------------------------------"Print#File.Out,"Each command is followed by <ENTER>."Print#File.Out,"-------------------------------------"Print#File.Out,""EndPublicSubApplication_Read()DimsInputAsStringDimfDeltaVolumeAsFloatIfmPlayer.Audio.Volume>1.1ThenfDeltaVolume=1.0ElsefDeltaVolume=0.1EndifLineInput#File.In, sInputSelectCasesInputCase"q"mPlayer.Stop()QuitCase"p"mPlayer.Pause()Case"r"' runmPlayer.Play()Case"m"' toggle switch: mute on/mute offmPlayer.Audio.Mute=NotmPlayer.Audio.MuteCase"+"IfmPlayer.Audio.Volume>0.09AndmPlayer.Audio.Volume<9.0ThenmPlayer.Audio.Volume+=fDeltaVolumeEndifCase"-"IfmPlayer.Audio.Volume>0.2AndmPlayer.Audio.Volume<10.0ThenmPlayer.Audio.Volume-=fDeltaVolumeEndifEndSelectEnd
```

In this example, characters are output to standard output (File.Out) and read from standard input (File.In). The standard error output is not used.


# 6.2.0.9 INPUT FROM STREAM



```
INPUT FROM sStream
```



# 6.2.0.10 INPUT FROM DEFAULT



```
INPUT FROM DEFAULT
```

Redirects the standard input to the state before the last redirection.


# 6.2.0.11 OUTPUT TO STREAM



```
OUTPUT TO sStream
```



# 6.2.0.12 OUTPUT TO DEFAULT



```
OUTPUT TO DEFAULT
```

Redirects the standard output to the state before the last redirection.


# 6.2.0.13 ERROR TO STREAM



```
ERROR TO eStream
```

Redirects the standard error output to the stream eStream. The standard error output is used by the ERROR and DEBUG instructions. Calls to the instruction can be nested.


# 6.2.0.14 ERROR TO DEFAULT



```
ERROR TO DEFAULT
```

Redirects the standard output to the state before the last redirection.


# 6.2.0.15 SEEK



```
SEEK [ # ] hStream , iPosition
```

Positions the stream pointer for the next read/write. If iPosition is negative, then the stream pointer is moved to a location relative to the end of the file. To move the stream pointer to the end of a file, you must use the Lof(hStream) function.
Example
A text file is read in different ways. After variant 1, the stream pointer is set back to the beginning (position 0) and the file is read out completely again after a second variant:


```
hFile=Open$sCurrentFilePathForInput' Variant 1hFile=Open$sCurrentFilePathForInputWhileNotEof(hFile)LineInput#hFile, sLine
    sContent=sContent&sLine&gb.NewLineWendsContent=sContent&gb.NewLine' Variant 2seek">Seek#hFile,0ForEachsLineInhFile.LinessContent=sContent&sLine&gb.LfNextsContent=sContent&gb.NewLine
```



# 6.2.0.16 Seek



```
iPosition = Seek ( Stream )
```

Returns the current value of the stream pointer of the specified stream. The return value iPosition is an integer number of type Long. Note: Many stream types, such as process or socket, do not have a stream pointer.


# 6.2.0.17 LOCK



```
hStream = LOCK sPath
```

Use LOCK and the specified path sPath to achieve a system-wide stream lock. If the specified stream is already locked by another process (advisory look), the command will fail. You can unlock a locked stream with the command UNLOCK.
Example
To safely prevent a second programme start, you can place a system-wide lock on a (pseudo) file. If another programme is started, an error is triggered in (YX) because a lock already exists. Do not forget to release the lock when you exit the programme.


```
' Gambas class filePublichLockFileAsFilePublicsFilePathAsStringPublicSub_new()sFilePath=Desktop.DataDir&/"lock.lock"TryhLockFile=LocksFilePath' <--- Step 1 (XY)IfErrorThenMessage.Warning(Subst("&1 '&2' &3",("There is already an instance of"),Application.Name,"!"))FMain.Close()EndifEnd' Main program ...PublicSubForm_Close()TryUnlockhLockFile' <--- Step 2FMain.Close()End
```



# 6.2.0.18 LOCK WAIT



```
Stream = LOCK Path fWait Delay
```



# 6.2.0.19 UNLOCK



```
UNLOCK [ # ] Stream
```

Unlocks a stream previously locked by a LOCK command. Closing the stream also automatically unlocks the stream.


# 6.2.0.20 EOF (end of file)



```
Result = Eof ( [ hStream AS Stream ] ) AS Boolean
```

The function returns TRUE when the end of the stream has been reached.
If hStream is not specified, the standard input is used.The behaviour of Eof() depends on the stream blocking mode: (1) If the stream is in non-blocking mode, then Eof() returns the function value True if at least one byte can be read from the stream. (2) If, on the other hand, the stream is in blocking mode, Eof() first waits for data before checking whether anything can be read.


```
hFile = Open $sCurrentFilePath For Input
  While Not Eof(hFile)
    Line Input #hFile, sLine
    sContent = sContent & sLine & gb.NewLine
  Wend
```



# 6.2.0.21 LOF (length of file)



```
Length = Lof ( hStream AS Stream ) AS Long
```



# 6.2.0.22 FLUSH



```
FLUSH [ [ # ] Stream ]
```

The data of a buffered stream is output immediately - the buffer is emptied. If no stream is specified, the data of any open stream is output. However, you cannot use the flush instruction to request data from another process if you want to read its data from a stream.
Example
The prompt “Enter your name: ” is to be displayed in the terminal and the cursor is to remain - as usual - in the same line for entering the answer. This is accomplished by the double semicolon after the print instruction. It outputs a space and suppresses the line break that Print normally appends to the output. Now, however, terminals are line-buffered. This means that the Gambas programme receives the printed string and buffers it until it reads the next end-of-line character. Only then is the data sent to the terminal. Since the line break is missing after the print instruction in *** due to the double semicolon, you would not see a prompt in the terminal (without flush), although the Gambas programme is already at the line input instruction and waiting for input. Why don't you try it without flush and just type your name blindly. It will work, but you won't see the prompt until after the second print instruction, which returns an end-of-line! With Flush you tell Gambas to print the data immediately. This will make the programme work as expected.


```
' Gambas module filePublicSubMain()DimsNameAsStringPrint"Enter your name:";;' ***FlushLineInputsNamePrint"Good to know that you are "&sName;PrintEnd
```

Programme start in the project directory:


```
hans@mint-183~/GB3BUCH/6K_Stream/6.2.0_Stream-Input-Output-Funktionen/Projekte/Flush $ gbr3 flush.gambas
Enter your name: Mister Red
Good to know that you are Mister Red
```



# 6.2.0.23 NAMED PIPE



```
hStream = PIPE sPipeName FOR [ READ ] [ WRITE ] [ WATCH ]
hStream = OPEN PIPE sPipeName FOR [ READ ] [ WRITE ] [ WATCH ]
```

A detailed description of Named Pipes can be found in Chapter 6.2.2.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# 6.2.1 Stream Input-Output Functions - Projects

This chapter provides you with the projects (archives) from which the source codes for chapter 6.2.0 Stream Input Output Functions were taken.
Example 7
Figure 6.2.1.1: File content - display characters - as far as displayable
Figure 6.2.1.2: File contents - display binary
Figure 6.2.1.3: File content - display hexadecimal


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.2.2 Named Pipe

A named pipe provides a unidirectional communication channel (half-duplex) between processes within the same system. It is a key feature of a named pipe that the flowing data is transient. Once data has been read, it cannot be read again afterwards.


```
hNamedPipe = PIPE sNamedPipePath FOR [ READ ] [ WRITE ] [ WATCH ]
hNamedPipe = OPEN PIPE sNamedPipePath FOR [ READ ] [ WRITE ] [ WATCH ]
```

The two equivalent statements open a named pipe for reading, writing or both. If the pipe does not exist, it will be created automatically.
Example:


```
PublichNamedPipeAsFilePublicsNamedPipePathAsStringPublicSubForm_Open()sNamedPipePath=Temp("FIFO1")hNamedPipe=PipesNamedPipePathForReadWatch...End
```

Notes:
Figure 6.2.2.1: Note
You already know how pipes work from the sequential processing of commands in a console. The output of the command ls in the following example is a list of all files in the folder BildTon/Flumen including all subfolders (-R), which is used as input for the command grep. The grep command counts the number of png and PNG files - specified via the options -i and -c and the filter .png. For this to work, there is a pipe symbol '|' between the two commands:


```
hans@mint-183 ~ $ ls -R ~/BildTon/Blumen | grep -ic '\.png'
78
```



# 6.2.2.1 Project

The following project NamedPipeC represents a named pipe as an object that reads and processes data from the output of a process in a console as input - similar to the example above.


```
Der Quelltext wird vollständig angegeben:[1]' Gambas class file[2][3]PublicsNamedPipePathAsString[4]PublichNamedPipeAsFile[5][6]PublicSubForm_Open()[7]FMain.Resizable=True[8]sNamedPipePath="/tmp/LS2FIFO"[9]IfExist(sNamedPipePath)ThenKillsNamedPipePath[10]End[11][12]PublicSubbtnCreateNamedPipe_Click()[13]txaOutput.Clear()[14]btnCreateNamedPipe.Picture=Picture["icon:/16/apply"][15]btnCreateNamedPipe.Text="Named Pipe was created and waits for data to read ..."[16]Wait[17]CreateNamedPipe()[18]End[19][20]PublicSubCreateNamedPipe()[21][22]DimsLineAsString[23][24]hNamedPipe=OpenPipesNamedPipePathForRead[25]Do[26]Read#hNamedPipe, sLine,-256[27]IfNotsLineThenBreak[28]txaOutput.Insert(sLine)[29]Loop[30]IfExist(sNamedPipePath)ThenKillsNamedPipePath[31]btnCreateNamedPipe.Picture=Picture["icon:/16/package"][32]btnCreateNamedPipe.Text="Create Named Pipe"[33]IfhNamedPipeThenClosehNamedPipe[34]End[35][36]PublicSubbtnGetInformation_Click()[37]Message.Info("After a named pipe has been created and opened for reading, the application blocks until data can be read from the named pipe.")[38]End[39][40]PublicSubForm_Close()[41]IfExist(sNamedPipePath)ThenKillsNamedPipePath[42]End
```

Notes:
Figure 6.2.2.1.1: Note
Figure 6.2.2.1.2: Displaying the data from the Named Pipe
A named pipe is a volatile FIFO memory, therefore it is empty after reading data!


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.3 File and Directory Functions

These file and directory functions as well as supplementary functions are presented in the following sections:


# 6.3.1 COPY ... TO ...



```
COPY SourcePath TO DestinationPath
```

Example 1:


```
PublicsScriptPathAsStringPublicsTempScriptPathAsStringPublicSubForm_Open()sScriptPath="./data/test_script.sh"sTempScriptPath=Temp(File.BaseName(sScriptPath))CopysScriptPathTosTempScriptPath
  Chmod sTempScriptPathTo"r-xr-x---"…End
```

A bash script is copied from the data folder inside the project folder into a temporary file /tmp/gambas.1000/5503/test_script.tmp. This is necessary here because only then are the permissions set so that the script becomes executable for the user and the group.
Example 2:


```
PublicSubbtnCopyFile_Click()' Based on an idea by Willy RaetsDimsSourcePath, sDestinationPath, sFilenameAsStringsSourcePath=User.Home&/"DW"sDestinationPath=User.Home&/"GB3BUCH"sFileName="dokuwiki_syntax.txt"' Check whether the file to be copied exists.IfExist(sSourcePath&/sFileName)Then' Now check if copyto directory existsIfNotExist(sDestinationPath)ThenTryMkdirsDestinationPathIfErrorThenMessage.Error("Error! "&Error.Text)ReturnEndifEndif' Now check if copyto file existsIfNot(Exist(sDestinationPath&sFileName))ThenTryCopysSourcePath&/sFileNameTosDestinationPath&/sFileNameElse' If Exists first remove old file then copy new fileKillsDestinationPath&/sFileNameTryCopysSourcePath&/sFileNameTosDestinationPath&/sFileNameIfErrorThenMessage.Error("Error! "&Error.Text)ReturnEndifEndifElseMessage.Error("File not exist: "&sFileName)ReturnEndifMessage.Info("File '"&sFileName&"' successfully copied!")End
```

The text file dokuwiki_syntax.txt from the directory /home/hans/DW is copied to the directory /home/hans/GB3BUCH. Various checks and messages ensure successful copying of the specified file.


# 6.3.2 DFREE



```
DFree( sPath AS String ) AS Long
```

Returns the size of the free space (in bytes) of the mass storage on which the directory sPath is located. Always compare the result with a comparison value of long integer data type, as storage media can have more than 2^32 bytes capacity.
Example 1:


```
Dim ilFree As Long

ilFree = DFree(User.Home &/ "DW") ' 346.218.151.936
Print Round(ilFree / 10 ^ 9, -3) & " GB" ' 346.218 GB
```

Interpret the result to mean that there is about 346GBof free space left on the hard disk in the author's PC.
Example 2:


```
Print DFree(“/media/hans/USB-STICK“)
```

To determine the size of the free space on the connected USB stick in the Gambas console.


# 6.3.3 EXIST



```
Exist( sPath ) As Boolean
```

Indicates whether a file or directory with the path sPath exists.
Example:


```
IfNotExist(User.Home&/"Destination")ThenMkDir(User.Home&/"Destination")Endif
```

The directory 'Destination' is only created with the specified path if it does not exist.


# 6.3.4 ISDIR



```
IsDir ( sPath AS String ) AS Boolean
```

Returns True if the path specification points to a directory. If the path sPath does not exist or if the path does not point to a directory, then this function returns False.
Example:


```
DimsPathAsStringsPath=User.Home&/"test33"IfNotExist(sPath)ThenMkdirsPathPrint"Is Directory? = ";IsDir(sPath)' TRUEsPath=User.Home&/"test34"IfNotExist(sPath)ThenFile.Save(sPath,"CONTENT")Print"Is Directory? = ";IsDir(sPath)' FALSE
```

In a directory, no file can have the same name as a directory. Hence the change from test33 to test34.


# 6.3.5 KILL



```
KILL FilePath
```

Deletes an existing file whose (absolute) path is in the string FilePath.
Example:


```
DimsSourcePath, sDestinationPathAsStringsSourcePath="./css"&/fCSSFileName
sDestinationPath=sWorkDirectory&/"css"&/fCSSFileNameIfStat(sSourcePath).LastChange>Stat(sDestinationPath).LastChangeThenTryKillsDestinationPathTryCopysSourcePathTosDestinationPathEndif
```

If a more recent css file exists in the 'css' directory in the project directory, then the original css file is deleted and the current css file is copied to the existing working directory.
On the other hand, if you want to delete a directory, use the following RMDIR statement.


# 6.3.6 RMDIR



```
RMDIR DirectoryPath
```

Deletes the directory specified by DirectoryPath, but it must be empty!
Example:


```
IfRDir(DirectoryPath).Count>0ThenMessage.Warning("The specified directory is not empty and therefore cannot be deleted.")ReturnElseTryRmdirDirectoryPathMessage.Info("The specified directory was successfully deleted!")Endif
```

First it is checked whether the specified directory is empty. If the directory is empty, it is deleted - otherwise a warning is issued and the deletion process is aborted.
Note: For a good alternative, use the function Shell.RmDir( DirectoryPath As String) from the component gb.util. It removes the specified directory by removing its entire contents recursively!


# 6.3.7 LINK



```
LINK sOriginalPath TO sSoftLinkPath
```

Creates a symbolic link (softlink) with path sSoftLinkPath pointing to the target file or directory sOriginalPath.
Example:


```
DimsSoftLinkPath, sOriginalPathAsStringsOriginalPath="/home/hans/DW/0_DW_Convert/librewriter2dokuwiki.gambas"sSoftLinkPath="/home/hans/Schreibtisch/Formatting_DokuWiki_Tables"IfNotExist(sSoftLinkPath)ThenTryLinksOriginalPathTosSoftLinkPathIfErrorThenMessage.Error(Error.Text)Endif
```

A permanent link is created on the desktop with the name 'Formatting_DokuWiki_Tables' to a Gambas executable file.


# 6.3.8 MKDIR



```
MKDIR DirectoryPath
```

Creates the directory specified by DirectoryPath. By default, the MKDIR command creates a directory with the rights 0755. If you need other rights, set them with the CHMOD instruction. If at least one parent directory of the specified path does not exist, an error is triggered.
Example:


```
DimsDirectoryPathAsStringDimFileInfoAsStatsDirectoryPath=User.Home&/"Test18"IfNotExist(sDirectoryPath)ThenMkdirsDirectoryPath
   FileInfo=Stat(sDirectoryPath)PrintOct(FileInfo.Mode)' Output: 755Endif
```

Only if the specified directory does not exist, it will be created. With the value of the Mode property of the Stat object FileInfo, you can display the rights of the created directory in a suitable format.
Note: As an alternative, use the Shell.MkDir( DirectoryPath As String) function from the gb.util component, as a directory with DirectoryPath as the directory path and all its parent (parent) directories will be created.


# 6.3.9 MOVE ... TO ...



```
MOVE OldName TO NewName
```

Renames or moves a file or directory. Oldname and NewName can be in different directories - but must be on the same device!
Alternatively, use the function Move(Source As String, Destination As String) with Source as the path of the source file and Destination as the destination path. This function moves a file or directory - even if they are on different devices.
Example 1:
If you want to move a file - regardless of its location - proceed like this:


```
TryMoveOldFilePathToNewFilePathIfErrorThenTryCopyOldFilePathToNewFilePathIfNotErrorThenKillOldFilePathEndif
```

A file A with the path OldFilePath is moved. If an error occurs, the file A with the path OldFilePath is copied to NewFilePath. If no error occurs, the file A is finally deleted.
Example 2:


```
PublicSubRenameDirectory(OldDirPathAsString, NewDirPathAsString)TryMoveOldDirPathToNewDirPathIfErrorThenMessage.Error("Error when renaming."&gb.Lf&Error.Text&" !")ReturnEndifEndPublicSubbtnRenameDirectory_Click()RenameDirectory(User.Home&/"Test18",User.Home&/"Test19")End
```

The first time the procedure is called, the directory Test18 is renamed to Test19. With each subsequent call, an error is triggered and the error message 'Error when renaming. File already exists!' is displayed.
Example 3:


```
PublicSubMoveDirectory(OldDirPathAsString, NewDirPathAsString)TryMoveOldDirPathToNewDirPathIfErrorThenMessage.Error("Error when moving."&gb.Lf&Error.Text&" !")PrintError.TextReturnEndifEndPublicSubbtnMoveDirectory_Click()MoveDirectory(User.Home&/"Test18",User.Home&/"TWX"&/"Test18")End
```

The first time the procedure is called, the directory Test18 is moved to the existing directory TWX. With each subsequent call, an error is triggered and the error message 'Error when renaming. File already exists!' is displayed.


# 6.3.10 MOVE ... KILL



```
MOVE OldName KILL NewName
MOVE OldName DOWNTO NewName ' Considered obsolete
```

Renames or moves a file or directory, deleting the target file first, and the two operations are atomic. OldName and NewName can be in different directories but must be on the same device. Normally, moving an existing file will trigger the 'file already exists' error. In this case, the kill instruction acts like an option that first deletes the file existing in the target and only then moves the file.
The function replaces the MOVE OldName DOWNTO NewName function chain, which is considered obsolete.
Example:


```
PublicSubbtnMoveKill_Click()DimsSourcePath, sDestinationPath, sFilenameAsStringsSourcePath=User.Home&/"DW"sDestinationPath=User.Home&/"GB3BUCH"sFileName="dokuwiki_syntax.txt"' Check whether the file to be moved exists.IfExist(sSourcePath&/sFileName)Then' Now check if moveto directory existsIfNotExist(sDestinationPath)ThenTryMkdirsDestinationPathIfErrorThenMessage.Error("Error! "&Error.Text)ReturnEndifEndif' Now the file is moved …MovesSourcePath&/sFileNameKillsDestinationPath&/sFileNameElseMessage.Error("File not exist: "&sFileName)ReturnEndifMessage.Info("File '"&sFileName&"' successfully moved!")End
```

Variant:


```
PublicSubbtnMoveKill_Click()DimsSourcePath, sDestinationPath, sFilenameAsStringsSourcePath=User.Home&/"DW"sDestinationPath=User.Home&/"GB3BUCH"sFileName="dokuwiki_syntax.txt"MovesSourcePath&/sFileNameKillsDestinationPath&/sFileNameMessage.Info("File '"&sFileName&"' successfully moved!")CatchMessage.Error(Error.Text)End
```

The file 'dokuwiki_syntax.txt is moved after both variants. If a file with the same name already exists in the target directory, it will be (automatically) deleted beforehand - without generating an error.


# 6.3.11 DIR



```
ArrayOfFilenames = Dir ( sDirectory AS String [ , Pattern AS String , Filter AS Integer ] ) AS String[]
```

The function returns a string array containing only the names of the files and directories in the specified directory sDirectory that match the pattern and filter. You must assemble the file path from the file or directory names and the sDirectory parameter.
The filter can be one of the following constants:
By specifying the pattern and filter appropriately, it is possible, for example, to search specifically for a single file or for a particular (subset) of all files in the specified base directory.
Example 1:


```
[1]PublicSubScanDirectory()[2][3]DimsDirectoryPath, sPattern, sDirFileNameAsString[4]DimsFilterAsInteger[5]DimbMode, bSortedAsBoolean[6][7]sDirectoryPath=User.Home&/"BildTon"[8]sPattern="[^0-9P]*.{png,jpg,gif}"[9]sFilter=gb.File' gb.Directory | gb.File + gb.Directory[10]bSorted=True[11]bMode=gb.Ascent' gb.Descent | gb.Ascent[12][13]IfbSortedThen[14]IfDir(sDirectoryPath, sPattern, sFilter).Sort(bMode).Count=0Then[15]Message.Info("The searched set is empty ...")[16]Return[17]Else[18]ForEachsDirFileNameInDir(sDirectoryPath, sPattern, sFilter).Sort(bMode)[19]PrintsDirFileName[20]Next[21]Endif[22]Else[23]IfDir(sDirectoryPath, sPattern, sFilter).Count=0Then[24]Message.Info("The searched set is empty ...")[25]Return[26]Else[27]ForEachsDirFileNameInDir(sDirectoryPath, sPattern, sFilter)[28]PrintsDirFileName[29]Next[30]Endif[31]Endif[32][33]End[34][35]PublicSubbtnScanDirectory_Click()[36]ScanDirectory()[37]End
```

With the help of the procedure ScanDirectory(), you can have the set of search results output in the console after specifying the directory, the pattern, the filter, the sorting and the sorting order (lines 7 to 11).
The pattern in example 1 is chosen so that only files with the extension png, jpg and gif are in the result set - but their names do not begin with a digit from the set [0-7] or with a P. However, you can also process the results further in lines 19 and 28. It would be conceivable to store all paths of the (image) files of the result set in a string array.
In the following examples, the (base) directory, the pattern, the filter, the sorting and the sorting order are changed and the results are commented.
Example 2:


```
sDirectoryPath=User.HomesPattern="[^.]*.txt"sFilter=gb.FilebSorted=FalsebMode=gb.Ascent
```

Only non-hidden files with the extension .txt in the home directory are displayed. The result set is not sorted.
Example 3:


```
sDirectoryPath=User.HomesPattern=".[^A-Z]*"sFilter=gb.DirectorybSorted=TruebMode=gb.Ascent
```

Only hidden directories in the home directory that do not begin with a capital letter are listed. The result set is sorted.


# 6.3.12 RDIR



```
ArrayOfFilenames = RDir ( BaseDirectory AS String [ , Pattern AS String , Filter AS Integer , FollowLink AS Boolean ] ) AS String[]
```

Returns a string array containing the names of the files and directories in the specified base directory and its subdirectories that match the pattern and filter. The notes on the pattern and filter for the DIR function apply. If the optional parameter FollowLink is TRUE, symbolic links to directories are followed. Otherwise they are processed like normal files.
Example:


```
[1]PublicSubScanDirectoryR()[2][3]DimsDirectoryPath, sPattern, sDirFileNameAsString[4]DimsFilterAsInteger[5]DimbMode, bSortedAsBoolean[6][7]sDirectoryPath=User.Home&/"ImageSound"[8]sPattern="*fractal_0.png"[9]sFilter=gb.File[10]bSorted=False[11]bMode=gb.Ascent[12][13]IfbSortedThen[14]IfRDir(sDirectoryPath, sPattern, sFilter).Sort(bMode).Count=0Then[15]Message.Info("The searched set is empty ...")[16]Return[17]Else[18]ForEachsDirFileNameInRDir(sDirectoryPath, sPattern, sFilter).Sort(bMode)[19]PrintsDirFileName[20]Next[21]Endif[22]Else[23]IfRDir(sDirectoryPath, sPattern, sFilter).Count=0Then[24]Message.Info("The searched set is empty ...")[25]Return[26]Else[27]ForEachsDirFileNameInRDir(sDirectoryPath, sPattern, sFilter)[28]PrintsDirFileName[29]Next[30]Endif[31]Endif[32][33]End[34][35]PublicSubbtnScanDirectoryR_Click()[36][37]ScanDirectoryR()[38][39]End
```

The returned file paths are relative to the searched directory. However, the pattern always corresponds to the full relative path, not just the file name! This is not only reflected in the pattern sPattern = “*fractal_0.png”, but also in the result of the scan: Fractals/fractal_0.png with the specification of the applicable directory. The same applies to the recursive search in the directory tree: choose the pattern and the filter with care.


# 6.3.13 Excursus 1 - Determining the size of a directory

1st variant - shell instruction


```
DimilSourceSizeAsLongDimsSource, sResult, sProjectFolderAsStringsProjectFolder="GambasBookProjects"sDestination="/media/hans/DW_4GB"&/sProjectFolder
sSource=User.Home&/sProjectFolderExec["du","-sb", sSource]TosResult
 
ilSourceSize=CLong(Split(sResult,"\t")[0])PrintilSourceSize
```

2nd variant


```
PublicFunctionGetDirSize(sDirAsString)AsLong' Coding and adaptation of Tony Morehen and Fabien BodardDimsFileAsStringDimsPathAsStringDimhStatAsStatDimiSizeAsLongForEachsFileInDir(sDir)sPath=sDir&/sFile
     hStat=Stat(sPath)WithhStatIf.Type=gb.DirectoryTheniSize+=GetDirSize(sPath)' Recursion!EndifiSize+=.SizeEndWithNextReturniSizeEndPublicSubbtnGetDirSize_Click()DimilDirSizeAsLongTryilDirSize=GetDirSize(User.Home&/"GambasBookProjects")IfErrorThenMessage.Error(Error.Text)PrintilDirSizeEnd
```



# 6.3.14 Digression 2 - Create file



```
File.Save(sFilePath, "")
File.Save(sFilePath, sContent)
```

The statements create an empty file with the specified (absolute) file path sFilePath or a file with the content sContent. No error is raised if the file already exists, because then its content is overwritten!


```
PrivateSubCreateTextFiles(sPathDirAsString, iNumberAsString)DimsFileNameAsStringDimiAsIntegerFori=1ToiNumber
    sFileName=Hex$(Rand(0,2^32-1))' Random file nameIfNotExist(sPathDir&/sFileName&".txt")ThenFile.Save(sPathDir&/sFileName&".txt","Text line 1.\nText line 2.")EndifNextEnd
```

The procedure CreateTextFiles(…) creates a given number (iNumber) of text files - with content - with the specified (absolute) file paths. The (base) file name is a random string.


# 6.3.15 Digression 3 - Copy Directory

The task is to copy a directory - with contents:


```
PublicSubCopyDir(SourceAsString, DestinationAsString)DimsFileAsStringIfIsDir(Source)ThenIfNotExist(Destination)ThenMkdirDestinationForEachsFileInDir(Source)IfNotExist(Destination&/sFile)ThenCopyDir(Source&/sFile, Destination&/sFile)' RecursionWaitEndifNextElseIfNotExist(Destination)ThenTryCopySourceToDestinationIfErrorThenMessage.Error(Error.Text)ReturnWaitEndifEndifEndPublicSubbtnBackup_Click()CopyDir(User.Home&/"GambasBookProjects","/media/hans/DW_4GB"&/"GambasBookProjects")Print"DONE!"End
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.4 Class Shell (gb.util)

The Shell class of the gb.util component provides you with three static methods to create, delete or move directories (recursively!) with content.


# 6.4.1 Shell.MkDir



```
Static Sub Shell.MkDir (sDirPath As String )
```

This method creates a directory - with sDirPath as the directory path - and all its parent (parent) directories. All paths must always be specified as absolute directory paths.


# 6.4.2 Shell.RmDir



```
Static Sub Shell.RmDir ( sDirPath As String [ , bForce As Boolean ] )
```

Removes the specified directory by recursively removing its entire contents and then the directory itself!
If Force is not set (default), then attempting to remove the following directories will result in an error:


# 6.4.3 Shell.Move



```
Static Sub Shell.Move( sSource As String, sDestination As String )
```

Moves a file or directory - with content - even if the source and destination are on different devices.


# 6.4.4 Project

In the project presented, all three methods are used in a variety of ways.
Figure 6.4.4.1: Directory B3_Last with 10 text files has been created.
Figure 6.4.4.2: The directory B3_Last was moved with content
Figure 6.4.4.3: All created directories have been successfully deleted
The source code is given in full and then commented:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]FMain.Resizable=False[5]End[6][7]PublicSubbtnShellMkDir_Click()[8][9]DimsPathAsString[10][11]sPath=User.Home&/"B1_First/B2_Second/B3_Last"[12][13]IfNotExist(sPath)Then' Query NOT required[14]Shell.MkDir(sPath)[15]Endif[16][17]CreateTextFiles(sPath,10)[18]DirChooser1.ShowFile=True[19]DirChooser1.ShowDetailed=True[20]DirChooser1.Reload()[21]DirChooser1.SelectedPath=sPath[22][23]End[24][25]PublicSubbtnShellMove_Click()[26][27]DimsMessageAsString[28][29]IfNotExist(User.Home&/"Destination")Then[30]Shell.MkDir(User.Home&/"Destination")[31]Endif[32]TryShell.Move(User.Home&/"B1_First/B2_Second/B3_Last",User.Home&/"Destination")[33]' Try Shell.Move(User.Home &/ "B1_First/B2_Second", User.Home &/ "Destination")[34]IfErrorThen[35]sMessage=("Error moving the specified directory!")[36]sMessage&=gb.NewLine&Error.Text&"."[37]sMessage&=gb.NewLine&"Error-Code = "&Error.Code[38]Message.Error(sMessage)[39]Shell.RmDir(User.Home&/"Destination")[40]Return[41]Endif[42]DirChooser1.ShowFile=True[43]DirChooser1.ShowDetailed=True[44]DirChooser1.Reload()[45]DirChooser1.SelectedPath=User.Home&/"Destination/B3_Last"[46]' DirChooser1.SelectedPath = User.Home &/ "Destination/B2_Second/B3_Last"[47][48]End[49][50]PublicSubbtnShellRmDir_Click()[51][52]IfExist(User.Home&/"B1_First")Then[53]TryShell.RmDir(User.Home&/"B1_First")[54]IfErrorThen[55]Message.Error("Deleting the specified directory resulted in an error!")[56]Endif[57]Endif[58][59]IfExist(User.Home&/"Destination")Then[60]TryShell.RmDir(User.Home&/"Destination")[61]IfErrorThen[62]Message.Error("Deleting the specified directory resulted in an error!")[63]Endif[64]Endif[65][66]DirChooser1.Reload()[67]DirChooser1.ShowFile=False[68]DirChooser1.ShowDetailed=False[69][70]End[71][72]PrivateSubCreateTextFiles(sPathDirAsString, iNumberAsString)[73][74]DimsFileNameAsString[75]DimiAsInteger[76][77]Fori=1ToiNumber[78]sFileName=Hex$(Rand(0,2^32-1))' Random file name[79]IfNotExist(sPathDir&/sFileName&".txt")Then[80]File.Save(sPathDir&/sFileName&".txt","Text line 1.\nText line 2.")[81]Endif[82]Next[83][84]End
```

Comment:
Figure 6.4.4.4: Error during moving


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.5 Class File

This class is used for
You cannotdirectlycreate this class. You must use the OPEN statement.


# 6.5.1 Properties

The File class has these properties:
Table 6.5.1.1 : Properties of the class File
Example of the use of the Lines property:


```
Dim hStream As Stream
Dim aString As String
...
For Each aString In hStream.Lines
  ...
Next
```



# 6.5.2 Static properties

The File class has these three static properties:
Table 6.5.2.1 : Static properties of the class File
For appropriate information, see the page:https://wiki.ubuntuusers.de/Shell/Umleitungenfor the following example. It shows how to read and write on standard input, standard output and standard error output and presents the use of the static properties File.In, File.Out and File.Err. Each line written on standard input is returned first on standard output and then on standard error output.


```
PublicSubMain()DiminputLineAsString' Loop until the end of the standard input file streamWhileNotEof(File.In)' Read a line from standard inputLineInput#File.In, inputLine' Read data' Print to standard outputPrint#File.Out, inputLine' Write data' Print to standard errorPrint#File.Err, inputLine' Write dataWendEnd
```

Create a project (command line application ioe (input output error)) and place the above code in the Main.module file. When you run this program in the Gambas IDE, the application seems to hang. If you type some text in the console window of the IDE and press enter, each line is returned twice in the console. However, since the application never sees the end of the file for the standard input stream, you have to stop the project. To get a better idea of what the example does, create a Gambas executable and name it ioe.gambas. Open a terminal and change to the directory where you saved the executable.
If you enter the following command:


```
ls -a | ./ioe.gambas
```

you will see each output line of the ls -a command, but always twice. Once from the standard output (stdout) and once from the standard error output (stderr). However, the application now sees the end of the standard input stream and thus ends correctly. With the command


```
ls -a | ./ioe.gambas > files.txt
```

you redirect the standard output stream of the ls -a command to a file on the one hand and you see the standard error output stream in the terminal window on the other.


# 6.5.3 Methods

The File class has these six methods:
Table 6.5.3.1 : Methods of the class File


# 6.5.4 Events

The class has these two selected events, among others:
Table 6.5.4.1 : Events of the File class


# 6.5.5 Static methods

Of particular interest are the following (static) methods - especially the Load() and Save() methods:
Table 6.5.5.1 : Static methods of the class File


# 6.5.6 Examples - Using selected methods of the File class



# 6.5.6.1 Example 1 - Displaying file path properties



```
PublicSubbtnDisplayProperties_Click()IfDialog.OpenFile()ThenReturnPrint"Datei-Pfad: "&Dialog.PathPrint"Verzeichnis der Datei: "&File.Dir(Dialog.Path)Print"Dateiname (mit Extension): "&File.Name(Dialog.Path)Print"Dateiname (ohne Extension): "&File.BaseName(Dialog.Path)Print"Datei-Extension (ohne Punkt): "&File.Ext(Dialog.Path)End
```



# 6.5.6.2 Example 2 - File.Load(Path) and File.Save(Path)

You can use file filters in a file open or file save dialogue. With regular expressions, however, you can set the filters in a much more differentiated way:
The last filter selects all files in the current directory that begin with the letter string 'tb', which is followed by a digit from the range 1-3, and then a sequence of arbitrary characters. The extension is either .txt or .log.For example, a filter of the following type is often used for text files:


```
Private$sCurrentFilePathAsStringPublicSubbtnFileLoad_Click()Dialog.Filter=["*.txt;*.log;*.xml;*.conf","Text files"]IfDialog.OpenFile()ThenReturn$sCurrentFilePath=Dialog.PathtxaTextArea.Text=File.Load(Dialog.Path)CatchMessage.Info(Error.Text)EndPublicSubbtnFileSave_Click()IfDialog.SaveFile()ThenReturnFile.Save(Dialog.Path, txaTextArea.Text)CatchMessage.Info(Error.Text)End
```

6.5.6.3 Example 3 - Using selected static methods of the class File


```
DimfilePathAsStringPrint"* A standard type of path"filePath="/my/path/file.ext"PrintfilePathPrintFile.SetBaseName(filePath,"new-name")Print"\\n* Try a path with two extensions"filePath="/my/path/file.ext1.ext2"PrintfilePathPrintFile.SetBaseName(filePath,"new-name")Print"\\n* A path with just an extension"filePath=".ext"PrintfilePathPrintFile.SetBaseName(filePath,"new-name")Print"\\n* A path without a file name"filePath="/my/path/.ext"PrintfilePathPrintFile.SetBaseName(filePath,"new-name")Print"\\n* A path without a file name or extension"filePath="/my/path/"PrintfilePathPrintFile.SetBaseName(filePath,"new-name")
```

Outputs in the console of the IDE:


```
*A standardtypeof path/my/path/file.ext/my/path/new-name.ext*Try a path with two extensions/my/path/file.ext1.ext2/my/path/new-name.ext2*A path with just an extension
.ext
new-name.ext*A path without afilename/my/path/.ext/my/path/new-name.ext*A path without afilename or extension/my/path//my/path/new-name
```



# 6.5.6.4 Project - Controlling a Player

Using the following source code, output text to the console using File.Out and control the music player using the standard input File.In.
To start the player in a console from the project directory:


```
hans@mint-183 ~/GB3BUCH/6K_Stream/.../MusicPlayer $ gbr3 ./music_player_console.gambas
```

Source code:


```
' Gambas module file' Characters are read in via the standard input (terminal) in order to control the MediaPlayer.Notes: http://www.mplayerhq.hu/DOCS/man/de/mplayer.1.htmlPublicmPlayerAsNewMediaPlayerPublicSubMain()IfmPlayerThenmPlayer=zero
 Start()EndPublicSubStart()mPlayer=NewMediaPlayer
  mPlayer.URL="http://mp3channels.webradio.rockantenne.de/classic-perlen"mPlayer.Audio.Volume=+1.0mPlayer.Play()Print#File.Out,""Print#File.Out,"-------------------------------------"Print#File.Out,"Instructions for use"Print#File.Out,"-------------------------------------"Print#File.Out,"+  ▶ Audio.Volume ▲"Print#File.Out,"-  ▶ Audio.Volume ▼"Print#File.Out,"p  ▶ Player.Pause"Print#File.Out,"r  ▶ Player.Run (After a pause)"Print#File.Out,"m  ▶ Audio.Mute (off/on)"Print#File.Out,"q  ▶ Player.Stop"Print#File.Out,"-------------------------------------"Print#File.Out,"Each command is followed by <ENTER>."Print#File.Out,"-------------------------------------"Print#File.Out,""EndPublicSubApplication_Read()DimsInputAsStringDimfDeltaVolumeAsFloatIfmPlayer.Audio.Volume>1.1ThenfDeltaVolume=1.0ElsefDeltaVolume=0.1EndIfLineInput#File.In, sInputSelectCasesInputCase"q"mPlayer.Stop()QuitCase"p"mPlayer.Pause()Case"r"' RunmPlayer.Play()Case"m"' Toggle switch: mute on/mute offmPlayer.Audio.Mute=NotmPlayer.Audio.MuteCase"+"IfmPlayer.Audio.Volume>0.09AndmPlayer.Audio.Volume<9.0ThenmPlayer.Audio.Volume+=fDeltaVolumeEndifCase"-"IfmPlayer.Audio.Volume>0.2AndmPlayer.Audio.Volume<10.0ThenmPlayer.Audio.Volume-=fDeltaVolumeEndifEndSelectEnd
```

Comment:


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.6 Class Stat

The Stat (gb) class provides you with all the information returned by the system about a particular file. It must be emphasised that a Stat object is unsuitable for making selected changes to file properties! The class cannot be created.


# 6.6.1 Properties

The Stat class has these properties:
Table 6.6.1.1 : Properties of the class Stat


# 6.6.2 File types

The type of a file can be described by one of the following constants:
Table 6.6.2.1 : File type constants of the Stat class


# 6.6.3 Class .Stat.Perm

The .Stat.Perm (gb) virtual class describes the file permissions for the selected file and can be used like a read-only array.
Table 6.6.3.1 : Properties of the .Stat.Perm class
In all three cases, the (permission) string contains the following characters if the respective permission has been granted:
Attention: In particular, no character is output for missing permissions. This differs from the output of commands like 'ls -l', where missing permissions are noted with a minus sign at their fixed position.


# 6.6.4 Project

First, a temporary file is created in the presented project and content is inserted. Then the file permissions are explicitly changed. Then a Stat object is created and the file information of the temporary file is read and displayed.


```
' Gambas class filePublicsFilePathAsStringPublicSubForm_Open()DimsGroup, sRandomFileNameAsStringFMain.CenterFMain.Resizable=FalsesRandomFileName=SetRandomFileName()sFilePath=Temp(sRandomFileName)File.Save(sFilePath,"Text line 1.\nText line 2.")Chown sFilePathToUser.NameExec["id","-gn"]TosGroup' Find out the group of the current usersGroup=Trim$(sGroup)Chgrp sFilePathTosGroup
 
  Chmod sFilePathTo"rwxrw-r--"' Test 1 perfect' Chmod sFilePath To "rwSrwSr-T" ' Test 2 not error-free' Chmod sFilePath To "rwxrw-rw-" ' Test 3 perfect' Error correction:' Shell "chmod u+s " & sFilePath Wait' Shell "chmod g+s " & sFilePath Wait' Shell "chmod o+t " & sFilePath WaitEndPublicSubbtnGetInformation_Click()DimFileInfoAsStatDimaTypesAsString[]=["Regular file","Directory","Special file for a device","Named pipe",/"Special file for a socket","Symbolic link"]DimhFileAsFileDimsLine, sLinkAsStringFileInfo=Stat(sFilePath)' txaOutput(TypeOf(Stat(sFilePath)) --> Stat-ObjecttxaOutput.Clear()txaOutput.Insert(gb.Lf)txaOutput.Insert("Path = "&FileInfo.Path&gb.Lf)txaOutput.Insert("File-Type (Integer) = "&FileInfo.Type&gb.Lf)txaOutput.Insert("File-Type = "&aTypes[FileInfo.Type-1]&gb.Lf)' aTypes array index starts with 0txaOutput.Insert("Permissions (Symbolic notation) = "&FileInfo.Auth&gb.Lf)txaOutput.Insert("File-Modus (Numeric notation)   = "&Oct$(FileInfo.Mode)&gb.Lf)txaOutput.Insert("SetUID set? = "&Str(FileInfo.SetUID)&gb.Lf)txaOutput.Insert("SetGID set? = "&Str(FileInfo.SetGID)&gb.Lf)txaOutput.Insert("Sticky-Bit set? = "&Str(FileInfo.Sticky)&gb.Lf)txaOutput.Insert("User permissions  = "&FileInfo.Perm.User&gb.Lf)txaOutput.Insert("Group permissions = "&FileInfo.Perm.Group&gb.Lf)txaOutput.Insert("Other permissions = "&FileInfo.Perm.Other&gb.Lf)txaOutput.Insert(gb.Lf)txaOutput.Insert("File-Size = "&FileInfo.Size&" Byte"&gb.Lf)sLink=IIf(FileInfo.Link, FileInfo.Link,"No")txaOutput.Insert("Symbolic link? = "&sLink&gb.Lf)txaOutput.Insert("Contents of the text file:"&gb.Lf)hFile=OpensFilePathForInputWhileNotEof(hFile)LineInput#hFile, sLine
    txaOutput.Insert(sLine&gb.Lf)WendtxaOutput.Insert(gb.Lf)txaOutput.Insert("User = "&FileInfo.User&gb.Lf)txaOutput.Insert("Group = "&FileInfo.Group&gb.Lf)txaOutput.Insert("File hidden? = "&Str(FileInfo.Hidden)&gb.Lf)txaOutput.Insert("Permissions (Numeric notation)  = "&ModeStringToOctalString(FileInfo.Auth)&gb.Lf)txaOutput.Insert("Last access to file = "&FileInfo.LastAccess&"(UTC)"&gb.Lf)txaOutput.Insert("Last change of file content = "&FileInfo.LastModified&"(UTC)"&gb.Lf)txaOutput.Insert("Last change of file attributes  = "&FileInfo.LastChange&"(UTC)"&gb.Lf)txaOutput.Insert("Permission R or W  = "&Str(Access(sFilePath, gb.ReadOrgb.Write))&gb.Lf)txaOutput.Insert("Permission R       = "&Str(Access(sFilePath, gb.Read))&gb.Lf)txaOutput.Insert("Permission W       = "&Str(Access(sFilePath, gb.Write))&gb.Lf)txaOutput.Insert("Permission X       = "&Str(Access(sFilePath, gb.Exec))&gb.Lf)' gb.read is default if the optional mode argument is missingtxaOutput.Insert("Permission R       = "&Str(Access(sFilePath))&gb.Lf)EndPrivateFunctionSetRandomFileName()AsStringDimsFileNameAsStringsFileName=Hex$(Rand(0,2^32-1))' Random file nameReturnsFileNameEndPublicSubModeStringToOctalString(ModeStringAsString)AsStringDimi, k, iValue, iExtendedFileAttributeAsIntegerDimsOctal, sAsStringFork=1To7Step3s=Mid(ModeString, k,3)iValue=0Fori=1To3SelectMid(s, i,1)Case"r"iValue+=4Case"w"iValue+=2Case"x","s","t"iValue+=1EndSelectIfk=1ThenSelectMid(s, i,1)Case"s","S"iExtendedFileAttribute+=4EndSelectEndifIfk=4ThenSelectMid(s, i,1)Case"s","S"iExtendedFileAttribute+=2EndSelectEndifIfk=7ThenSelectMid(s, i,1)Case"t","T"iExtendedFileAttribute+=1EndSelectEndifNextsOctal&=CStr(iValue)' String!NextIfiExtendedFileAttribute=0ThenReturnsOctalElseReturnCStr(iExtendedFileAttribute)&sOctal' String!EndifEnd
```

Output:
Figure 6.6.4.1: Output file information
An alternative to the use of the virtual class .Stat.Perm is the Access function, about which you can read information under the linkhttp://gambaswiki.org/wiki/lang/accessand which was also used selectively in the above project.
Attention: All files in the logical folder Data (and also in all subdirectories therein) in the project directory are treated as read-only, no matter what the actual mode settings are. This also applies to files with mode 777 (full read and write access for owner, group and others). This means, for example, that Access(“texts/mytext.txt”) never returns gb.Write. The reason is that when the executable file *.gambas is executed, all project files from the Data folder are inserted into the executable file and therefore cannot be changed at runtime!
Note that the CHMOD instruction is (partially) faulty up to (stable) Gambas version 3.11.3. A correction option is given in the presented project. The bug was fixed with commit d44b4bd7f in the development version.
To change file attributes, you can use the three instructions CHGRP, CHMOD and CHOWN, which are described in the next chapter.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.7 Instructions CHOWN, CHMOD and CHGRP

Selected properties of the Stat class can be used to read information about the owner, group or permissions of a particular file or directory:


```
Dim sFilePath As String = User.Home &/ "nwm.xml"

Print "User  = " & Stat(sFilePath).User
Print "Group = " & Stat(sFilePath).Group
Print "Permissions = " & Stat(sFilePath).Auth
```

Results:


```
User  = hans
Group = hans
Permissions = rwSrw-r--
```

Since Gambas 3.1, the three instructions CHOWN, CHGRP and CHMOD are available to change the owner, group or rights of a file. However, this is only possible if you have the appropriate rights as a user.


# 6.7.1 CHOWN

The CHOWN (change owner) instruction changes the owner of a file or directory:


```
CHOWN Path TO User
```



# 6.7.1.1 CHGRP

The CHGRP (change group) instruction changes the group membership of a file or directory:


```
CHGRP Path TO Group
```



# 6.7.1.2 CHMOD

Note that up to (stable) Gambas version 3.11.3, the CHMOD instruction is sometimes incorrect when setting the sticky bit. A correction option is given in the presented project. The error was eliminated with commit d44b4bd7f in the development version.
The CHMOD (change mode) instruction changes the permissions (mode) of a file or directory:


```
CHMOD Path TO Mode
```

Athttp://gambaswiki.org/wiki/cat/modeorhttps://wiki.ubuntuusers.de/rightsyou can read the mode syntax. Furthermore, any omitted or unknown character - such as a dot in the following 2nd case - is ignored in the mode string.
In this way, you can change selected file permissions. In the first case,allpermissions are reset. In the second case, only the “Execute” right is set for the user, all others are retained:


```
CHMOD sScriptPath To "r-x------"		' 1. Case
CHMOD sScriptPath To "..x......"		' 2. Case
```



# 6.7.1.3 Syntax File Permissions

The file modes are described by a nine-character (rights) string that follows the same scheme as the shell command 'ls':
Table 6.7.1.3.1 : Syntax file permissions


# 6.7.2 Digression: file timings

The reading of time information (all times in UTC) of a file is achieved via the properties Stat.LastAccess (atime) or Stat.Change (ctime) or Stat.Modified (mtime, synonym: Stat.Time).
Changing the timestamp of a file is obviously not currently provided for in Gambas. However, this can be done quite easily with an Exec instruction:


```
' Gambas class filePublicsFilePathAsString=Temp("date_time")PublicSub_new()File.Save(sFilePath,"Empty ...")EndPublicSubbtnSetTime_Click()DimaExecCommandAsString[]DimsDateTimeTZ, sDate, sTime, sTimeZoneAsStringsDate="2018-07-31"sTime="18:17:34"sTimeZone="+0000"' UTC: "+0200" for GermanysDateTimeTZ=sDate&" "&sTime&" "&sTimeZone
 
  aExecCommand=["touch","-d", sDateTimeTZ, sFilePath]ExecaExecCommandEndPublicSubbtnGetTime_Click()txbDateTime.Text=Subst("FileDateTime = &1 &2",Stat(sFilePath).Time,"(UTC)")PrintStat(sFilePath).LastModifiedEnd
```

Figure 6.7.2.1: Changing the timestamp of a file


# 6.7.3 CreationTime (crtime)

One problem is reading out the time that represents the time at which the file was created (CreationTime or crtime). There are several reasons for this:
Athttps://tecadmin.net/file-creation-time-linux/you will find more information and the specification of two command lines to determine the value for the CreationTime of a file in a console.
Here is the result after entering the above two command lines for a file after copying from a BackUp hard disk:


```
Inode: 3672254   Type: regular    Mode:  0644   Flags: 0x80000
Generation: 1948083613    Version: 0x00000000:00000001
User:  1000   Group:  1000   Size: 72674
File ACL: 0    Directory ACL: 0
Links: 1   Blockcount: 144
Fragment:  Address: 0    Number: 0    Size: 0
 ctime: 0x5a9fd64f:454b4df4 -- Wed Mar  7 13:08:47 2018
 atime: 0x5b618f64:831a72b8 -- Wed Aug  1 12:45:56 2018
 mtime: 0x599b1a34:5ea40700 -- Mon Aug 21 19:36:52 2017
crtime: 0x5a9fd64f:454b4df4 -- Wed Mar  7 13:08:47 2018
Size of extra inode fields: 32
EXTENTS:
(0-17):14719769-14719786
```

What value the knowledge of the CreationTime (crtime) has for you, you have to decide yourself, because the ModifyTime (mtime) is far ahead of the CreationTime in the above case!


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.8 Component gb.inotify

With the component gb.inotify by Tobias Boege you can access the linux-specific interface “inotify” in Gambas programs. Information about this interface can be found athttps://wiki.ubuntuusers.de/inotify. The interface allows you to intercept selected file system events. You can thus monitor a path of the file system behind which a file or directory may be located.
However, when using the component, please note the following:


# 6.8.1 Class Watch

The Watch class (gb.inotify) represents a file system object to be monitored. You can create the class. The class behaves like a static array whose values can only be read. Watching a directory is not recursive for its subdirectories. This means that you only get events from the directory itself and for its immediate entries. However, you can create a separate watch object for each subdirectory of a base directory and even monitor subdirectories created at runtime with the create event.


# 6.8.2 Creating a Watch object

You can create Watch objects regularly using the New instruction. The signature of the constructor is as follows:


```
hWatch = New Watch ( Path As String [ , NoFollowLink As Boolean, Events As Integer ] ) As "EventName"
```

First, the path of the file system entry to be watched is specified. With the optional parameter NoFollowLink you can forbid following symbolic links when interpreting your path. By default, links are followed. The last optional argument Events is a bitmask of events to monitor. Use the constants of the Watch class for this. For example, if you want to monitor the create and delete events of a path sPath, create the Watch object like this:


```
hWatch = New Watch(sPath, False, Watch.Create + Watch.Delete) As „MyWatch”
```

If you do not specify the events mask, the Watch class automatically determines all events for which you have created event handlers under the specified event name. If you have entered


```
Private $hWatch As Watch

Public Sub Form_Open()
  ...
  $hWatch = New Watch(sPath) As "MyWatch"
End

Public Sub MyWatch_Create()
  ...
End

Public Sub MyWatch_Delete()
  ...
End
```

the Watch class recognises that you want to intercept Create and Delete events from MyWatch and sets these - and only these - events to receivable. For performance reasons, you should never specify more events in the Events mask than you need. You can later change the receivable events via the Events property of the Watch class. You use this property like an array of Boolean values and index them using the Watch constants:


```
$hWatch.Events[Watch.Create]=False' Create events are now no longer receivable$hWatch.Events[Watch.Move]=True' Instead, the Move event is now of interest
```

Note that the only job of Watch objects is to trigger events! If you forget to give a Watch object an event name, it cannot trigger events and is useless.


# 6.8.2.1 Static properties

The Watch class has four static properties that provide additional information for event handlers and should only be used in such. The static properties are used to store data from the kernel during event handler routines.
Table 6.8.2.1.1 : Static properties of the Watch class


# 6.8.2.2 Properties

Table 6.8.2.2.1 : Properties of the class Watch


# 6.8.2.3 Methods

The Watch class has only these two methods:
Table 6.8.2.3.1 : Methods of the Watch class


# 6.8.2.4 Events

The Watch class has these events:
Table 6.8.2.4.1 : Events of the class Watch
As you can see, the meaning and interpretation of an event depends on whether a file or directory is being watched.


# 6.8.3 Project

The project demonstrates the monitoring of selected temporary directories and a temporary file. The file and the directories are created at runtime and edited in different ways (open, change, move, delete).
Figure 6.8.3.1: Monitoring protocol
The special feature of this project is the triggering of events by an external script. It must be realised via a task, because on the one hand the monitoring should take place as close to real time as possible and on the other hand the task in the project is there to provide for events so that you automatically get to see something when you start the project (task object in chapter 20.6.0). If the script were to be executed synchronously, then all editing of the directories and the file would first take place and only later would all monitoring results be received. In the source text you can also see that a separate Watch object is created for each new directory and inserted into a Watch[ ] array. The corresponding entry in the $aSubDirs array of the type Watch[ ] is removed when the object to be watched has been deleted. If - without a task - the events were only received after the entire script has run through, the created subdirectory would already be deleted when the Gambas process receives its create event. Thus, it can no longer be monitored and, in particular, the process does not receive the (past) events that occurred below this subdirectory.
Figure 6.8.3.2: Monitoring log - end
The processing of the directories and the file is done by the own class in ExternalScript.class.
The source code for the presented project is given in full. The source code of the class ExternalScript.class follows:


```
' Gambas class fileInheritsTaskPrivate$sFileAsStringPrivate$sDirAsStringPublicSub_new(sFileAsString, sDirAsString)$sFile=sFile
  $sDir=sDirEndPublicSubMain()ShellSubst$("touch &1;  sleep 1; chmod a+w &1; sleep 1;""touch &3;  sleep 1; cat &1; sleep 1;""echo 'test' > &1; sleep 2;""mkdir &2; sleep 1; mv &1 &2; sleep 1;""rm &4; sleep 1; rmdir &2; sleep 1", $sFile, $sDir,File.Dir($sFile), $sDir&/File.Name($sFile))WaitPrint"Finished"FlushDo' Wait for the main process to finish the taskWait1LoopEnd
```

Source code FMain.class:


```
' Gambas class filePrivate$hTmpAsWatchPrivate$aSubdirsAsNewWatch[]Private$hScriptAsExternalScriptPublicSubForm_Open()DimsFileAsString=Temp$()DimsDirAsString=Temp$()FMain.Resizable=FalseTextArea1.ReadOnly=True$hTmp=NewWatch(File.Dir(sFile))As"Tmp"' The script must be a task because the events are as close as possible to each other.' at the time they are triggered. If the script would be executed in this process,' you received the events after the complete script has run. So could For example,' you cannot intercept events in the subdirectories created at runtime.$hScript=NewExternalScript(sFile, sDir)As"ExternalScript"Spinner1.Start()EndPublicSubExternalScript_Read(DataAsString)IfTrim$(Data)<>"Finished"ThenReturn$hScript.Stop()' Stops the task as a background processTextArea1.Insert(gb.NewLine&"● ● ● External script terminated. ● ● ●")TextArea1.Background=&HF5FFE6
  Spinner1.Stop()Spinner1.Visible=FalseEndPublicSubTmp_Read()Note("Lesen")EndPublicSubTmp_Create()DimhSubdirAsWatchIfWatch.IsDirThen' The following try is necessary here to intercept a 'race condition':' The Subdirectory could have been created and deleted before this' event handler has been called. The New Watch(..) could fail because' edit a Create event whose subject has already been deleted.TryhSubdir=NewWatch(Last.Path&/Watch.Name)As"Subdir"IfNotErrorThenNote("New subdirectory")$aSubdirs.Add(hSubdir)EndifElseNote("Create","initial mode"&Stat(Last.Path&/Watch.Name).Auth)EndifEndPublicSubTmp_Open()Note("Open")EndPublicSubTmp_Close()Note("Close")EndPublicSubTmp_Write()Note("Write")EndPublicSubTmp_Move()Note("Rename")EndPublicSubTmp_MoveFrom()Note("Rename","[Source]",Subst$(" (Cookie &1)",Watch.Cookie))EndPublicSubSubdir_MoveTo()Note("Rename","[Destination]",Subst$(" (Cookie &1)",Watch.Cookie))EndPublicSubTmp_Delete()Note("Delete")EndPublicSubSubdir_Delete()Note(Subst$("Delete &1subdirectory",IIf(Watch.Name,"in ","")))IfNotWatch.NameThen$aSubdirs.Remove($aSubdirs.Find(Last))EndPublicSubTmp_Stat()WithStat(Last.Path&/Watch.Name)Note("Data query",Subst$("Modus &1, last accsess &2", .Auth, .LastAccess))EndWithCatch' Last.Path &/ Watch.Name might no longer exist and Stat might fail.End' The three dots indicate that the Note() procedure has a variable argument list.' After the mandatory parameter sWhat, k >= 0 other arguments of any type can follow.' Read more about this at http://gambaswiki.org/wiki/lang/methoddecl and' http://gambaswiki.org/wiki/comp/gb/paramPrivateSubNote(sWhatAsString, ...)DimsArgAsStringTextArea1.Insert(sWhat&"  ►    "&Last.Path&/Watch.Name)ForEachsArgInParamTextArea1.Insert(" "&sArg)NextTextArea1.Insert(gb.NewLine)TextArea1.Pos=Len(TextArea1.Text)PrintParam.CountEndPublicSubbtnClose_Click()FMain.CloseEndPublicSubForm_Close()If$hScript.RunningThen$hScript.Stop$hTmp=Null$aSubdirs.Clear()Wait1End
```

All monitored events are displayed when they are triggered by the script, as you can see in the monitoring log in Figure 6.8.3.2.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# 6.9.0 Controls for selecting directories and files

In the following chapters you will be introduced to 6 controls for selecting directories and files, among others:
Figure 6.9.0.1: Control DirChooser
These controls complement the methods OpenFile(..), SaveFile(..) and SelectDirectory() from the classes Dialog (gb.qt4) and Dialog (gb.form.dialog), which are described in chapter 12.4 Dialogues.
The chapter is completed by the presentation of the control FileProperties (gb.form), which displays essential properties of a file or a directory in a TabPanel and exclusively for image files also provides an image preview:
Figure 6.9.0.2: Control FileProperties (on the right-hand side)


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.9.1 DirBox

The unobtrusive DirBox (gb.form) control implements a directory selection box:
Figure 6.9.1.1: DirBox control with other controls (FileView and FileProperties)
The selection dialogue for a directory is started by clicking on the directory symbol at the right end of the text field of the DirBox - marked in red:
Figure 6.9.1.2: Selection dialogue with selected directory “DBAdressen”.
The selected directory is taken over with “Select”. The directory path is then in the text field of the directory selection box. The text field has the property “ReadOnly”. The control element can be created:


```
Dim hDirBox As DirBox
hDirBox = New DirBox ( Parent As Container ) As "EventName"
```



# 6.9.1.1 Properties

The DirBox class has these two properties, among others:
Table 6.9.1.1 : Properties of the DirBox class


# 6.9.1.2 Events

The DirBox class has these events, among others:
Table 6.9.1.2.1 : Events of the DirBox class


# 6.9.1.3 Accessing the directory path in DirBox

You can read the value of the DirBox.Value property and store it in a variable sDirPath, for example.


```
' Gambas class filePublicsDirPathAsStringPublicSubForm_Open()FMain.Resizable=FalseDirBox1.Value=User.Home' (Start-)FoldersDirPath=DirBox1.ValuelblDirPath.Text=DirBox1.ValueFileView1.Dir=DirBox1.ValueFileView1.ShowPreview=TrueFileView1.ShowHidden=TrueFileView1.Background=&HC3DDFF
  FileView1.Foreground=Color.RedFileView1.Mode=Select.SingleFileView1.Filter=["*.txt","*.png","*.pd*","*.jp*","*.xml"]FileView1.IconSize=48' Default-Value = 32FileProperties1.Path=DirBox1.ValueEndPublicSubDirBox1_Change()sDirPath=DirBox1.ValueFileView1.Dir=DirBox1.ValuelblDirPath.Text=DirBox1.ValueEndPublicSubFileView1_Click()FileProperties1.Path=sDirPath&/FileView1.CurrentEnd
```

Controls of the Dialog class (gb.qt4) for selecting files or directories such as OpenFile or SelectDirectory or SaveFile for saving files are described in Chapter 12.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.9.2 DirView

The DirView (gb.form) control is a (specialised) TreeView that displays directories and their subdirectories according to a directory icon with the corresponding directory name.
The path to the selected directory is returned in the Current property.
Figure 6.9.2.1: DirView with display of the selected directory in a label.
The control can be created:


```
Dim hDirView As DirView
hDirView = New DirView ( Parent As Container ) As "EventName"
```



# 6.9.2.1 Properties

The DirView class has the following properties:
Table 6.9.2.1.1 : Properties of the DirView class


# 6.9.2.2 Methods

The DirView class has these methods, among others:
Table 6.9.2.2.1 : Methods of the DirView class


# 6.9.2.3 Events

The following table describes selected events of the DirView class:
Table 6.9.2.3.1 : Selected properties of the DirView class.
Notes:
The DirView control has no context menu.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.9.3 DirChooser

The DirChooser control (gb.form) allows the user to select a directory. There is an additional option to also display the contents of a selected directory.
The control can be created:


```
Dim hDirChooser As DirChooser

hDirChooser = New DirChooser ( Parent As Container )  As "EventName"
```

Internally, the DirView and FileView controls (optional) are used.


# 6.9.3.1 Properties

The DirChooser class has these selected properties:
Table 6.9.3.1.1 : Properties of the DirChooser class.
Notes:


# 6.9.3.2 Methods

The DirChooser class has only one relevant method, Reload( ). It reloads the contents of the view - as if you had clicked on the “Refresh” button in the context menu.
6.9.3.3 Events
The DirChooser class has these selected events, among others:
Table 6.9.3.3.1 : Selected events of the DirChooser class.
Notes:
You can create new directories via the context menu or trigger the creation via the following source code:


```
Public Sub btnCreateNewFolder_Click()
  DirChooser1.DirView.NewFolder()
End
```

You change the name of an existing directory via the context menu or via the following source code, which triggers the change:


```
Public Sub btnRenameFolder_Click()
  DirChooser1.DirView.Rename()
End
```

The following notes on the layout of the programme window and the basic configuration of the DirChoosers control have proven to be useful for practical use:


```
PublicSubForm_Open()FMain.Resizable=TrueFMain.Utility=True' Minimum window size as defined in the IDEDirChooser1.Root=User.Home' Default-FolderDirChooser1.ShowSplitter=TrueDirChooser1.ShowBookmark=True...End
```

Figure 6.9.3.3.1: DirChooser with basic configuration
If you switch on the splitter, you will also see the contents of the selected directory in the internal FileView. In addition, the ToolBar fills with more buttons and controls like a slider to change the display size of the preview images.
Figure 6.9.3.3.2: DirChooser with extended configuration
You can also use the available context menu of the internal FileView to make further settings or actions. A nested context menu supports you in working with the DirChooser control:
Figure 6.9.3.3: Context menu


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.9.4 FileView

The FileView (gb.form) control displays files in a selected directory.
A FileView control can be created:


```
Dim hFileView As FileView

hFileView = New FileView ( Parent As Container ) As "EventName"
```



# 6.9.4.1 Properties

The FileView class has these properties:
Table 6.9.4.1.1 : Properties of the FileView class.
Notes:
Figure 6.9.4.1.1: Selected file in a FileView
Figure 6.9.4.1.2: List of selected files in a FileView


# 6.9.4.2 Methods

The FileView class has these selected methods:
Table 6.9.4.2.1 : Selected methods of the FileView class


# 6.9.4.3 Events

The FileView class has the following events, among others:
Table 6.9.4.3.1 : Events of the FileView class


# 6.9.4.4 Project

The source code for the project implements the above notes:


```
' Gambas class filePublicsFileNameAsStringPublicaFileNamesAsString[]PublicSubForm_Open()FMain.Resizable=FalseDirBox1.Value="/home/hans/BildTon"' (Start-)FolderFileView1.Dir=DirBox1.ValueFileView1.IconSize=32' Default-Value = 32FileView1.ShowPreview=TrueFileView1.ShowHidden=TrueFileView1.Background=&HC3DDFF
  FileView1.Foreground=Color.DarkGreenFileView1.Mode=Select.SingleFileView1.Filter=["*.txt","*.png","*.pd*","*.jp*","*.xml"]WaitbtnShowFileListContent.Enabled=FalseEndPublicSubFileView1_Click()DimsFileDir, sFilePathAsStringsFileName=FileView1.CurrentsFileDir=FileView1.DirsFilePath=sFileDir&/sFileName
 
  lblFileName.Text=Subst("&1 &2 &3",("Filename"),":", sFileName)EndPublicSubFileView1_Select()IfFileView1.CurrentThenPrintSubst("&1 '&2' &3",("The file"), FileView1.Current,("has been selected."))EndifEndPublicSubDirBox1_Click()FileView1.Dir=DirBox1.ValueEndPublicSubbtnSetMultiple_Click()IfFileView1.Mode=Select.SingleThen' The default-value is "Single"FileView1.Mode=Select.MultiplebtnSetMultiple.Caption="Set file selection to single"btnShowFileListContent.Enabled=TrueElseFileView1.Mode=Select.SinglebtnSetMultiple.Caption="Set file selection to multiple"btnShowFileListContent.Enabled=FalseEndifEndPublicSubbtnShowFileListContent_Click()DimsFile, sContentAsStringIfFileView1.Mode=Select.MultipleThenIfFileView1.Selection.Count>0ThenlblFileName.Text=""aFileNames=FileView1.SelectionForEachsFileInaFileNames
          sContent&=sFile&gb.LfNextMessage.Info("Selected files:<hr>"&sContent)FileView1.UnselectAll()FileView1.Mode=Select.SinglebtnSetMultiple.Caption="Set file selection to multiple"btnShowFileListContent.Enabled=FalseEndifEndifEnd
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.9.5 FileChooser

The FileChooser control (gb.form) allows the user to select a file or a list of files in the same directory.
Figure 6.9.5.1: Selected Files in a FileChooser
The FileChooser control can be created:


```
Dim hFileChooser As FileChooser
hFileChooser = New FileChooser ( Parent As Container ) As "EventName"
```



# 6.9.5.1 Properties

The FileChooser class has the following properties:
Table 6.9.5.1.1 : Properties of the FileChooser class


# 6.9.5.2 Methods

The FileChooser class has these selected methods:
Table 6.9.5.2.1 : Selected methods of the FileChooser class


# 6.9.5.3 Events

The FileChooser class has these selected events:
Table 6.9.5.3.1 : Selected events of the FileChooser class.
Notes:
You can get project-wide access to the path to a selected file with FileChooser.Multi = False if you store the value of the FileChooser.SelectedPath property in a (public) variable sFilePath = FileChooser.SelectedPath, for example.
Figure 6.9.5.3.1: Display file path of the selected file in the FileChooser.
Alternatively, you can use the assignment sFilePath = FileChooser.Value, because the value of this property depends on the set mode and returns only a string for FileChooser.Multi = False.
You get access to the file paths for all files selected in FileChooser.Multi = True mode if you store the list of selected files - stored in the FileChooser.SelectedPaths property - in a (public) array variable such as aFilePaths = FileChooser.SelectedPaths.
Alternatively, you can use the assignment aFilePaths = FileChooser.Value, because the value of this property depends on the mode set, but for FileChooser.Multi = True it returns a string array:
Figure 6.9.5.3.2: List of selected files in a FileChooser
You can use the FileChooser.Filter property to set all the file filters needed in the project and use the FileChooser.FilterIndex property to switch very flexibly to individual filter groups at runtime:


```
FileChooser1.Filter=["*.png;*.jp*;*.gif","Picture files","*.txt;*.xml;*.conf","Text files"]FileChooser1.FilterIndex=0' Display images with the extensions png, jp* and gif only' FileChooser1.FilterIndex = -1 ' Display all files
```



# 6.9.5.4 Digression Bookmarks

The Filechooser control element has its own bookmark system. Set the ShowBookmark property to True to display it. The bookmark menu is now visible and a drop-down menu of bookmarks is displayed when you click the Bookmark button.
The bookmark menu has its own context menu:
Figure 6.9.5.4.1: Bookmark menu in FileChooser
The drop-down menu contains 3 types of bookmarks:
(type 1) Standard bookmarks ①(Type 2) Private bookmarks ②(Type 3) User bookmarks ③


# 6.9.5.5 Default bookmarks

The default bookmarks point to Home and System. Note: You will only see the Desktop menu item additionally if the gb.desktop component is loaded.


# 6.9.5.6 Private Bookmarks

Private bookmarks are accessed through the Bookmarks property. Bookmarks is an array of collections by data type. Each bookmark collection must contain a key “Path” which points to the path of the bookmark. Optional keys are “Name” and “Icon”. All other key names are ignored. Important: The specified path must exist!
This bookmark type 2 is application-specific, is not stored permanently, but created at runtime. The relevant source code in the form open event is based on hints from Tony Morehen (tmorehen@ajm-software.com):


```
PublicSubForm_Open()DimcPrivateBookmarksAsCollection[]DimcBookmarkAsCollectionFMain.Resizable=True...cPrivateBookmarks=NewCollection[]cBookmark=NewCollection' Syntax: cBookmark.Add(Value,Key)  {Path, [Name, Icon]}cBookmark.Add(User.Home&/"BildTon/Fractale","Path")cBookmark.Add("Fractals","Name")cBookmark.Add("icon:/small/plugin","Icon")cPrivateBookmarks.Add(cBookmark)cBookmark=NewCollectioncBookmark.Add(User.Home&/"ZumPrivaten/Bilder","Path")cBookmark.Add("Pictures","Name")cBookmark.Add("icon:/small/image","Icon")cPrivateBookmarks.Add(cBookmark)Filechooser1.Bookmarks=cPrivateBookmarks' The alternative uses the inline syntax:' Filechooser1.Bookmarks = [["Path": User.Home &/ "BildTon/Fractale", "Name": "Fractals", "Icon": "icon:/small/plugin"],' ["Path": User.Home &/ "ZumPrivaten/Bilder", "Name": "Pictures", "Icon": "icon:/small/image"]]FileChooser1.ShowBookmark=True...End
```



# 6.9.5.7 User bookmarks

It is necessary for the gb.settings component to be loaded in order to display user bookmarks. Create and edit user bookmarks via the menu items “Create bookmarks for current directory” and “Edit bookmarks”. The bookmarks are stored in the file path $HOME/.config/gambas3/gb.form.conf. This is the content of the gb.form.conf file created in the presented project:


```
[Bookmarks]
Count=2
Bookmark1=["/home/hans/AirCard_785S","AirCard_785S"]
Bookmark2=["/home/hans/V24T","V24T"]
```

Attention: The list of bookmarks is user-specific. It is used by all applications that use Gambas controls that have a bookmark menu - such as the DirChooser control.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.9.6 FileProperties

The FileProperties control (gb.form) displays essential properties of a file or directory in a TabPanel. You can add additional tabs to the TabPanel by using the FileProperties.Add(…) method. The DirChooser and FileChooser controls also internally use the FileProperties control to display selected properties of a file or directory (blue button with i symbol):
Figure 6.9.6.1: Use of control element FileProperties in DirChooser
You can create this class:


```
Dim hFileProperties As FileProperties
hFileProperties = New FileProperties ( Parent As Container )  As "EventName"
```



# 6.9.6.1 Properties

The FileProperties class has these properties, among others:
Table 6.9.6.1.1 : Selected properties of the FileProperties class


# 6.9.6.2 Methods

The FileProperties control element displays a preview image in addition to selected properties (type, directory, size, date last modified (mtime), permissions, owner and group) for image files only.
Figure 6.9.6.2.1: Display of selected properties
Figure 6.9.6.2.2: Display thumbnail image
The Add( Panel As Control, Title As String ) method adds an existing container or control to a new tab of the FileProperties control. Panel is the control that is inserted and Title is the title of the new tab.
Figure 6.9.6.2.3: New tab with the title “Text Preview”.
A new tab can be created with this source code:


```
PublicSubFileView1_Click()DimsFileName, sFilePathAsStringsFileName=FileView1.CurrentsFilePath=DirBox1.Value&/sFileName
 
  FileProperties1.Path=sFilePathSelectLower(File.Ext(sFileName))Case"txt","xml","conf","class","log","dat","py","pl","php","html"Ifk=0ThenhTextArea=NewTextArea(FileProperties1)hTextArea.Background=&HFFFFE1
         FileProperties1.Add(hTextArea,("Text preview"))InckEndifhTextArea.Text=File.Load(sFilePath)hTextArea.Pos=0EndSelectEnd
```

With the above source code, you can extend the default behaviour to also display the contents of selected text files.


# 6.9.6.3 Events

Among the events of the control element, the Data() event is of particular interest: The FileProperties.Data() event can be handled to define the type of a special group of files - criterion is a list of extensions - and their symbol by filling the Data property during the event handler. If the default behaviour of the FileProperties dialogue is desired in the event handler, then the event must be stopped.
Figure 6.9.6.3.1: Extended display of file type with matching icon.
Source code section:


```
[1]PublicSubFileProperties1_Data()[2][3]IfIsDir(FileProperties1.Path)Then[4]' Default behavior[5]StopEvent[6]Return[7]Else[8]SelectLower(File.Ext(FileView1.Current))[9]Case"txt","xml","conf","class","log","dat","py","pl","php","html"[10]FileProperties1.Data.Type=("Text file")[11]FileProperties1.Data.Icon=Picture["icon:/48/shortcut"][12]Case"pdf"[13]FileProperties1.Data.Type=("PDF-File")[14]FileProperties1.Data.Icon=Picture["icon:/48/pdf"][15]Case"png","jpg","jpeg","gif"[16]' Default behavior of the FileProperties dialog for these selected file extensions[17]StopEvent[18]Return[19]CaseElse[20]FileProperties1.Data.Type=("File")[21]FileProperties1.Data.Icon=Picture["icon:/48/office"][22]EndSelect[23]Endif[24][25]End
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# 6.10 Projects

In the following chapters you will be introduced to selected projects that work in different ways with streams, pipes and files as well as sockets as special streams.
Figure 6.10.1: Socket (image server)


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.10.1 Calculate hash value of a file

In the present project, you can select a file in the dialogue and calculate the special SHA256 hash value of the file. As an extension, you can compare the calculated hash value with the known hash value of the selected file - if you know it.
As an example, you will be shown how to check the integrity of an ISO image that is already in the download directory.
Figure 6.10.1.1: Checking the integrity of ISO images
For the linuxmint-18.3-cinnamon-64bit.iso file, you can get the hash value from the sha256sum.txt file, which you copy to the download directory using the following command:


```
wget https://ftp.heanet.ie/mirrors/linuxmint.com/stable/18.3/sha256sum.txt -O $HOME/Downloads/sha256sum.txt
```

This line from the contents of the file is important:


```
...
ecebdf9ac4697b6c2d7feffd1bc5430641bca67c7df122fa2914824dc8844b3a *linuxmint-18.3-cinnamon-64bit.iso
...
```

First enter the hash value of the Mint 18.3 version in the yellow text field. Then select the appropriate ISO file in the download directory in the dialogue. The comparison of the calculated SHA256 hash value and the value from the Mint website in the file sha256sum.txt was successful!
Note that calculating the hash value for a 2GB file, for example, may well take a few seconds!


# 6.10.1.1 Digression

For checking authenticity, the same source returns with this command in a console:


```
wget https://ftp.heanet.ie/mirrors/linuxmint.com/stable/18.3/sha256sum.txt.gpg -O \
$HOME/Downloads/sha256sum.txt.gpg
```

the file sha256sum.txt.gpg. The following command checks whether the file sha256sum.txt is correctly signed by Mint:


```
hans@mint-183 ~/Downloads $ gpg --verify sha256sum.txt.gpg sha256sum.txt
gpg: Signature of Wed 13 Dec 2017 17:16:15 CET using RSA key ID A25BAE09.
gpg: Correct signature of "Linux Mint ISO Signing Key <root@linuxmint.com>".
gpg: WARNING: This key does not carry a trusted signature!
gpg: There is no indication that the signature really belongs to the alleged owner.
Main fingerprint = 27DE B156 44C6 B3CF 3BD7 D291 300F 846B A25B AE09
hans@mint-183 ~/Downloads $
```

The warning “There is no indication that the signature really belongs to the alleged owner.” is justified - here is the quick check in a console for the ID given above:


```
hans@mint-183 ~/Downloads $ gpg --list-key --with-fingerprint A25BAE09
pub   4096R/A25BAE09 2016-06-07
      Schl.-Fingerprint = 27DE B156 44C6 B3CF 3BD7  D291 300F 846B A25B AE09
uid   Linux Mint ISO Signing Key <root@linuxmint.com>
```



# 6.10.1.2 Project - source code

The source code is given in full:


```
' Gambas class file' A hash process generates a number from a string in a file.PublicsOriginalTextAsStringPrivatesFilePathAsString=User.HomePublicaDigestListAsString[]PublicaCipherListAsString[]PublicSubForm_Open()FMain.Center()FMain.Caption="Calculation of SHA256 hash value for files"FMain.Resizable=FalsetxaText.Wrap=TrueDigestSupportedSHA256()EndPublicSubDigestSupportedSHA256()txaText.Clear()IfDigest.IsSupported("SHA256")=TrueThentxaText.Text="\nThe system supports 'SHA256'!"ElsetxaText.Text="\nThe system does not support 'SHA256'!"EndifEndPublicSubbtnDigestFromFile_Click()DimsPathAsStringDimvRawDataAsVariantDialog.Title=("Select a file!")Dialog.Path=sFilePathIfDialog.OpenFile()ThenReturnsPath=Dialog.PathtxaText.Clear()IncApplication.BusyvRawData=Digest["SHA256"].Hash(File.Load(sPath))' Attention! Highly compressed source codeDecApplication.BusytxaText.Clear()txaText.Text="\nSHA256 hash for the file '"&File.Name(Dialog.Path)&"'\n\n"txaText.Text&="Format hexadecimal:"&gb.NewLinetxaText.Text&=StringToHex(vRawData)&gb.NewLineIftxbCheck.TextThenIfStringToHex(vRawData)=txbCheck.TextThentxaText.Text&=Subst("\n&1 '&2' &3",("The check of the file"),File.Name(sPath),("was successful!"))ElsetxaText.Text&=Subst("\n&1 '&2' &3",("The check of the file"),File.Name(sPath),("was *not* successful!"))EndifEndifCatchMessage.Error(sPath&" not available.\n"&Error.Text)EndPrivateFunctionStringToHex(sStringAsString)AsStringDimiByteAsByteDimsResultAsStringForEachiByteInByte[].FromString(sString)sResult&=Lower$(Hex$(CLong(iByte),2))NextReturnsResultEndPublicSubbtnClose_Click()FMain.Close()End
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# 6.10.2 Encrypting and decrypting a file

In this project, you can encrypt or decrypt a file using a high-quality encryption algorithm. It is always checked whether the system supports the key used.
If the selected file was encrypted with a strong password, then the encrypted file is saved under the original name with a new extension .enc in the same directory. The original file is not deleted in the presented project.
Figure 6.10.2.1: Main programme
In the dialogue you can select the file to be encrypted:
Figure 6.10.2.2: File selection dialogue box
In another dialogue the password has to be entered:
Figure 6.10.2.3: Password request
You will be informed about the success or failure in encrypting or decrypting the file:
Figure 6.10.2.4: Success message
Figure 6.10.2.5: Error message
The source codes are given in full:


```
' Gambas class filePrivatesMethodAsString="BF-CBC"' Definition of the encryption algorithmPrivatesCurrentFileAsStringPublicSubForm_Open()FMain.Caption=("Encrypting and decrypting files")FMain.Resizable=FalseIfCipher.List.Find(sMethod)=-1ThenMessage.Error(Subst("\n&1 &2 &3",("The system does not support the Cipher-Method:"), sMethod,"!"))FMain.Close()ElselblMethod.Text=Subst("&1 &2",("Cipher-Method is"), sMethod)EndifEndPublicSubbtnEncryptFile_Click()DimsPassword, sSalt, sPath, sMessageAsStringDialog.Title=("Select a file!")Dialog.Path=Application.DirIfDialog.OpenFile()ThenReturnsPassword=GetPassword()' Password from a password dialogIfsPasswordThensSalt="123Abc#*"' Free defined string (8 bytes)sPath=Dialog.Path&".enc"btnEncryptFile.Text=("Encrypt a selected file ... in progress")File.Save(sPath, Cipher[sMethod].EncryptSalted(File.Load(Dialog.Path), sPassword, sSalt))Wait1btnEncryptFile.Text=("Encrypt a selected file ...")sMessage=Subst("&1\n&2\n&3",("File"),File.Name(Dialog.Path),("has been successfully encrypted!"))Message.Info(sMessage)ElseMessage.Warning(("The password dialog was aborted by the user\nor the password is empty!"))ReturnEndifCatchMessage.Error(Error.Text)btnEncryptFile.Text=("Encrypt a selected file ...")EndPublicSubbtnDecryptFile_Click()DimsPassword, sPath, sMessageAsStringDialog.Title=("Select a file!")Dialog.Path=Application.DirIfDialog.OpenFile()ThenReturnsPassword=GetPassword()' Password from a password dialogIfsPasswordThenIfDialog.PathEnds".enc"ThensPath=Replace(Dialog.Path,".enc","")ElsesPath=Dialog.PathEndifbtnDecryptFile.Text=("Decrypt a selected file... in progress")File.Save(sPath, Cipher[sMethod].DecryptSalted(File.Load(Dialog.Path), sPassword))Wait1btnDecryptFile.Text=("Decrypt a selected file ...")sMessage=Subst("&1\n&2\n&3",("File"),File.Name(Dialog.Path),("has been successfully decrypted!"))Message.Info(sMessage)ElseMessage.Warning(("The password dialog was aborted by the user\nor the password is empty!"))ReturnEndifCatchMessage.Error(Error.Text)btnDecryptFile.Text=("Decrypt a selected file ...")EndPublicSubbtnPWInformation_Click()ShowPWInformation()EndPublicSubbtnHelp_Click()ShowHelp()EndPublicSubForm_Resize()Separator1.Width=FMain.ClientWidthEndPrivateSubShowPWInformation()DimsMessageAsStringsMessage="<hr>"sMessage&="<p>"sMessage&=Subst("&1 ",("A"))sMessage&="<font color='red'>"&("strong")&"</font>"sMessage&=Subst(" &1",("password contains at least:"))sMessage&="<p>"sMessage&=("- 8 characters,")&"<br>"sMessage&=("- a small letter,")&"<br>"sMessage&=("- one uppercase letter,")&"<br>"sMessage&=("- one digit and")&"<br>"sMessage&=("- a special character from the set {+ # _ @ ! ? § $ % *}")sMessage&="<hr>"Message.Info(sMessage)EndPrivateSubShowHelp()DimsMessageAsStringsMessage="<hr>"sMessage&="<p>"sMessage&=("The encrypted file retains its original name,\n")sMessage&=("to which the extension 'enc' is appended.")sMessage&="<hr><p>"sMessage&=("The decrypted file gets its original name.\n")sMessage&=("An existing file with the original name will be overwritten!")sMessage&="<hr>"Message.Info(sMessage)EndPrivateFunctionGetPassword()AsStringDimhFormLoginAsNewFLoginReturnhFormLogin(("Enter a password!"))' Start dialog ...EndPublicSubbtnClose_Click()FMain.Close()End
```

The source code of the dialogue for entering the password can be found in the file FLogin.class, whose most important procedure is _call(…):


```
' Gambas class filePublicSub_call(sMessageAsString)AsStringlblMessage.Text=sMessage' Returns when one of the buttons is clicked! The return value is specified in the Me.Close() call and' indicates whether or not it was canceled.SelectMe.ShowModal()Case1ReturntxtPassword.TextCase0Return""EndSelectEndPublicSubbtnOK_Click()Me.Close(1)EndPublicSubbtnCancel_Click()' 0 is also indicated by the cross in the window bar is returned - this corresponds to an abort.Me.Close(0)EndPublicSubtxtPassword_Activate()btnOK_Click()' Me.Close(1)End
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.11 Completion - FileCompletion

The base class Completion (gb.form) enables the automatic completion of texts in text fields such as TextBox, TextArea or in the Gambas source editor. Some controls such as a TableView also have the Editor property, which can be assigned Completion.Editor to provide completions for table cells.
Note: The Completion class is only a template: you create a derived, specialised completion class from the template by having it inherit from the base Completion class and override its (base) methods.
You can create this class. This is how you create a new, specialised completion class for the specified control. The parameter 'hEditor' has the value of a special TextBox or a special TextArea:


```
Dim hCompletion As Completion

hCompletion = New Completion ( hEditor As Control ) As "EventName"
```

The FileCompletion class is a specialised completion class. It is introduced to you in paragraph 6.11.4.


# 6.11.1 Properties

The Completion class has these properties:
Table 6.11.1.1 : Properties of the Completion class


# 6.11.2 Methods

The Completion class has these three methods:
Table 6.11.2.1 : Methods of the Completion class.
Notes:


# 6.11.3 Events

The Completion class has only the Activate() event. It is triggered when a completion proposal is selected from the list in the pop-up window.


# 6.11.4 Class FileCompletion

The derived class FileCompletion - based on the (base) class Completion - enables the automatic completion of path specifications in selected text fields such as in a TextBox:
Figure 6.11.4.1: Text completion in a TextBox
The class can be created. The parameter 'hEditor' has the value of a special TextBox or a special TextArea:


```
Dim hCompletion As FileCompletion
hFileCompletion = New FileCompletion ( hEditor As Control ) As "EventName"
```

The following source code creates a new auto-complete for the specified TextBox1 control:


```
Private$hFileCompleteAsFileCompletionPublicSubForm_Open()$hFileComplete=NewFileCompletion(TextBox1)End
```

If you enter a file path in the text box - as shown in Figure 6.11.4.1 - then the path will be auto-completed after you enter / or a few characters of the appropriate path. Good to know: The method FileCompletion.Fill(…) is executed automatically!


# 6.11.5 Additions

From the Gambas IDE you already know other completion classes, which complete properties or methods or names of images in the source code editor instead of files, among other things:
Figure 6.11.5.1: Text completion 1 IDE
Figure 6.11.5.2: Text completion 2 IDE


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.12.0 Temporary directories and temporary files

A temporary directory is used to store files for a limited time. You use temporary files to store data for a limited period of time. Temporary directories and temporary files are automatically deleted by the operating system after the Gambas programme ends.
For example, if you archive your scans in TIFF files to convert them later to PNG or JPG format, it is a good idea to copy a selection of TIFF files into a temporary directory and then convert them. Finally, exit your Gambas conversion programme, then the selected TIFF files in the temporary directory and also the temporary directory are automatically deleted.
Temporary files are needed if, for example, you want to use a Bash script in a Gambas programme and the script script.sh is located in the project folder in a data directory. If you call the script at runtime after starting the executable file *.gambas, you will end up with an error message because you do not have permission to execute the script. The reason is that all files in the Gambas archive *.gambas can only be read! A way out with the use of a temporary file that you can read and execute is briefly outlined below:


```
PublicsScriptPathAsStringPublicsTempScriptPathAsStringPublicsStoreAsStringPublicSubForm_Open()sScriptPath="./data/test_script.sh"' Set path to the script (original)sTempScriptPath=Temp(File.BaseName(sScriptPath))' Set path to a temporary fileCopysScriptPathTosTempScriptPath' Copy original script to temporary fileChmod sTempScriptPathTo"r-xr-xr-x"' Set execution rights for the copy' Chmod sTempScriptPath To "..x..x..x"                ' AlternativeEndPublicSubbtnRunScript_Click()ShellsTempScriptPathTosStore' Script copy in a shell instruction…' Execute with the required rights ...End
```

The temporary file /tmp/gambas.1000/<PID>/test_script.tmp - which was worked with - is automatically deleted after the programme ends.


# 6.12.0.1 Functions Temp() and Temp$()



```
File name = Temp$( [ Prefix ] )
File name = Temp( [ Prefix ] )
```

The Temp() and Temp$() functions return the path for a temporary file or directory. The path has the following form:


```
/tmp/gambas.<UserID>/<ProcessID>/<Prefix>.tmp
```

If no prefix is given, it is replaced by an integer which is automatically incremented with each further call of this function. In this way, the returned path name is always unique. This function returns only one path. You can then use this path to temporarily create, for example, a file, a directory, a Unix socket or a symlink.
Important to know:
Example:


```
DimsTempDirAsString=Temp$()MkdirsTempDir' Unpacks an archive into the created temporary directory.Exec["tar""-zxf","<path_to_archiv>/archive.tar.gz","-C", sTempDir]Wait' If the instruction EXEC [...] generates an error, you will be informed like this:IfProcess.LastValueThenPrintError.Code...
```

With this source code section


```
' Gambas class filePublicSubbtnStart_Click()DimsRuntimeDir, sTempDirAsStringtxaResults.Clear()txaResults.Insert(gb.Lf)' 1. Call of the function Temp$()sTempDir=Temp$()txaResults.Insert("File-Path 1  = "&sTempDir&gb.Lf)File.Save(sTempDir,"1")' 2. Call of the function Temp() - alternative syntaxsTempDir=Temp()txaResults.Insert("File-Path 2  = "&sTempDir&gb.Lf)' 2. Calling the function with alternative syntaxFile.Save(sTempDir,"2")' 3. Call of the function Temp(...) with default of a freely defined file name 'test'sTempDir=Temp$("test")txaResults.Insert("File-Path 3  = "&sTempDir&gb.Lf)File.Save(sTempDir,"3")' 4. Creation of the file with the path /tmp/gambas.1000/<PID>/link.tmp and the content "gambas-book.net"sTempDir=Temp$("content")txaResults.Insert("File-Path 4  = "&sTempDir&gb.Lf)File.Save(sTempDir,"gambas-book.net")' DateitxaResults.Insert("File-Content = "&File.Load(sTempDir)&gb.Lf)' 5. Creation of a file in a special temporary directorysRuntimeDir=Desktop.RuntimeDir&/"time.txt"txaResults.Insert("File-Path 5  = "&sRuntimeDir&gb.Lf)File.Save(sRuntimeDir,Date.ToUnixTime(Now()))' FiletxaResults.Insert("Unix Timestamp = "&File.Load(sRuntimeDir)&gb.Lf)txaResults.Insert("Date from Timestamp = "&Date.FromUnixTime(File.Load(sRuntimeDir))&gb.Lf)' 6. Creation of an empty text file in a temporary directorysTempDir=File.Dir(Temp())&/"gambas-book"IfExist(sTempDir)ThenDeleteDirRecursively(sTempDir)RmdirsTempDirEndif' If Exist(sTempDir) Then Shell.RmDir(sTempDir) ' Effective alternative!Shell.MkDir(sTempDir)File.Save(sTempDir&/"values.log","")txaResults.Insert("File-Path 6  = "&sTempDir&/"values.log"&gb.Lf)EndPublicSubDeleteDirRecursively(sDirAsString)DimsFile, sDirectoryAsStringForEachsFileInRDir(sDir,"*")IfNotIsDir(sFile)Then' Print "File-Path: ", sDir &/ sFileKillsDir&/sFileEndifNextForEachsDirectoryInRDir(sDir,"*", gb.Directory)' Print "Folder: ", sDirectoryRmdirsDirectoryNextEnd
```

results in these outputs:
Figure 6.12.0.1.1: Results 1
Another launch results in new temporary files as well as changed contents:
Figure 6.12.0.1.2: Results 2
The special feature in the source code is the deletion of the temporary directory with the alternative approaches via Shell.RmDir(sTempDir) and the procedure DeleteDirRecursively(sDir As String).


# 6.12.0.2 Digression: Property Desktop.RuntimeDir (gb.desktop)

The /run directory is a virtual temporary file system (https://en.wikipedia.org/wiki/Tmpfs). It exists in the main memory and is automatically emptied when the computer is restarted. The environment variable $XDG_RUNTIME_DIR defines a good place for your runtime files. It is the directory /run/user/<user-id> if the environment variable $XDG_RUNTIME_DIR is set to the default value. It seems that /run/user/<user-id> rivals the /tmp directory. Obviously /run seems to be more modern, as indicated by the description onhttps://unix.stackexchange.com/questions/13972/what-is-this-new-run-filesystem/13983#13983. It's certainly a good plan if each user has their own (temporary) directory under /run/user/<user-id> from the start.


```
$ echo $XDG_RUNTIME_DIR
/run/user/1000
```

Although Gambas currently only supports /tmp with Temp$() and generates its “gambas.<user-id>” itself, you also have access to the (base) directory /run/user/1000. You get access as a user via the value of the property Desktop.RuntimeDir (gb.desktop). This property (data type string) returns the base directory in which user-specific, but not necessarily runtime-required data and other stream objects such as Unix sockets or named pipes are to be stored. The user must be the only one with Unix access mode 0700 who has full access to the /run/user directory - which can be quickly checked:


```
hans@mint-183~ $cd/run/user
hans@mint-183/run/user $ls-lintotal0drwx------7hans hans180Aug2410:371000
```

See chapter '6.1 Paths in Gambas' for further instructions.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Streams



# Chapters



# Table of Contents



# 6.13 Class CsvFile

The class CsvFile (gb.util) can be used to read a CSV file and decode its contents. Note: It is assumed that the first line of the CSV file necessarily contains the field names. If not all field names are given, then the missing field name is replaced by a # character followed by the index of the field in the imaginary field list. In general: The CsvFile class cannot handle CSV files that do not have a (first) line with the field names (header), although the header with the field names is optional according toRFC4180!
You can create an object of the class. It will open a CSV file for reading:


```
Dim hCsvFile As CsvFile
hCsvFile = New CsvFile ( Path As String [ , Separator As String, Escape As String ] )
```



# 6.13.1 Properties

The CsvFile class has three properties:
Table 6.13.1.1 : Properties of the CsvFile class
All field names in the list of field names are normalized using the following algorithm:


# 6.13.2 Methods

The CsvFile class has only this one method:


```
Function Read() As Collection
```

The function reads a CSV file and returns it as a collection of field values indexed by their field names: CsvFile.Fields property. The field values are normalized using the following algorithm:


# 6.13.3 Notes

You should be aware of and follow the following hints:
The correct conversion of the rows in a CSV file to Variant[] instead of Collection, for example, would look like this, where you get all the field names via the CsvFile.Fields property:


```
PrivateFunctionGetData()AsVariant[]DimaFieldListAsVariant[]DimcLineAsCollectionDimsFieldAsString, aFieldsAsString[]aFieldList=NewVariant[]WhileNothCSVFile.EofcLine=hCSVFile.Read()aFields=NewString[]ForEachsFieldInhCSVFile.FieldsaFields.Add(cLine[sField])NextaFieldList.Add(aFields)WendReturnaFieldListEnd
```

For example, if you want to know if the field with the field name “location” is set in the current row, then you need to use the Exist() method for Collection:


```
Dim cLine As Collection
...
cLine = hCSVFile.Read()
If Not cLine.Exist("ort") Then ...
```

Here are more hints for creating and editing CSV files - found on the websitehttps://www.thoughtspot.com/blog/6-rules-creating-valid-csv-files- by Jon Avrach, the observance of which will minimize problems, especially when using CSV files to import data into databases:
For more details on these notes, you can get good information on Wikipedia with appropriate search criteria and in theRFC4180 (CSV specification).
In the projects about CSV, 2 cases have been distinguished. The first case is about writing CSV files with data from different sources. The sources were data in controls such as GridView or TextArea or XML files or database tables. The sources for the second case were CSV files whose content is read and processed, saved or displayed in different ways. Only for this case, the CsvFile class from the gb.util component can be used.
In the chapter →https://www.gambas-buch.de/doku.php?id=k17:k17.7:k17.7.6:startyou can find a project for exporting selected data to a CSV file and in the chapter athttps://www.gambas-buch.de/doku.php?id=k17:k17.7:k17.7.7:startyou can find a project for importing data from a CSV file. Interesting in both cases is the possibility to specify both the separator character and the escape character. You can also specify whether the field names should be saved as headers as well, or preview to see if a (first) line with the field names as headers exists.
Figure 6.13.3.1: Data export
Figure 6.13.3.2: Data import.
The archives for these two revised projects can be found in the download area.


# 6.13.4 Project 1 - CSV2XML

The first project first reads a CSV file in the dialog. Then the content of the CSV file is prepared in such a way that
The thus prepared content is saved under the original file name. Afterwards, the content of the prepared CSV file is decoded with a new CsvFile object, specifying the field separator and the escape character, and written to an XML document (Chapter 27.2.1). Finally, the XML document is saved. There is no check if the CSV file contains a list of field names in the first line. A header is simply expected, because otherwise the use of the class CsvFile is not possible!
Figure 6.13.4.1: Content of the prepared CSV file
Figure 6.13.4.2: Extract from the contents of the XML file.
The source code is given in full and commented:


```
[1]' Gambas class file[2][3]Private$sSeparatorAsString[4]Private$sEscapeAsString[5]PublichXmlWriterAsXmlWriter[6]PublicsFilePathAsString[7]PublichCSVFileAsCsvFile[8][9]PublicSubForm_Open()[10]FMain.Center[11]FMain.Resizable=True[12]FMain.Caption="CSV2XML | Gambas-Version: "&System.FullVersion[13][14]$sSeparator=","[15]$sEscape="\""' Alternative: Chr(34) => "[16][17]btnConvertAndSave.Enabled=False[18][19]End' Form_Open()[20][21]PublicSubbtnPrepareAndSave_Click()[22]sFilePath=FileOpen()[23]IfsFilePathThen[24]txaPrepare.Text=Prepare(sFilePath)[25]txaPrepare.Pos=0[26]File.Save(sFilePath, Prepare(sFilePath))[27]Wait[28]btnPrepareAndSave.Enabled=False[29]btnConvertAndSave.Enabled=True[30]Else[31]Return[32]Endif[33]End[34][35]PublicSubbtnConvertAndSave_Click()[36]WriteXML()[37]btnPrepareAndSave.Enabled=True[38]btnConvertAndSave.Enabled=False[39]End[40][41]PublicSubbtnClose_Click()[42]FMain.Close()[43]End' Close[44][45]PrivateFunctionPrepare(sFilePathAsString)AsString[46][47]DimsCSVContent, sCSVChanged, sLine, sField, sNewLineAsString[48][49]sCSVContent=File.Load(sFilePath)[50][51]ForEachsLineInSplit(sCSVContent, gb.NewLine, $sEscape,False,True)[52]sLine=Trim(sLine)[53]IfNotsLineThenContinue' Blank lines are ignored[54]sNewLine=""[55]ForEachsFieldInSplit(sLine, $sSeparator, $sEscape,False,True)[56]IfsFieldNotBegins $sEscapeAndIfsFieldNotEnds $sEscapeThen[57]sField=$sEscape&sField&$sEscape[58]Endif[59]IfsField=$sEscape&$sEscapeOrIfsField=$sEscape&" "&$sEscapeThen[60]' sField = $sEscape & "" & $sEscape ' Case 1[61]sField="ZERO"' Case 2[62]Endif[63]sNewLine&=sField&$sSeparator[64]Next[65]IfsNewLine Ends $sSeparatorThensNewLine=Left(sNewLine,-1)[66]sCSVChanged&=sNewLine&gb.NewLine[67]Next[68][69]sCSVChanged=Left(sCSVChanged,-1)' Line end character of the *last* line is removed[70][71]ReturnsCSVChanged[72][73]End' Prepare(...)[74][75]PrivateSubWriteXML()[76][77]DimkAsInteger[78]DimcLineAsCollection[79]DimsFieldAsString[80][81]hCSVFile=NewCsvFile(sFilePath, $sSeparator, $sEscape)[82][83]hXmlWriter=NewXmlWriter[84]hXmlWriter.Open(Zero,True,"UTF-8")[85][86]hXmlWriter.PI("Document","version=\""&Format(Now,"dd.mm.yyyy-hh:nn")&"\"")[87][88]hXmlWriter.StartElement("root")[89]hXmlWriter.Comment("DataBase: "&File.Name(sFilePath))[90][91]WhileNothCSVFile.Eof[92]hXmlWriter.StartElement("item")[93]cLine=hCSVFile.Read()[94]k=0[95]ForEachsFieldInhCSVFile.Fields[96]IfsField="zero"Then[97]hXmlWriter.Element("field_"&CStr(k+1), cLine[sField])[98]Else[99]hXmlWriter.Element(sField, cLine[sField])[100]Endif[101]Inck[102]Next[103]hXmlWriter.EndElement[104]Wend[105][106]hXmlWriter.EndElement' root[107]hXmlWriter.EndDocument[108]txaPrepare.Text=hXmlWriter.Data[109]txaPrepare.Pos=0[110]File.Save(File.Dir(sFilePath)&/File.BaseName(sFilePath)&".xml", hXmlWriter.Data)[111][112]End[113][114]PrivateFunctionFileOpen()AsString[115]Dialog.Title="Import a csv file!"[116]Dialog.Filter=["*.csv","csv-Files"][117]Dialog.Path=Application.Path&/"CSV"[118]IfDialog.OpenFile(False)=TrueThen' Multiselect=False (Standard)[119]Message.Info("The opening of the csv file was cancelled!")[120]Return[121]Else[122]ReturnDialog.Path[123]Endif[124]End' FileOpen()
```

Comment:


# 6.13.5 Digression - CSV2XML

In this digression, you will be presented with a (bash) script that likewise allows you to quickly transform the contents of a CSV file into the contents of an XML file. The executable script expects exactly 3 parameters:
→ the file name of the CSV file,→ the field separator, and the→ escape character:


```
hans@mint71 ~/GB3BUCH/.../Projekte/CSV_READ/SH-Skript $ ./test.sh"db.csv"",""\""
```

If the number of parameters is not 3, then there is an error message with a hint about the correct syntax:


```
Syntax: ./test.sh 'CSV-File-Path' 'Field separator' 'Escape character'
# hans@mint71 ~/GB3BUCH/.../Projekte/CSV_READ/SH-Skript $ ./test.sh "db.csv" ","
```

If this is the content of the CSV file:


```
"First name","Age","Residence"
"Hans","68","Pößneck"
"Peter","56","Cork"
"Anna","18","Jena"
```

then here you can see the result in the XML file:


```
<?xml version="1.0" encoding="UTF-8"?>
<Data>
  <Record>
    <First name>Hans</First name>
    <Age>68</Age>
    <Residence>Pößneck</Residence>
  </record>
  <Record>
    <First name>Peter</First name>
    <age>56</age>
    <Residence>Cork</Residence>
  </record>
  <Record>
    <FirstName>Anna</FirstName>
    <Age>18</Age>
    <Residence>Jena</Residence>
  </Record>
</Data>
```

The tested source code from the (bash) script is well documented and is given in full:


```
#!/bin/bash # She-Bang Line → Bash interpreterif[$#-ne3]# If the number of parameters (= $#) is not equal to 3 ...then# FARB-WERTE:RO="\033[31m"# redNO="\033[0m"# regularecho-e"${RO}Syntax: $0 'CSV-File-Path' 'Field separator' 'Escape character'"exit1fi# Saving the variable IFS in the variable backIFS | IFS = Internal Field SeparatorbackIFS=$IFSfile_in=$1# Parameter 1echo$file_in# Filename for file_out (XML-File) generatefilebasename=${file_in%.*}fileextension=".xml"file_out=$filebasename$fileextensionecho$file_outseparator=$2# Parameter 2escape=$3# Parameter 3# 1. Read line (= list of field names) from CSV filereadheader_line<"$file_in"IFS=$separator# store list of field names in array 'header' -> operator =()header=($header_line)IFS='*'# Read in the content of the CSV file line by line and save it in the array 'content'.i=0whilereadcontent[$i]do# echo "Line $i: ${content[i]}"((i++))done<$1# 1. Delete row in array 'contentunsetcontent[0]# copy array - but without the now empty first elementcontent=(${content[*]})# write content of the XML file#-------------------------------------------------------------------------------# XML-Prologecho'<?xml version="1.0" encoding="UTF-8"?>'>$file_out# XML-Root-Elementecho'<Data>'>>$file_out# XML-Elemente#-------------------------------------------------------------------------------forrecordin"${content[@]}"doecho'  <Record>'>>$file_outindex=0#.............................................................................IFS=$separatorlist=($record)for((c=0; c<=${#header[@]}-1;c++))dotag=${header[$c]#$escape}tag=${tag%$escape}value=${list[$c]#$escape}value=${value%$escape}echo'    <'${tag}'>'${value}'</'${tag}'>'>>$file_outdone#.............................................................................echo'  </Record>'>>$file_out((index++))done#-------------------------------------------------------------------------------echo'</Data>'>>$file_outIFS=$backIFSexit0
```



# 6.13.6 Project 2 - CSV2GRID

In the second project, a CSV file is read. The data decoded with the CsvFile read method is displayed in a GridView.
Source code:


```
' Gambas class filePublicSubbtnReadCSV_Click()Dimi, iValAsIntegerDimsFieldAsNewString[]DimsKey, sSeparator, sEscapeAsStringDimhCsvFileAsCsvFileDimcLineAsCollectionsSeparator=","sEscape="\""' Chr$(34)' Open CSV fileTryhCsvFile=NewCsvFile(FileOpen(), sSeparator, sEscape)IfErrorThenReturnGridView1.Columns.Count=0' Prepare headerGridView1.Header=TruesField=hCsvFile.FieldsGridView1.Columns.Count=sField.CountFori=0TosField.Count-1GridView1.Columns[i].Title=UCase(sField[i])Next' Read CSV dataWhileNothCsvFile.EofcLine=hCsvFile.Read()IfcLine.Count>0Then' Collection not empty?IncGridView1.Rows.CountiVal=0ForEachsKeyInhCsvFile.FieldsGridview1[GridView1.Rows.Count-1, iVal].text=cLine[sKey]InciValNextEndifWendGridView1.MoveTo(0,0)GridView1.Columns.Width=-1' Adjust column width automaticallyEndPrivateFunctionFileOpen()AsStringDialog.Title=("Import csv-File!")Dialog.Filter=["*.csv","csv-Files"]Dialog.Path=Application.Path&/"Files"IfDialog.OpenFile(False)=TrueThen' Multiselect=False (Standard)Message.Info(("Opening the csv file has been canceled!"))Return"break"ElseReturnDialog.PathEndifEnd' FileOpen()
```

Figure 6.13.6.1: Data from a CSV file - displayed in a GridView.


# 6.13.7 Project 3 - QSLITE2CSV

Project 3 is dedicated to the case where data from a database table is stored in a CSV file. Note: In the case of database tables, MyQSL, PostgreSQL or SQlite provide dump or copy methods that can be used to save data directly to a CSV file. Therefore, only the method in which the selected data from a DB table is converted to a string representing the contents of a CSV file is presented:


```
PrivateFunctionGetCSVData()AsStringDimsCSVLine, sRequest, sSeparator, sEscapeAsStringDimhRequestAsSQLRequestDimdbResultAsResultDimrFieldAsResultFieldhRequest=hConnection.SQL.Select("").From(cmbDBTabellen.Text)sRequest=hRequest.Get()dbResult=hConnection.Exec(sRequest)IfdbResult.Count=0ThenMessage(("The number of selected records is zero!"))ReturnEndifFMain.Caption="Data export from database: '"FMain.Caption&=File.Name(sDBFilePath)&"' "FMain.Caption&=" Table: '"&cmbDBTables.TextFMain.Caption&="' in CSV file"sSeparator=","' Field separatorsEscape="\""' Text separator' Field listForEachrFieldIndbResult.FieldssCSVLine&=sEscape&Upper(rField.Name)&sEscape&sSeparatorNextsCSVLine=Left(sCSVLine,-1)' Last field name WITHOUT field separatorsCSVLine&=gb.NewLine' Data linesForEachdbResultForEachrFieldIndbResult.FieldsIfdbResult[rField.Name]=""ThensCSVLine&=sEscape&"NULL"&sEscape&sSeparatorElsesCSVLine&=sEscape&dbResult[rField.Name]&sEscape&sSeparatorEndifNextsCSVLine=Left(sCSVLine,-1)' Last field name WITHOUT field separatorsCSVLine&=gb.NewLineNextsCSVLine=Left(sCSVLine,-1)' Last line WITHOUT gb.NewLineReturnsCSVLineEnd
```

Figure 6.14.7.1: Data Export DB Data to CSV File
In the TextArea you can see an excerpt from the content of the CSV file.
Hint:In the chapterhttps://www.gambas-buch.de/doku.php?id=k27:k27.6:start#projekt_2xml_csva project is presented, where the transformation XML → CSV is implemented.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.0 Data types - Overview

Data types are required if you want to store data - as character-bound information - in a variable. Describe data types:
There are native data types in Gambas. These include, for example, data types with the names (keyword), integer, byte, string or float. An overview of the native data types can be found in table 7.0.1 The syntax of a structure has been introduced in Gambas 3. These structures allow you to combine logically relevant IT units (both data types and classes or objects) into a new unit - a structure. However, this structure has no methods or events. Of particular importance in Gambas as an object-oriented language are the classes. Anything that is not a data type, structure, or executable code is a class. They are characterised by the fact that they are a logical encapsulation of properties, methods and events. An instance of a class is called an object.
Summary
Thus, structures take amediatingposition between the native data types and the abstract classes (concrete and abstract in the sense of their definition).
Table 7.0.1: Overview of the native data types in Gambas


# 7.0.1 Array data type

The native data types have an associated array data type whose name corresponds to the name of the native data type and follows the square brackets: {code_b_0}
The description of arrays can be found in chapter 20.12.


# 7.0.2 Data type functions

You can use the following functions to determine the data type. The argument passed to the data type functions is a string or a data type in SizeOf () or an expression in TypeOf (). The function value is either True or False or a memory value or a data type.
Table 7.0.2.2: Overview of the data type functions 1
Table 7.0.2.3: Overview of Data Type Functions 2
The function value of SizeOf (data type) or TypeOf (expression) is one of the following constants:
Table 7.0.2.3: Overview of the function values of SizeOf (data type) and TypeOf (expression)
Hints:


# 7.0.3 Conversion of data types

Gambas provides functions for converting data types. For information on these functions, see chapter 9.7 Conversion Functions.
However, Gambas also automatically converts data types. For example,“2” is a string, but can also be interpreted as an integer 2 (integer) and can be used “on the fly” after a conversion, as the following examples show:


```
PublicSubOnTheFly_Click()Print"2"+2' Integer-NumberPrint"Can '2' be interpreted as an integer number? ---> ";;IsInteger("2")Print"Type_1 = ";;TypeOf("2"+2)' 7 => Float' String + Integer' String -> Integer => 2 + 2 = 4Print"2"&2' StringPrint"Type_2 = ";;TypeOf("2"&2)' 9 => String' String & Integer' Integer -> String => "2" & "2" = "22"Print2.1*("2"&2)' Floating-point numberPrint"Type_3 =  ";;TypeOf(2.1*("2"&2))' 7 => Float' Float * (String & Integer)' Integer -> String => "2" & "2" = "22"' Float * String => 2.1 * "22"' String -> Float => 2.1 * 22.0 = 46.2End' OnTheFly()
```

These are the expenses in the console:


```
4
Can '2' be interpreted as an integer number? --->  True
Type_1 =  7
22
Type_2 =  9
46,2
Type_3 =   7
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.1 Constants and Enumeration

In contrast to variables, constants contain any number of fixed values that you cannot change at program runtime. A corresponding attempt would result in an error message! You must also specify the required data type for the constants in the declaration.


# 7.1.1.1 Constants

Constants data types can only be Boolean, integer, long, float or string. With the optional keywordsPublicorPrivateyou can set the access rights to a constant. If you use the keyword Public, the declared constant can also be accessed from the other classes that have a reference to an object of this class. Without public or private, only one class global constant is declared.


```
Public Const FILE_PATH As String = "/home/hans/files"
Const COURSE_NUMBER As Integer = 7
Const FACTOR As Float = 2.222
Private Const DEBUG As Boolean = True
```

These declarations of constants are incorrect:


```
(1) Const VALUE As Float = COURSE_NUMBER / FACTOR
(2) Const FACTOR3 As Float = 2.71828182845 / 3.1415
(3) Const DATE As Date = "12.12.2012"
(4) Const NUMBER_PI As Float = Pi()
```

Comment:


# 7.1.2 Enumeration - Enumeration

An enumeration is a list of integer constants in a list where each constant has its own name and integer value. The individual values in the list are separated by commas. If you do not assign an integer value, the first value in the list is 0 and all subsequent values are increased by 1.  The keyword is Enum. You can also define access rights for constants using the keywords Public or Private.


```
(1)PublicEnumSpring, Summer, Autumn, Winter(2)PrivateEnumtop=5, bottom,left,right(3)EnumLehmannRed=16711680, MeierYellow=&HFFFF44, BoegeGreen=&H00FF08(4)(5)PublicSubSetSeason(iSeasonAsInteger)(6)SelectCaseiSeason(7)CaseSpring(8)Message.Info("Spring lets its blue ribbon ...!")(9)CaseSummer(10)Message.Info("Summer, sun, Baltic Sea beach!")(11)CaseAutumn(12)Message.Info("When the leaves fall in autumn ...!")(13)CaseElse' Winter(14)Message.Info("Winter at last!")(15)EndSelect' iSeason(16)End' SetSeason(...)(17)(18)PublicSubSetColour(iColourAsInteger)(19)TextArea1.Background=iColour(20)End' SetColour(...)(21)(22)PublicSubbtnEnumeration_Click()(23)SetSeason(Winter)(24)SetColour(MeierGelb)(25)Message.Info("The value for left is "&left&".")(26)End' btnEnumeration_Click()
```

Comments:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# 7.2.0 Structures - Struct

The syntax of a structure introduced in Gambas 3 (keyword Struct) can be understood as a complex, user-defined data type. Structures or records or tuples, as a structure is called in other languages, allow you to combine several variables or constants of different types under one variable. The individual variables are called fields. You can embed structures in other structures and declare arrays of structures. Arrays of structures can only be used as embedded arrays - static arrays with a fixed size.
Figure 7.2.0.1: Program interface for a project with structures


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.2.1 Structures - Struct

The following lines describe the syntax for declaring a structure:


```
PUBLIC STRUCT Identifier
  Field_1 [ Embedded array declaration ] AS [ Datatype ]
  Field_2 [ Embedded array declaration ] AS [ Datatype ]
  ...
  Field_n [ Embedded array declaration ] AS [ Datatype ]
END STRUCT
```



# 7.2.1.1.1 Declaration Struct

This declaration defines the structure of students with 5 fields:


```
PublicStruct Student
  GradeAsIntegerBirthDateAsDateSurnameAsStringDG1CourseAsStringDG2CourseAsStringEndStruct
```

Note that when declaring a structure as an access right, you can only set Public. The fields from Year to DG2Course are variables with the Public access right.


# 7.2.1.2 Arrays of structures

The special feature of the following declaration of a structure course is that in the structure student the field course list[8] is an array with elements of type Struct from the course declaration:


```
PublicStruct Course
  CourseSubjectAsStringCourseTeacherAsStringEndStructPublicStruct Student
  GradeAsIntegerBirthDateAsDateSurnameAsStringCourseList[8]AsStruct CourseEndStruct
```

Arrays with elements of the type Struct are not real arrays, because they have very few methods of the original array class:
You can then declare variables of the user-defined (pseudo-)type Struct. First a variable course participant of type Struct and then an array course list[22], in which the relevant data of 22 students are stored and whose elements are of type Struct:


```
PublicCourseParticipantAsStruct StudentPublicStudentAsNewStudent' Alternatively, this also works ...PublicCourseList[22]AsStruct StudentPublicCourseList[22]AsNewStudent' → Error message
```



# 7.2.1.3 Accessing Structures and their Fields

After you have declared structures, you will learn how to access the structure declared in the previous section and its fields read and write using variables of type Struct. The following program interface is used to enter the values of the individual fields and their display:
Figure 7.2.1.3.1: Program interface
First, access to the input mask is released. Then all 5 fields of the variable course participants of type Struct (student) are assigned values or the default values are overwritten and the current content of the variable course participants is inserted into the array course list[22].


```
PublicSubSaveNewRecord()CourseParticipant.Grade=cmbJGS.TextStudent.LastName=txbLastName.TextStudent.BirthDate=dbGebDate.ValueStudent.DG1Course=cmbDGF1.TextCourseParticipant.DG2Course=cmbDGF2.Text' Store new record in the array CourseList[].CourseList[iRecordNumber]=CourseParticipantEnd' SaveNewRecord()
```

Alternatively, you can use the With statement to write simplified assignments. The source code is easier to read:


```
PublicSubSaveNewRecord()WithCourseParticipant
      .grade=cmbJGS.Text.surname=txbSurname.Text.BirthDate=dbBirthDate.Value.DG1Course=cmbDGF1.Text.DG2Course=cmbDGF2.TextEndWithCourseList[iRecordNumber]=CourseParticipantEnd' SaveNewRecord()
```

A compact alternative is recommended if you immediately insert the contents of a record in the price list array[22]:


```
PublicSubSaveNewRecord()CourseList[iRecordNumber].Grade=cmbJGS.TextCourseList[iRecordNumber].LastName=txbLastName.TextCourseList[iRecordNumber].BirthDate=dbBirthDate.ValueCourseList[iRecordNumber].DG1Course=cmbDGF1.TextCourseList[iRecordNumber].DG2Course=cmbDGF2.TextEnd' SaveNewRecord()
```

The following two procedures demonstrate how to read access the contents of the individual fields of a structure:


```
PublicSubShowCurrentRecord()cmbJGS.Text=CourseList[iCurrentRecord].GradetxbLastName.Text=CourseList[iCurrentRecord].LastNamedbBirthDate.Value=CourseList[iCurrentRecord].BirthDatecmbDGF1.Text=CourseList[iCurrentRecord].DG1CoursecmbDGF2.Text=CourseList[iCurrentRecord].DG2CourseEnd' ShowCurrentRecord()
```



```
PublicSubShowRecords()DimiCountAsIntegerTextArea1.ClearForiCount=0ToiRecordNumber
    TextArea1.Insert(CourseList[iCount].Grade&gb.NewLine)TextArea1.Insert(CourseList[iCount].LastName&gb.NewLine)TextArea1.Insert(Format(CourseList[iCount].BirthDate,"dddd - dd. mmmm yyyy")&gb.NewLine)TextArea1.Insert(CourseList[iCount].DG1Course&gb.NewLine)TextArea1.Insert(CourseList[iCount].DG2Course&gb.NewLine)IfiCount<iRecordNumberThenTextArea1.Insert("-------------------------"&gb.NewLine)Next' iCountTextArea1.Pos=Len(TextArea1.Text)' ---> Jump to the last lineEnd' ShowRecords()
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.2.2 Project with structures

The following section specifies the full source code for a project that uses a structure and an array of elements of type Struct. If the project reminds you of a database application, you are on the right track.


# 7.2.2.2.1 Project description

Some special features of the project must be mentioned:
Figure 7.2.2.1.1: Program interface


# 7.2.2.2.2 Project source code



```
' Gambas class filePublicStruct Student
  GradeAsIntegerBirthDateAsDateSurnameAsStringDG1CourseAsStringDG2CourseAsStringEndStructPublicCourseParticipantAsNewStudentPublicConstMAX_STUDENTAsInteger=22PublicCourseList[22]AsStruct StudentPubliciRecordNumberAsInteger=-1PubliciCurrentRecordAsIntegerPublicSubForm_Open()FMain.CenterFMain.Resizable=FalsecmbDGF1.Text=cmbDGF1[0].TextcmbDGF2.Text=cmbDGF2[1].TexttlblRecords.Foreground=Colour.RedtlblRecords.Visible=FalseStatus(False)btnUpdate.Enabled=FalsebtnSave.Enabled=FalsetxbSurname.SetFocusEnd' Form_Open()PublicSubSaveNewRecord()CourseParticipant.Grade=cmbJGS.TextStudent.LastName=txbLastName.TextStudent.BirthDate=dbBirthDate.ValueStudent.DG1Course=cmbDGF1.TextCourseParticipant.DG2Course=cmbDGF2.Text' Store new record in the array CourseList[].CourseList[iRecordNumber]=CourseParticipantEnd' SaveNewRecord()PublicSubUpdateCurrentRecord()CourseParticipant.Grade=cmbJGS.TextStudent.LastName=txbSurName.TextStudent.BirthDate=dbBirthDate.ValueStudent.DG1Course=cmbDGF1.TextCourseParticipant.DG2Course=cmbDGF2.Text' Store current record in array CourseList[].CourseList[iCurrentRecord]=CourseParticipantEnd' SaveNewRecord()PublicSubShowCurrentRecord()cmbJGS.Text=CourseList[iCurrentRecord].GradetxbSurName.Text=CourseList[iCurrentRecord].SurNamedbBirthDate.Value=CourseList[iCurrentRecord].BirthDatecmbDGF1.Text=CourseList[iCurrentRecord].DG1CoursecmbDGF2.Text=CourseList[iCurrentRecord].DG2CoursetlblRecords.Text=iCurrentRecord+1End' ShowCurrentRecord()':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::PublicSubbtnNew_Click()btnUpdate.Enabled=FalsecmbJGS.Text=cmbJGS[0].TexttxbSurname.CleardbBirthDate.Value="6/1/1995"cmbDGF1.Text=cmbDGF1[0].TextcmbDGF2.Text=cmbDGF2[1].TextbtnSave.Enabled=TrueStatus(True)txbLastName.SetFocusEnd' btnNew_Click()PublicSubbtnSave_Click()IftxbSurname.Text=ZeroThenMessage.Warning("The Surname must be entered.!")txbSurname.SetFocusReturnEndif' txbLastname.Text = Zero?InciRecordNumber
  iCurrentRecord=iRecordNumber
  SaveNewRecord()ShowRecords()tlblRecords.Visible=TruetlblRecords.Text=iRecordNumber+1IfiRecordNumber=MAX_STUDENT-1ThenMessage.Info("Attention!\nThe course enrolment list is full.")btnSave.Enabled=FalsebtnNew.Enabled=FalsebtnUpdate.Enabled=TrueReturnEndif' iRecordNumber = MAX_STUDENT-1 ?btnSave.Enabled=FalsebtnUpdate.Enabled=TruebtnExport.Enabled=TrueEnd' btnSave_Click()PublicSubbtnBack_Click()IfiCurrentRecord>0ThenDeciCurrentRecord
     ShowCurrentRecord()Endif' iCurrentRecord > 0 ?End' btnBack_Click()PublicSubbtnForward_Click()IfiCurrentRecord<iRecordNumberThenInciCurrentRecord
     ShowCurrentRecord()Endif' iCurrentRecord < iRecordNumber ?End' btnBack_Click()PublicSubbtnFirst_Click()IfiRecordNumber>0TheniCurrentRecord=0ShowCurrentRecord()Endif' iRecordNumber > 0 ?End' btnFirst_Click()PublicSubbtnLast_Click()IfiRecordNumber>0TheniCurrentRecord=iRecordNumber
     ShowCurrentRecord()Endif' iRecordNumber > 0 ?End' btnLast_Click()PublicSubbtnUpdate_Click()UpdateCurrentRecord()ShowRecords()btnExport.Enabled=TrueEnd' btnUpdate_Click()PublicSubStatus(iStatusAsBoolean)IfiStatus=TrueThencmbJGS.Enabled=TruetxbSurname.Enabled=TruedbBirthDate.Enabled=TruecmbDGF1.Enabled=TruecmbDGF2.Enabled=TrueElsecmbJGS.Enabled=FalsetxbSurname.Enabled=FalsedbBirthDate.Enabled=FalsecmbDGF1.Enabled=FalsecmbDGF2.Enabled=FalsebtnExport.Enabled=FalseEndifEnd' Status(iStatus As Boolean)PublicSubShowRecords()DimiCountAsIntegerTextArea1.ClearForiCount=0ToiRecordNumber
   TextArea1.Insert(CourseList[iCount].Grade&gb.NewLine)TextArea1.Insert(CourseList[iCount].SurName&gb.NewLine)TextArea1.Insert(Format(CourseList[iCount].BirthDate,"dddd - dd. mmmm yyyy")&gb.NewLine)TextArea1.Insert(CourseList[iCount].DG1Course&gb.NewLine)TextArea1.Insert(CourseList[iCount].DG2Course&gb.NewLine)IfiCount<iRecordNumberThenTextArea1.Insert("--------------------------"&gb.NewLine)Next' iCountTextArea1.Pos=Len(TextArea1.Text)' ---> Jump to the last lineEnd' ShowRecords()PublicSubbtnExport_Click()DimhFileAsFileDimiCountAsIntegerDialog.Title="Export records from a StructDataBase file!"Dialog.Filter=["*.sdb","StructDataBase files"]IfDialog.SaveFile()ThenReturnhFile=OpenDialog.PathForWriteCreateForiCount=0ToiRecordNumberWrite#hFile, CourseList[iCount]AsStudentNext' iCountClose#hFileCatchMessage.Error(Error.Text)End' btnExport_Click()PublicSubbtnImport_Click()DimhFileAsFileDimiCountAsIntegerDialog.Title="Import records from a StructDataBase file!"Dialog.Filter=["*.sdb","StructDataBase Files"]IfDialog.OpenFile(False)ThenReturnhFile=OpenDialog.PathForReadiCount=0WhileNotEof(hFile)CourseList[iCount]=Read#hFileAsStudentInciCountWendClose#hFile
 
  iRecordNumber=iCount-1PrintiRecordNumberIfiCountThenStatus(True)ShowRecords()tlblRecords.Visible=TruebtnUpdate.Enabled=TrueiCurrentRecord=0ShowRecords()ShowCurrentRecord()ElseMessage.Info("The import file is empty!")ReturnEndif' iIndexCount?CatchMessage.Error("The data import was faulty!"&gb.Newline&gb.NewLine&"Error:   "&Error.Text)End' btnImport_Click()
```



# 7.2.2.2.3 Data export and data import

The project has a memory management system that allows you to save a structure in a file (data export) or import the contents of an export file into a structure (data import). All data records are written to the file stream serialized via WRITE, because Gambas supports the “serialization” of variables when they are written to a stream. Gambas formats the data in such a way that they can be recovered from the file later (data import). However, the data in the export file can only be read by Gambas programs, because they are formatted in a gambas-specific format. The extension of the export file is freely selectable; it would be well suited for. txt or. dat or. sdb (StructDataBase). The order of the data in the export file corresponds to the declaration of the structure, as shown in the following excerpt from an export file (age group, date of birth, surname (Last name), course1, course2):


```
Byte (hex)	0B 00 00 00 36 DF 25   00 00 00 00 00 05 41 61 64 6D 03 42 49 4F 03 43 48 45
Plain text:	11 .  .  .  01 06 1995 .  .  .  .  .  .	A  d  a  m  .  B  I  O  .  C  H  E
Conversion date:	CFloat(Date(1995, 06, 01, 0, 0, 0)) = 2881974 (dez) = 25DF36 (hex)
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# 7.3 Abstract data types (gb. data)

Currently, various abstract data types (ADT) are implemented for gambas. The new component gb.data, developed by Tobias Boege, provides these abstract data types. Fortunately, no special dependencies are required to compile the component. Because of the basic nature of the component, this is also desirable. Using gb.data in your projects is therefore easy. The component gb.data is included in Gambas since version 3.3.
Figure 7.3.1: Project PriorityQueue (ADT)
As you can see - do not see anything of the abstract data types, because the ADTs are structures for data organization. The data is read in or generated in the program and stored in the structures used and displayed in suitable components from the structures. This statement applies to all projects presented in chapter 7.3.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.3.1 Class List (gb. data)

The List class implements a circular, double-linked list of elements. The classification as “double-linked” means that each item in the list is linked to a previous and next item in the list. In a “circular” list, the successor of the last element is again the first element and the predecessor of the first element is the last element.
So one can run through these kind of lists ring-shaped both forward and backward. The elements in a chained list are of type Variant. This allows you to save everything in a chained list - from integer to float and string to objects.


# 7.3.1.1.1 Properties

The properties of a concatenated list are manageable in number and are shown in the following table:
Table 7.3.1.1.1.1: Properties of the List class


# 7.3.1.2 Methods of a List Object

A concatenated list always has a virtual root element that has no value. When a list object is instantiated, only the root element exists. It is its own predecessor and successor. In this case, the list is also called “empty”.
The root element is logically always between the first and the last element. However, you do not have access to this root element. It is ignored in all operations because it has no value, but the root element helps explain some methods.
Table 7.3.1.2.1: Methods of the List class


# 7.3.1.3 The difference between list and array (variant[])

Note that the Find* () methods do not work well with the CPU data caches. The list elements are allocated separately, individually, in the memory of the computer and are then loosely connected to each other. Modern computers profit greatly from their fast cache caches, which store values according to heuristics, the spatiality of accesses, for example, in order to be able to access them very quickly at a later date. Thus, when a program accesses a memory block, the computer assumes that it will access another memory block nearby shortly afterwards. However, this is not the case for lists, since their elements can be distributed anywhere in the main memory. The iteration over many list elements (as when searching for values in the list) renders all data in the CPU data caches unusable, which in turn slows down the execution of the entire program.
In this context, it is also possible to access the ith element in a list with' hList[i]'. However, this is a very time-consuming operation, since all elements from the first to the third element have to be run through. Similar to List. Take (), the index' i' can be negative to count elements backwards from the end of the list.
A list is not meant for arbitrary access to the elements as you are used to from an array, but for sequential access patterns (MoveNext () and MovePrev ()). A list can be much more efficient than an array if you don't use it too often to find values or move through all the elements. The advantage of saving the elements of the list separately is that a very low and above all constant effort must be used if a list element is to be added or removed. However, if an element is added or removed from an array, the entire array may have to be copied to a different location, which is very time-consuming for large arrays.
Whether a list or an array is used depends on the intended access pattern and must be carefully considered beforehand. In case of doubt, you should always use an array. For all stress tests carried out, the Variant[] class was superior to the List class.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.3.2 Class Stack (gb. data)

The Stack class implements a stack of elements. This class uses the data type Variant for its elements.
A stack is a data structure that functions according to the LIFO principle. The principle “Last in, first out” describes abstractly what can be imagined, for example, as a stack of paper in a box. If you want to add a sheet of paper to the stack, you have to place it on top of the stack. The effort to lift parts of the stack to place the paper anywhere is simply too great. For this reason, it is also possible to remove only the topmost sheet of paper from the pile. The last added element is the first removed element (LIFO). In this sense, the stack is a data structure opposite the queue. The last element of a stack is also referred to as its topmost element. It is characteristic for the stack that it is only possible to operate at the top of the data structure - add and remove elements.


# 7.3.2.1 Properties

The properties of a stack are shown in the following table:
Table 7.3.2.1.1: Properties of the class stack


# 7.3.2.2.2 Methods of a stack object

With these 4 methods, a stack can be used as a data structure according to the LIFO principle:
Table 7.3.2.2.2.1: Methods of the class stack


# 7.3.2.3 Project for using the class stack

The Gambas interpreter also manages a stack on which all function calls are logged. This information can prove invaluable in the event of a bug in the IDE, for example in case of a program crash, to identify and fix the bug. You can better understand how the error occurred.
The stack of the Stack class in the project stores all functions that were called in the current code path. A code path is a chain of function calls. The associated stack is also called a “Call trace” or “Backtrace”. A backtrace is created using the following simple algorithm:
A function that calls another function gets the stack back in the state it was before the function call. However, if a program error occurs in a nested function, the backtrace stack can be examined. Then all functions can be identified that were called in the error-creating code path because their stack elements could not yet be removed. The most recently called function, which causes the error directly, is therefore always the topmost element of the backtrace stack.
A backtrace is a classic example of a stack. In the project for the stack class, such a backtrace is created:
Figure 7.3.2.3.1: Backtrace of the application program (blue) and the interpreter (red) in case of a runtime error
In addition to backtraces, stacks are also used for the implementation of parsers:?http://de.wikipedia.org/wiki/Umgekehrte_Polish_notation


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.3.3.3 Class Queue class (gb. data)

The class queue (waiting queue or series) provides a data type that you can use to manage a large number of objects (elements of the queue) as a sequence. The class queue uses the generic data type Variant for its elements. The schematic name FIFO (First in, first out) for the queue illustrates the principle: The element that was first added to the queue is also exited first. All other elements then move one position forward. The comparison of this data structure with a snake in the market is common: The customer who gets in line first is also served first. Then comes the second and so on. Every new customer has to queue up to the end of the line.


# 7.3.3.3.1 Properties

The properties of the queue class are listed in the following table:
Table 7.3.3.3.1.1: Properties of the Queue Class


# 7.3.3.3.2 Methods of a Queue Object

These are the methods of the class Queue:
Table 7.3.3.3.2.1: Methods of the Queue Class
Attention:
Be careful when using Deq ()! Calling this method changes the queue and returns a value at the same time. If this value is to be used several times, it must be stored in a variable. A further call of Deq () would already return the next element. If you do not want to use a variable, you can also use the Peek () method. But remember to remove the element from the queue with Deq () the last time you used it.


# 7.3.3.3 Project for using the class queue

Figure 7.3.3.3.3.1: Project Queue
Queues are suitable for displaying a sequence or a sequence of objects. In this sense, it is used in a demonstration project to represent a shell script that is itself only a sequence of commands, reads a shell script selected by the user into a queue, and then interprets the commands as a sequence of a shell. The text of the command and the output of the shell are displayed in the console. The individual commands are not representative.
Note that the shell usually masters some syntactic structures that cannot be understood as sequences. For example, the Bourne-Again-Shell (bash) used in the example can interpret a while control structure. Since a repetition of statements is not a sequence, the queue fails in this case.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.3.4 Class PrioQueue (gb. data)

A priority queue or PrioQueue is a queue? chapter 7.3.3, which first divides its elements into priority classes and follows the FIFO semantics in each of these classes. Like all classes in the component gb. data, PrioQueue uses the data type Variant for its elements.
You can assign an integer as a priority to each element when you place it in the PrioQueue. The higher this number is, the more important the element is and it is placed further at the beginning of the queue. If two elements have the same priority - are in a priority class - the FIFO principle is applied. The element that will be added to the end of the priority class.


# 7.3.4.1 Properties

The properties of the PrioQueue correspond to those of the queue:
Table 7.3.4.1.1: Properties of the PrioQueue class


# 7.3.4.2 Methods of a PrioQueue object

Except for the Enq () method, those of the PrioQueue are the same as those of the queue. The Enq () method additionally takes over the priority for the element to be grouped.
Table 7.3.4.2.1: Methods of the Class PrioQueue
The following code:


```
DimhPrioQueueAsNewPrioQueue
 
hPrioQueue.Enq("x",2)hPrioQueue.Enq("y",1)hPrioQueue.Enq("z",2)PrinthPrioQueue.Deq()PrinthPrioQueue.Deq()PrinthPrioQueue.Deq()
```

creates this output in the console:


```
x
z
y
```

“x” and “z” are in a priority class (–> 2). Since“ z” was later classified as “x”, it is later in the same class. “y” with lower priority is the last element in the output.


# 7.3.4.3 Project for using the PrioQueue class

Gambas developer Bruce Bruce Bruen mentioned that he used the PrioQueue class to run 56 SQL scripts in 5 priority classes for integrity checking and statistics generation for a large database. Until then, this functionality had to be implemented and manually maintained in a larger shell script, which became increasingly tedious for occasionally added scripts. Since Gambas 3.2, a very small Gambas program can dynamically determine the priority of the script from the header of the script files and execute all scripts in the intended order.
Based on this case of use, a project will be presented to demonstrate the PrioQueue class, which divides a large number of shell scripts into priority levels (5 scripts in 4 steps are provided in the project) and executes them. The order of execution of the scripts within a priority level is arbitrary? level 3 with 2 scripts. All scripts with a higher priority number have to be executed before those with a lower priority number - which corresponds to the semantics of the PrioQueue. The priority is given in each script file via a line with the syntax:


```
# PRIO <X>
```

where <X> has priority[0…9] of a script in the presented project.
Figure 7.3.4.3.1: Project PriorityQueue (Start)
Figure 7.3.4.3.3.2: Project PriorityQueue (processing level 2)
This system of classifying scripts into defined priority levels is comparable to the individual runlevels that are run at the start of a Unix operating systemhttp://de.wikipedia.org/wiki/Runlevel.
You must take note of an exception: A PrioQueue cannot be traversed backwards!


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.3.5 Deque (gb. data)

The class Deque is the base class of the stack and queue. The name “Deque” was derived from “Double-ended Queue” - a double-ended queue. You can add elements to the beginning and the end of a request and read elements from both ends. The class Deque contains elements of type Variant.


# 7.3.5.1 Properties



# 7.3.5.2 Methods of a deque-object



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.3.6 Class Circular (gb. data)

The class Circular presents a circular buffer as a memory area with a fixed size. If the buffer is full, the oldest elements in the buffer are only overwritten with new elements if the Circular. Overwrite = True property has been set. All elements of a circular object are of type Variant.
A circular has a constant memory requirement because it is an internal array with a fixed number of elements. A circular with e. g. eight elements will never consume more memory than 8 * SizeOf (gb. Variant).
In addition, a circular has a reading and writing pointer. These two properties (. reader and. writer) are separated to distinguish between data producer (the Write () method) and data consumer (Read () method) who can manipulate the same object asynchronously.
If the read pointer reaches the write pointer, there are no further unread elements and the circular is called “empty”. If, on the other hand, the read pointer reaches the read pointer, there is no more space in the circular for new elements and it is declared “full”.


# 7.3.6.1 Properties

The characteristics of the Circular:
Table 7.3.6.6.1.1: Properties of the Circular class


# 7.3.6.2 Methods of a circular object

Table 7.3.6.2.1: Methods of the class Circular
Attention:
The method Circular. Resize () leaves the relation of the properties Reader and Writer in an undefined state.
Therefore, it is strongly recommended to let each Resize () be followed by a Reset () to avoid accidental crashes due to false assumptions. Alternatively, both pointers can have the same value when Resize () is called. In this case, both hands also have the same value after resizing the circular.


# 7.3.6.3 Project for using the class Circular

By using a circular buffer, the maximum memory usage of an application can be reduced to a constant size, since old data is automatically overwritten with new data. This mechanism is used for program logs, as they are of particular interest when a program produces errors. The log information written immediately before the program crash can refer to the part of the program that generated the error. This typical application program log with circular buffers is demonstrated in the offered project.
To keep the solution open, a client-server system is used, which implements a network-compatible system log service that maintains its own log for each connected program (client).
The following description assumes that 2 (client) programs are connected to the server:
Figure 7.3.6.3.1: Two active (client) programs are logged on to the server
The server assigns an ID to the first (client) program and creates a (temporary) log file:
Figure 7.3.6.3.3.2: (client) program 0
You can now work with program 0 by selecting different expressions from the combo box or by entering your own expressions there. You can catch an error or provoke a program crash. In this case the program 0 is terminated.
In the next figure 7.3.6.3.3.3, you can see that a corresponding message has been generated in the client overview. It also indicates that you cannot access the log of the 2nd active (client) program - access is denied!
Figure 7.3.6.3.3.3: Server with entries and warnings
Figure 7.3.6.3.4: Viewing the contents of the Client 0 log
The contents of a log are only displayed if you click on the entry “Terminated Client #…”.
Since each log exists only at runtime of the server, you can save the log for each (client) program and store it freely.
Supplement:The new componentgb. loggingfrom Sebastian Kulesz provides a flexibleAPIfor logging and tracing events while the program is running.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.4.0 Arrays



# 7.4.0.1 Native container classes

The Gambas interpreter offers you two types of native container classes.


# 7.4.0.1.1 Collection

A collection is a collection of items that are indexed using a key of the type string? chapter 7.5 Collection. Only elements of the data type' Variant' can be stored in a collection. The values are stored internally in a hash table that grows dynamically when more elements are inserted into it.


# 7.4.0.1.2 Array

An array is a set of elements that are indexed using an integer type key and stored in a memory block. All elements in an array have the same data type and there is an array class for each native data type.
Arrays can be one- and multi-dimensional. If they are multidimensional, the elements are indexed by more than one integer value. If an array has exactly one dimension, it can be dynamically reduced or expanded using the Resize () method.
Chapters 7.4.0 to 7.4.9 are not only dedicated to the general class array with its properties and methods, but also give an overview of the following topics, with no order of precedence implying the order of precedence:


# 7.4.0.2 Class Array

The class array (gb) is theParent classfor each other array class. An array is to be understood as a data container whose elements can be accessed with a numeric key (index).


# 7.4.0.3 Properties of the class array

The class Array (gb) has these properties:
Table 7.4.0.3.1: Properties of the class Array (gb)


# 7.4.0.4 Methods of the class array

The class Array (gb) has basic methods and special methods, but these do not apply to all array classes. The next section introduces and describes the basic methods:
Table 7.4.0.4.4.1: Methods 1 of class Array (gb)
Hints:
In the following table,' array type' always stands for the data type of an element in the array.
Tabel 7.4.0.4.4.2: Methods 2 of class Array


# 7.4.0.5 Array classes for native data types

Gambas has a predefined array class for each native data type –> chapter 7.4.3.1. the name of these classes is the name of the data type followed by square brackets[].


```
Boolean[], Byte[], Short[], Integer[], Long[], Single[], Float[], Date[], String[], Object[], Pointer[] und Variant[]
```

Please note the following notes, asall arraysdo not havealland other methods:
Arrays can have these methods in the following table:
Table 7.4.0.5.1: Methods 3 of the class array


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.4.1 Native container classes

The Gambas interpreter offers you two types of native container classes.


# 7.4.1.1.1 Collection

A collection is a collection of items that are indexed using a key of the type string –> chapter 7.5 Collection. Only elements of the data type' Variant' can be stored in a collection. The values are stored internally in a hash table that grows dynamically when more elements are inserted into it.


# 7.4.1.2 Array

An array is a set of elements that are indexed using an integer type key and stored in a memory block. All elements in an array have the same data type and there is an array class for each native data type.
Arrays can be one- and multi-dimensional. The elements of more than one integer value are then indexed. If an array has exactly one dimension, it can be dynamically reduced or expanded using the Resize () method.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# 7.4.2 Dynamic arrays

A dynamic array is an array that is a real Gambas object. The size of a dynamic array can be queried at runtime. A dynamic array with a dimension can be resized at any time.
Example:


```
[1]PublicSubbtnShowExample_Click()[2]Dimi, jAsInteger[3]Dima2DDateArrayAsNewDate[][][4]DimmyArrayAsDate[][5][6]a2DDateArray.Resize(10)' *[7][8]Fori=0To9[9]a2DDateArray[i]=NewDate[][10]a2DDateArray[i].Resize(5)' **[11]Forj=0To4[12]a2DDateArray[i][j]=Date(Now()+j – i)' Generate different date values[13]Next' j[14]Next' i[15][16]' Output IDE console (example schedule):[17]ForEachmyArrayIna2DDateArray[18]Forj=0TomyArray.Max[19]PrintFormat(myArray[j],"dd. mm. yyyy");" | ";[20]If(j+1)Mod(myArray.Max+1)=0ThenPrint[21]Next' j[22]Next' myArray[23][24]Print"Dimension of a2DDateArray: ", a2DDateArray.Dim[25]Print"Number of elements of 'a2DDateArray': ", a2DDateArray.Count[26]Print"Number of elements of 'a2DDateArray': ", a2DDateArray.Bounds[0]' Alternative[27][28]End' btnShowExample_Click()
```

Output in the IDE console:


```
29. 04. 2014 | 30. 04. 2014 | 01. 05. 2014 | 02. 05. 2014 | 03. 05. 2014 |
28. 04. 2014 | 29. 04. 2014 | 30. 04. 2014 | 01. 05. 2014 | 02. 05. 2014 |
27. 04. 2014 | 28. 04. 2014 | 29. 04. 2014 | 30. 04. 2014 | 01. 05. 2014 |
26. 04. 2014 | 27. 04. 2014 | 28. 04. 2014 | 29. 04. 2014 | 30. 04. 2014 |
25. 04. 2014 | 26. 04. 2014 | 27. 04. 2014 | 28. 04. 2014 | 29. 04. 2014 |
24. 04. 2014 | 25. 04. 2014 | 26. 04. 2014 | 27. 04. 2014 | 28. 04. 2014 |
23. 04. 2014 | 24. 04. 2014 | 25. 04. 2014 | 26. 04. 2014 | 27. 04. 2014 |
22. 04. 2014 | 23. 04. 2014 | 24. 04. 2014 | 25. 04. 2014 | 26. 04. 2014 |
21. 04. 2014 | 22. 04. 2014 | 23. 04. 2014 | 24. 04. 2014 | 25. 04. 2014 |
20. 04. 2014 | 21. 04. 2014 | 22. 04. 2014 | 23. 04. 2014 | 24. 04. 2014 |

Dimension of 'a2DDateArray':           1

Number of elementes of 'a2DDateArray':     10
Number of elementes of 'a2DDateArray':     10 ' Alternative
```

The structure of the grouped display also corresponds to the memory structure in the array' a2DDateArray', as you can access the 4th date in the 7th element, for example:


```
Print Format(a2DDateArray[6][3], "dd. mm yyyy")
```

Note that both 'a2DDateArray' and all arrays 'a2DDateArray[i]' (–> line 9) with the index i from the interval from 0 to 9 are one-dimensional arrays and you therefore have the possibility to change the dimension at runtime! In the lines (1*) and (2*) this is also practiced, which would not be possible with the following (static) declaration:


```
Dim a2DDateArray As New Date[10][5]
```

You could do without the help array' myArray' if you change the source code for the output in this way:


```
Fori=0Toa2DDateArray.MaxForj=0Toa2DDateArray[i].MaxIf(j+1)Mod(a2DDateArray[i].Max+1)=0ThenPrintFormat(a2DDateArray[i][j],"dd. mm. yyyy");" | "ElsePrintFormat(a2DDateArray[i][j],"dd. mm. yyyy");" | ";EndifNext' jNext' i
```

Dynamic arrays of structures are currently not supported (–> chapter 7.2.1.2 Arrays of structures), because' Struct' is meant to be a structured data container. If you need dynamic arrays, use a class instead of a structure, because in Gambas you can derive a dynamic array type from each class.
Structure:


```
Public Struct Schueler
   JGS As Integer
   BirthDate As Date
   Lastname As String
   DG1Course As String
   DG2Course As String
End Struct
```

Source code CDS. class:


```
' Gambas class file' This class is a (pure) data structure without its own methods.' For example, it represents a data recordPublicJGSAsIntegerPublicBirthDateAsDatePublicLastnameAsStringPublicDG1CourseAsStringPublicDG2CourseAsString
```

In the main program, you can use CDS[] to generate a dynamic array type whose elements are objects of type CDS –> Chapter 7.4.3.2 Derived arrays. You can work with this derived array in the same way as you are used to working with structures, but without the (static) constraints of a structure.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# 7.4.3 Native and derived arrays

In Gambas 3, each data type has an array equivalent. For example, Integer[] stands for a one-dimensional array whose elements are integer numbers, String[][][], for a multidimensional array of string arrays, Collection[] for an array of collections and so on.
An array is called


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# 7.4.4 One-dimensional and multidimensional arrays - Array Dimensions

If you use the number of dimensions of an array as a criterion, you can differentiate between single- and multidimensional arrays.
An array is called
The number of dimensions of an array must be specified during compilation. You can specify the size of the dimension directly or by any numerical expression.
Examples
One-dimensional arrays:


```
Dim myArrayS As New String[3]
Dim myArrayF As New Float[]
```

Really multidimensional arrays:


```
Dim myArray As String[10, 5] ' → ERROR! New is missing
Dim a2DArrayB As New String[10, C_MAX * 5]
Dim a3DArray as New Integer[8, 8, 8]
Dim myArray4 As New String[10, 5]    *
```

An alternative to the last line is the following 2 lines:


```
Dim myArray4 As New String[]
myArray4 = New String[10, 5] **
```

In both cases (1*) and (2*), the two dimensions are determined statically and cannot be changed at runtime!
Derived one-dimensional arrays:


```
Dim aLabels As New Label[]
Dim aArrayComponents As New Components[]
Dim aClassArray As New CDS[] ' Array whose elements are CDS objects of the class CDS
```

Derived multidimensional array:


```
Dim aLabels As New Label[][]
```

Example 1 - Using a One-Dimensional Derived Array
The used array' aLabels' is on the one hand one-dimensional and on the other hand a derived array, because' Label' is a class.


```
[1]PublicSubbtnShowLabels_Click()[2]DimaLabelsAsNewLabel[][3]DimhControlAsControl[4]DimiCountAsInteger[5][6]IfaLabels<>ZEROAndaLabels.Count=0Then[7]Message.Info("The array 'aLabels' exists - but is empty.")[8]Endif[9][10]ForEachhControlInME.Children[11]IfObject.Type(hControl)="Label"ThenaLabels.Add(hControl)[12]Next' hControl[13][14]ForiCount=0ToaLabels.Max[15]aLabels[iCount].Tag=Str(iCount)[16]Print"Label-Name = "; aLabels[iCount].Name;[17]Print" | Label-Text = "; aLabels[iCount].Text;[18]Print" | Label-Tag = "; aLabels[iCount].Tag[19]Next' iCount[20][21]End' btnShowLabels_Click()
```

Output in the IDE console:


```
Label-Name = lblCArray     | Label-Text = LabelArrays | Label-Tag = 0
Label-Name = lblACaption   | Label-Text = Demonstration Class ARRAY | Label-Tag = 1
Label-Name = lblMultiArray | Label-Text = Label1 | Label-Tag = 2
Label-Name = lblBArray     | Label-Text = Class Array | Label-Tag = 3
```

Comments:
In connection with investigations on the dimensions of multidimensional arrays, thevirtual class array. boundsperforms well, as the following example shows:


```
[1]DimkAsInteger[2]Dima2DArrayAsNewString[10,5][3][4]' Static display of dimensions[5]Print"Dimension = "; a2DArray.Dim' Number of dimensions[6]Print"Dimension 1 (Number of lines)  = "; a2DArray.Bounds[0][7]Print"Dimension 2 (Number of columns) = "; a2DArray.Bounds[1][8][9]Print"Dimension = "; a2DArray.Dim[10]Print"DIM-Count = "; a2DArray.Bounds.Count' Number of elements in the Bounds array[11][12]' Dynamic display of the limits of the individual dimensions[13]Fork=0Toa2DArray.Bounds.Count-1[14]Print"Dimension "; k+1;" = "; a2DArray.Bounds[k][15]Next
```

Output in the IDE console:


```
Dimension = 2
Dimension 1 (Number of Lines)  = 10
Dimension 2 (Number of columns) = 5

Dimension = 2
DIM-Count = 2

Dimension 1 = 10
Dimension 2 = 5
```

Comments:
Excursion - Supplementary remarks on multidimensional arrays:
As far as point (3) is concerned, it is probably the most subtle of the three. Derived multidimensional arrays allow the creation of systems in which a dimension does not have to be equally extended in all dimensions - of which matrices are a special case - because that is exactly what has to apply.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.4.5 Inline array

With the inline notation of an array, you can create an array in a compact way and fill it with data immediately.
Syntax for an inline array:


```
Array = [ Expression [ , ... ] ]
```

The statement creates an array and returns it. The data type of all elements is checked. If they are all of the same type, or if they can be converted to the same native data type, then an array of a specific type is returned. For example, string[] if all elements are only string values, float[] for floating point numbers and so on…. . Otherwise, a variant[] array is returned. You create an array within an expression with the[….] operator.
The next 2 lines can be read like this:


```
Dim aCharactersArray As String[]
aCharactersArray = ["I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M"]
```

The declared array' aCharactersArray' is assigned the inline array[“I”,“IV”,…,“M”]. It has been declared anonymously or as it is called in the Gambas documentation: inline (?http://gambaswiki.org/wiki/lang/array). The Inline array[“I”,“IV”,…,“M”] is a full-fledged array - but without name and can be used like a normal array.
Hint:
The array[“I”,“IV”,…,“M”] is an inline array - but not an embedded array, although both terms are almost the same. The “Inline” refers to the way in which the array is written. For embedded arrays,“Embedded” refers to the position of the array in memory. Further information can be found in chapter 7.4.6 Embedded Array.


# 7.4.5.1 Example 1

In the first project an inline array with 5 elements is specified, all of which have a different data type:


```
Dim aArray As Array
Dim vElement As Variant
Dim iCount As Integer

aArray = ["Adam", 44, True, Sqr(9), Year(Now)]
Print "Typ of aArray = "; Object.Type(aArray)

For Each vElement In aArray
  Print vElement
Next

Print "Alternative output via an index:"
For iCount = 0 To aArray.Max
  Print aArray[iCount]
Next
```

Output in the IDE console:


```
Typ of aArray = Variant[]

Adam
44
True
3
2014
```

The alternative output via an index provides the same result.


# 7.4.5.2 Example 2

The join(…)-method is used for the inline array[“A”,“B”,“C”]:


```
PRINT ["A", "B", "C"].Join("/")
```

Output: A/B/C


# 7.4.5.3 Example 3

The two inline arrays are used in the following source code:
[[“I”,“IV”,“V”,“IX”,“X”,“XL”,“L”,“XC”,“C”,“CD”,“D”,“CM”,“M”] [1,4,5,9,10,40,50,90,100,400,500,900,1000]
and are assigned in the lines (1*) and (2*) to the declared arrays 'aCharactersArray' and 'aNumbersArray' in different ways:


```
FunctionIntegerNumberToNumberCharacter(iIntegerNumberAsLong)AsStringDimaCharacterArrayAsString[]DimaNumbersArrayAsNewInteger[]DimiCountAsIntegerDimsNumberCharacterAsString' Use of inline arraysaCharacterArray=["I","IV","V","IX","X","XL","L","XC","C","CD","D","CM","M"]*aNumbersArray.Insert([1,4,5,9,10,40,50,90,100,400,500,900,1000])**ForiCount=12To0Step-1While(iIntegerNumber>=aNumberArray[iCount])iIntegerNumber=iIntegerNumber-aNumbersArray[iCount]sNumberCharacter=sNumberCharacter&aCharacterArray[iCount]WendNext' iCountReturnsNumberCharacterEnd' NumberToNumbersign → Conversion according to an approach by Carlos Alberto Longen
```



# 7.4.5.4 Example 4



```
Dima2DArrayNamesAsNewString[10,5]RandomizeFori=0Toa2DArrayNames.Bounds[0]-1Forj=0Toa2DArrayNames.Bounds[1]-1a2DArrayNames[i, j]=["Adam","Bruno","Carina","Detlef","Erwin"][Rnd(0,5)]★★★Next' jNext' i
```

The string array is the names:
[“Adam”,“ Bruno”,“Carina”,“Detlef”,“Erwin”]
From this inline array, an element is selected with a random index in the range of 0 to 4 (!) since the conversion to an integer value always truncates all decimals. The line (3*) thus assigns a random name to an element of the native multidimensional array 'a2DArrayNames' addressed by the i,j-coordinates.
Here follows the complete source code of the procedure from which the above-mentioned adapted source code section was taken:


```
PublicSubbtnShow2D_Click()Dimi, j, kAsIntegerDima2DArrayNamesAsNewString[][]DimmyArrayAsNewString[]Randomizea2DArray.Resize(10)Fori=0To9a2DArrayNames[i]=NewString[5]Forj=0To4a2DArrayNames[i][j]=["Adam","Bruno","Carina","Detlef","Erwin"][Rnd(0,5)]NextNext' Structured output in the console:ForEachmyArrayIna2DArrayNamesForj=0TomyArray.MaxIf(j+1)Mod(myArray.Max+1)=0ThenPrintmyArray[j]ElsePrintmyArray[j],EndifNextNext' AlternativeForEachmyArrayIna2DArrayNamesForj=0TomyArray.MaxPrintmyArray[j],If(j+1)Mod(myArray.Max+1)=0ThenPrintNext' jNext' myArrayEnd
```

Structured output in the IDE console:


```
Carina  Adam    Adam    Detlef  Detlef
Adam    Erwin   Adam    Bruno   Bruno
Erwin   Erwin   Detlef  Carina  Adam
Carina  Detlef  Adam    Detlef  Carina
Adam    Erwin   Detlef  Bruno   Erwin
Detlef  Detlef  Detlef  Bruno   Erwin
Erwin   Erwin   Bruno   Erwin   Erwin
Erwin   Carina  Erwin   Carina  Detlef
Bruno   Adam    Detlef  Detlef  Bruno
Adam    Detlef  Detlef  Carina  Adam
```



# 7.4.5.5 Example 5

The simplest way to read data from a process (–> chapter 21.3.1 Using Quick syntax) is to use the short form of the EXEC instruction - the so-called Quick syntax:


```
EXEC  aCommand TO (String-)Variable ' aCommand is a (String-)Array
```



```
PublicSubbtnPingOverExec_Click()DimsEditionAsStringFMain.Mouse=Mouse.WaitEXEC[sProgramName, TextBox1.Text,"-c","4"]TosEdition' String array as inline arrayTextArea.Insert(gb.NewLine&sEdition)FMain.Mouse=Mouse.DefaultEnd' btnPingOverExec_Click
```



# 7.4.5.6 Example 6

The following example shows how the use of inline arrays can considerably increase clarity in the source code. The individual variants require the German month names or the days of the week for a specific date.
1st variant


```
Dim dDate as Date
  Dim sCurrentMonth as String

  IF Month(dDate) = 12 THEN sCurrentMonth = "December".
  IF Month(dDate) = 11 THEN sCurrentMonth = "November".
  IF Month(dDate) = 10 THEN sCurrentMonth = "October".
  IF Month(dDate) = 9 THEN sCurrentMonth = "September".
  IF Month(dDate) = 8 THEN sCurrentMonth = "August".
  IF Month(dDate) = 7 THEN sCurrentMonth = "July".
  IF Month(dDate) = 6 THEN sCurrentMonth = "June".
  IF Month(dDate) = 5 THEN sCurrentMonth = "May".
  IF Month(dDate) = 4 THEN sCurrentMonth = "April".
  IF Month(dDate) = 3 THEN sCurrentMonth = "March".
  IF Month(dDate) = 2 THEN sCurrentMonth = "February".
  IF Month(dDate) = 1 THEN sCurrentMonth = "January"
```

2nd variant


```
Public Function GetMonth(dDate) As String
    Select Case Month(dDate)
      Case 1
        Return "January"
      Case 2
        Return "February"
      ...
      Case 12
        Return "December"
    End Select
  End

  sCurrentMonth = GetMonth(Now())
```

3. variant - short and concise:


```
Dim aMonth As String[]

  aMonths = ["January", "February", "March", "April", ..., "October", "November", "December"].
  sCurrentMonth = aMonths[Month(dDate)-1]
```

The following is an analogous example of displaying the weekday in a TextBox for a date selected via the DateChooser component:


```
aWeekDays = ["Sunday", "Monday", "Tuesday", ..., "Thursday", "Friday", "Saturday"]
  txbDateDayOfWeek.Text = aWeekDays[WeekDay(DateChooser1.Value)] ' Sunday = 0!
```



# 7.4.5.7 Example 7

Here, an inline array is already used for array declaration:


```
Dim aNames As String[] = ["Eagle", "Bear", "Badger", "Fox", "Tit", "Eagle Owl", "Moose"]
```

7.4.5.8 Example 8
To insert data into a matrix, you can also use inline arrays, three of which are used in the following section of the source code:


```
Dim hMatrix As Matrix

  hMatrix = New Matrix(3, 5, False) ' Matrix of 3 rows with 5 columns, real numbers

' Fill matrix with values

  hMatrix.SetRow(0, [11, 12, 13, 14, 15]) ' Elements here only of type Float
  hMatrix.SetRow(1, [21, 22, 23, 24, 25])
  hMatrix.SetRow(2, [31, 32, 33, 34, 35])
```



# 7.4.5.9 Example 9

Class.New (gb) instantiates a class:


```
Function New ( [ Arguments As Array ] ) As Object
```

This routine works exactly like the NEW operator except that the constructor arguments must be specified by an inline array.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# 7.4.6 Embedded array - Embedded array

Dynamic arrays are real Gambas objects, while embedded arrays are a way to access part of an object as an array. In this case, a memory block is allocated to the array content - exactly where the embedded array was declared object-related. The bottom line is that in gambas, all properties of an object are usually accessible via references, i. e. outside of this object. This is not the case with embedded arrays (hence the name). These arrays get a fixed value when the class is defined and are then stored directly as a memory block in the description of the class as it is available to the interpreter.
Syntax for an embedded array:


```
[ STATIC ] { PUBLIC | PRIVATE } Identifier [ Array dimensions ... ] AS NativeDatatype
```

Since embedded arrays are not objects, but gambas can only work with objects, you go a different way and create a temporary object that shows the interpreter how to work with such arrays without them being full-fledged objects. Embedded arrays cannot be declared as local variables, because each value on the Gambas stack (the local variables are located there) can only consume a certain memory area (32 bytes on a 64-bit system) and arrays can be larger!
The special position of embedded arrays is also reflected in an article by Emil Lenngren. He writes: “Embedded arrays consume less memory because their data is directly allocated in the class structure. But they are slower because a wrapper object must be created for each access. <colour red/white>I recommend that you do not use embedded arrays. </colour>You are useful when you need to create a structure that contains an array that you want to pass to an external C function later - but not otherwise.”
Similarly, Benoît Minisini commented: “Embedded arrays were introduced to have the ability to imitate a memory structure declared in a C library (In C, all structural elements are allocated as blocks within the structure - which is not normally the case in Gambas - except for embedded arrays). Otherwise there's no real reason to use it.”
Embedded arrays are - as emphasized above by Lenngren and Minisini - marginal phenomena.
Nevertheless, an example shows the (formal) use of an embedded array:


```
PUBLIC embArray[3, 3, 3] As Integer
...
Public Sub btnShowEmbeddedArray_Click()
  Dim i, ii, iii As Integer
' Dim embArray[3, 3, 3] As Integer ' → ERROR!

  For i = 0 To 2
    For ii = 0 To 2
      For iii = 0 To 2
        Print "[ "; i; " | "; ii; " | "; iii; " ]"; " = ";
        embArray[i, ii, iii] = i * 9 + ii * 3 + iii
        Print embArray[i, ii, iii]
      Next
    Next
  Next

End ' btnShowEmbeddedArray_Click()
```

Output in the IDE console:


```
[ 0 | 0 | 0 ] = 0
[ 0 | 0 | 1 ] = 1
[ 0 | 0 | 2 ] = 2
[ 0 | 1 | 0 ] = 3
...
[ 1 | 0 | 0 ] = 9
[ 1 | 0 | 1 ] = 10
[ 1 | 0 | 2 ] = 11
...
[ 2 | 2 | 0 ] = 24
[ 2 | 2 | 1 ] = 25
[ 2 | 2 | 2 ] = 26
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.4.7 Array copy

The following section deals with comparative considerations of arrays under the aspects' Assigning an array' and' Copying an array'.


# 7.4.7.1 Assignment

Source code extract:


```
Dim aArray_A As New Integer[3]
  Dim aArray_B As Integer[]
  Dim iCount As Integer

  aArray_A = [4, -3, 7] ' [4, -3, 7] is an inline array (without name)
  aArray_B = aArray_A ' aArray_B receives reference to aArray_A

  For iCount = 0 To aArray_B.Max ' Output Array_B
    Print aArray_B[iCount]
  Next

  aArray_A.Sort(gb.Descent)

  For iCount = 0 To aArray_A.Max ' Output Array_A
    Print aArray_A[iCount],
  Next
  Print
  For iCount = 0 To aArray_B.Max ' Output Array_B
    Print aArray_B[iCount]
  Next
```

Output in the IDE console:


```
4 -3  7   ' Content of aArray_B is content of aArray_A
7 4 -3    ' Content of aArray_A after sorting
7 4 -3    ' Content of aArray_B (without sorting!)
```

The displayed contents of array_A and array_B after sorting array_A are the same! The generalized explanation for Object_A and Object_B is simple: A reference to the data of Object_A is stored in the variable Object_B. This means: Object_A and Object_B point to the same object in memory. If you change the object_A - for example, to sort the contents of the object - then Object_B also points to this changed data.


# 7.4.7.2 Array copy

Native arrays have the Array.Copy()-method and therefore belong to the objects that can be copied easily. This method returns a new array object' Array_B' as a 1:1 copy of' Array_A' with the same content. However, the two objects Array_A and Array_B are completely independent of each other. Later changes to the original array_A, for example, have no effect on the copy array_B and vice versa.


```
aArray_B = aArray_A.Copy() ' aArray_B as 1:1 copy of aArray_A

  aArray_A[1] = 55 ' Modification of aArray_A in the 2nd element

  For iCount = 0 To aArray_A.Max ' Output array_A
    Print aArray_A[iCount],
  Next

  Print
  For iCount = 0 To aArray_B.Max ' Output array_B
    Print aArray_B[iCount],
  Next
```

Output in the IDE console:


```
7  55  -3   ' Content of aArray_A
7  4   -3   ' Content of aArray_B
```



# 7.4.7.3 Example for using an array copy

To show alternately the effect of sorting array elements in a GridView with the _compare() method in a demonstration project, the original data array and the array of sorted data of the same array type are required. The complete project is described in chapter 7.4.9 Array - Sorting.
Figure 7.4.7.3.3.1: GridView data (original data vs. sorted data (–> field surname))
This code was first used in line 4 of the following sourcecode extract:


```
[4] aGArray = $2DGridArray
```

During the test - first the original and then sorting by surnames in the first field - the two pictures shown above were shown one after the other –> figure 7.4.7.3.1. That's how it should be!
Effect achieved? No, because each further click on one of the two buttons showed only a representation as in the second picture. The explanation for this behavior can be found in the upper section about assigning arrays and their special features.
Correct is the following section of the source code where you work with two different array objects, where the array aGArray is a 1:1 copy of array $2DGridArray (line 4). The sorting of the elements of aGArray in row 7 does not affect the array $2DGridArray in any way, so that the correct views are always generated in both procedures in rows 15 and 19:


```
[1]PublicSubGridViewShow(OptionalbSortedAsBoolean)[2]DimaGArrayAsNewString[][3][4]aGArray=$2DGridArray.Copy()[5][6]IfbSorted=TrueThen[7]aGArray.Sort[8]ArrayToGrid(aGArray)[9]Else[10]ArrayToGrid($2DGridArray)[11]Endif' bSorted = True ?[12][13]End' GridViewShow(..)[14][15]PublicSubbtnGridViewShow_Click()[16]GridViewShow()[17]End' btnGridViewShow_Click()[18][19]PublicSubbtnGridViewShowS_Click()[20]GridViewShow(True)[21]End' btnGridViewShowS_Click()
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# 7.4.8 Export and import of arrays

Exporting and importing the elements of an array into a binary file - whose extension you can freely choose - is considered synonymously as exporting and importing an array.
When exporting and importing arrays into a file, a consistent distinction must be made between native and derived arrays. The reason for this is that the elements of a native array are always of a native data type and can be stored, because Gambas 3 supports the 'serialization' of variables of native data types. The elements of derived arrays, however, are objects that cannot be stored - but their object properties, if they are of a native data type.
A tried and tested way to export an array to a file is to save the contents of an array in a csv file. The exported data can be read with all editors, because a csv file is a text file. From this csv-file it is possible to import the data back into an array. Suggestions for this export-import variant can be found in –> chapter 17.7.6 GridView - Data Export and in chapter –> 17.7.7 GridView - Data Import from a csv file.
Two projects are presented for the export and import of a native and a derived array. An internal data check and a sophisticated error management (Finally, Catch, etc.) is deliberately omitted in order to concentrate only on exporting, importing and displaying the arrays.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# 7.4.9.0 Sorting an array

Sorting an array is to be understood as sorting the individual elements of an array.
Syntax:


```
Function Sort ( [ Mode As Integer ] ) As NatDataTyp[]
```

The Mode argument is optional and can accept one of the following constants:


```
gb.Ascent 	→ Sort ascending (a...z), standard
gb.Descent	→ Sorting in descending order (z...a)
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.5.0 Collection

The class Collection (gb) implements a hash table whose elements consist of a value-key pair.


# 7.5.0.1 Properties

Properties of the class Collection:
Table 7.5.0.1.1.1: Class Collection properties


# 7.5.0.2 Methods

The Collection class has the following methods:
Table 7.5.0.2.1: Methods of the Collection class


# 7.5.0.3 Creating a Collection

There are different ways to create a collection:
(A) declaration of a variable of the data type collection and subsequent assignment of the element(B) declaration of a variable of the data type collection with direct value assignment(C) inline collection create(D) copy of a collection


# 7.5.0.4 Examples

The following examples implement the options listed in the previous chapter.
(A) declaration of a variable of the data type collection and subsequent assignment of elements


```
Dim hCollection As Collection

hCollection = New Collection ( [ Mode As Integer ] )
```

A new collection is created. Specifying mode is optional. The gb.binary mode is the default. The mode describes the method used for comparing keys and applies using the two gambas constants:


```
gb.Binary:
This constant represents 0 and indicates that capitalization is case-sensitive.
gb.IgnoreCase:
This constant represents 1 --> upper and lower case is ignored.
```

Example 1


```
PublicSubbtnAddMethod_Click()DimcCollectionAsNewCollection(gb.IgnoreCase)DimvValue, vElementAsVariantDimaNamesAsString[]DimicountAsIntegeraNames=["Adam","Ben","Charlie"]' cCollection.Add(Value As Variant, Key As String) → First the value and then the keycCollection.Add("a","a")cCollection.Add(3,"A")cCollection.Add(aNames,"v")' The value is a string arraycCollection.Add(False,"d")cCollection.Add(8.44,"e")cCollection.Add(Format(Date(Now),"d. mmmm yyyy"),"f")ForEachvValueIncCollectionIfcCollection.Key="v"ThenForiCount=0TovValue.MaxPrintcCollection.Key&(icount+1);" --> "; vValue[iCount]Next' iCountElsePrintcCollection.Key;" --> "; vValueEndif' cCollection.Key = "v" ?Next' vValueEnd' btnAddMethod_Click()
```

The output in the console of the Gambas IDE also demonstrates how to read the values associated with the key:


```
a  -->3v1 -->Adam
v2 -->Ben
v3 -->Charlie
d  -->False
e  -->8,44f  -->7. April2014
```

The capitalization of the key is ignored in this mode. The first element is therefore overwritten. The key “A” becomes “a” with the value 3, because two values are noted for the same key.
This also provides a clear answer to the question “Can you use different data types for the values in a collection?”:“ Yes - each value of a collection is of the type Variant and a variant can carry everything - independent of the collection and independent of the other values in a collection”.
Example 2
In example 1, you could also assign the values to the keys in this way:


```
' cCollection[Key As String] = Value As Variant → First the key and then the value
  cCollection["a"] = "a"
  cCollection["A"] = "3"
  cCollection["v"] = aNames ' The value is a string array
  cCollection["d"] = False
  cCollection["e"] = 8.44
  cCollection["f"] = Format(Date(Now), "d. mmmm yyyy")
```

Hint:
The !-operator is a special operator for container objects that allow access to their elements using a' String' type key –> chapter 8.6. A collection is also included. The key string is written after the !-operator, so that for example cCollection! name is synonymous with cCollection[“Name”]. Note that the quotation marks around the key string are omitted when using the !-operator. In both cases, the return value is the value in the collection with the key “Name”.


```
sCurrent.Name = cCollection["Name"]
sCurrent.Name = cCollection!Name ' Alternative notation
```

(B) Inline Collection
Since revision #1699 (November 2008) there is a new syntax for creating a collection in Gambas. With this compact inline syntax, the key is noted first and then the value:


```
DimcNamesAsNewCollectionDimvValue, vElementAsVariant' Syntax: Collection = [ Key: Expression [ , ... ] ]cNames=["w":["Anna","Brit","Claudia","Doreen"],"m":["Adam","Bruno","Clemens"],"Surname":["Eagle","Fox","Cat","Weasel","Zebra"]]' Output to the Gambas IDE consoleForEachvValueIncNamesForEachvElementIncNames[cNames.Key]PrintcNames.Key;" -> "; vElementNext' vElementNext' vValue
```

(C) Declaration of a variable of the data type collection with direct value assignment.
This variant uses the inline syntax:


```
Dim cCollection As Collection = ["Blue": &H0000FF&, "White": &HFFFFFF&, "Red": &HFF0000&]
```

(D) Copy of a collection
When you create a copy of an existing collection using the Collection. Copy () method, this copy is a standalone collection object:


```
DimcNames, cNamesCopyAsNewCollectioncNames=["w":["Anna","Brit"],"m":["Adam","Bruno"],"Surename":["Eagle","Cat"]]cNames["Surename"].Add("Mouse",1)' Insert after the Eagle (Index = 0)...cNames.Name="cNAME"IfcNames.Count>0ThencNamesCopy=cNames.Copy()Else' Count = 0Message.Error(„TheCollection'” & cNames.Name & „' has no elements”)Endif' cNames.Count > 0
```

The statement cNames.Name = “cNAME” is described in –> section 7.5.0.7.


# 7.5.0.5 Accessing elements in a collection

You can access individual values of a collection, which requires precise knowledge of the key or all values:


```
DimcColourAsNewCollectionDimvValueAsVariantcColour.Add("&HC3DDFF","TColour")cColour.Add("&HD6D4D2","HColour")cColour.Add("&HF5FFE6","EColour")Print"The background colour is "; cColour["HColour"]' Displaying an element' Print "The background colour is "; cColour!HColour → AlternativeForEachvValueIncColorPrintcColor.Key,String.Chr(187), vValue' Show all elements (key value pairs)Next' vValue
```



# 7.5.0.6 Export and import of a collection

A gambas-specific memory management is used, with which you can save a collection in a file (data export) or import the contents of a file into a collection (data import). Further information can be found in chapter 7.2.2.2.3 Data export and data import.
Data exportThe following procedure saves a collection in a binary, gambas-specific file:
Parameter1: File path to the export fileParameter2: Reference to the selected collection


```
PublichFileAsFilePublicsFilePathAsString=Application.Path&/"url.list"PubliccDataAsNewCollectionPublicSubForm_Open()...IfExist(sFilePath)ThencData=ImportCData(sFilePath)ForEachvValueIncData
         lsbURL.Add(cData.Key)NextElsecData["http://mp3channels.webradio.rockantenne.de/classic-perlen"]="ROCK ANTENNA"lsbURL.Add("http://mp3channels.webradio.rockantenne.de/classic-perlen")Endif' Exist(sFilePath) ?End' Form_Open()PublicSubExportCData(sPathAsString, cExportAsCollection)IfcExport.Count=0ThenReturnElsehFile=OpensPathForWriteCreate' The export file is always created anewWrite#hFile, cExportAsCollectionClose#hFileCatchMessage.Error("The data export was incorrect!"&gb.NewLine&"ERROR: "&Error.Text)Endif' c.Count = 0 ?End' ExportCData(...)
```

This function imports the contents of a collection from a binary, gambas-specific file and returns a collection as a function value:
Parameter: File path to import file


```
PublicFunctionImportCData(sPathAsString)AsCollectionDimcTempImportAsCollectionhFile=OpensPathForReadcTempImport=Read#hFileAsCollectionClose#hFileReturncTempImportCatchMessage.Error("The data import was incorrect!"&gb.NewLine&"ERROR: "&Error.Text)End' ImportCData(...)
```



# 7.5.0.7 Extension of the class' Collection'

If you want a collection to have a name - which it does not have - then expand the collection class by adding a class' Collection. class' to your project, exporting it and then adding the new' Name' property to the Collection class - the original class will be extended. Here follows the content of the newly created class file' Collection. class':


```
' Gambas class fileExportPropertyNameAsStringPrivate$sNameAsStringPrivateSubName_Read()AsStringReturn$sNameEndPrivateSubName_Write(ValueAsString)$sName=ValueEnd
```

Now you can assign an object name to each collection in your project and query it in the program. This is the only way to provide informative messages of the following type:


```
DimcURLAsNewCollectioncURL.Name="TX_URL"IfcURL.Count=0ThenMessage.Warning("The collection '"&cURL.Name&"' exist, but is empty!")Endif' cURL.Count = 0 ?
```

Details on extending or changing classes can be found in chapter 26? classes, modules and libraries.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Data types



# Chapters



# Table of Contents



# 7.5.1 Projects

The three projects presented here use different versions of simple and nested collections.


# 7.5.1.1.1 Project 1

The first project uses two classes with amazing results and could be the basis for many projects where a function is provided interactively via a suitable input component (–>  TextBox).
A character string - representing a mathematical function - is read in, as well as a real number as argument x. The function value f (x) is calculated and output:
Figure 7.5.1.1.1.1: Program interface (excerpt) for project 1


```
Public Function f(myFunction As String, x As Float) As Float
  Dim cContext As New Collection

  cContext["x"] = x
  Return Eval(myFunction, cContext)

End ' f(..)

' Shorter alternative:
' → Inline-Collection
' Public Function f(myFunction As String, x As Float) As Float
'   Return Eval(myFunction, ["x": x])
' End ' f(..)

Public Sub btnCalculate_Click()

  Print "f("; vbArgument.Value; ") = "; f(txbFunction.Text, vbArgument.Value)

End ' btnCalculate_Click()
```

Output:


```
f(0,123456)= -0,16957085489025
```



# 7.5.1.2 Project 2

It becomes really practical when it is not possible to calculate the functional values of a function but of a function class. To do this, the function must contain at least one parameter in the function term.
The following project relies on the use of the class Collection in the source code and now, in contrast to project 1, on the class Expression:


```
' Gambas class filePublicSubForm_Open()vlbParamA.Type=vlbParamA.NumbervlbParamA.SetFocusvlbParamB.Type=vlbParamB.Numbervlb_X.Type=vlb_X.Numbervlb_Y.Type=vlb_Y.Numbervlb_Y.ReadOnly=True' Initialization - initial values (function, 2 parameters):txbFClass.Text="a*sin(x)-cos(b*x)+Pi(0.25)"' Default functionvlbParamA.Value=+0.125vlbParamB.Value=-2.5vlb_X.Value=0.525End' Form_Open()PublicSubbtnShowResult_Click()ComputeY()End' btnComputeY_Click()PublicSubbtnClose_Click()FMain.CloseEnd' btnClose_Click()PrivateFunctionCompute(sExpAsString, fParamAAsFloat, fParamBAsFloat, f_XAsFloat)AsFloatDimfFunktionswertYAsFloatDimcEnvironmentAsNewCollectionDimmyExpressionAsNewExpression' ALTERNATIVE:' cEnvironment.Add(fParamA, "a")' cEnvironment.Add(fParamB, "b")' cEnvironment.Add(f_X, "x")cEnvironment["a"]=fParamA' The value vlbParameterA.Value is assigned to symbol a.cEnvironment["b"]=fParamB' The value vlbParameterB.Value is assigned to symbol b.cEnvironment["x"]=f_X' The value vlbArgumentX. Value is assigned to symbol x.myExpression.Environment=cEnvironment
 
myExpression.Text=sExpTryfFunktionswertY=myExpression.ValueIfErrorThenMessage.Error("Errortext: "&gb.NewLine&Error.Text)ElseReturnfFunktionswertYEndif' ERROR ?End' Function(..)PublicSubComputeY()vlb_Y.Value=Compute(txbFClass.Text, vlbParamA.Value, vlbParamB.Value, vlb_X.Value)End' btnComputeY_Click()
```

Figure 7.5.1.2.1: Program interface for project 2


# 7.5.1.3 Project 3

A prime example for the use of collections is the component gb.settings. The entire settings file, which is managed by an instance of the Settings class, is contained internally in a two-level hierarchy of collections.
In a simplified way, it is assumed that the configuration file *.conf already exists and should only be read out and displayed. It is recommended that you read the adapted source code in the presented project several times to find out the effect of the two relevant procedures.
You can find the complete project as an archive in the download area.
Figure 7.5.1.3.1: Program interface for project 3


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Operators



# Chapters



# 8.0 Operators

In computer science, an operation is defined as the processing of data in statements, primarily with the aim of changing data by operators. The data is information bound to characters from defined basic areas.
Figure 8.0.1: Pocket calculator in action
The following types of operators are used in gambas:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Operators



# Chapters



# Table of Contents



# 8.1 Assignment operators

In the Gambas language, the assignment operator is the equals sign =. The syntax for an assignment operation can generally be described by Target = Expression. The value of Expression can be assigned to one of the following targets:
Table 8.1.1: Assignment operator
The assignment operation is subject to legal associativity. This means that the printout on the right-hand side is evaluated first and then assigned to the target on the left-hand side.
Please note that the equal sign bivalent is also used as a comparison operator in the following sections of chapter 8.


# 8.1.1 Complex assignment operators

The complex or composite assignment operators represent only abbreviated forms of assignments with special operators in the expression:
Table 8.1.1.1: Complex assignment operators
Example:


```
[1]DimfNumberAsFloat[2][3]fNumber=9.55[4]fNumber+=2*(-3.21)^3' Error: Print fNumber += 2*(-3.21)^3[5]' fNumber = fNumber + 2 * (-3.21) ^ 3[6]PrintfNumber
```

Comments:
Examples:


```
[1] PUBLIC CONST DefaultStartX AS Float = -5.0
[2] Private aMatrix As Variant[]
[3] aMatrix = New Variant[]
[4] Dim aNames As String[] = ["Hans", "Maria", "Peter", "Anna", "Robert"]
[5] TableView1.Sorted = NOT TableView1.Sorted
[6] TableView1.Columns.Count = 4
[7] TableView1.Header = TableView1.Both
[8] TableView1.Mode = Select.Single
[9] Me.Flags[Editor.ShowLimits] = (iLimit > 0) AND (iLimit < 3)
[10] btnTableViewExportCSV.Enabled = True
[11] If Row MOD 2 = 0 Then TableView1.Data.Background = Color.RGB(224, 224, 224) ' hellgrau
```

Please note: In line 11, the first equals sign = is a comparison operator, while the second equals sign = an assignment operator. The background color of the component TableView (target) is set to light grey (value of expression).


# 8.1.2 Special cases

Some statements that return values such as SWAP, EXEC, SHELL, OPEN, NEW, RETURN, or RAISE often also use the assignment syntax, as the following examples show:
SWAP:


```
IF Printer.Portrait = TRUE THEN SWAP MargeB, MargeL
SWAP aIndexField[iRow].Field, aIndexField[iRow - 1].Field
SWAP iForeground, iBackground
```

SHELL and EXEC:


```
hWhichAsProcess = EXEC ["which", "gnuplot"] Wait For Read
hGnuPlot = SHELL "gnuplot" For Read Write As "hGnuplot"
```

OPEN:


```
hDatei = OPEN (User.Home &/ "V24T" &/ "v24T.conf") FOR CREATE
hFile = OPEN sDTDDateiPfad FOR CREATE ' DTD file is newly created or emptied
fFile = OPEN Dialog.Path FOR READ  ' Open data file for reading
TRY fFile = OPEN Dialog.Path FOR WRITE ' Open data file for writing
```

NEW


```
$EditGrid = NEW TextBox(hParent) AS "EditGrid"
MyParentObserver = NEW Observer(Me.Parent) As "Parent"
IF NOT $cSlot.Exist(sSlot) THEN $cSlot[sSlot] = NEW Collection
hMenuItem = NEW Menu(hContext) As "mnuFileOpen"
```

RETURN - Return of a function value


```
RETURN (Value - Me.MinValue) / (Me.MaxValue - Me.MinValue)
RETURN Potentiometer.Spin
IF hCtrl.Window.TopLevel THEN RETURN Object.Type(hCtrl.Window)
RETURN Sin(x) * Cos(x / 0.56) + (Pi / 3)
RETURN FALSE
```

RAISE


```
' Gambas class file
' © 2008 Daniel Fuchs

EXPORT
CREATE PRIVATE
INHERITS UserControl
' The following events are already contained in the UserControl class:
EVENT Activate
EVENT MouseWheel() AS Boolean

...

PUBLIC SUB DrawingArea_MouseWheel()
  DIM Cancelled AS Boolean

  MySlideTimer.Stop
  Cancelled = RAISE MouseWheel()
  IF Cancelled OR NOT ME.Enabled THEN RETURN
  ME.Value = (ME.Value - Mouse.Delta * ME.GetSpin() * ME.PageStep)
  RAISE Activate

END ' DrawingArea_MouseWheel()
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Operators



# Chapters



# Table of Contents



# 8.2 Operations and Comparisons for Numbers

In the case of operations with numbers as operands, on the one hand, the types of operands must be taken into account and, on the other hand, the type of the result of the operation. When dividing two real numbers, the quotient is always of the float type. The two numbers iNumber1 and iNumber2, on the other hand, must be integers in operation iNumber1 MOD iNumber2.


# 8.2.1 Arithmetic operators

Note that there are three different operations for dividing two numbers with different operators (/, MOD ≡ %, DIV ≡ \).
Table 8.2.1.1: Arithmetic operators
In many cases, not only the basic operations described above are used, but also complex mathematical calculations are carried out. For complex arithmetic operations, a distinction is made between priority and associativity if at least 2 operators are present in a calculation instruction. Priority describes the order in which mathematical terms are linked to each other and associativity is the priority if there are at least two operators of equal rank. Chapter 8.5' Ranking of Operations' provides detailed information on the associativity and priority of operations. Interesting is the operator ^, which calculates the power value to a base b and the exponent e with b, e?


```
2^3 =  8
2^(-3) =  0,125
2^3.44 =  10,8528346195814
(-2)^3 =  -8
-2^3 =  -8
(-2)^(-3) =  -0,125
-2^-3 =  -0,125
3.2^(-0.77) =  0,40835183987713
3.2^-0.77 =  0,40835183987713
SQR(5)^CBR(-22.7) =  0,10243569625776
1^0.88 =  1
0^3 =  0
3.4567^0 =  1
```



# 8.2.1.1.1 Operator MOD or %

The MOD or % operator is used to calculate the remainder of the division of two integers. In the integer division with remainder there are different views on how to calculate the integer quotient and the remainder with different number ranges. The illustration {Z, N} R* assigns division R* of division Z/N to each pair of whole numbers. Since the figure is unique, it is a function with the function name modulo or abbreviated mod or %. The modulo function is used in Gambas as operator MOD in mathematical calculations. By definition, the following applies: z MOD n = z - |_z/n_| * n with the symbol |_z/n_| as a rounding function orGauss bracket. For a real number q, |_q_| is the largest integer smaller than or equal to q. These preliminary remarks are necessary because gambas do NOT follow this so-called mathematical approach, as you can read in the help for gambas. However, if you prefer the mathematical approach, the following function will help you:


```
PublicFunctionmyMOD(iAAsInteger, iMAsInteger)AsIntegerReturniA-(Int(iA/iM))*iMEnd
```

The following section explains how to determine the difference between the mathematical approach and the definition of MOD in Gambas:


```
Print "11 MOD 4 = ";; 11 Mod 4
Print "11 myMOD 4 = ";; myMOD(11, 4)
Print "11 MOD -4 = ";; 11 Mod -4
Print "11 myMOD -4 = ";; myMOD(11, -4)
Print "-11 MOD 4 = ";; -11 Mod 4
Print "-11 myMOD 4 = ";; myMOD(-11, 4)
Print "-11 MOD -4 = ";; -11 Mod -4
Print "-11 myMOD -4 = ";; myMOD(-11, -4)

11 MOD 4 =  3
11 myMOD 4 =  3

11 MOD -4 =  3
11 myMOD -4 =  -1

-11 MOD 4 =  -3
-11 myMOD 4 =  1

-11 MOD -4 =  -3
-11 myMOD -4 =  -3
```



# 8.2.1.2 Operator DIV or \

Although in the definition for the operator DIV “Calculations the quotient of two integer numbers, rounding down. Calculates the quotient from two integers and rounds it down”, there are errors in calculations with the operator DIV, because the above definition is not consistently implemented. You can avoid errors by using the myDIV (..) function:


```
PublicFunctionmyDIV(iAAsInteger, iMAsInteger)AsIntegerReturnInt(iA/iM)End' myDIV(iA As Integer, iM As Integer)
```



```
20:7 =  2,85714285714286
20 DIV 7 =  2
20 myDIV 7 =  2

20:(-7) =  -2,85714285714286
20 DIV -7 =  -2
20 myDIV -7 =  -3

(-20):7 =  -2,85714285714286
-20 DIV 7 =  -2
-20 myDIV 7 =  -3

(-20):(-7) =  2,85714285714286
-20 DIV -7 =  2
-20 myDIV -7 =  2
```

The following source code shows the use of the operators DIV and MOD:


```
[1]PublicSubbtnM2H_Click()[2]DimiTotalMinutes, iHours, iRemainingMinutesAsInteger[3]DimsCommentAsString[4][5]iTotalMinutes=444[6]iHours=iTotalMinutesDiv60[7]iRemainingMinutes=iTotalMinutesMod60[8][9]IfiRemainingMinutesMod2=0Then[10]sComment="Remainingminutes = "&Str(iRemainingMinutes)&" ---> even number"[11]Else[12]sComment="Remainingminutes = "&Str(iRemainingMinutes)&" ---> odd number"[13]Endif[14]Print"Hours = ";; iHours[15]Print"RemainingMinutes = ";; iRemainingMinutes[16]PrintsComment[17][18]End' btnM2H_Click()
```

Especially the comparison in line 9 is often used to determine if an integer is even (number mod 2 = 0) or odd. This is also used in the next section of the source code so that the lines in a GridView are coloured differently in order to achieve better readability. Attention: For the 1st displayed row Row = 0 applies to the GridView:


```
[1]PublicSubTableView1_Data(RowAsInteger, ColumnAsInteger)[2]TableView1.Data.Text=aMatrix[Row][Column][3]IfRowMOD2=0Then[4]TableView1.Data.Background=Colour.RGB(224,224,224)' light grey[5]Endif' MOD 2 = 0?[6]End' TableView1_Data(..)
```

Figure 8.2.1.2.1 Alternative colouring of the rows in a grid view


# 8.2.2 Comparison operators for numbers

There are 6 comparison operators available for comparing two numbers:
Table 8.2.2.1: Comparison operators for numbers
If the result of a comparison of 2 numbers is assigned to an integer variable instead of a boolean variable, the result is either -1 (True) or 0 (False).
Comparisons are to be considered with particular care in which the equality of two real numbers is to be determined or whether a variable of the type float has the value zero. Good experiences have been made with the following instructions, for example, in the calculation of value tables. First, the system checks whether the function value y = f(x) can be calculated for an argument x. The argument is then set to zero if the argument is sufficiently small. Finally, the function value y = f(x) is tested. In a similar way, you can also proceed with the values for x and y to detect overflows, for example, or to reduce (sufficiently) large values for the argument or the function value to task-adequate values:


```
[1]IFaValuePair.Valid=TrueTHEN[2]IFAbs(x)<1E-8THENaValuePair.x=0[3]IFAbs(aValuePair.y)<1E-6THENaValuePair.y=0[4]ENDIF
```

This is the content of the class ValuePair.class:


```
' Gambas class file' This class is a data structure without its own methods.' It represents, among other things, a pair of xy values. The valid variable must be' and indicates whether the xy value pair is valid.' Tag is a universally applicable variable. It is used by the parser class to save' the error message for invalid objects.PublicxAsFloatPublicyAsFloatPublicValidAsBooleanPublicTagAsVariant
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Operators



# Chapters



# Table of Contents



# 8.3 String operators

For operations with strings, Gambas provides you with only 2 operators. For the comparisons of two strings, you will mainly use the comparison operators in table 8.3.2.1.


# 8.3.1 Operators

Gambas knows the following operators for operands of type string:
Table 8.3.1.1: String operators


```
Message.Error("Fehler: "&Chr(10)&"The character is not in the input alphabet!")IfNOTExist(User.Home&/"V24T"&/"v24T.conf")Then…
Path=SettingsP.DefaultDir&/Application.Name&".conf"
```

Note that in the third example, the last & links two strings to a complete filename (file name and extension such as udpserver.conf).


# 8.3.2 Comparison of character strings

Of the comparison operators in the following table, the last three are of particular interest because they can be used effectively in many cases by specifying patterns.
Table 8.3.2.1: Comparison operators 1 for strings


```
[1]DimsCharacterstringAsString[2][3]sCharacterstring="Gambas"[4][5]Message.Info(IIF(sCharacterstring="gambas","Comparison true.","Comparison false."))[6]Message.Info(IIF(sCharacterstring=="gaMBas","Comparison true.","Comparison false."))
```

Comments:
Table 8.3.2.2: Comparison operators for strings
For example, the comparison operators ⇐ and >= are available in the class app/src/gambas3/.src/Component/CSymbolInfo.class and are used there to determine whether a single character stored in the string sCar belongs to a certain interval A to Z in theASCIIcharacter set.


```
If (sCar >= "A" AND sCar <= "Z") OR sCar = "." Then ...
```

For example, if you want to sort character strings with your own procedures, you can use the above-mentioned comparison operators for character strings, as you can see from the following source code:


```
PublicSubForm_Open()FMain.CenterFMain.Resizable=FalseEnd' Form_Open()PublicSubbtnSort_Click()DimaStringArrayAsString[]aStringArray=Split(txaText.Text,"\n")SwapSortStrings(aStringArray)txaText.Text=aStringArray.Join("\n")End' btnSort_Click()PrivateSubSwapSortStrings(aMatrixAsString[])' Implementation SwapSort algorithm: http://de.wikipedia.org/wiki/Swap-SortDimi, j, mAsIntegerDimsTempAsStringi=0Whilei<aMatrix.Countm=0Forj=0ToaMatrix.Count-1IfaMatrix[j]<aMatrix[i]ThenIncm' Comparison of stringsNext' jIfi=mThenInciElsesTemp=aMatrix[m]aMatrix[m]=aMatrix[i]aMatrix[i]=sTempEndif' i = m?WendEnd
```

Figures 8.3.2.1 and 8.3.2.2: Sorting strings
A disadvantage of SwapSort: Each item in the list to be sorted may only appear once. The method String[].Sort() does not have this disadvantage and uses the QuickSort algorithm.


# 8.3.3.3 LIKE operator



```
bResult = String [NOT] LIKE Pattern
```

The boolean variable bResult gets the value TRUE if the pattern string matches string. If NOT is used, the test is inverted.
The operator is not case-sensitive and the following patterns can be used:
Table 8.3.3.3.1: Sample
Table 8.3.3.3.2: Comparison operators 1 for strings
Please note: LIKE is only valid forASCIIstrings. If you are testing against UTF-8 strings, you must use the gb.pcre component.


# 8.3.4 BEGINS operator



```
bResult = String [NOT] BEGINS Pattern
```

The boolean variable bResult gets the value TRUE when string begins with the pattern string. If NOT is used, the test is inverted. The BEGINS operator is case-sensitive.
Table 8.3.4.1: Examples for the BEGINS operator


# 8.3.5 ENDS operator



```
bResult = String [NOT] ENDS Pattern
```

The boolean variable bResult receives the value TRUE if string ends with the pattern string. If NOT is used, the test is inverted. The ENDS operator is case-sensitive.
Table 8.3.5.1: Examples for the operator ENDS


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Operators



# Chapters



# Table of Contents



# 8.4 Logical operators

The group of logical operators NOT, AND, OR, and XOR is required for expressions of the type Boolean on the one hand, and for numbers of the type Short, Integer, or Long (-Integer) on the other. The logical operators form the basis for efficient comparisons and bit manipulation functions. Special cases apply to character strings and objects in logical negation with the NOT operator. Setting parentheses affects the ranking of operations if several logical operators are used.
Table 8.4.1: Logical operators for Boolean or numeric expressions
Examples:


```
If(sCar>="A"ANDsCar<="Z")ORsCar="."Then...IfsPortANDsPort<>"80"ThensReq&=":"&sPortIF(x<0)OR(x<>Round(x))ThenError.Raise("Mathematic error")DoWhile(sSocket.Status<>Net.ConnectedANDsSocket.Status>0)
```



# 8.4.1 Logical operators for numbers

The numbers are of the type Boolean Short, Integer or Long (-Integer). The calculation with the used logical operator is based on the bitwise logical operation of the binary representation of the numbers on the basis of the so-called truth tables.
The operator inverts each bit in the binary representation of the number, as shown in the following table and examples:
Table 8.4.1.1: Logical operators and truth table
Examples:


```
Print 13;; Bin(13, 8);; Bin(Not 13, 8);; NOT 13
      13   00001101     11110010         -14
Print 5;; 12;; Bin(5, 8);; Bin(12, 8);; Bin(5 AND 12, 8);; 5 AND 12
      5   12   00000101    00001100     00000100           4
Print 5;; 12;; Bin(5, 8);; Bin(12, 8);; Bin(5 OR 12, 8);; 5 OR 12
      5   12   00000101    00001100     00001101          13
Print 5;; 12;; Bin(5, 8);; Bin(12, 8);; Bin(5 XOR 12, 8);; 5 XOR 12
      5   12   00000101    00001100     00001001           9
```

Chapter 9.9 Bit manipulation introduces functions that consistently work with the presented logical operators.


# 8.4.2 Special Case Object and Character String

If the operand after the unary logical operator NOT is a string (string) or an object, the following applies to NOT expression: If the expression is a string or an object, True is returned if the expression is zero or False if the expression is NOT zero.
Examples:


```
SubPicture_Write(pPictureAsPicture)IfNOTpPictureThenpPicture=HorizontalFader.DefaultPictureMyOriginalPicture=pPictureIfMyOriginalPictureThenGetPicturesMe.DrawEnd
```



```
IfNOTbtnWithoutText.TextThenMessage.Info("Button WITHOUT labelling!")
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Operators



# Chapters



# 8.5 Rank of operators

Most operators are available as binary operators. These require two operands to which they are applied. Unnary operators, on the other hand, only change one operand. A distinction is made between the individual operations according to priority and associativity if there are at least two operators in a statement.
Table 8.5.1: Ranking of operators
Example:


```
[1]DimsElementAsString[2]DimaMatrixAsString[][3][4]...[5]aMatrix=Split(tts," ")[6]ForEachsElementInaMatrix[7]' If TypeOf(Val(sElement)) <= gb.Float = True Then[8]If[TypeOf(Val(sElement))<=gb.Float]=TrueThen[9]' If (IsNumber(Val(sElement)) = True) = True Then ' No error message[10]sText=sText&" "&sElement[11]...[12]Next' sElement[13]...
```

The code in line 7 triggered an error. The following error message came up, which at the same time pointed the right way:


```
Unclear expression. Please insert square brackets in FMain.class:1234
```

But also with round brackets the error message disappeared, as the adequate source code in line 9 showed.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Operators



# Chapters



# Table of Contents



# 8.6 Special operators



# 8.6.1 Part 1

The selection of the special operators in this chapter was made according to purely subjective criteria. This is because, for example, the operations increment and decrement in gambas are counted as arithmetic functions that change the value of a variable to the nearest one. You already got to know this view in chapter 8.2 of the arithmetic operators MOD and DIV. So you could consider the functions INC and DEC as unary operators:
Table 8.6.1: Special operators
Examples:


```
PRINT ["Gambas", "rules!"] IS String[]
True

DIM myTextBox AS NEW TextBox(ME)
PRINT myTextBox IS Control
True

PRINT ["Gambas", "rules!"] IS Collection
False

PRINT ["Gambas", "rules!"] NOT IS Collection
True
```



# 8.6.2 Part 2 - !-operator

The !-operator is a special operator for certain container objects that allow access to their elements using a string. Examples of such classes areCollectionandResult, but also graphical controls likeListView.
The key string is written after the! operator, so that 'hCollection!FirstName' is equivalent to 'hCollection[“FirstName”]'. The return value is the value of the element with the key “FirstName”.


```
sCurrent.FirstName=hResult!FirstName
sCurrent.FirstName=hResult["FirstName"]' Alternative
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# 9.0 Selected Gambas functions

In this chapter you will learn inter alia interesting information about the following Gambas functions:
Figure 9.0.1: Application of the linking of trigonometric functions
These localization and translation features are useful for those involved in translating and localizing your programs.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# Table of Contents



# 9.1 Formatting functions

The three functions presented here format numbers into a character string in different contexts.


# 9.1.1 Function Bin$ or Bin



```
Bin$ ( Number AS Long [ , Digits AS Integer ] ) AS String
```

Bin$ (..) formats a data type Long into its binary representation. If Digits=d is optional, the representation is filled with leading zeros so that exactly d digits are output. The default is d=8.
Examples:


```
PRINT Bin$(77)
1001101
PRINT Bin(77, 16)
0000000001001101
```



# 9.1.2 Function Hex$ or Hex



```
Hex$ ( Number AS Long [ , Digits AS Integer ] ) AS String
```

Hex$ (..) formats a number of the data type Long into its hexadecimal representation. If Digits=d is optional, the representation is filled with leading zeros so that exactly d digits are output.
Examples:


```
PRINT Hex$(2014)
7DE
PRINT Hex(2014, 8)
000007DE
```

A sign for a number of the data type Short or Integer automatically expands the data type to Long. If the hexadecimal representation is limited to 16 bits, the AND operator must also be used or alternatively Hex (CLong (number, 4).
Examples:


```
DIM bX AS Byte ' 8 Bit unsigned
DIM sX AS Short ' 16 Bit with (negative) sign

bX = 200
sX = -456
PRINT Hex$(bX), Hex$(sX), Hex$(CLong(sX) AND &H00FFFF), Hex$(CLong(sX), 4)
C8  FFFFFFFFFFFFFE38  FE38  FE38
```



# 9.1.3 Function Format$ or Format



```
Format ( Expression [ , Format ] ) AS String
```

Format(..) converts the expression into a string. You can optionally specify the format with a format string that depends on the type of expression. The format function can format a date, times, numbers and currencies. Without a special format string, the constant gb. standard is used.
These format definitions are possible:
Under the link:http://gambaswiki.org/wiki/cat/constantyou can currently find a list of predefined constants and in → chapter 9.2 notes and examples on user-defined formats.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# Table of Contents



# 9.2 User-defined formats



```
Format ( Expression [ , Format ] ) AS String
```

The Format (..) function converts an expression into a string. You can optionally specify a user-defined format with a format string that depends on the type of expression. The format function can format numbers, currencies, dates and times.


# 9.2.1 General syntax

A user-defined format is described by a sequence of special characters (character string).Characters before and after the format string are output as specified.


# 9.2.2 Format syntax for a numeric expression



```
+ 	Outputs the sign + the number
- 	Outputs the sign - of the number; but only if the number is negative.
# 	Returns a digit if necessary.
```

The number is filled with blanks on the left, so that the number of digits before the decimal point is greater than or equal to the number of # before the decimal point.
Examples:


```
0 	A digit is always output with a leading zero if necessary.
. 	Outputs the decimal separator.
,	Outputs the thousands separator.
%	Multiplies the number by 100 and appends the % sign.
E 	Represents the exponential part of a number. The sign of the exponent is always output.
```

Examples:


```
PRINT Format$(Pi, "-#.###")
3.142
PRINT Format$(Pi, "+0#.###0")
+03.1416
PRINT Format$(Pi / 10, "###.# %")
31.4 %
Print Format$(-2.3 ^ 7, "#.####E##")
-3,405E+2
```



# 9.2.3 Format syntax for currencies

To format currencies, you can use all numeric format characters and additionally the following:
Examples:


```
Print Format$(1234.56, "$$#.##")
1234,56 EUR
Print Format$(-1234.56, "$,#.###")
-1.234,56 €
Print Format$(-1234.56, "($,#.###)")
(1.234,56 €)
```



# 9.2.4 Format syntax for date and time values



```
yy 	Displays the year with the last two digits.
yyyyy 	Returns the year with four digits.
m 	Displays the month.
mm 	Displays the month with two digits.
mmm 	Returns the month in abbreviated localized form.
mmmm 	Displays the month in full localized form.
d 	Displays the day.
dd 	Returns the tag with two digits.
ddd 	Returns the weekday in abbreviated localized form.
dddd 	Returns the month in full localized form.
/ 	Outputs the date separator.
h 	Displays the hours.
hh 	Displays the hours with two digits.
n 	Displays the minutes. "and not m, as one would suspect."
nn 	Returns the minutes with two digits.
s 	Returns the seconds.
ss 	Returns the seconds with two digits.
:  	Displays the time separator.
u 	Returns the milliseconds if they are not zero. As a separator to the seconds, you should be able to insert a dot.
uuuu 	Outputs the milliseconds with three digits.
t 	Specifies the time zone (abbreviation).
```

Attention:Every character or string in the syntax overview of date and time formats is interpreted in the format string as specified:


```
Print "It was "; Format$(Now, "hh:nn o'clock (Uhr)")
```

It was 09:57 U9r← Error, because h is a pre-defined sign in the German word 'Uhr'!
Examples:


```
Print "Today is "; Format$(Now(), "dddd"); ", the "; Format$(Now(), "d. mmmm yyyy")
Print "It was "; Format$(Now, "hh:nn"); " o'clock!"
Print "It was exactly "; Format$(Now, "hh:nn:ss.uuu"); " o'clock!"
Print "Time = "; Format(Now(), "hh:nn:ss"); " o'clock!"  ' Current kitchen time ...
Print "UTC  = "; Format(Time(DateAdd(Now(), gb.second, System.TimeZone)), "hh:nn:ss"); " o'clock"
Print "System.TimeZone = "; System.TimeZone
Print "System.FirstDayOfWeek = "; System.FirstDayOfWeek
Print "It was "; Format$(Now, "hh:nn"); " o'clock"; Format$(Now, " (t)")
```

Today is Wednesday, June 4,2014It was 09:40 a. m.It was exactly 09:40:37:37:404 a.m.Time = 09:40:37 a.m.UTC = 08:40:37 a.m.TimeZone = -3600System.FirstDayOfWeek = 1It was 09:40 a.m. (CET)</code>


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# Table of Contents



# 9.3 Date and time functions

For working with date and time values, Gambas not only provides you with the current time stamp, but also functions for generating a date or isolating individual date components such as month or year or weekday or calendar week from a given date or format functions for outputting date and time in freely selectable formats.
Some components for the input or output of date or time values work with valid values for date and time (DateChooser) - others require you to check for a valid date or time (ValueBox).


# 9.3.1 Overview of date and time functions

Table 9.3.1.1: Overview of date and time functions
Of particular interest will be the Date () function, which you can use to generate a valid date from the year, month and day. If you also specify the optional arguments hours, minutes, seconds and milliseconds, then the time values in the date are also set, otherwise they are set to 00:


```
Datum = Date ( Year , Month , Day [ , hours, minutes, seconds, milliseconds ] ) AS Date
```

In connection with the Date () function, you will also appreciate these functions:
Detailed information on these 4 functions and other conversion functions can be found in? chapter 9.10 Conversion functions.


# 9.3.2 Notes

You can use this function to calculate a new date from a start date and the added time interval:


```
DateAdd ( Date as Date , Period AS Integer , Count AS Integer ) AS Date
```

List of constants for time intervals (period):


```
Constant 		effect
----------------------------------------------------------------------------------------------------------------------------
gb.Second 	        Added c seconds (seconds).
gb.Minute 	        Added c minutes (minutes).
gb.Hour 		Added c hours (hours).
gb.Day 		        Added c days (days).
gb.Week 		Added c weeks (weeks).
gb.WeekDay 	        Added c Weekdays (Saturday and Sunday are ignored).
gb.Month 		Added c months (months).
gb.Quarter 	        Added c Quarterly (quarters).
gb.Year 		Added c years (years).
```

You can use this function to calculate differences between date values:


```
DateDiff ( Date_1 AS Date , Date_2 AS Date , Period AS Integer ) AS Integer
```

The function value of DateDiff(…) for the time difference is the number of time intervals between date1 and date2. only complete intervals are counted; internally, it is rounded off. The time interval constants are the same as for the DateAdd () function.
With the WeekDay (..)function for determining the weekday from a date


```
WeekDay ( Date AS Date ) AS Integer
```



```
Constant 			Weekday 		Return value
----------------------------------------------------------------------------------------------------------------------------
gb.Sunday 		Sunday 		                0
gb.Monday 		Monday 		                1
cb.Tuesday 		Tuesday 		        2
gb.Wednesday 		Wednesday 	                3
gb.Thursday 		Thursday 		        4
gb.Friday 		Friday 		                5
gb.Saturday 		Saturday 		        6
```

Examples:


```
Dim aDaysListe As String[]
Dim dDate As Date

aDaysListe = Split("Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday", ",")
dDate = Now()
Print "Today is the "; aDaysListe[WeekDay(dDate)]; " ("; Format$(dDate, "dd.mm.yyyy"); ")."

dDate = DateAdd(Now, gb.day, 7 - WeekDay(Now))
Print "The next Sunday falls on the "; Format$(dDate, "dd.mm.yyyy"); "!"
```

Output in the console of the IDE:


```
Today is the Sunday (01.06.2014).
The next Sunday falls on the 08.06.2014!
```



# 9.3.3.3 Leap years

Whether a year is a leap year can be easily checked with the following source code excerpts:


```
PublicFunctionIsLeapYear(iYearAsInteger)AsBooleanReturn(iYear>=1583AND((iYearMod4=0AndiYearMod100<>0)Or(iYearMod400=0)))End' IsLeapYear(..)PublicSubbtnSchaltjahr_Click()Print"2008: "; IsLeapYear(2008)PrintYear(Now());": "; IsLeapYear(Year(Now()))Print"1500: "; IsLeapYear(1500)Print"2000: "; IsLeapYear(2000)End' btnLeapYear_Click()
```

The console of the IDE shows up:


```
2008: True
2014: False
1500: False
2000: True
```



# 9.3.4 Timestamp - Unix-TimeStamp

A Unix timestamp (Unix-TimeStamp) is a number representing the number of seconds since January 1,1970.
To convert the current (gambas) date to a Unix timestamp:


```
Print DateDiff(CDate("1/1/1970"), Now(), gb.Second)
Print "UNIX-TimeStamp : "; DateDiff(CDate("1/1/1970"), Now(), gb.Second); " Seconds"
```

This is how to convert a Unix timestamp into a (gambas) date:


```
Print DateAdd(CDate("1/1/1970"), UnixTimeStamp, gb.Second)
```

On the websitehttp://www.timeanddate.com/worldclock/germany/berlinyou will find interesting information about date, time and time zones. You can also find the time stamp in constants in connection with MySQL and its data types: TimeStamp As String = “TIMESTAMP”.


# 9.3.5 Valid date and time values

You can use various controls to generate a date. The next overview shows the control and the chapter describing the control.
There is a favorite of all controls: It is the DateBox, because the DateBox as a specialized button box with a date/time mask sets besides the input and display of a date on the date/time selection dialog in the DateChooser.
If you want to use date and time values directly in the source text, you should look at the examples in the next section.


# 9.3.6 Examples

You should use the following examples in a small project and vary the arguments and constants many times. Many issues are additionally formatted in different ways. The description of the format function Format (…) can be found in? chapter 9.1 and an overview of format definitions for date and time values in? chapter 9.2.


```
Dim aDaysListe As String[]
Dim dDate As Date

aDaysListe = Split("Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday", ",")
dDate = Now()
Print "Today is "; aDaysListe[WeekDay(dDate)]; "."
Print "Today is "; Format$(Now(), "dddd.")
dDate = DateAdd(Now, gb.day, 7 - WeekDay(Now))
Print "Next Sunday falls on "; Format$(dDate, "dd.mm.yyyy"); "!"
Print "Until Christmas there are still "; DateDiff(Now(), Date(Year(Now()), 12, 24), gb.Day); " Days."

Print "UNIX-Timestamp (current):     "; DateDiff(CDate("1/1/1970"), Now(), gb.Second); " Seconds"
Print "UNIX-TimeStampToDate (current): "; DateAdd(CDate("1/1/1970"), gb.Second, DateDiff(CDate("1/1/1970"), Now(), gb.Second))
Print "UNIX-Timestamp from 5.6.2014:  "; DateDiff(CDate("1/1/1970"), Date(2014, 6, 5), gb.Second); " Seconds"

Print "Today is "; Format$(Now(), "dddd"); ", the "; Format$(Now(), "d. mmmm yyyy.")
Print "It was "; Format$(Now, "hh:nn"); " o'clock!"
Print "It was exactly "; Format$(Now, "hh:nn:ss.uuu"); " o'clock!"
Print "It was "; Format$(Now, "hh:nn"); " o'clock"; Format$(Now, " (t)")
Print "Time = "; Format(Now(), "hh:nn:ss"); " o'clock!"  ' Current kitchen time
Print "UTC  = "; Format(Time(DateAdd(Now(), gb.second, System.TimeZone)), "hh:nn:ss"); " o'clock"
Print "Current calendar week: "; Week(Now(), gb.Monday, True)
Print "You are currently "; DateDiff(Date(1949, 5, 2), Now(), gb.Year); " Years old."
```



```
Today is Thursday.
Today is Thursday.
The next Sunday falls on 08.06.2014!
There are 202 days left until Christmas.
UNIX timestamp (current): 1401964266 seconds
UNIX TimeStampToDate (current): 05.06.2014 10:31:06
UNIX timestamp from 5.6.2014: 1401926400 seconds
Today is Thursday, 5 June 2014.
It was 10:31!
It was exactly 10:31:06.349!
It was 10:31 (CET)
Time = 10:31:06!
UTC = 09:31:06
Current calendar week: 22
You are currently 65 years old.
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# 9.4 Drawing test functions

You can use the character test functions to check whether there are only certain characters in a string.
Table 9.4.1: Overview of the character test functions
Examples:


```
PRINT IsAscii("Gambas"), IsAscii(Now), IsAscii(188), IsAscii("Benoît")
True    True    True    False

PRINT IsBlank(" \t"), IsBlank("Test")
True 	 False

PRINT IsDigit("2014"), IsDigit("123a")
True    False

Print IsHexa("C3DDFF"), IsHexa("Bad")
True    True

Print IsHexa("GAMBAS"), IsHexa(""), IsHexa(Zero), IsHexa("Arie")
False   False   False   False

Print IsLCase("small"), IsLCase("big"), IsLCase("123a")
True    False   False

Print IsUCase("GAMBAS"), IsUCase("ANGER")
True    False

Print IsPunct(":-)"), IsPunct(":-p")
True    False

PRINT IsLetter("Gambas?"), IsLetter("Yes - Gambas!"), IsLetter("Correct")
False   False   True

Print "IsSpace = "; IsSpace(" \\n \\r\\n"), IsSpace(gb.NewLine)
IsSpace = False   True
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# Table of Contents



# 9.5 Random number functions

In many theoretical investigations, states, changes of state or values of defined process variables are simulated, as for example in investigations on queues. Random events are required for these simulations, which are realised with random numbers in selected intervals, which are generated with random generators. In the examples supplied with Gambas, there is the project Database/Database, in which several thousand random data are used.
A random generator does not deliver real numbers that are distributed chaotically, but numbers that are calculated according to a certain algorithm. However, this also means that such generators require initial values on the one hand and generate only real pseudo-random numbers on the other.


# 9.5.1 Initialisation



```
Syntax:	RANDOMIZE [ Seed AS Integer ] with seed as an optional parameter
```

The random number generator can be initialised with a freely selectable integer starting value if the optional parameter is set to a fixed integer value when Randomize is called. The following approaches can be used:
If you do not use the optional parameter, the timestamp is set for Seed, otherwise the integer value of Seed is used.


# 9.5.2 Random numbers

You can also use a random number generator in Gambas, which in the default configuration will give you random numbers in the range 0 random number < 1, initialised by the current timestamp.


# 9.5.2.1 Random numbers in interval 0 Random number < 1



```
DIMfRandomnumberASFloatRandomizefRandomnumber=Rnd()
```



# 9.5.2.2 Random numbers in interval 0 Random number < Rmin



```
DIMfRandomnumberASFloatRandomizefRandomnumber=Rnd(3)
```



# 9.5.2.3 Random numbers in interval Rmin Random number < Rmax



```
DIMfRandomnumberASFloatRandomizefRandomnumber=Rnd(-2,+2)
```



# 9.5.2.4 Integer random numbers in interval Ru Random number Ro



```
DIMfRandomnumberAsFloatDIMiUpperlimit, iLowerlimitAsIntegerRandomizefRandomnumber=Int(Rnd(iLowerlimit, iUpperlimit+1))
```



# 9.5.3 Examples

The following examples demonstrate the use of the 2 random number functions in different use cases.
Example 1.
In the first example, random numbers are generated using the random number functions Rnd and Randomize. The effect of specifying a starting value is demonstrated. The source code is short and is therefore given in full:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]FMain.Center[5]FMain.Resizable=False[6]End'  Form_Open()[7][8]PublicSubbtnRnd1_Click()[9]DimfRandomnumberAsFloat[10]DimiCountAsInteger[11][12]TextArea1.Clear[13]Randomize' optional, because Standard[14]ForiCount=1To10[15]IfiCount<10Then[16]TextArea1.Insert(iCount&gb.Tab&Rnd()&gb.NewLine)[17]Else[18]TextArea1.Insert(iCount&gb.Tab&Rnd())[19]Endif[20]Next' iCount[21]End' Rnd1[22][23]PublicSubbtnRnd2_Click()[24]DimfRandomnumberAsFloat[25]DimiCountAsInteger[26][27]TextArea1.Clear[28]ForiCount=1To10[29]Randomize[30]IfiCount<10Then[31]TextArea1.Insert(iCount&gb.Tab&Rnd()&gb.NewLine)[32]Else[33]TextArea1.Insert(iCount&gb.Tab&Rnd())[34]Endif[35]Next' iCount[36]End' Rnd2[37][38]PublicSubbtnRnd3_Click()[39]DimfRandomnumberAsFloat[40]DimiCountAsInteger[41][42]TextArea1.Clear[43]Randomize-2[44]ForiCount=1To10[45]IfiCount<10Then[46]TextArea1.Insert(iCount&gb.Tab&Rnd()&gb.NewLine)[47]Else[48]TextArea1.Insert(iCount&gb.Tab&Rnd())[49]Endif[50]Next' iCount[51]End' Rnd3[52][53]PublicSubbtnClose_Click()[54]FMain.Close[55]End' Close
```

Figure 9.5.3.1: List with 10 different random numbers.
Results:
The procedure in lines 8-22 always returns a list of 10 different random numbers. The second procedure in 23-36 only returns random numbers that can contain series of the same numbers - in the extreme case, all random numbers are the same. The reason is that the random number generator has the same starting value for one second. The random numbers in the 3rd procedure in 41-58 are different, but the list of random numbers generated is always the same because the same starting value is always set for the random generator.
Example 2
For testing purposes, one often needs random data that does not necessarily have to be numbers. In the second example, random data of the data type Boolean, Float, Integer, String and Date are needed for the test for sorting data in a GridView.
In the following lines, only the procedure for generating the random data is presented:


```
PrivatehSortAsNewCSortPrivateiCountAsIntegerPublicSubbtnFillGrid_Click()DimiAsIntegerDimvMatrixAsVariant[]DimaStrsAsString[]=["Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune","Pluto"]RandomizeFori=0ToiCountStep1vMatrix=NewVariant[]vMatrix.Add(Round(Rnd(0,10),-2))' Real numbervMatrix.Add(CBool(Round(Rnd(0,1))))' Truth valuevMatrix.Add(aStrs[CInt(Rnd(0, aStrs.Count))])' Character stringvMatrix.Add(CDate(Rnd(CFloat(Now()),CFloat(Now()+1000))))' Date 1vMatrix.Add(CInt(Rnd(-10,10)))' Integer numbervMatrix.Add(CDate(Rnd(CFloat(Now()),CFloat(Now()+2000))))' Date 2hSort.Add(vMatrix)Next' iArrayToGrid()End' FillGrid
```

Figure 9.5.3.2: GridView with randomly generated records, sorted by the 1st column.
The complete projects for the first two examples are provided in the download section.
Example 3
Athttp://de.wikibooks.org/wiki/Gambas:_Zufall#Zufallsquadrateyou will find a small project where both the coordinates of the squares to be drawn and their colour are calculated randomly.


# 9.5.4 Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# Table of Contents



# 9.6 Exponential and logarithmic functions

In many mathematical tasks you need functions to calculate powers, roots or logarithms. Gambas provides you with various functions for this purpose.


# 9.6.1 Correlation of Potencies, Roots and Logarithms

Since dealing with potencies, roots and logarithms is not part of the daily exercises, three basic considerations are put before the description of the corresponding Gambas functions:
The mathematical operation' Logarithmic operation' hides nothing else than the 'exponent search' for a given number (potency value) and a given basis. If logarithm = log10(1000) the exponent is searched for, for which 10exponent= 1000. The exponent you are looking for is 3, because 10³ = 1000, which had to be said before you logarithmically start like wild on it.. .


# 9.6.2 Potency functions

Table 9.6.2.1: Operation: Potentiating


# 9.6.3 Root functions

Table 9.6.2.1: Operation: root extraction


# 9.6.4 Logarithmic functions

Table 9.6.4.1: Operation: Logarithmic logging
Hints:


# 9.3.5 Example 1

The calculation of the 5th root from the real number 83, for example, requires the use of some of the above-mentioned functions, which is also reflected in the source code extract:


```
w = (83)^0.2
ln(w) = 0.5 * ln(83) = 0,88376812155932
w = e^ln(w) = e^0,88376812155932 = 2,42000140696596
```

The sample is executed in a similar way:


```
p = (2,42000140696596)^5
ln(p) = 5 * ln(2,42000140696596) = 4,4188406077966
p = e^(5 * ln(2,42000140696596))
```



```
PublicSubbtn5Root83_Click()DimwAsFloatPrint"ln(w) = ";0.2*Log(83)w=Exp(0.2*Log(83))Print"w = ";Exp(0.2*Log(83))Print"Rehearsal 1 (trivial) = "; w*w*w*w*wPrint"ln(p) = ";5*Log(Exp(0.2*Log(83)))Print"Potency value = ";Exp(5*Log(Exp(0.2*Log(83))))End
```

Output in the console of the IDE:


```
ln(w) = 0,88376812155932
w = 2,42000140696596
Rehearsal 1 (trivial) = 83,0000000000001
ln(p) = 4,4188406077966
Potency value = 83
```



# 9.6.6 Example 2

The calculation of the potency value a^b for a > 0 and any b (a, b ∈ ℝ) works with the following approach: a^b = Exp (b*Log (a)) and delivers 100 in the next calculation:


```
a = Cbr(100) ' 3. root of 100
b = 3
Print Exp(b * Log(a))
```

For a = Cbr(100) and b = 6, the approximate value is 9999.999999999999999 ≈ 10000.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# 9.7 Trigonometric functions

Whenever angles are included in your calculations or you perform coordinate transformations, you can use a variety oftrigonometric functionsin Gambas.
Table 9.7.1: Overview of trigonometric functions
Hints:
Examples:


```
Print IIf(Tan(1.33) - Sin(Rad(50)) < 0, "Yes", "No!")
Print Format(Deg(ACos(0.4432)), "#.###°")
Print IIf(Mag(8, 6) > 9.8, "Yes.", "No.")
Print Sin(1)
Print "P(8|6) ---> P'("; Hyp(8, 6); "|"; Deg(Ang(8, 6)); "°)"
Print "The arc measurement 123° = "; Round(Rad(123), -3)
Print "Cos(Pi(7/3)) = "; Cos(Pi(7/3))
```



```
No!
63,692°
Yes.
0,8414709848079
P(8|6) ---> P'(10|36,87°)
The arc measurement Rad(123°) = 2,147
Yes - Cos(Pi(7/3)) = 0,5
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# Table of Contents



# 9.8 String functions

The arsenal of functions for manipulating strings in gambas is manifold. Gambas has two sets of string manipulation functions. One set for manipulatingASCIIstrings and another that can handle UTF-8 strings.
Note the following notes if you use the character string or string functions of both sets:


# 9.8.1 Overview of String Functions

Table 9.8.1.1: Overview of string functions


# 9.8.2 Notes on selected string functions



# 9.8.2.1 Function Scan (string, pattern AS string)

The scan function splits a string using a regular expression (LIKE format). In the following example, the command 'df' (disk free) is used without parameters and provides information about the disk space on all mounted file systems:


```
Dim sResult, sLine, sElementAs String
Shell "df" To sResult
For Each sLine In Split(sResult, "\n")
  For Each sElement In Scan(sLine, "* * * * *")
    Print sElement; " | ";
  Next ' sElement
  Print
Next ' sLine
```

Output in the console of the IDE:


```
Datasystem | 1K-Blocks | Used | Available | Used% Mounted on |
|---------------------------------------------------------------------|
/dev/sda6   | 50395844  | 10974228 | 36861616  | 23%   /              |
udev        | 4037720   | 4        | 4037716   | 1%    /dev           |
tmpfs       | 809308    | 944      | 808364    | 1%    /run           |
none        | 5120      | 0        | 5120      | 0%    /run/lock      |
none        | 4046520   | 156      | 4046364   | 1%    /run/shm       |
/dev/sda7   | 218656644 | 57277676 | 150271848 | 28%   /home          |
```



# 9.8.2.2.2 Subst Function (Pattern, ReplaceString[, ReplaceString...])

If you call a program with the shell instruction, the command line can quickly become complicated if you pass many arguments that are variables in the Gambas process. For example, we consider the program “tar”as it is called in the patch dialogs of the Gambas IDE.
The “Generate Patch”dialog asks for the path of an old source code archive from which a patch for the state of the current project is to be generated. In order for the “patch”program to work on the sources, the archive must be unpacked. This is done by means of “tar”:


```
Shell "tar -" & sType & "xf "  & Shell$(sOldSource) & " -C " &sOld &  " --strip-components=1"
```

If you now use the function Subst$ () instead of the & concatenations, you will see its meaning later on:


```
Shell Subst$("tar -&1xf &2 -C &3 --strip-components=1", sType, Shell$(sOldSource), sOld)
```

The Subst$ () function is the method of choice when you assemble strings in your translatable project from variables and string constants, such as in this case:


```
Message(("The Server ") & sServer & (" reports: everything OK!"))
```



```
Message(Subst$(("The Server &1 reports: everything OK!"), sServer))
```

Here, the translator himself can choose the syntax for his own language by moving the placeholder &1 appropriately.
Note: If you use more than 9 substrings, for example, you have to place the (predefined) substring in braces {&10} instead of &10.


# 9.8.2.3 Function Split (string[, Separators, Escape, IgnoreVoid, KeepEscape])

You can use the Split(string[, Separators, Escape, IgnoreVoid, KeepEscape] function) to split a string into individual strings if the substrings are separated by separators and (optional) are delimited by escape characters. This function returns a string array containing each recognized substring.
This source code:


```
sInput = "(12,3 )*()+(789),(    def)*(45,76)+     (a b c)"

Print "String  : (12,3 )*()+(789),(    def)*(45,76)+     (a b c)"
Print "Funktion: Split(sInput, \"+,*\", \"()\", IgnoreVoid, KeepEscape)"
Print String$(61, "-") & gb.NewLine
Print "IgnoreVoid = False, KeepEscape = False"
aStringFieldArray = Split(sInput, "+,*", "()", False, False)
For k = 0 To aStringFieldArray.Max
   Print "k = "; k; "  ~>  "; Trim(aStringFieldArray[k])
Next
Print "IgnoreVoid = True, KeepEscape = False"
aStringFieldArray = Split(sInput, "+,*", "()", True, False)
For k = 0 To aStringFieldArray.Max
  Print "k = "; k; "  ~>  "; Trim(aStringFieldArray[k])
Next
Print "IgnoreVoid = False, KeepEscape = True"
aStringFieldArray = Split(sInput, "+,*", "()", False, True)
For k = 0 To aStringFieldArray.Max
  Print "k = "; k; "  ~>  "; Trim(aStringFieldArray[k])
Next
Print "IgnoreVoid = True, KeepEscape = True"
aStringFieldArray = Split(sInput, "+,*", "()", True, True)
For k = 0 To aStringFieldArray.Max
  Print "k = "; k; "  ~>  "; Trim(aStringFieldArray[k])
Next
```

produces these editions in the console of the Gambas IDE:


```
IgnoreVoid = False, KeepEscape = False
k = 0  ~>  12,3
k = 1  ~>
k = 2  ~>  789
k = 3  ~>  def
k = 4  ~>  45,76
k = 5  ~>  a b c

IgnoreVoid = True, KeepEscape = False
k = 0  ~>  12,3
k = 1  ~>  789
k = 2  ~>  def
k = 3  ~>  45,76
k = 4  ~>  a b c

IgnoreVoid = False, KeepEscape = True
k = 0  ~>  (12,3 )
k = 1  ~>  ()
k = 2  ~>  (789)
k = 3  ~>  (    def)
k = 4  ~>  (45,76)
k = 5  ~>  (a b c)

IgnoreVoid = True, KeepEscape = True
k = 0  ~>  (12,3 )
k = 1  ~>  ()
k = 2  ~>  (789)
k = 3  ~>  (    def)
k = 4  ~>  (45,76)
k = 5  ~>  (a b c)
```



# 9.8.3 Examples

The next section of the source code shows you how to use selected string functions:


```
Public Sub btnStringManipulationen_Click()
  Dim iCount, k As Integer
  Dim sCommand As String = "Open"
  Dim sZK As String = "Today is the "
  Dim sLine, sInput, sText, sMessage1, sMessage2 As String
  Dim aStringFieldArray, aDateArray As String[]
  Dim aVariantFieldArray, vElement As Variant[]
  Dim vVariant As Variant
  Dim aCSV As New Variant[][]
  Dim hFile As File

  Print "ASC(\"Tobias\") = "; Asc("Tobias"), "ASC(\"Tobias\",2) = "; Asc("Tobias", 2)
  Print "ASC(\"ö\") = "; Asc("ö")
  Print "STRING.CODE(\"Anger\") = "; String.Code("Anger"); " ("; Hex(String.Code("Anger")); " hex)"
  Print "BASE64(\"Tobias\") = "; Base64("Tobias"), "UNBASE64(\"VG9iaWFz\") = "; UnBase64("VG9iaWFz")
  Print "CHR(66) = "; Chr(66), "STRING.CHR(246) = "; String.Chr(246)
  Print "Line 1"; Chr(10); "Line 2"
  If Comp(Upper(sCommand), "OPEN") = 0 Then Print "The file is opened!"
  Print "Html(\"Anger in the office...\")  "; Html("Anger in the office...")

  Print "The string 'bas' was found at Pos "; InStr("Gambas as Basic dialect.", "bas"); " for the first time."
  Print IIf(Comp(Lower(sCommand), "open") = 0, "The file is opened!", "Error!")
  Print "Lower(\"Anger?\") = "; Lower("Anger?"); "  String.Lower(\"Anger!\") = "; String.Lower("Anger!")
  If Comp(Upper(sCommand), "OPEN") = 0 Then Print "The File is opened!"
  Print Left("Hans-Joachim", 4), Left("Hans-Joachim"), Left("Hans-Joachim", -8)
  Print Mid("Gambas-Book", 8), Mid("Gambas-Book", 4, 5), Mid("Gambas-Book", 2, -5)
  Mid$(sZK, Len(sZK) + 1) = Format(Now(), "d. mmmm yyyy!")
  Print sZK; gb.NewLine

  sInput = "-3.88+4.275i"
  With Scan(sInput, "*+*i")
    Print "    Realpart =", .[0]; " (z = "; sInput; ")"
    Print "Imaginarypart = ", .[1]; " (z = "; sInput; ")"
  End With
  Print
  Print "Eight spaces between < and >: "; "<"; Space(8); ">"
  Print "Original: "; "\"   That is - not only with gambas - Standard!   \""
  Print "LTRIM: "; "<"; LTrim("   That is - not only with gambas - Standard!   "); ">"
  Print "TRIM: "; "<"; Trim("   That is - not only with gambas - Standard!   "); ">"
  Print "RTRIM: "; "<"; RTrim("   That is - not only with gambas - Standard!   "); ">"
  Print "Byte Number 'Gambas' = "; Len("Gambas"); "  Byte Number 'Äöü' = "; Len("Äöü")

  Print "Position of 'bas' in 'Gambas is basic' with RInstr(..) = "; RInStr("Gambas is basic", "bas")
  Print "Pos of 'bas' in 'Gambas is basic' with RInstr(..) from Pos 10="; RInStr("Gambas is basic","bas", 10)

  sText = "Gambas is basic"
  sMessage1 = "Text 'BAS' in '" & sText & "' found!"
  sMessage2 = "Text 'BAS' in '" & sText & "' not found!"
  Print IIf(RInStr(sText, "BAS", gb.IgnoreCase), sMessage1, sMessage2)
  Print "Replaces + in '+123.45 with ZERO-String: "; Replace("+123.45", "+", "")
  Print String$(11, "-----")
  Print Subst("Today is &1. &2", Format(Now(), "dddd"), "Isn't that beautiful?")
  Print "Number of lines (TextArea) = "; Split(TextArea1.Text, gb.NewLine).Count
  Wait 3
  Print
  Print Quote("This is a 'multi-Line' string." & gb.NewLine)

  TextArea1.Clear
  hFile = Open "example.csv" For Input
  While Not Eof(hFile)
    Line Input #hFile, sLine
    TextArea1.Insert(sLine & gb.NewLine)
    aStringFieldArray = New String[] ' A new array is used for each line
    aStringFieldArray = Split(sLine, ",", "\"", False, False)

    aVariantFieldArray = New Variant[]
    For iCount = 0 To aStringFieldArray.Max
      If IsFloat(aStringFieldArray[iCount]) Then
         aStringFieldArray[iCount] = Replace(aStringFieldArray[iCount], ",", ".")
         aVariantFieldArray.Add(CFloat(aStringFieldArray[iCount]))
      Else If IsBoolean(aStringFieldArray[iCount]) Then
         aVariantFieldArray.Add(aStringFieldArray[iCount])
      Else If IsDate(aStringFieldArray[iCount]) Then
         aDateArray = Split(aStringFieldArray[iCount], ".")
         aVariantFieldArray.Add(Date(aDateArray[2], aDateArray[1], aDateArray[0]))
       ' aVariantFieldArray.Add(Val(aStringFieldArray[iCount])) ' Quick Alternative
      Else
         aVariantFieldArray.Add(aStringFieldArray[iCount])
      Endif
    Next
    aCSV.Add(aVariantFieldArray)
   Wend

   Print
   For Each vElement In aCSV
        For Each vVariant In vElement
            If IsDate(Str(vVariant)) Then
               Print Format(vVariant, "dd.mm.yyyy")
            Else
               Print vVariant,
            Endif
        Next ' vVariant
   Next ' sElement
End ' StringManipulationen
```

This is the content of the csv file example. csv:


```
"8,03","False","FIRST","24.06.2014"
"58,1","True","Peter","23.02.2015"
"66,3","True","Paula","08.08.2015"
"83,1","False","Anna","14.01.2015"
"13,8","True","Thomas","04.02.2014"
"-8,9","False","Peter","07.05.2015"
"8,95","True","Paul","21.09.2013"
"52,5","True","Peter","23.02.2015"
"16,7","True","LATEST","08.04.2015"
```

Here you can see the generated outputs:


```
ASC("Tobias") = 84
ASC("Tobias",2) = 111
ASC("ö") = 195
STRING.CODE("Anger") = 196 (C4 hex)
BASE64("Tobias") = VG9iaWFz
UNBASE64("VG9iaWFz") = Tobias
CHR(66) = B
STRING.CHR(246) = ö
Line 1
Line 2
The file is opened!
Html(" Anger in the office...") Anger in the office...
The search string 'bas' was found for the first time at position 4.
The file is opened!
Lower(" Anger?") = Anger?
String.Lower(" Anger!") = anger!
The file is opened!
Hans    H       Hans
Book    bas-B   Gambas
Today is the 29. June 2014!

Realpart =  -3.88 (z = -3.88+4.275i)
Imaginarypart =  4.275 (z = -3.88+4.275i)

Eight spaces between < and >: <        >
Original: "   This is - not only with Gambas - standard!   "
LTRIM: <This is - not only with Gambas - standard!   >
TRIM: <This is - not only for Gambas - standard!>
RTRIM: <   This is - not only for Gambas - standard!>
Number of bytes 'Gambas' = 6 Number of bytes 'Äöü' = 6
Position of 'bas' in 'Gambas is basic' with RInstr(..) = 11
Position of 'bas' in 'Gambas is basic' with RInstr(..) from position 10 = 4
Text 'BAS' in 'Gambas is basic' not found!
Replace + in '+123.45 with ZERO-String: 123.45
-------------------------------------------------------
Today is Sunday. Isn't that nice?
Number of lines (TextArea) = 9

"This is a 'multi-Line' string.\n"

8,03    False   FIRST  24.06.2014
58,1    True    Peter   23.02.2015
66,3    True    Paula   08.08.2015
83,1    False   Anna    14.01.2015
13,8    True    Thomas  04.02.2014
-8,9    False   Peter   07.05.2015
8,95    True    Paul    21.09.2013
52,5    True    Peter   23.02.2015
16,7    True    LATEST 08.04.2015
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# Table of Contents



# 9.9 Bit manipulation functions

For example, in order to initialize the registers of the serial interface RS232 (V24) with correct values or to query the status of the interface and to send or receive a byte, it is necessary to understand the functions for bit manipulation and to be able to use them safely.
Gambas provides several functions for bit manipulation:


# 9.9.1 Overview of functions for bit manipulation

These instructions apply to all functions in the following table for the arguments Number and Bit:
The valid range of bits Bk depends on the data type of the argument Number. The following applies:


```
Data-Typ  	Bit-Domain
--------------------------
Byte 	     	B0...B7
Short		B0...B15
Integer         B0...B31
Long 	    	B0...B63
```

Table 9.9.1.1: Overview of the functions for bit manipulation


# 9.9.2 Examples Bit manipulation

An example is given for each of the above-mentioned functions for bit manipulation:


```
Print 23; " -> "; Bin(CByte(23), 8); " BCLR(CByte(23),2) "; Bin(BClr(CByte(23), 2), 8); " ->> "; BClr(CByte(23), 2)
Print 23; " -> "; Bin(CByte(23), 8); " BSET(CByte(23),3) "; Bin(BSet(CByte(23), 3), 8); " ->> "; BSet(CByte(23), 3)
Print 23; " -> "; Bin(CByte(23), 8); " BCHG(CByte(23),1) "; Bin(BChg(CByte(23), 1), 8); " ->> "; BChg(CByte(23), 1)
Print 23; " -> "; Bin(CByte(23), 8); " ->> "; IIf(BTst(CByte(23), 2), "The Bit B2 is set!", "The Bit B2 is 0.")
Print
Print 23; " -> "; Bin(CByte(23), 8); " LSL(CByte(23),3) "; Bin(Lsl(CByte(23), 3), 8); " ->> "; Lsl(CByte(23), 3)
Print 23; " -> "; Bin(CByte(23), 8); " LSR(CByte(23),3) "; Bin(Lsr(CByte(23), 3), 8); " ->> "; Lsr(CByte(23), 3)
Print
Print +23; "  -> "; Bin(CShort(23), 16); " SHL(CShort(23),3) "; Bin(Shl(CShort(23), 3), 16); " ->> "; Shl(CShort(23), 3)
Print -23; " -> "; Bin(CShort(-23), 16); " SHR(CShort(-23),3) "; Bin(Shr(CShort(-23), 3), 16); " ->> "; Shr(CShort(-23), 3)
Print
Print 23; " -> "; Bin(CShort(23), 16); " ROL(CShort(23),3) "; Bin(Rol(CShort(23), 3), 16); " ->> "; Rol(CShort(23), 3)
Print 23; " -> "; Bin(CShort(23), 16); " ROR(CShort(23),3) "; Bin(Ror(CShort(23), 3), 16); " ->> "; Ror(CShort(23), 3)
Print
Print 23; " -> "; Bin(CByte(23), 8); " NOT 23 "; Bin(Not CByte(22), 8); " ->> "; Not 23
```

Output in the console of the IDE:


```
23 -> 00010111 BCLR(CByte(23),2) 00010011 ->> 19
23 -> 00010111 BSET(CByte(23),3) 00011111 ->> 31
23 -> 00010111 BCHG(CByte(23),1) 00010101 ->> 21
23 -> 00010111 ->> The Bit B2 is set!

23 -> 00010111 LSL(CByte(23),3) 10111000 ->> 184
23 -> 00010111 LSR(CByte(23),3) 00000010 ->> 2

23  -> 0000000000010111 SHL(CShort(23),3) 0000000010111000 ->> 184
-23 -> 1111111111101001 SHR(CShort(-23),3) 1111111111111101 ->> -3

23 -> 0000000000010111 ROL(CShort(23),3) 0000000010111000 ->> 184
23 -> 0000000000010111 ROR(CShort(23),3) 1110000000000010 ->> -8190

23 -> 00010111 NOT 23 11101001 ->> -24
```



# 9.9.3 Simultaneous bit manipulations

The functions BClr (number, bit), BSet (number, bit), BChg (number, bit) and BTst (number, bit) in Table 9.9.1.1 above apply to the following functions:


```
Exactly one bit is changed or its (bit) value is queried.
```

In some programming languages, bit operators exist in addition to the logical operators such as AND or OR or NOT. Since Gambas does not know any special (logical) bit operators, you can apply the logical operators to operands that exist as numbers of the data type Byte, Short, Integer or Long. This allows you to set or delete or invert several bits in a bit sequence simultaneously (simultaneously).


# 9.9.3.1 Task 1 - Simultaneous setting of selected bits in a bit sequence



```
operand :	(10011011)bin  = (155)dez
mask    :       (00100100)bin  = (36)dez
result  :	(10111111)bin  = (191)dez
```

To generate the required bit masks it is advantageous to have the operators as binary numbers. Since each bit of the operand is linked to each bit of the bit mask with the logical operators, the knowledge of the following tables is helpful:


```
A 	B 	A AND B
-----------------------
0 	0 	  0
0 	1 	  0
1 	0 	  0
1 	1 	  1

A 	B 	A OR B
----------------------
0 	0 	  0
0 	1 	  1
1 	0 	  1
1 	1 	  1

A 	B 	A XOR B
-----------------------
0 	0 	  0
0 	1 	  1
1 	0 	  1
1 	1 	  0

A 	NOT A
-------------
0 	  1
1 	  0
```



# 9.9.3.2 Task 2 - Simultaneous deletion of selected bits in a bit sequence

Bit B3 and bit B4 in the operand (10011011)bin = 155dec are to be deleted while all other bits do not change their value.
By using the AND operator with operand AND mask, only the bits B3 and B4 are deleted if you use a bit mask mask with the value 0 at the bit positions to be deleted and otherwise 1.


```
operand :	(10011011)bin  = (155)dez
mask    :       (11100111)bin  = (231)dez
result  :	(10000011)bin  = (131)dez
```



# 9.9.3.3 Task 3 - Simultaneous inverting of selected bits in a bit sequence

The four bits B0 to B3 in the operand (10011011)bin = 155dec are to be inverted and all other bits retain their value. The appropriate bit mask has the value 1 at the bit positions to be inverted and otherwise 0. operand XOR mask ensures that only the first 4 low-order bits are inverted:


```
operand :	(10011011)bin  = (155)dez
mask    :	(00001111)bin  = (15)dez
result  :	(10010100)bin  = (148)dez
```



# 9.9.3.4 Task 4 - Simultaneous inverting of all bits in a bit sequence

All bits in the operand (10011011)bin = 155dec are to be inverted. With operand XOR mask, all bits are inverted if the bit mask has the value 1 at all bit positions:


```
operand :	(10011011)bin  = (155)dez
mask    :       (11111111)bin  = (255)dez
result  :	(01100100)bin  = (100)dez
```

A fast alternative is the NOT operator, as a logical negation of each bit is performed with bitwise NOT. Each 1 is replaced by 0 and each 0 by 1:


```
NOT (155) = 100
NOT (10011011) = 01100100
```

Summary:
For testing tasks 1 to 4, the BitManipulation function (bOperand As Byte, sMode As String, Optional sMask As Byte[]) was used, in which you can use the operatorsAND, OR, XORandNOTand an example procedure:


```
PublicFunctionBitManipulation(bOperandAsByte, sOperationAsString,OptionalsMaskAsByte[])AsByteDimbBitMask, bElementAsByteDimkAsIntegerIfsMaskThensMask.Reverse()Fork=0To7bBitMask=bBitMask+sMask[k]*2^kNextEndifSelectCaseUpper(sOperation)Case"NOT"ReturnNotbOperandCase"AND"ReturnbOperandAndbBitMaskCase"OR"ReturnbOperandOrbBitMaskCase"XOR"ReturnbOperandXorbBitMaskEndSelectEnd' BitManipulation(..)PublicSubbtnClearBits_Click()PrintNumberToDezimal("10011011",2)' For control: number, basePrintNumberToDezimal("11100111",2)PrintBin(BitManipulation(155,"AND",[1,1,1,0,0,1,1,1]),8)PrintNumberToDezimal("10000011",2)End' btnClearBits_Click()
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Gambas functions



# Chapters



# Table of Contents



# 9.10 Conversion functions

In many programs, conversions between different data types are necessary if, for example, values from a TextBox are to be processed as numbers or as dates according to the type. For all conversion functions, note the data type of the arguments and the data type of the function value as well as the notes on localization.


# 9.10.1 Table of selected conversion functions

Table 9.10.1.1: Overview of the conversion functions
The conversion algorithm for the Val () function is the following:


# 9.10.2 Conversion functions for character sets



```
ConvertedString = Conv$(string AS string, source character set AS string, target character set AS string)
ConvertedString = Conv(string AS string, source character set AS string, target character set AS string)
```

Converts a string from one character set to another. A character set is represented by a string such asASCII, ISO-8859-1, or UTF-8.


# 9.10.3 Examples



```
Dim sNumber As Single

Print CBool(0), CBool(1), CBool("Gambas"), CBool(""), CBool(Zero), CBool(Date(2000, 2, 29))

Print CByte("23"), CByte("257"), CByte(True)

Print "CDate(2488913) = "; CDate(2488913)
Print "UnixTimeStamp  = "; DateDiff(CDate("1/1/1970"), Now, gb.Second)
Try CDate("12.2. 2014 12:45:00")
If Error.Code = 6 Then Print "The expression ''; "12.2. 2014 12:45:00"; "' cannot be converted!"
Print "Date: ", Format(CDate(Val("1.9.2012")), "d. mmmm yyyy")
Print "Days since 1.1. 1970 = "; DateDiff(CDate("1/1/1970"), Now, gb.Day) ' 16224

Print CFloat("+3.1416"), CFloat(Now())

Print CInt("17"), CInt(True), CInt(Pi(1 / 7)), CInt(3.8), CInt(-7.998), CInt(-7.1), CInt(Now)

Print "CLong(5 ^ (2 ^ 2)) = "; CLong(5 ^ (2 ^ 2))
Print "CLong(2^62) = "; CLong(2 ^ 62)

Print CShort(20 < 6), CShort(False), CShort(True), CShort(DateDiff(CDate("1/1/1970"), Now, gb.Day))

Try sNumber = CSingle(DateDiff(CDate("1/1/1970"), Now(), gb.Millisecond))
If Error Then Print "OVERVIEW"
Print CSingle(Pi), CFloat(Pi), CSingle(Exp(11)), CSingle("+355.11")

Print CStr(-99), CStr(Pi(Pi())), CStr(355 / 113), CStr(Now)

Print "Object.Type(CVariant([2, 3, 5])) = "; Object.Type(CVariant([2, 3, 5]))
Print "Object.Type(CVariant([\"2\",\"3\",\"5\"])) = "; Object.Type(CVariant(["2", "3", "5"]))
Print "Object.Type([CVariant(\"a\"),\"b\",\"c\"]) = "; Object.Type([CVariant("a"), "b", "c"])

Print "Val(\"True\") = "; Val("True"), "Val(\"False\") = "; Val("False")
Print Format(Val("12.11.2013"), "d. mmmm yyyy")
Print "Val(\"123,456\") = "; Val("123,456"); " (Number with comma as decimal separator for DE.de)"
Print "Val(\"123.456\") = "; Val("123.456"); " (Point is interpreted as a thousands separator!)"
If Val("123.66") = Zero Then Print "Val(\"123.66\") = ZERO"; " (String cannot be interpreted as a number.)"

Print Conv("Trouble on Oedipus Street", System.Charset, "ISO 8859-15")
Print "Desktop-Characterset = "; Desktop.Charset
Print "System-Character set  = "; System.Charset
```



```
False   True    True    False   False   True
23      1       255
CDate(2488913) = 30.05.2014 23:00:00
UnixTimeStamp  = 1401992840
The expression' 12.2.2014 12:45:00' cannot be converted!
Date:  1. September 2012
Days since 1.1. 1970 = 16226
3,1416  2488918,81065353
17      -1      0       3       -7      -7      2488918
CLong(5 ^ (2 ^ 2)) = 625
CLong(2^62) = 4611686018427387904
0       0       -1      16226
Overflow
3,1415927       3,14159265358979        59874,140625    355,1099854
-99     9.86960440108936        3.14159292035398        06/05/2014 18:27:20.466
Object.Type(CVariant([2, 3, 5]))     = Integer[]
Object.Type(CVariant(["2","3","5"])) = String[]
Object.Type([CVariant("a"),"b","c"]) = Variant[]
Val("True") = True      Val("False") = False
12. November 2013
Val("123,456") = 123,456 (Number with comma as decimal separator for DE.de)
Val("123.456") = 123456 (Point is interpreted as a thousands separator!)
Val("123.66") = ZERO (String cannot be interpreted as a number.)
�rger in der �dipus-Stra�e
Desktop-Character set = UTF-8
System-Character set  = UTF-8
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.0 Control structures

Every task or problem - as a task with a higher level of requirements - whose solution can be described by algorithms, can in principle be solved with the help of the thinking tool computer. This makes the direct correlation between the algorithm and the computer program obvious, which has already been clearly highlighted in chapters 4.5 and 4.6. For the program design, the algorithms for the most important procedures must be available in a suitable form of description - either as text or in another suitable form (natural language - text, pseudo code, structure diagram or also Nassi-Shneiderman diagram) - whereby the representation form (notation) is adapted to the respective task.

When displaying algorithms, you will notice that each algorithm is composed of a few structure elements. These structures are called control structures because they are used to control and control complex (program) sequences. The following control structures are described in this chapter:


# 10.0.1 Selection - Case discrimination or selection



# 10.0.2 Repeat - Loop



# 10.0.3 Special control structures



# 10.0.4 Example

The following section introduces an excerpt from the source code of a real project, in which some of the above control structures (For Each..In..Next, For..To..Step..Next, Select.Case, Recursion, If..Then..Else..Endif) the program flow is controlled and controlled in one procedure:


```
PublicSubParseNode(NodeAsXmlNode)DimxmlNode, xmlAttributeAsXmlNodeDimhFeedAsFeedItemDimiCountAsIntegerFOREACHxmlNodeINNode.ChildrenIFxmlNode.Name="item"THENhFeed=NewFeedItem(ListContainer.Count+1,ListContainer)FORiCount=0TOxmlNode.Children.MaxSTEP1xmlAttribute=xmlNode.Children[iCount]SELECTCASExmlAttribute.NameCASE"title"hFeed.FeedTitle=xmlAttribute.ValueCASE"description"hFeed.Description=xmlAttribute.ValueCASE"link"hFeed.Link=xmlAttribute.ValueENDSELECT' xmlAttribute.NameNEXT' iCountELSEIFxmlNode.Children.Count>0THENParseNode(xmlNode)' Recursive call!ENDIF' xmlNode.Name = "item" ?NEXT' Each xmlNodeEnd' ParseNode(...)
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# 10.1 Sequence

The simplest form of the program structure in individual procedures (→ source code) is thelinear statement sequence. Several statements are executed immediately one after the other in a statement block, with empty lines and comments in the source code generally ignored by the interpreter:
Example


```
PublicSubForm_Open()' Statement block -> startFMain.CentermyHttpClient=NewHttpClientAs"myHttpClient"Feeds[0]="http://www.tagesschau.de/xml/rss2"Feeds[1]="http://www.zdf.de/ZDFmediathek/rss/166?view=rss"Feeds[2]="http://www.spiegel.de/schlagzeilen/tops/index.rss"cmbFeedSource.Add("ARD",0)cmbFeedSource.Add("ZDF",1)cmbFeedSource.Add("Spiegel-Online",2)' Automatically select the first URLcmbFeedSource.Index=0WebView.Background=&HE1EAF6' Statement block -> endEnd' Form_Open()
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.2 Selection - Case discrimination or selection

Often, statements or a sequence of statements in a statement block must be executed under specific conditions. A classic example is the calculation of the solutions of a quadratic equation in the general form a·x²+b·x+c = 0, which is first transformed into the normal form x²+p·x+q = 0, in order to make the sample according to Vieta easy for the two solutions x1 and x2 with x1+x2 = -p and x1·x2 = q. Afterwards, their solution variety is determined by means of the discriminant D with D = (p²/4-q). One arrives atexactly3 distinguishable cases:
By using the componentgb. complexyou can quickly implement the above mentioned approach:


```
PublicFunctionCalculateRoots(fPAsFloat, fQAsFloat)AsVariant[]DimfDiskriminanteAsFloat=0DimfX1, fX2AsVariantDimfXC1, fXC2AsComplex
 
  fDiskriminante=(fP*fP)/4-fQSelectSgn(fDiskriminante)Case1' D>0fX1=-fP/2-Sqr(fDiskriminante)fX2=-fP/2+Sqr(fDiskriminante)Return[fX1, fX2]Case0' D=0fX1=-fP/2fX2=fX1Return[fX1, fX2]CaseElse' D<0fXC1=Complex(-fP/2,-Sqr(-fDiskriminante))fXC2=fXC1.Conj()Return[fXC1, fXC2]EndSelectEnd
```

This chapter 10.2 describes the following control structures:


# Download

Articles
Download


# ﻿10.2   Auswahl – Fallunterscheidungen oder Selektion

Oft müssen Anweisungen oder eine Folge von Anweisungen in einem Anweisungsblock unter ganz bestimmten Bedingungen ausgeführt werden. Ein klassisches Beispiel ist die Berechnung der Lösungen einer quadratischen Gleichung in der allgemeinen Form  a·x²+b·x+c = 0. Diese wird zuerst in die Normalform  x²+p·x+q = 0 transformiert, um die Probe nach Vieta für die beiden Lösungen x1 und x2 mit x1+x2 = -p und x1·x2 = q einfach zu gestalten. Danach bestimmt man deren Lösungsvielfalt mit Hilfe der Diskriminante D mit D = (p²/4-q). Man kommt aufgenau3 unterscheidbare Fälle:
Mit dem Einsatz der Komponentegb.complexkönnen Sie den o.a. Ansatz schnell realisieren:


```
PublicFunctionCalculateRoots(fPAsFloat, fQAsFloat)AsVariant[]DimfDiskriminanteAsFloat=0DimfX1, fX2AsVariantDimfXC1, fXC2AsComplex
 
  fDiskriminante=(fP*fP)/4-fQSelectSgn(fDiskriminante)Case1' D>0fX1=-fP/2-Sqr(fDiskriminante)fX2=-fP/2+Sqr(fDiskriminante)Return[fX1, fX2]Case0' D=0fX1=-fP/2fX2=fX1Return[fX1, fX2]CaseElse' D<0fXC1=Complex(-fP/2,-Sqr(-fDiskriminante))fXC2=fXC1.Conj()Return[fXC1, fXC2]EndSelectEnd' CalculateRoots(fP As Float, fQ As Float) As Variant[]
```

In diesem Kapitel 10.2 werden die folgenden Kontrollstrukturen beschrieben:


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.2.1 Conditional selection - IF control structure

This chapter describes the following variants of the IF control structure:


# 10.2.1.1 Syntax

The syntax for the IF control structure in the second part represents the cases in which only one (conditional) selection is formulated in a row:


```
IF Expression [ { AND IF | OR IF } Expression ... ] [ THEN ] 
  ... 
[ ELSE IF Expression [ { AND IF | OR IF } Expression ... ] [ THEN ] 
  ... ] 
[ ELSE 
  ... ] 
ENDIF
```



```
IF Expression [ { AND IF | OR IF } Expression ... ] THEN ... 
IF Expression [ { AND IF | OR IF } Expression ... ] THEN ... ELSE …
```



# 10.2.1.2 Notes on the syntax

The following examples show mainly Gambas source code excerpts and are commented on briefly. Some of the examples are preceded by pseudo-code, which is intended as a readable interpretation of the syntax of the IF-control structure (? 10.2.1.1 syntax).


# 10.2.1.3 Examples for one-sided selection

In one-way selection, the statement or statement block is only executed if the expression is true. There is no alternative.


```
IF expression is true, THEN 
     execute this statement(s) 
END of the selection
```



```
IFLen(txbFarbwert.Text)=0THENtxbFarbwert.MaxLength=6ReturnENDIF
```



```
IF expression is true, THEN execute this instruction(s) 
IF Key.Code = Key.F1 THEN btnHelp_Click()
```



```
IFexpressionisNOTtrue,THENexecute this instruction(s)IFNOTtxbFarbwert.TextThenMessage.Warning("Enter a color value!")
```



# 10.2.1.4 Examples for two-sided selection

If variant 1 was selected via the RadioButton, then this variant is used for calculation, otherwise the second variant is used:


```
IF expression is true, THEN 
     Execute this statement (s) (and exit the control structure) 
ELSE 
     Execute those statement(s) 
End of selection
```



```
IFoptV1.Value=TrueTHENCalculate_V1(iAZahl, iEZahl)ELSECalculate_V2(iAZahl, iEZahl)ENDIF
```

The alternative notation of the IF control structure in one line triggers a syntax error in the second line, because no ENDIF is allowed at the end of the line:


```
(1)	IF optV1.Value = True THEN Calc_V1(iAZahl, iEZahl) ELSE Calc_V2(iAZahl, iEZahl)
(2)	IF optV1.Value = True THEN Calc_V1(iAZahl, iEZahl) ELSE Calc_V2(iAZahl, iEZahl) ENDIF ' Error!
```



# 10.2.1.5 Examples for Multiple Selection

Here is an IF control structure for three (→ k=3) incompatible cases in which you are sure that exactly one of the three cases applies:


```
IF expression_1 is true, THEN 
     Execute this statement (s)_1 (and exit control structure) 
ELSE IF expression_2 is true, THEN 
      Execute this statement (s)_2 (and exit control structure) 
... 
ELSE IF expression_k is true, THEN 
      Execute that statement (s)_k 
END OF the selection
```



```
PublicFunctionCalculate(fPAsFloat, fQAsFloat)AsVariant[]DimfDiskriminanteAsFloat=0DimfX1, fX2AsFloatDimfXC1, fXC2AsComplex    
  fDiskriminante=(fP*fP)/4-fQIFSgn(fDiskriminante)=1THEN' D>0fX1=-fP/2-Sqr(fDiskriminante)fX2=-fP/2+Sqr(fDiskriminante)Return[fX1, fX2]ELSEIFSgn(fDiskriminante)=0Then' D=0fX1=-fP/2fX2=fX1Return[fX1, fX2]ELSEIFSgn(fDiskriminante)=-1Then' D<0fXC1=Complex(-fP/2,-Sqr(-fDiskriminante))fXC2=fXC1.Conj()Return[fX1, fX2]ENDIFEnd' Calculate(fP As Float, fQ As Float) As Variant[]
```

Example


```
IF expression_1 is true, THEN 
     Execute this statement(s)_1 (and exit control structure) 
ELSE IF expression_2 is true, THEN 
      Execute this statement(s)_2 (and exit control structure) 
... 

ELSE unconditionally execute that instruction(s)! 
END of the selection
```



```
PublicSubGetStatus(sStatusAsString)IFsStatusLike"[+Pp]*"THENMessage.Info(IIf(sStatus Begins"+","Status: positiv","Status: "&sStatus))ELSEIFsStatusLike"[-Nn]*"THENIfsStatus Begins"-"ThensStatus="negativ"Message.Info("Status: "&sStatus)ELSEMessage.Error("Der Status konnte NICHT ermittelt werden!")ENDIFEnd' GetStatus(sStatus As String)
```

The unconditional use of ELSE is often used for error messages.
Example
Several expressions linked via' AND IF' or' OR IF' are used in a procedure in the following examples:


```
WENN Ausdruck_1 wahr ist UND WENN auch Ausdruck_2 wahr ist, DANN 
     diese Anweisung(en) ausführen 
ENDE der Auswahl
```



```
PublicSubtxbFarbwert_KeyPress()IF(Key.ControlANDKey.Code=Key.F1)THENbtnHelp_Click()IF(Key.Code=Key.ReturnORKey.Code=Key.Enter)ANDIF(txbFarbwert.Text)THENMessage.Info("The characters entered are:\n\n"&Upper(txbFarbwert.Text))IFLeft(txbFarbwert.Text,1)="&"THENtxbFarbwert.MaxLength=7ELSEtxbFarbwert.MaxLength=6ENDIFENDIF' Key.Code = Key.Return OR Key.Code = Key.Enter AND ...?IF(Key.Code=Key.BackSpace)ANDIF(Len(txbFarbwert.Text)>0)THENtxbFarbwert.Text=Left(txbFarbwert.Text,Len(txbFarbwert.Text)-1)ENDIF' Key.Code = Key.BackSpace AND Len(txbFarbwert.Text) > 0 ?' Permissible characters for a color value in hexadecimal representationIFKey.TextNOTLike"[&0-9a-fA-F]"THENStopEventENDIF' Key.Text NOT Like "[&0-9a-fA-F]"End' txbFarbwert_KeyPress()
```

Example


```
IF expression_1 is true OR IF expression_2 is true, THEN 
     execute this statement(s) 
END of the selection
```



```
PrivateSubResultSave()DimsMessage1, sMessage2AsStringDialog.Path=sScriptFilePathDialog.Title=("Save the result matrix!")Dialog.Filter=["*.fit",("GnuPlot-Skript-Datei"),"*",("Alle Dateien")]IfDialog.SaveFile()ThenMessage.Warning("Saving has been cancelled!")' Cancel button pressed!ReturnElseIf(File.Ext(Dialog.Path))ORIF(File.Ext(Dialog.Path)<>"fit")ThenDialog.Path=File.SetExt(Dialog.Path,"fit")EndifFile.Save(Dialog.Path, txaErrorAndFit.Text)FinallybtnSaveScriptFile.Enabled=FalseCatchsMessage1=("The result file ")sMessage2=(" can NOT be saved!")Message.Error("FEHLER!"&Chr(10)&sMessage1&File.Name(Dialog.Path)&sMessage2)Endif' Dialog.SaveFile() = True ?End' ResultSave()
```

Hints:


# 10.2.1.6 Excursus

The following examples - but also some of the examples mentioned above - can only be understood if you know the content of the term expression in Gambas. In the documentation for' Expression' you will find, among other things, the following:
An expression is a value (a constant, a predefined constant, a variable or the result of a function), which may optionally be preceded by certain operators depending on the type of value, followed by an operator and another value, and so on.
Translated and provided with examples it reads like this:
An expression is a value: a constant (*1), a predefined constant (*2), a variable (*3) or the result of a function call (*4), which can be preceded or followed by certain optional operators (*5) - depending on the type of value - and so on (*6).
Examples of the cases marked (*1) to (*6):
(*1) → 5 or “Test”(*2) →  gb. Integer(*3) → iIndex(*4) → Pi(2)(*5) → NOT bIsActive(*6) → NOT bIsActive OR IF (iLevel < iMinLevel)
The following applies to expressions associated with the IF control structure:
The IF control structure checks the truth value of an expression.  For objects, zero is also the characteristic value for determining the truth value. In all cases, 0 means false and everything else is true.
Examples


```
Public Sub btnTest_Click()
  Dim iInteger As Integer
  
  Print iInteger  
  IF iInteger THEN
     Print "JA"
  ELSE
     Print "NEIN"
  ENDIF
'--------------------------------------------------------
  IF txbPingNumber.Text THEN 
     Print "TEXTBOX ENTHÄLT TEXT."
  ELSE
     Print "TEXTBOX ENTHÄLT KEINEN TEXT."
  ENDIF
'--------------------------------------------------------
  IF txbPingNumber THEN 
     Print "DAS OBJEKT 'txbPingCount' EXISTIERT"
  ELSE
     Print "DAS OBJEKT 'txbPingCount' EXISTIERT NICHT"
  ENDIF
'--------------------------------------------------------
  IF $hPing THEN 
     Print "DER PING-PROZESS LEBT..."
  ELSE
     Print "VOM PING-PROZESS IST NICHTS ZU SEHEN..."
  ENDIF
'--------------------------------------------------------
  TRY File.Save("/usr/local/backup.bak", txaOutput.Text)
  IF ERROR THEN
     Print "Fehler: "; Error.Text; " - "; Error.Where
     Return
  ENDIF

End ' btnTest_Click()
```

ERRORalone/ is a keyword of the language Gambas. True is returned if the last TRY statement triggered an error. Minisini advises using ERROR only in this context.
These outputs were displayed in the console of the Gambas IDE:


```
0NO
THE TEXTBOX CONTAINS TEXT.
THE OBJECT' txbPingCount'EXIST
OF THE PING PROCESS IS NOT VISIBLE....
ERROR: Access forbidden - FMain. btnTest_Click.135
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.2.2 Two-sided selection IFF

Syntax for 2nd variant of the two-sided, alternative selection:


```
Value = IIf ( Test AS Boolean , TrueExpression , FalseExpression ) 
Value = If ( Test AS Boolean , TrueExpression , FalseExpression )
```

The test expression is evaluated and returns TrueExpression if the expression is TRUE or FalseExpression if the expression is FALSE.


# 10.2.2.2.1 Example 1



```
iNumber = 7 
LabelIIF.Text = IIF((iNumber MOD 2) = 0, "N is an even number", "N is an odd number.")
```

The text “N is an odd number” is set as label text for iNumber = 7.


# 10.2.2.2.2 Example 2

In the second example 2 panels are used alternatively in a project to display the graphs of the program' GnuPlot'. First the current (display) panel is determined and then the labeling of the toggle buttons - depending on the current panel - is set:


```
PublicSubtogWhich_Click()$hCurrentPanel=IIF($hCurrentPanel=panPanel1, panPanel2, panPanel1)togWhich.Text=IIF($hCurrentPanel=panPanel1,("Use lower Panel"),("Use upper Panel"))Print#$hGnuplot,Subst$("set terminal x11 window\"&1\"",Hex$($hPanel.Handle))End' togWhich_Click()
```

Hints:


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.2.3 Select... case End Select

The syntax for this control structure may surprise you with its variety - but it can be implemented quickly in practical use:


```
SELECT [ CASE ] Expression 

  [ CASE [ Expression ] [ TO Expression #2 ] [ , ... ] 
    ... ] 

  [ CASE [ Expression ] [ TO Expression #2 ] [ , ... ] 
    ... ] 

  [ CASE LIKE Expression [ , ... ] 
    ... ] 

  [ { CASE ELSE | DEFAULT } 
    ... ] 

END SELECT
```



# 10.2.3.1 Notes



# 10.2.3.2 Examples

The examples mainly show source code excerpts and are commented on briefly.
Example 1
The selection is made for different (number ranges) with different selectors:


```
PublicSubGetInformation(iNumberAsInteger)SelectCaseiNumberCase0Print"Selection = 0"Case1To2Print"Selection 1 or 2"Case3To5,7To9Print"Choose between 2-5 or 7-9"Case6Print"Selection = 6"CaseElsePrint"Selection not in range 0-9"EndSelectEnd' Public Sub GetInformation(iNumber As Integer)'   Select CStr(iNumber)'     Case "0"'       Print "Selection 0"'     Case Like "[1-2]"'       Print "Selection 1 or 2"'     Case Like "[3-57-9]" ' Case Like "[345789]"'       Print "Choose between 3-5 or 7-9"'      Case "6"'       Print "Selection 6"'     Case Else'       Print "Selection not in range 0-9"'     End Select'' End
```

A numerical value (0 and 6), a numerical range 1-2 or a list of two numerical ranges 3-5 and 7-9 are used as selectors. The commented out source code uses the Like operator for the selectors.
With this source code after clicking on the corresponding button


```
PublicSubbtnSelectedRange_Click()GetInformation(0)GetInformation(2)GetInformation(8)GetInformation(6)GetInformation(13)End' btnSelectedRange_Click()
```

the following lines in the console of the IDE:


```
Selection =0Selection1or2Choice between2-5or7-9Selection =6Selection notinrange0-9
```

Example 2
First, specify an If..Then..Else_If_End_If control structure for three alternative cases:


```
ForiNumber=0ToxmlNode.Children.Count-1sBuffer=xmlNode.Children[iNumber].NameIfsBuffer="title"ThensTitle=xmlNode.Children[iNumber].ValueElseIfsBuffer="link"ThensItemLink=xmlNode.Children[iNumber].ValueElseIfsBuffer="description"ThensDescription=xmlNode.Children[iNumber].ValueEndifNext
```

and then the implementation into an adequate Select.Case..End_Select control structure:


```
ForiNumber=0ToxmlNode.Children.Count-1sBuffer=xmlNode.Children[iNumber].NameSelectCasesBufferCase"title"sTitle=xmlNode.Children[iNumber].ValueCase"link"sItemLink=xmlNode.Children[iNumber].ValueCase"description"sDescription=xmlNode.Children[iNumber].ValueEndSelectNext
```

Example 3


```
PUBLICSUBForm_KeyPress()IFKey.ControlSELECTCASEWorkspace1.Children.Find(Workspace1.ActiveWindow)CASE0TOWorkspace1.Children.Count-2Workspace1.ActiveWindow=Workspace1.Children[Workspace1.Children.Find(Workspace1.ActiveWindow)+1]CASEWorkspace1.Children.Count-1Workspace1.ActiveWindow=Workspace1.Children[0]CASEELSE' Alternative ...ENDSELECTENDIFEND
```

The first case checks a list of values. There is no alternative selection for 'CASE ELSE' - but it is planned!
Example 4


```
PublicSubGetStatus(sStatusAsString)SelectsStatusCaseLike"[+Pp]*"Message.Info(IIf(sStatus Begins"+","Status: positiv","Status: "&sStatus))CaseLike"[-Nn]*"IfsStatus Begins"-"ThensStatus="negativ"Message.Info("Status: "&sStatus)DefaultMessage.Error("Der Status konnte NICHT ermittelt werden!")EndSelectEnd' GetStatus(sStatus As String)
```

Calling GetStatus (“Status ok”) in the following procedure


```
PublicSubbtnSelect_Click()GetStatus("Status ok")End' btnSelect_Click()
```




# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.2.4 Multiple Choose

The Choose(..) function returns the value of one of its arguments Result_i according to the integer value (>=1) of the selection. The following applies:


# 10.2.4.1 Syntax for multiple selection



```
Value = Choose ( Choice , Result_1 , Result_2 [ , ... ] )
```

with the data types:


```
Value	→	Variant 
Choice	→	Integer 
Results  	→	Variant
```

For example, the Choose control structure (…) fits well with a selection in a ComboBox or similar selection component that has the properties Index or Count and often leads to the sequence of numbers {0,1,2,3,…].. } with later transformation to {1,2,3,..}.
Example:


```
iEndOfLine = Choose(cmboxEndOfLine.Index + 1, gb.Unix, gb.Windows, gb.Mac)
```

The constantgb. Unixhas the value 1,gb. Windowshas the value 2 andgb. Macreturns 3.


# 10.2.4.2 Examples for Multiple Selection Choose



```
X = 3 
PRINT Choose(X, "eins", "zwei", "drei", "vier") 
drei
```



```
X = 3 
PRINT IsNull(Choose(X * 2, "eins", "zwei", "drei", "vier")) 
True
```



```
iMonat = 11 
PRINT Choose(iMonat, "Januar", "Februar", ...,  "November", "Dezember")   
November
```

Alternatives for the last example would be to use the control structures with If… Then… Else or Select.. case or the use of a matrix with 
aMatrix = (“January”,“February”,…,“November”,“December”) and the selection via AktMonat = aMatrix[ iMonth + 1].


```
iMonat = 13 
PRINT Choose(iMonat, "Januar", "Februar", ...,  "November", "Dezember") 
NULL
```



```
iMonat = 11 
PRINT Choose(iMonat, "Januar", "Februar", ..., "Oktober") 
NULL
```

The second line replaces an IF..Then..Else block:


```
DIM sEnd AS String 
sEnd = Choose(CInt(iJumps < ijName) + 2, " ", "\n")
```

The relation (iJumps < ijName) returns the values TRUE = -1 or FALSE = 0, so that the selection value - truth value multiplied by 2 - is either 1 or 2, and the stringsEnd/ is assigned a blank character for the value 1 or a gb. NewLine (“\n”) for the value 2.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# 10.3 Repetitions - Iteration

If statements or a sequence of statements must be repeated in a statement block, you can use the following selected control structures described in this chapter. In the list you will find only theshort, synonymousdescriptions.
The control structures are calledRepeat,IterationorLoop/.
Example for the use of 3 different control structures (WHILE..WEND, FOR..TO..STEP..NEXT and FOR EACH..IN..NEXT) inonefunction:


```
PrivateFunctionIsPolynomial(sInputAsString)AsBooleanDimsPattern, sTermAsStringDimaResult, aTmpAsNewString[]DimiI, iJAsIntegerDimsExpressionAsStringsInput=Trim(sInput)sInput=Replace$(sInput,Left$(Format$(0,".0")),".")aResult=Split(sInput,"+","",True)iI=0WhileiI<aResult.CountsExpression=IIf(aResult[iI]NotBegins"-","+","")&aResult[iI]aResult.Remove(iI)aTmp=Split(sExpression,"-","",True)ForiJ=0ToaTmp.MaxStep1aTmp[iJ]=IIf(aTmp[iJ]NotBegins"+","-","")&aTmp[iJ]Next' iJaResult.Insert(aTmp, iI)iI+=aTmp.CountWendsPattern="^[+-]?([0-9]+(\\.[0-9]+)?)?(x([\\^][0-9]+)?)?$"ForEachsTermInaResultIfsTermNotMatch sPatternThenReturnFalseEndif' Match PatternNext' sTermReturnTrueEnd
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.3.1 Count loop - FOR control structure

This chapter describes the FOR control structure. It is a form of loop control structures with a fixed number of repetitions.


# 10.3.1.1 Syntax

Syntax for the FOR control structure:


```
FOR Variable = Expression { TO | DOWNTO } Expression [ STEP Expression ] 
   <Instruction(s) >
NEXT
```



# 10.3.1.2 Notes on the syntax



# 10.3.1.3 Example 1

In these 4 part examples, different types are used for the (loop) variable, different step sizes and the keywords TO and DOWNTO:


```
Public Sub btnForToNext_Click()
  Dim iCount As Integer
  Dim fCount As Float

  For iCount = 1 To 7 Step 1 ' Step 1 kann entfallen → Standard-Schrittweite
    Print iCount;;
  Next
    Print
  For fCount = 1 To 7.3 Step 0.8
    Print fCount;;
  Next
    Print
  For iCount = 12 To 7.3 Step -1 ' Alternative Notation für DOWNTO
    Print iCount;;
  Next
    Print
  For fCount = 5.3 DownTo 1 Step 0.5
    Print fCount;;
  Next

End
```

This is displayed in the console of the Gambas IDE:


```
123456711,82,63,44,255,86,61211109875,34,84,33,83,32,82,31,81,3
```



# 10.3.1.4 Example 2

The contents of a file are read out line by line and stored in an array as long as lines are still readable. The content of the array (test option) is then displayed in the console of the IDE for control:


```
hFile=OpensRubrikPfadForInputWhileNotEof(hFile)LineInput#hFile, sZeile 
    aSuchDateiMatrix.Add(sZeile)WendClose#hFile 
  aSuchDateiMatrix.Sort(0)' For control:FORk=0TOaSuchdateiListe.MaxPRINTaSuchdateiListe[k]NEXT' k
```



# 10.3.1.5 Example 3

Using two nested FOR control structures, the simple sorting algorithm Selectionsort (→ Wikipedia:http://de.wikipedia.org/wiki/Selectionsort) is implemented for an integer array:


```
PrivateSubSelectionsort(aArrayAsInteger[])DimiI, iJ, iMinAsIntegerForiI=0ToaArray.MaxiMin=iIForiJ=iIToaArray.MaxIfaArray[iJ]<aArray[iMin]TheniMin=iJNextSwapaArray[iI], aArray[iMin]NextEnd
```



# 10.3.1.6 Example 4

The join() method of the class String[] connects the elements of the array in sequence by a separator string - for example, a comma. This simplifies the output of arrays for testing purposes. Unfortunately, this method is missing in the other native array classes, as in Integer[], although using the Str$ () function the representation of a value of any data type is returned as a string. A FOR control structure can be used to implement such a generic join () function:


```
PrivateFunctionGenericJoin(aArrayAsVariant[], sSepAsString)AsStringDimiIndAsIntegerDimsResAsStringForiInd=0ToaArray.MaxsRes&=Str$(aArray[iInd])&sSepNextReturnLeft$(sRes,-Len(sSep))End
```



# 10.3.1.7 Notes on semantics

The expressions in the head of the FOR control structure are evaluated once - to enter the loop. Thus, a FOR control structure differs from while or repeat loops, which evaluate the expressions in their conditions before and after each iteration.
Care should therefore be taken when using non-constant expressions, as you will see in the following three examples:
Example 1


```
PrivateSubBrokenInfiniteLoop()DimiAsIntegerFori=0Toi+1PrintiNextEnd
```

At first glance, you would assume that the condition is unattainable: i+1 will always be greater than i. However, the expression i+1 will only be evaluated once at the beginning of the loop, i. e. 0 + 1 = 1, since i is equal to 0 at this point in time. The procedure is actually terminated after the following output in the console:


```
0
1
```

Example 2


```
PrivateSubBrokenSqr(nAsInteger)DimiAsInteger, jAsInteger=1Fori=1TonStep2*j-1IncjNextDecj' For control:Print"j="; j,"sqr(n)=";Int(Sqr(n))End
```

This routine is to determine the integer part of the square root of the integer variable n and store it in j. The idea of this routine lies in identity

However, the step expression is only evaluated at the beginning of the FOR control structure. Since at this point in time j = 1, the step expression is constant 2 * 1 - 1 = 1, followed by the output:


```
j=20	sqr(n)=4
```

Example 3


```
PrivateSubBrokenArrayRemove()DimaAsInteger[]=[1,2,3,4]DimiAsInteger' Remove all odd numbers from the arrayFori=0Toa.MaxIfa[i]Mod2Thena.Remove(i)' Correct index after removal to avoid skipping an elementDeciEndifNextCatchPrint"Error: ";Error.Text;;"with i="; iEnd
```

Remove all odd numbers from the array. When evaluating the end expression, a.Max = 3 is determined. Therefore, at this point in time, the interpreter already knows that the loop has to be executed exactly 3 - i + 1 = 4 times, since i = 0, but in the first iteration a[i] = a[0] = 1 is recognized as odd and removed. Then a.Max = 1, the loop is executed up to and including i = 3, because this value was determined by the interpreter at the beginning of the loop. The output of the procedure is therefore


```
Error: Out of bounds with i=2
```

Solution: For applications where the end or step expression is variable, you should use while or repeat loop control structures.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.3.2 FOR-EACH control structure

This chapter describes the FOR-EACH control structure. It is another form of loop control structure.


# 10.3.2.1 Syntax 1

Syntax for the FOR-EACH control structure:


```
FOR EACH Variable IN Expression 
  <Instruction(s)> 
NEXT
```



# 10.3.2.2 Notes on the syntax



# 10.3.2.3 Example 1

In the project GBTT (GamBas-ToolTipps) all file paths of the files are stored in an array in which the search term was found. For control purposes, all saved file paths are then displayed in the console of the Gambas IDE for testing purposes:


```
...
  aSuchDateiArray.Sort(0) 

' For control: 
  FOR EACH sDateiPfad IN aSuchDateiArray
    PRINT aSuchDateiArray[iCount] 
  NEXT
```



# 10.3.2.4 Example 2

First, all output of the (console) command' df' is stored in the variable sResult. Then all lines of sResult are read from a temporary array (? split (sResult,“\n”). Finally, each line of the array with the scan command is divided into individual elements according to the predefined pattern and displayed as a separator with the pipe character that is freely selected here:


```
DIMsResult, sLine, sElementASStringSHELL"df"TOsResultFOREACHsLineINSplit(sResult,"\n")FOREACHsElementINScan(sLine,"* * * * *")PRINTsElement;"|";NEXT' sElementPRINTNEXT' sLine
```

Output in the console:


```
Dateisystem | 1K-Blöcke | Benutzt | Verfügbar | Verw% Eingehängt auf | 
/dev/sda6 | 50395844 | 9446400 | 38389444 | 20% / | 
udev | 4037712 | 4 | 4037708 | 1% /dev | 
tmpfs | 1618612 | 908 | 1617704 | 1% /run | 
none | 5120 | 0 | 5120 | 0% /run/lock | 
none | 4046524 | 156 | 4046368 | 1% /run/shm | 
/dev/sda7 | 218656644 | 53868032 | 153681492 | 26% /home |
```



# 10.3.2.5 Example 3

Based on the working method of the gb. settings component (→ 19.1 Settings), a function is presented here which can reduce a collection in the way that only those (key, value) pairs are to be retained in which the key begins with a given string (prefix).


```
PrivateFunctionConstrain(cCollAsCollection, sPrefixAsString)AsCollectionDimcConstrAsNewCollectionDimvValueAsVariantForEachvValueIncColl' Skip elements whose key does not begin with the desired prefix.IfcColl.KeyNotBegins sPrefixThenContinuecConstr[cColl.Key]=vValueNextReturncConstrEnd
```

You can view the following source code as an application:


```
DimcCollAsCollection=["Kontext1/S1":"wert1","Kontext1/S2":Pi,"Kontext2/S1":"wert2"]DimvValueAsVariantForEachvValueInConstrain(cColl,"Kontext1/")PrintvValueNext
```

Output in a console:


```
wert13.14159265358979
```



# 10.3.2.6 Syntax 2

Here you can find the syntax for another form of the FOR-EACH control structure:


```
FOR EACH Expression 
  <Instruction(s)>
NEXT
```



# 10.3.2.7 Note on syntax 2



# 10.3.2.8 Examples of syntax 2

Example 1 refers to an SQLite3 table in an SQLite3 database where contacts are maintained. For example, for a program test, only the first name, last name, and location of all contacts are displayed in the IDE console, although all contact data has been requested in the SQL statement:


```
PublicSubbtnShowContacts_Click()DimsSQL_AnweisungAsStringDataSource1.Table="kontakte"MDataBase.rDBResult=NullMDataBase.cDBVerbindung.BeginsSQL_Anweisung="SELECT * FROM "&DataSource1.TableMDataBase.rDBResult=MDataBase.cDBVerbindung.Exec(sSQL_Anweisung)MDataBase.cDBVerbindung.CommitForEachMDataBase.rDBResultPrintMDataBase.rDBResult!Vorname;" "; MDataBase.rDBResult!Nachname;" - "; MDataBase.rDBResult!WohnortNextEnd' btnShowContacts_Click()
```

Information about the used! operator can be found in the second section of chapter '8.6 Special Operators'. The first name, last name and place of residence of all contacts are displayed formatted in the console:


```
Arno Adler - Aachen
Bruno Bär - Berlin
Heinz Hirsch - Hamburg
...
Willi Wiesel - Wiesbaden
Zora Zobel - Zornheim
```

Example 2
For example, you can store all keys used in a collection in an array:


```
PrivateFunctionCollectionKeys(cCollAsCollection)AsString[]DimaResultAsNewString[]ForEachcColl
    aResult.Add(cColl.Key)NextReturnaResultEnd
```

The Collection. key property is set to the key string of the current value when the collection is enumerated. Since the listed value (from the above syntax 1) is irrelevant for this operation, the second syntax is used here. A call to the following print statement:


```
DimcCollAsCollection=["test":"wert1","schluessel":"wert2"]PrintCollectionKeys(cColl).Join(", ")
```

… then displays:


```
test, schluessel
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.3.3 REPEAT UNTIL control structure

The REPEAT UNTIL control structure is also a form of loop control structure.


# 10.3.3.1 Syntax

Syntax for the REPEAT UNTIL control structure:


```
REPEAT 
  <Instruction(s)> 
UNTIL Expression
```



# 10.3.3.2 Notes on syntax



# 10.3.3.3 Example 1

The example refers to a project in chapter? 18.12 ListContainer. With the statement in the fourth line of the procedure below, the HTTP client is sent into the track to load data from the specified server. Afterwards, the system waits in the waiting loop until the download is complete and the HTTP client is (again) inactive:


```
PublicSubcmbFeedSource_Click()ListContainer.ClearmyHttpClient.URL=Feeds[cmbFeedSource.Index]myHttpClient.GetRepeatWait0.01UntilmyHttpClient.Status=Net.Inactive' Automatically select the first feed - if availableIfListContainer.CountThenListContainer.Index=0End' cmbFeedSource_Click()
```



# 10.3.3.4 Example 2

The REPEAT-UNTIL control structure uses the approximate determination of a zero point of a function f (x) according to the secant approximation method. Incorrect start values for the two arguments xa and xe are recognized and displayed. It should be ensured that the function has exactly one zero point in the completed interval[xa | xe].

Figure 10.3.3.4.1: Proximity method with adjustable accuracy
The source text is completely specified:


```
' Gambas class filePublicSubForm_Open()FMain.CenterFMain.Resizable=FalseEnd' Form_Open()PublicFunctionf(x_wertAsFloat)AsFloatReturn(x_wert*x_wert)-4End' Function f(x_wert As Float)PublicSubbtnNullstelleBerechnenUndAusgeben_Click()DimiCountAsIntegerDimx1AsFloat' Left interval limitDimx2AsFloat' Right interval limitDimfEpsilonAsFloat' Stop criterionDimy1, y2, fNullstelle, fDifferenzenquotientAsFloatx1=CFloat(txb_x1.Text)x2=CFloat(txb_x2.Text)fEpsilon=CFloat(txb_epsilon.Text)Iff(x1)*f(x2)>0ThenMessage.Error("The start values x1 and x2 are not allowed!")txb_x2.SetFocusReturnEndif' f(x1) * f(x2) > 0txaTabelle.ClearRepeaty1=f(x1)y2=f(x2)fDifferenzenquotient=(x2-x1)/(y2-y1)fNullstelle=x1-(y1*fDifferenzenquotient)txaTabelle.Text=txaTabelle.Text&" "&Str(iCount)&Chr$(9)&Format$(fNullstelle,"0.0000000")&Chr$(9)&"   "&Str(f(fNullstelle))&Chr$(10)Iff(x1)*f(fNullstelle)>0Thenx1=fNullstelleElsex2=fNullstelleEndifInc(iCount)UntilAbs(f(fNullstelle))<fEpsilonEnd' btnNullstelleBerechnenUndAusgeben_Click()PublicSubxGroup_Change()txaTabelle.ClearEnd' xGroup_Change()
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.3.4 WHILE-WEND control structure

The WHILE-WEND control structure presented in the following sections is another form of loop control structure.


# 10.3.4.1 Syntax

Syntax for the WHILE-WEND control structure:


```
WHILE Expression
  <Instruction(s)> 
WEND
```



# 10.3.4.2 Notes on the syntax



# 10.3.4.3 Example 1

A file is opened for reading. Then the contents of the file are read out line by line and each line is stored in an array - as long as the end of the file has not yet been reached and lines can still be read:


```
hFile=OpensRubrikPfadForInputWhileNOTEof(hFile)LineInput#hFile, sZeile 
    aSuchDateiMatrix.Add(sZeile)WendClose#hFile 
  aSuchDateiMatrix.Sort(0)
```



# 10.3.4.4.4 Example 2

The task: 'As long as there is still a block of two consecutive blanks in a character string, all blocks of two blanks are to be replaced by a single blank' has a simple solution:


```
While InStr(sTestString, "  ") 
  sTestString = Replace$(sTestString, "  ", " ") 
Wend
```



# 10.3.4.5 Example 3

Example 3 demonstrates the use of four different loop control structures for processing the same task:

Figure 10.3.4.5.5.1: Calculation of partial sums according to 3 variants
The source text is only specified in the relevant extracts:


```
…PublicSubbtnPartialsummeBerechnen_Click()IfKontrolleEingabedaten()="Data input error-free!"ThenIfoptVariante1.Value=TrueThenVariante_1(iAnfangszahl, iEndzahl)' FOR..TO..NEXTElseIfoptVariante2.Value=TrueVariante_2(iAnfangszahl, iEndzahl)' REPEAT..UNTILElseVariante_3(iAnfangszahl, iEndzahl)' WHILE..WENDEndifEndifEnd' btnPartialsummeBerechnenPrivateSubVariante_1(iAnfangAsInteger, iEndeAsInteger)' FOR..TO..NEXTDimiPartialsummeAsInteger=0DimiSummandAsInteger=iAnfangDimiCountAsInteger=0ForiCount=1To(iEnde-iAnfang+1)Step1iPartialsumme=iPartialsumme+iSummand' Overflow due to overrange for integer?If(IsIntegerRange(iPartialsumme)=False)AndIf(bSpezialfall22=False)ThentxtPartialsumme.Text="ERROR Sum "&String.Chr(8713)&" INTEGER"ReturnEndifInciSummandNext' iCounttxtPartialsumme.Text=Str(iPartialsumme)EndPrivateSubVariante_2(iAnfangAsInteger, iEndeAsInteger)' REPEAT..UNTILDimiPartialsummeAsInteger=0DimiSummandAsInteger=iAnfangRepeatiPartialsumme=iPartialsumme+iSummandIf(IsIntegerRange(iPartialsumme)=False)AndIf(bSpezialfall22=False)ThentxtPartialsumme.Text="ERROR Sum "&String.Chr(8713)&" INTEGER"ReturnEndifInciSummandUntil(iSummand>iEnde)txtPartialsumme.Text=Str(iPartialsumme)EndPrivateSubVariante_3(iAnfangAsInteger, iEndeAsInteger)' WHILE..WENDDimiPartialsummeAsInteger=0DimiSummandAsInteger=iAnfangWhile(iSummand<iEndzahl+1)iPartialsumme=iPartialsumme+iSummandIf(IsIntegerRange(iPartialsumme)=False)AndIf(bSpezialfall22=False)ThentxtPartialsumme.Text="ERROR Sum "&String.Chr(8713)&" INTEGER"ReturnEndif' Partialsumme-Überlauf ?InciSummandWend' While EndtxtPartialsumme.Text=Str(iPartialsumme)' Alternative Variante 3:' Do While (iSummand < iEnde + 1)'    iPartialsumme = iPartialsumme + iSummand'    If (IsIntegerRange(iPartialsumme) = False) And If (bSpezialfall22 = False) Then'       txtPartialsumme.Text = "ERROR Sum " & String.Chr(8713) & " INTEGER"'       Return'    Endif'    Inc iSummand' Loop' txtPartialsumme.Text = Str(iPartialsumme)End
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.3.5 BREAK and CONTINUE

Break and Continue are special instructions within loop control structures.


# 10.3.5.1 Example 1

A file is opened for reading. Then the contents of the file are read out line by line and each line - under certain conditions - is stored in an array:


```
hFile=OPENsFilePathForInputWHILENOTEof(hFile)' As long as the end of the file has not been reached ...LINEINPUT#hFile, sLine' ... reads a line from the filesLine=Trim(sLine)' ... Spaces at the end and beginning of the line are removed.IFNOTsLineTHENCONTINUE' ... an empty line is skipped -> continue with new loop throughputIFInStr("#;'",Left$(sLine))THENCONTINUE' ... a comment is ignored -> next ......aFileArray.Add(sLine)WEND' NOT Eof(hFile)CLOSE#hFile
```



# 10.3.5.2 Example 2

Example 2 picks up a case in which two nested For control structures are to be left when a certain condition is fulfilled:


```
DimiN, iIAsIntegerDimbBreakAsBoolean=FalseForiN=0ToaArray.MaxForiI=0ToArray[iN].MaxIfiX=aArray[iN][iI]ThenbBreak=TrueBreakEndifNextIfbBreakThenBreakNext
```



# 10.3.5.3 Example 3

In the third example, only the numbers from an array are stored in another array, which are integer cubic roots:


```
PrivateFunctionCubicNumbers(aArrayAsInteger[])AsInteger[]DimiNumberAsIntegerDimaResultAsNewInteger[]ForEachiNumberInaArrayIfFrac(Cbr(iNumber))<>0ThenCONTINUE' Skip numbers whose cubic root is not an integeraResult.Add(iNumber)NextReturnaResultEnd
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.3.6 Do..Loop

Syntax:


```
DO [ WHILE Condition ] . .. [ BREAK | CONTINUE ] . .. LOOP [ UNTIL Condition ]
```

WithDO… LOOPa series of statements is repeated until the initial condition remains true or until the last condition becomes true. If neither WHILE nor UNTIL are used in the control structure, this results in an infinite loop that can only be exited using the BREAK statement. If the break statement itself is missing, there is an infinite loop that you can no longer stop.


# 10.3.6.1.1 Syntax description

The following table shows the individual parts of the control structure Do..Loop:
Table 10.3.6.1.1.1: Description of the elements of Do..Loop


# 10.3.6.2 Examples

Example 1


```
PublicSubLVW2C(lvAsListView, cAsCollection)' ListView To CollectionIflv.Count>0Thenc.Clearlv.MoveFirst()DOc[lv.Item.Key]=lv.Item.TextLOOPUNTILlv.MoveNext()ElseMessage.Info("The channel list is empty!")c.ClearReturnEndifEnd
```

Example 2


```
PrivateSubVariante_3(iAnfangAsInteger, iEndeAsInteger)DimiPartialsummeAsInteger=0DimiSummandAsInteger=iAnfangDOWHILE(iSummand<iEnde+1)iPartialsumme=iPartialsumme+iSummandIfIsIntegerRange(iPartialsumme)=FalseAndb=FalseThentxtPartialsumme.Text="Error sum "&String.Chr(8713)&" INTEGER"ReturnEndifInciSummandLOOPtxtPartialsumme.Text=Str(iPartialsumme)' Alternative Variante 3.2:' WHILE (iSummand < iEndzahl + 1)'   iPartialsumme = iPartialsumme + iSummand'   INC iSummand' WEND ' While End' tboxPartialsumme.Text = Str(iPartialsumme)End' Variante_3 - Kontrollstruktur DO..WHILE..LOOP
```



# 10.3.6.3 Syntactic Sugar

In the control structureDO… LOOPThere are many instructions (While, Until, Break, Continue) that you have already got to know. Based on'http://de.wikipedia.org/wiki/Syntactic_Sugar',' syntactic sugar' means syntax extensions in a programming language. These extensions are alternative spellings that do not extend the functionality of a programming languagenot. Syntactic sugar can be traced back to elementary instructions of the language by changing the diction, because


```
Do While bedingung 
  ' sequence of instructions
Loop
```

is a long version of While-Wend; just like


```
Do 
  ' sequence of instructions
Loop Until bedingung
```

as a long version of Repeat-Until. Also


```
Do 
  ' sequence of instructions
Loop
```

produces an endless loop like


```
While True 
  ' Sequence of instructions
Wend.
```

This means, however, that you can only use the control structure DO..LOOP, which is classified as “syntactic sugar” in Gambas. In example 2, the procedure with alternative 3.2 was demonstrated.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.4 Recursion

If you want to give your restless informatics a clear direction and a goal, then you should apply algorithms with a recursive approach to sharply bend your brain in all directions. Recursion is a general procedure for splitting a task step-by-step into elementary solvable subtasks and applying the same algorithm to each subtask. In computer science, theRekursionis an alternative to the control structureRepetitionorIteration/. The algorithms with a recursive approach are more elegant in their formulation and often shorter, but more difficult to understand in terms of content. This is also illustrated by the two mathematical examples presented, which first describe the mathematical task, then derive an inductively formulated function and finally present the algorithm for calculating the function values.


# 10.4.1 Calculation of the sum of natural numbers

The calculation of the sum of natural numbers from 1 to i can be used as a function sum (i) = 1+2+….Define +i inductive like this:
Calculation of the function values of sum (i):


```
PUBLIC FUNCTION summe(i AS Integer) AS Integer 
  IF i = 0 THEN 
     RETURN 0 
  ELSE 
    RETURN i + summe(k - 1) ' Recursive call with reduced argument! 
  ENDIF 
END ' summe(..)
```



# 10.4.2 Calculation of a product of natural numbers

The calculation of the product of the natural numbers from 1 to k as a product (k) = 1 * 2 * 3 *… * k designates k-faculty and describes it with the symbol k! The functionfaculty (k)can thus be defined inductively:
Calculation of the functional values of faculty (k):


```
PUBLIC FUNCTION fakultaet(k AS Integer) AS Integer 
  IF k = 0 OR k = 1 THEN 
     RETURN 1 
  ELSE 
    RETURN k * fakultaet(k - 1) ' Recursive call with reduced argument! 
  ENDIF 
END
```



# 10.4.3 Evaluation of rational terms

The task is quite simple: Calculation of the value of an expression with the followingInput alphabet = {0.. 9, +, -, *, /, comma}taking into account the priority or ranking of the operations. The solution is based on the recursive descent method and provides, for example, for the expression2,88+5*6,7-8/4/ as a value the rational number 34,38:

Figure 10.4.3.1: Evaluation for an expression
The complete source code is specified in the following section. Please note that the input characters of the entered expression are not checked and no error handling is built in to keep the source code as simple and legible as possible.
Source code:


```
' Gambas class filePUBLICSUBForm_Open()FMain.CenterFMain.Border=1txtTerm.SetFocusENDPUBLICSUBbtnInfoAnzeigen_Click()Balloon.Info("Input alphabet:"&Chr(10)&"0..9, + , - , * , / , Komma",LAST)ENDPUBLICSUBtxtTerm_Change()txtWert.ClearENDPUBLICFUNCTIONanfang(zeichenketteASString, zeichenASString)ASStringDIMposition, anzahlASIntegerposition=InStr(zeichenkette, zeichen)anzahl=position-1RETURNMid$(zeichenkette,1, anzahl)ENDPUBLICFUNCTIONcopyab(zeichenketteASString, iASInteger)ASStringDIManzahlASIntegeranzahl=Len(zeichenkette)-i+1RETURNMid$(zeichenkette, i, anzahl)ENDPUBLICFUNCTIONende(zeichenketteASString, zeichenASString)ASStringDIMposition, anzahlASIntegerposition=InStr(zeichenkette, zeichen)anzahl=position+1RETURNcopyab(zeichenkette, anzahl)ENDPUBLICFUNCTIONTermToReell(sASString)ASFloatIFInStr(s,"+")>0THENRETURNTermToReell(anfang(s,"+"))+TermToReell(ende(s,"+"))ELSEIFInStr(s,"-")>0THENRETURNTermToReell(anfang(s,"-"))-TermToReell(ende(s,"-"))ELSEIFInStr(s,"/")>0THENRETURNTermToReell(anfang(s,"/"))/TermToReell(ende(s,"/"))ELSEIFInStr(s,"*")>0THENRETURNTermToReell(anfang(s,"*"))*TermToReell(ende(s,"*"))ELSERETURNVal(s)ENDIFENDPUBLICSUBbtnTermAuswerten_Click()txtWert.Text=Str(TermToReell(txtTerm.Text))END
```

The TermToReell(expression) function, which is recursively called with constantly changing arguments, carries the main burden of calculating the value of the expression entered. For the simple expression 1+2*3-4/5, see how the value 6.2 has been calculated. To do this, it is also necessary to deal with the 3 functions used for processing character strings in order to find out what these functions do.
The algorithms presented belong to a subproject for a function parser, with which it was possible to calculate function values for a given f function. The complete project can be found in the download area together with the projects Term0 - from which the source code above originates - and Term0E. The Term0E project contains a character scanner and necessary error handling procedures.
The advantage of the developed and tested function saver is the definition of special functions such as faculty(k), which for example are not present in the componentgb. eval.

Figure 10.4.3.2: Calculation of a value table with displayed help (foldable)


# 10.4 Download

Articles and Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# 10.5 Special control structures

Some of the control structures presented in the next section have already been introduced to you in other contexts:


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.5.1 Return

The statementReturnorReturn[ expression]terminates a procedure or function as a control element.


# 10.5.1.1.1 Notes



# 10.5.1.2 Examples

The examples are intended to demonstrate the use of the control element Return or Return[ Expression] in different applications.
Example 1
The classic example of a function such as y = f(x) = x² - 3 - as a definite mapping - is certainly still familiar to you from your school days:


```
Public Function f(x AS Float) AS Float        
    RETURN (x * x) - 3    
End
```

with the call in another procedure:


```
Public Sub Calculate()
  Dim y as Float
 
  y = f(-5.66)
   …
End
```

Example 2
The function IsIntegerRange(..) returns either True or False as a function value, depending on the argument iPSum:


```
PrivateFunctionIsIntegerRange(iPSummeAsInteger)AsBooleanIfiPSumme>2147483647ORIfiPSumme<0ThenbtnReset.SetFocusReturnFalseElseReturnTrueEndifEnd' IsIntegerRange(...)
```

Example 3
The procedure CheckInput(..) can be used whenever only characters from a given input alphabet are accepted for an input component:


```
PublicSubtxbInputPolynom1_KeyPress()CheckInput("+-,.^0123456789x")EndPublicSubCheckInput(sAllowedAsString)SelectCaseKey.CodeCaseKey.Left,Key.Right,Key.BackSpace,Key.Delete,Key.End,Key.Home,Key.Enter,Key.ReturnReturnDefaultIfKey.TextAndIfInStr(sAllowed,Key.Text)ThenReturnEndifEndSelectStopEventEnd
```

With selected keys and characters from the input alphabet, the procedure CheckInput (..) is aborted! Via' Stop Event' all invalid characters and keystrokes are ignored.
Example 4
In the following section of the source code, the procedure is terminated if an error occurred when creating the directory with the specified path because the existence of the folder is obviously a mandatory prerequisite for program execution:


```
Public Sub MyProzedur()
…
  If Not Exist(sSVNPfad) Then 
     Try Mkdir sSVNPfad 
     If Error = True Then 
        Message.Error("Error creating the folder" & sSVNPfad) 
        RETURN 
     Endif ' Error = True? 
  Endif ' Not Exist(SVNPfad?
…
```

Example 5
As a function value, an output list is returned as a string array after removing all elements that occur more than once in the input list (string array) passed as an argument:


```
PublicFunctionRemoveMultiple(aInputListAsString[])AsString[]DimiCountAsIntegerDimiIndexAsIntegerDimsElementAsStringDimaOutputListAsString[]aOutputList=aInputList
  iIndex=0WhileiIndex<aOutputList.CountiCount=0sElement=aOutputList[iIndex]WhileaOutputList.Find(sElement)<>-1InciCount
      aOutputList.Remove(aOutputList.Find(sElement))WendIfiCountMod2=1ThenaOutputList.Add(sElement, iIndex)InciIndexEndifWendReturnaOutputListEnd' RemoveMultiple(...)
```

Example 6
This example demonstrates the case that no return value is specified in a function after Return, but the default value (→ 10.5.1.1.1 Notes) is automatically returned:


```
PublicFunctionComputeGGT(xAsInteger, yAsInteger)AsGGT' For (0,0) is the GGT not defined -> return NULLIfx=0AndIfy=0ThenReturn' Return NULL as default value for objectsEndif' Otherwise execute Euclidean algorithmReturnhGGT' With hGGT as a generated GGT objectEnd' ComputeGGT(..)
```

You could have written 'Return NULL' in the fourth line - but 'Return' would be sufficient in this case.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.5.2 Quit

The statementQuit[Exit Code]terminates a program immediately. All windows are closed first and then deleted.


# 10.5.2.1 Example 1



```
PUBLICFUNCTIONCalcmean(fSumASFloat, fCountASFloat)ASFloatIFfCount=0THENPRINT"Division by zero in the function Calcmean"QUITENDIF' fCount = 0 ?RETURN(fSum/fCount)END' FUNCTION Calcmean(fSum AS Float, fCount AS Float) AS Float
```

The documentation emphasizes that the command is not very successful in connection withGUIprograms. You should therefore use QUIT primarily in console applications.
As of Gambas version 3.4, you can optionally give the program to be terminated an exit code that is returned to the higher-level process. The default exit code is 0, or you can evaluate and comment on your own value for the exit code.


# 10.5.2.2.2 Example 2

Especially if you want to pass on a program and another (console) program is called in it, it is not always certain whether this program is installed on the system. Without a request or appropriate error handling routines, the main program would crash with a corresponding error message. In the following case, the main program is terminated cleanly with QUIT if the (console) program Subversion is not installed:


```
PublicSubForm_Open()' …IfNotCheckSubversion()ThenMessage.Error("The SUBVERSION program is not installed.\nProgram abort.")QUITEndif' CheckSubversion() = True ?' …End' Form_Open()PrivateFunctionCheckSubversion()AsBooleanExec["which","svn"]WaitForReadIfProcess.LastValue<>0Then' Wert <> 0 => The client subversion is NOT installedReturnFalseEndif' Process.LastValue <> 0?ReturnTrueEnd' Function CheckSubversion()
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.5.3 Stop

The STOP statement stops a program and wakes up the debugger as if there was a breakpoint in the current line. This command interrupts the program - nothing more happens.


# 10.5.3.1 Stop vs. Breakpoint

STOP is actually only relevant in debugging mode during program testing. Normally you develop programs in the IDE and can set breakpoints there. But there is a small, subtle difference: you can link STOP to a condition, while a breakpoint is firmly attached to a line. For example, if only the last pass in a loop control structure is of interest, you can write in the loop body:


```
If iCurrentIndex = iLastIndex Then Stop
```

The program will be interrupted at most once if iCurrentIndex assumes a very special value in the loop. If, on the other hand, you set a line-bound breakpoint, the program stops in every iteration, which can become annoying.


# 10.5.3.2 Stop Event

The complex STOP EVENT statement is a stand-alone statement, has no relation to the above-mentioned stop and must be used in an event handler. It tells the interpreter that the (native) event that called the event handler is terminated.
The following three examples demonstrate the use of Stop Event:
Example 1


```
PUBLICSUBTextBox1_KeyPress()IfKey.TextNotLike"[0-9]"ThenSTOPEVENTEND' TextBox1_KeyPress()
```



```
PUBLICSUBTextBox1_KeyPress()IFInstr("0123456789",Key.Text)=0THENSTOPEVENTEND' TextBox1_KeyPress()
```

These often specified two procedures for the safe entry of digits from the interval[0-9] have the general disadvantage that you have no possibility to delete or correct incorrect entries directly via the keyboard or to navigate in the TextBox! However, it is still possible to mark erroneous numbers or number blocks with the mouse and overwrite them with the correct numbers.
A real alternative - by Charles Guerin and Benoît Minisini - accepts not only the digits 0… 9 as a secure entry, but also the six keys you need for necessary corrections and navigation in the TextBox:


```
PublicSubCheckInput(sAllowedAsString)DimiAllowAsInteger=0IfKey.Code=Key.BackSpaceTheniAllow=1IfKey.Code=Key.DeleteTheniAllow=1IfKey.Code=Key.LeftTheniAllow=1IfKey.Code=Key.RightTheniAllow=1IfKey.Code=Key.EndTheniAllow=1IfKey.Code=Key.HomeTheniAllow=1IfKey.TextAnd(InStr(sAllowed,Key.Text)>0)TheniAllow=1' If an invalid key is pressed, the _KeyPress event is aborted.IfiAllow=0ThenSTOPEVENTEnd' CheckInput(sAllowed As String)PUBLICSUBTextBox1_KeyPress()CheckInput("0123456789")END' TextBox1_KeyPress()
```

As an extension, you can add the following lines to the procedure CheckInput (…) after'If Key. Code = Key. Home…'. With the Enter or Return key you accept the contents of the TextBox - if there is at least one character - and save it in the variablesInput:


```
IfTextBox1.TextAnd(Key.Code=Key.EnterOrKey.Code=Key.Return)TheniAllow=1sInput=TextBox1.Text' Print TextBox1.TextEndif
```

Example 2


```
PUBLICSUBMyObserver_Show()Message.Info("The main window has already seen the light of the monitor!")STOPEVENT' The MyObserver_Show event is canceledEND' MyObserver_Show()
```

Example 3


```
PUBLICSUBForm_Close()IFNOTModulGlobal.AllowCloseTHENSTOPEVENT' The window remains open... the Form_Close_Event is canceled.ELSEME.CloseENDIFEND' Form_Close()
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# 10.5.4 With... End With

The syntax of the With..End_With control structure is simple:


```
WITH Object Name
  ... 
END WITH
```



```
WithbtnCancel
  .Text="Cancel"EndWith' Equivalent to the statement: btnCancel.Text = "Cancel"
```

The strength of the With… End_With structure is only visible if, for example, you have to set many property values for an object, as you can see in the next section of the source code from the file.. /src/gb. form/ListContainer. class.
Example 2


```
PublicSub_new()$hScrollView=NewScrollView(Me)As"ScrollView"$hScrollView.Resize(80,60)$hScrollView.Name=Me.Name&".ScrollView"$hTimer=NewTimerAs"Child"$hTimer.Delay=80With$hScrollView 
    .Border=True.ScrollBar=Scroll.Vertical.Background=Color.TextBackground.Arrangement=Arrange.Vertical$iSaveBackground=.Background$iSaveForeground=Color.TextForegroundEndWithMe._Container=$hScrollViewMe.Arrangement=Arrange.VerticalEnd' _new()
```

Since Gambas 3.5 you can also use the With..End_With syntax for elements of an array or a collection intwodifferent spellings:
Example 3


```
PublicSubMain()DimhArrayAsNewString[]DimhCollectionAsNewCollectionDimiAsIntegerhArray.Add("Maria")hArray.Add("Peter")WithhArrayPrint.[0], !"1"' !"1" ist äquivalent für .[1]EndWithhCollection["1"]="Maria"hCollection.Add("Peter","2")hCollection["3"]="Uta"hCollection["4"]="Eva"WithhCollection
    !"5"="Susi"' Equivalent for.["5"] = "Susi."Fori=1To.CountPrint.[Str(i)],NextEndWithEnd' Main()
```

The procedureMain ()/ creates the following output in the console:


```
Maria   Peter
Maria   Peter   Uta     Eva     Susi
```

If you take a close look at the three examples, you will surely recognize them: You can save a lot of paperwork with the With..End_With structure and give the source code structure - that's all.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.5.5 GoTo

The following four chapters describe control structures, the use of which is controversially discussed:
As can be shown in the examples under consideration, there are many applications in which the above four statements can be replaced by other control structures. Or put it another way: The use of the four above statements is avoidable if you don't fear the complexity of the Gambas code, for example, to leave a triple For control structure in an orderly fashion under a particular condition.


# 10.5.5.1 GoTo syntax

The system switches to a target (-label) that is declared elsewhere in a procedure or function:


```
GoTo Label
…
Label:
  <Instruction(s)>
```



# 10.5.5.2 Notes on syntax

The GoTo in connection with the above statement must be distinguished from the method Editor. Goto (…) of the component Editor (gb. qt4. ext):


```
Editor1.GoTo(0, String.Len(Editor1.Lines[0].Text)) ' Place cursor at the end of the 1st line
Editor1.GoTo(Editor1.Lines.Count, String.Len(Editor1.Text)) ' Place cursor at end of text
```

The examples in the next section mainly show source code excerpts and are commented adequately.


# 10.5.5.3 Example 1

The statement' GoTo Label' is sometimes acceptable as ultima ratio. This is exactly when you want to leave two nested loops:
variant 1 - without using the' GoTo Label' instruction


```
Dimi, jAsIntegerDimbBreakAsBooleanFori=0To10Forj=0To10' The double loop should be exited as soon as i*j > 20If(i*j>20)ThenbBreak=TrueBreakEndifNext' jIfbBreak=TrueThenBreakNext' i
```

You can only jump from the innermost loop with' Break'. Therefore, you must set a variable that also signals to the outer loop that it should also be exited.  * The variable' bBreak' is only true if you jumped out of the inner loop and leave the outer loop. You have to decide for yourself whether the above source code is easy to read.
Variant 2 - Use of the' GoTo Label' instruction


```
Dimi, jAsIntegerFori=0To10Forj=0To10Ifi*j>20ThenGoToLEAVEBOTHNextNextLEAVEBOTH:<Instruction(s)>'  more...
```



# 10.5.5.4 Example 2

An example of a task in which the GoTo statement can demonstrate its strength is the search in an N-dimensional array for a certain integer value - here in a two-dimensional integer[][][]-array.


```
DimiN, iI, iXAsIntegerForiN=0ToaArray.MaxForiI=0ToaArray[iN].MaxIfiX=aArray[iN][iI]ThenGoTo_FoundNextNext_Found:' Here you can use iN and iI. The element was found if iN <= aArray. Max
```


Figure 10.5.5.4.1: Searching for an (integer) number in a 2-dimensional array
The complete project for example 2 can be found in the download area.
The only way in example 2 to dispense with the GoTo statement to jump from two nested For control structures when a certain condition is fulfilled is to use a flag:


```
DimiN, iIAsIntegerDimbBreakAsBoolean=FalseForiN=0ToaArray.MaxForiI=0ToArray[iN].MaxIfiX=aArray[iN][iI]ThenbBreak=TrueBreakEndifNextIfbBreakThenBreakNext
```

In my opinion, however, this is not a good solution because it is less legible and less efficient. For several nested loops, it is definitely more complicated. A similar problem occurs if, for example, you want to iterate over an N-dimensional array and N is only known at runtime. Since a For control structure can only be counted linearly, you need N nested For control structures. If N is not known at runtime, a dynamically allocated array of iterators can be used to build an N-dimensional For control structure using GoTo. This is required, for example, when generating all possible character strings with N characters from a certain alphabet, where N is selected by the user - as it is done with' brute forcing'.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.5.6 On GoTo

The 'On GoTo' statement as a calculated jump exists in gambas since version 3.2.


# 10.5.6.1 'On GoTo' syntax

Jumps to one of the calculated labels. The evaluation of' Expression' must produce an integer value in order to select a (target) label.


```
On Expression GoTo Label_0 [ , Label_1 ... ]
…
Label_0:
  Instruction(s)
Label_1:
  Instruction(s)
…
```



# 10.5.6.2 Notes on the syntax



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.5.7 GoSub

The 'GoSub' statement exists in Gambas since version 3.1.


# 10.5.7.1 GoSub syntax

It is unconditionally changed to a label that is explained elsewhere in the function or procedure. If there is a return statement in the instructions under the target (-Label), the program returns to execute the code immediately after the GoSub statement.


```
GoSub Label
* Instruction(s) -> program continuation after RETURN

Label:
  Instruction(s)
…
```



# 10.5.7.2 Notes on the syntax



# 10.5.7.3 Example 1

In chapter → 16.10 HistoryBox a TextBox is extended by the History property to temporarily store a certain number of entries.
In the following TextBox_KeyPress() procedure, for example, the same source code section of lines 17-19 is used two times in different places (lines 6 and 10):


```
[1]PublicSubTextBox_KeyPress()[2][3]IfNot$hHistoryThenReturn[4]SelectKey.Code[5]CaseKey.Up[6]GoSub UPDATE_HISTORY[7]Inc$iCurrent[8]GotoUPDATE_TEXTBOX[9]CaseKey.Down[10]GoSub UPDATE_HISTORY[11]Dec$iCurrent[12]GotoUPDATE_TEXTBOX[13]EndSelect[14]Return[15][16]UPDATE_HISTORY:[17]If$iCurrent=-1ThenReturn[18]$hHistory[$iCurrent]=Super.Text[19]RaiseHistoryChange[20]RETURN[21][22]UPDATE_TEXTBOX:[23]If$iCurrent=-2ThenInc$iCurrent[24]If$iCurrent=-1Then[25]Super.Clear()[26]Return[27]Endif[28]If$iCurrent>=$hHistory.SizeThenDec$iCurrent[29]Super.Text=$hHistory[$iCurrent][30]Return[31][32]End
```

Another example of how to use the GoSub statement is Tobias Boege's Pong project from the Gambas sample projects in the Games category.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.5.8 On GoSub

The 'On GoSub' statement exists in Gambas since version 3.2.


# 10.5.8.1' On GoSub' syntax

Jumps to one of the calculated labels. The evaluation of 'Expression' must result in an integer value to select a (target) label. If there is a return statement in the instructions after the target(-Label), the program returns to execute the code immediately after the 'On GoSub' statement.


```
On Expression GoSub Label_0 [ , Label_1 ... ]
Instruction(s) -> program continuation after RETURN

Label_0:
  Instruction(s)_0
  RETURN
Label_1:
  Instruction(s)_1
  RETURN
…
```



# 10.5.8.2 Notes on the syntax



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control Structures



# Chapters



# Table of Contents



# 10.5.9 Application.Busy

Using the value of the propertyApplication.Busyof the classApplication (gb. qt4), you change the 'Busy state' of an application.


# 10.5.9.1 Notes

Suggestion:Apply a button to a form in an example project and include the following source code as an event handler to see the effect of using the Application.Busy property:


```
PublicSubbtnSetBusy_Click()DimiCountAsIntegerIncApplication.Busy' Alternative: Application.Busy = 1ForiCount=1To40000PrintSqr(iCount+Pi(0.533))Next' iCountDecApplication.Busy' Application.Busy = 0Message.Info("That's all it was..")End
```



# 10.5.9.2 Examples

The examples serve to demonstrate the use of the control elementApplication. Busyin different applications.
Example 1
In an application for installing gambas via SVN, the local version number on the PC is first queried and then the number of the current revision on the SVN server. For this query, the program will use the mouse pointer to indicate the “Binary busy state” and will not respond to user input. If an error occurs, it is intercepted, an error message is issued and the program is released again with' Dec Application. Busy'. The release is also carried out if the revision number could be determined without errors.


```
PublicSubbtnUpdateStart_Click()DimsResult, sMessageAsStringDimiTimeOutAsInteger' ...IncApplication.Busy' Mouse.WaitRepeatShell"cd "&sSVNPfad&"; svn info -r HEAD | awk '$1 ~ /^Revision:$/ {print $2;}'"TosResultInciTimeOutUntil(sResult<>NullOriTimeOut>9)TryiSVNCurrentRevision=Val(sResult)IfErrorThenMessage.Error("The SVN server is currently unavailable!")DecApplication.BusyReturnEndif' ERROR ?DecApplication.Busy' Mouse.DefaultEnd' btnUpdateStart_Click()
```


Figure 10.5.9.2.1: The queries were successful
Example 2
A print program does not accept any more entries in the time in which it is printed:


```
PublicSubbtnPrintImage_Click()IfprinterImage.Configure()ThenReturnMe.Enabled=False' The form is deactivatedApplication.Busy=1' The program does not accept any more entries..printerImage.Print' The print job is started..Application.Busy=0' The program accepts input again..Me.Enabled=True' The form is reactivatedEnd' btnPrintImage_Click()
```

Example 3
As a sub-process for the installation of a program (update) from existing packages, the statement /configure -C is executed, which analyzes the system, configures the packages and generates the makefile. The main program ignores all entries for the runtime of the subprocess:


```
PublicSubbtnConfigureUpdate_Click()IncApplication.BusysShellCommand="echo 'CONFIGURE';echo '---------------------------';"sShellCommand&=" cd "&sSVNPfad&";./configure -C"GoToTerminal(GetTerminalList()[0], sShellCommand)btnMakeUpdate.Enabled=TrueDecApplication.BusyEnd
```

Example 4
For the Watcher class demonstration program (→ chapter 20.10 Watcher) the monitored events should be handled and documented with messages in separate windows. The following source code extract from the testing phase for the project caused not only errors, but also a program crash, because the constant change (move or resize) caused message windows to be generated:


```
Public Sub wWatcher_Resize()  
  Message.Info(("The main window " & wWatcherObject1.Control.Name & " has changed its size!")) 
  Stop Event 
End
```



```
Public Sub wWatcher_Move() 
  Message.Info(("The main window " & wWatcherObject1.Control.Name & " has changed position!")) 
  Stop Event  
End
```

The thoughts and approaches to the solution:
Here is the corrected section of the source code:


```
PrivatesControlNameAsString' ...sControlName="'"&wWatcherObject1.Control.Name&"'"' ...PublicSubwWatcher_Resize()Application.Busy=1IfApplication.Busy=1ThenMessage.Info("The window "&sControlName&" has changed its size!")Application.Busy=0StopEventEndPublicSubwWatcher_Move()IncApplication.BusyIfApplication.Busy=1ThenMessage.Info("Das Fenster "&sControlName&" has changed position!")DecApplication.BusyStopEventEnd
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Project development



# Chapters



# 11.0 Program development

In the chapter program development you will learn about the advantages of visual programming and the flexible project management as well as aspects of program maintenance, which also include the use of program help. Further sections explain how to develop and test a program. Error handling begins with an analysis of error categories, describes the error analysis at the time of development of a program (debugger) and refers to strategies for recognizing, intercepting and avoiding errors. This chapter also shows you how to create repositories to share projects with developers.
The way in which you can distribute programs - especially to those who have not installed Gambas on the Linux system - is summarized in → chapter 2.6 Sharing Gambas programs, which deals with the creation of installation packages.

Figure 11.0.1: Step 1 - Package information


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.0 Forms

A Gambas programme consists - with a view to the programme windows existing at runtime - of
If one takes the type and number of programme windows as a criterion, one can distinguish the following types in a Gambas programme:
Figure 12.0.1: Use of the Embedder class


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.1 Form

In the following three chapters the class Form (gb.qt4) is described in detail with the most important properties, methods and events as well as the constants used.
In chapter 12.2, the descriptions of the properties, the methods or the events are followed by complete projects and example source texts in which the use of the class Form is shown.
In the following example, the RSS feed data in XML format (→ Chapter 18.12.5 RSS reader) of a website are read out and this abbreviated XML source text excerpt results for an entry:


```
<item>
  <title>DFB-Elf auf EM-Kurs</title>
  <link>http://www.sportschau.de/fussball/nationalmannschaft/...bericht-deutschland...100.html</link>
  <description>The German national football team beat Scotland 3-2 in Glasgow and is now on the brink of qualifying for the
  European Championship. For the Scots ... .</description>
</item>
```

In the procedure ParseNode(Node As XMLNode), the data for title and description are filtered out of all entries (<item>…</item>) and displayed in anew form(hFeed of type FeedItem). Theseformsgenerated at runtime are inserted into a 'ListContainer' in the main programme:


```
PublicSubParseNode(NodeAsXmlNode)DimxmlNode, xmlAttributeAsXmlNodeDimhFeedAsFeedItemForEachxmlNodeInNode.ChildrenIfxmlNode.Name="item"ThenhFeed=NewFeedItem(ListContainer.Count+1,ListContainer)ForEachxmlAttributeInxmlNode.ChildrenSelectCasexmlAttribute.NameCase"title"hFeed.FeedTitle=xmlAttribute.ValueCase"description"hFeed.Description=xmlAttribute.ValueCase"link"hFeed.Link=xmlAttribute.ValueEndSelectNext' Each xmlAttributeElseIfxmlNode.Children.Count>0ThenParseNode(xmlNode)' Recursive call!Endif' xmlNode.Name = "item" ?Next' Each xmlNodeEnd' ParseNode(...)
```

Using the filtered out link, the corresponding web page is additionally loaded and displayed in a WebView when one clicks on ainserted formin the ListContainer.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.1.1 Form - Properties

This chapter introduces and describes the main properties of the Form (gb.qt4) class.
Table 12.1.1.1 : Properties of the class Form


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.1.2 Form - Methods

This chapter introduces you to important methods of the Form (gb.qt4) class.
Table 12.1.2.1 : Methods of the class Form


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.1.3 Form - Events

This chapter describes events of the Form (gb.qt4) class.
Table 12.1.3.1 : Events of the class Form
Notice:
The Activate and Deactivate events are triggered when the window is activated or deactivated. To become the active window, a window must be a TopLevel window or implement the Activate event handler if it is not a TopLevel window (embedded window). The Application.ActiveWindow method sets the window to 'active'. If a control of the window then gets the input focus, the window that was active until then is deactivated and the window with the input focus is activated. If the current window cannot become the active window, a suitable parent window is searched for. If a window is minimised, it is deactivated.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.2.0 Form - Class Window and Class Form

This chapter is about descriptions of the Window and Form classes and the special features of forms.


# 12.2.0.1 Class Window and Class Form

The class Form inherits from the class Window. The wikihttp://gambaswiki.org/wiki/comp/gb.qt4/formlists a few more special properties of Form over Window. One is worth noting: the class Form is aligned with the Gambas IDE and a form in the Gambas IDE always describes a class that inherits from the class Form. Therefore, even in a .class file for a form, you must not use the Inherits keyword. A form implicitly already inherits from the Form class and Gambas does not support the simultaneous inheritance of multiple classes. So each form becomes a special form class. From this class you get a so-called automatic instance - Classes[Form].Instance - free of charge, which is an object of this class that you address via the class name. You will certainly have noticed this more or less consciously: You have a form 'FMain' and a real application window as an instance of your form class, which appears automatically and which you can address via the name 'FMain'.
You largely write the source code of a form class yourself and it is in the .class file belonging to the form after saving. However, the Gambas compiler generates a hidden, special routine called '$load'. This is called internally when a form object is instantiated and ensures that all the controls you place in the IDE form editor are created. You can convince yourself of this by opening a project folder in which a (simple) graphic project with at least one form exists. Then execute the following command in the system console:


```
~/PROJEKT-ORDNER/ $ gbc3 -av
```

The switch 'v' causes the compiler to output the byte code of the compilation in a human-readable way. Scroll through this output and you will find, among other things, the $load function. You can see that the function creates all the controls on the form and provides each with the specified properties:


```
Private Sub {$load}()
  With Me
    .MoveScaled(0,0,48,19)

  {SpinBox1} = New SpinBox(Me) As "SpinBox1"
  With {SpinBox1}
    .MoveScaled(2,2,32,4)
    .Value = 50
  End With

  {SpinBar1} = New SpinBar(Me) As "SpinBar1"
  With {SpinBar1}
    .MoveScaled(2,7,32,4)
    .Value = 0.7
    .Step = 0.2
  End With

  {btnChange} = New Button(Me) As "btnChange"
  With {btnChange}
    .MoveScaled(2,13,32,4)
    .Text = ("Change Enable Property ') & '...'
  End With

  {Label1} = New Label(Me) As "Label1"
  With {Label1}
    .MoveScaled(36,2,10,4)
    .Text = ("SpinBox")
  End With

  {Label2} = New Label(Me) As "Label2"
  With {Label2}
    .MoveScaled(36,7,10,4)
    .Text = ("SpinBar")
  End With
  End With
End
```

Figure 12.2.0.1.1: Application window
The Form class is specifically intended to work in the Gambas IDE and its purpose is, among other things, to be able to easily write graphical applications (GUI) in the IDE.


# 12.2.0.2 Form and Window

As already formulated in the first part, there is a Form class and a Window class, where Form is derived from Window and thus Form is a special Window. In a narrower sense, one speaks of a form if it was created with the form editor in the IDE. The Form class is therefore a Window class designed to work with the Gambas IDE. Technically, the only difference between Window and Form is that a Form object is its own event server as soon as it is created. So you are used to opening the source code to a form in the IDE and for example:


```
Public Sub Form_Open()
' ...
End
```

to implement. But this is not a matter of course. This is only possible because form objects automatically execute the following code when they are created:


```
Object.Attach(Me, Me, "Form")
```

In addition, the Form object ensures - if it is the start class of a project - that the application window is displayed. The source code of the Form class is written in C++, but formally translated into Gambas it would be something like:


```
' Main is automatically executed by the interpreter in the start class when the project is started.
Public Sub Main()
  Me.Show()
End
```

Forms are interesting in another respect, however, namely with regard to the form editor in the IDE and the Gambas compiler. The form editor stores .form files in the project folder. When the compiler compiles a form, it reads these .form files and automatically creates Gambas code from them, which is entered into a hidden method called '$load'. This code creates and positions all the controls as you had specified in the form editor. Form is thus a Gambas-tailored class, designed only to create convenience in the IDE. You can also think of a form at development time in the IDE as a Form class that has become an image, which you see at runtime as an application window on the desktop. You can also think of an application window belonging to a project as a frontend for managing the contents of the graphical user interface (GUI).
Athttp://gambaswiki.org/wiki/doc/windowyou will find some remarks on the CV of an application window in Gambas.


# 12.2.0.3 Create instances of a Form class

This two-liner creates a new Form object, works as with any other class, and displays it as an application window or as an embedded window in a container control if the optional parameter is set:


```
Dim hForm As Form
hForm = New Form ( [ Parent As Control ] ) As "EventName"
```

However, events are only triggered if an event name has also been assigned.
Example:
Figure 12.2.0.3.1: Two embedded and 3 desktop windows


```
Quell-Text FMain.class:' Gambas class filePublicSubForm_Open()DimhColorLabelAsFColorLabelApplication.MainWindow=FMain
 
  FMain.Arrangement=Arrange.VerticalFMain.Margin=TrueFMain.Spacing=TrueFMain.Show()hColorLabel=NewFColorLabel('  EMBEDDED FORM 1", FMain, Color.Yellow)hColorLabel=NewFColorLabel('  EMBEDDED FORM 2", FMain, Color.White)' ----------------------------------------------------------------------------hColorLabel=NewFColorLabel('  FREE 1", Zero, Color.Green)hColorLabel.Show()hColorLabel.Move(FMain.X+FMain.W+14, FMain.Y)' ----------------------------------------------------------------------------hColorLabel=NewFColorLabel('  FREE 2", Zero, Color.Red)hColorLabel.Raise()hColorLabel.Move(FMain.X+FMain.W+14, FMain.Y+FMain.H-hColorLabel.H)End
```

Source text FColorLabel:


```
PublicSub_new(TextAsString,OptionaliColorAsInteger)IfTextThenlblMe.Text=TextElseError.Raise("Text is missing!")EndiflblMe.Border=Border.SolidMe.Margin=TrueIfNotIsMissing(iColor)ThenlblMe.Background=iColorEnd
```



# 12.2.0.4 Accessing instances of the same form class - FMAIN and ME

The use of ME as a reference to the current shape object is necessary whenever at least two instances of the same shape class exist. If you want to call a method or access a property or variable of a Form instance, as shown in the following example:


```
Public Sub _new()
  FSpecial.Center()
End
```



```
Public Sub _new()
  ME.Center()
End
```

then you must note the following: The centre() method centres the application window on the desktop in both cases. However, there is a subtle difference between FSpecial and ME. The source code above uses FSpecial, which is the so-called “automatic instance” of the form. ME in the source text below always refers to the current form object! You can create several instances of FSpecial as objects from the class FSpecial. In the upper source text, only the first window is centred when an instance of FSpecial is created. In the lower source text, on the other hand, each new instance of FSpecial is centred. ME returns a reference to the current shape object, which always represents the object whose code is currently being executed by the interpreter. ME is special in that the Gambas interpreter is constantly changing the value in the background because the value may represent something different in a different execution context.


# 12.2.0.5 Window Activation & Deactivation

To become the active window, that is the window returned by the 'Application.ActiveWindow' property, it must either be a TopLevel window or you must implement the Form_Activate() event handler if it is an embedded window. The following applies: If a control receives the focus, then its window becomes the active window, provided that this window can become the current active window, as explained above. If the window cannot become the current active window, then an attempt is made to see if it can be the parent window of that window and so on until a top level window is reached. Activating a window sends a Deactivate event to the old active window and an Activate event to the new one. If the application window is displayed as an icon, the current active window is deactivated.


# 12.2.0.6 Data Exchange

Forms are 'create static' classes. If you use the class name like an object, an object of the class is created in the background and made publicly available under the class name. This object is called the 'automatic instance' of the class. Therefore, from a Form2 window, you can change properties of this automatic instance if Form2 has a reference to Form1 and Form2.class contains, for example, the following source text:


```
Public Sub Form2Button1_Click()
  Form1.Background = Color.Black
End
```

You cannot access control elements of FMain from Form2 (or vice versa), as the access right 'private' applies to these control elements by default.
Example:


```
If bChanged Then
   FMain.lblTemperaturAnzeige.Text = Format(Form2.fCurTemperature, '##.0 °C")
Endif
```

triggers an error for this reason - even if the control element lblTemperaturAnzeige exists on the form 'FMain':
Figure 12.2.0.6.1: Error message
Access rights for control elements are also pointed out in the Gambas documentation: “Form controls in Gambas programs are private by default. You can change this by going into the Project Properties dialog and checking the Make form controls public checkbox.' and at the same time mentions the possibility to get a general change of behaviour in the project properties.
Also in the form editor of the IDE you can set the public property to True for used controls. As long as there is no compelling reason to change the public property from False to True, you should give preference to the complete encapsulation of the state and behaviour of objects.
Chapter 12.2.9 describes concepts for data transfer between application windows and presents suitable projects that implement the concepts.


# 12.2.0.7 Start class

Every Gambas project needs a start class. This must define a common (static) method 'Main()' with no arguments that acts as the starting point for the application.
Case 1 -GUI:
You can define the start class by right-clicking on the form name in the project window in the IDE and then selecting 'Start Class' from the pop-up menu. You can recognise the start form in the project overview in the IDE because it has moved out to the right and a small grey triangle has been inserted in front of the form symbol. Since the start class is a form, it does not need to have a Main method, as a form already has a ready-made Main method: the form is instantiated and displayed. In Gambas, a form is its own event observer, so you can manage its events - such as Resize or Activate - in the source text of the class itself.
Case 2 - Gambas script:
For a Gambas script that does not require an application window, you must mandatorily implement the Main() method in the source text:


```
#!/usr/bin/gbs3

Use "gb.gsl"

Public Sub Main()
 Dim Matrix1, Matrix2 As Matrix
  Matrix1 = [[2, 0], [0, 2]]
  Matrix2 = [[0, 1], [2, 0]]
  Print Matrix1 * Matrix2
End
```

Calling mmult.gbs - under this name the source text was saved - with the above content returns the product of the two matrices in the system console:


```
hans@linux ~/Test $ gbs3 ./mmult.gbs3
[[0 2][4 0]]
```



# 12.2.0.8 Method Form.Load()

The method Form.Load() ensures that the automatic instance of the respective form class exists - otherwise 'FMain.Load()' would create the main window. In 99% of cases, however, this automatic instance already exists (in the IDE). It is created as soon as FMain is used like an object. In particular, this happens exactly when FMain is the start class of a project. As soon as the main window is created, the automatic instance exists and FMain.Load() would have no effect.


# 12.2.0.9 Form.TopLevel

A TopLevel window is a window on the desktop. When you create a form, after all, it's just a class. You can create a desktop window from it - as you normally do. In contrast, you create an embedded window as a “fake” window as an object of a form class in an existing container. You then get a control element like any other - the window is then no longer top-level.
Source code:


```
DimhTopLevelWindow, hEmbeddedWindowAsWindow' Creates a top-level window from the FMain classhTopLevelWindow=NewFMain' Creates a non-top-level window in a container (here -> hTopLevelWindow)hEmbeddedWindow=NewFMain(hTopLevelWindow)
```



# 12.2.0.10 Form.TopOnly

The following source code will alternatively set the property 'TopOnly' for the existing window 'FMain'. In the example, a menu entry is used to set the 'TopOnly' property in two variants. However, you could also use a toggle button in theGUI.


```
PUBLIC SUB mnuOnTop_Click()
  IF mnuOnTop.Value THEN
     FMain.TopOnly = TRUE
  ELSE
     FMain.TopOnly = FALSE
  ENDIF
END

PUBLIC SUB mnuOnTop_Click()
  FMain.TopOnly = NOT FMain.TopOnly ' Variant 2
END
```



# 12.2.0.11 Form.Stacking

Imagine the screen with three layers of windows on top of each other. Windows in the top layer always cover those in the bottom two layers. In between are the normal windows. The Stacking property determines to which of the three layers the window should belong. The default layer is Form.Normal. Note that the Form class is a special Window class and therefore inherits the Window.Stacking property. In the documentation for Form you will therefore also find:


```
Window.Stacking (gb.qt4)
Property Stacking As Integer
```

With this property you determine the layer or set the (desktop) layer of the window. Windows on the desktop can belong to one of three layers. The Form.Stacking property can have one of the following values or be set to this value:


# 12.2.0.12 Form.Scaled

The authors of the Gambas book used the same Gambas version for a while, but under different Linux systems (Ubuntu 12.04 LTS and Mint 17). Since the developed projects are always carefully tested, there were always hints about the faulty geometry of the programme windows. It was noticeable that the programme windows and the size of all control elements under Mint 17 were always smaller than the window images in the project description under Ubuntu 12.04 LTS. The reduction factor was sufficiently constant. The solution is to set the property Form.Scaled to False to prevent the size of the form and the control elements from depending on the size of the default font. Attention: This boolean property is virtual! It therefore only exists and can be changed in the IDE and no longer exists at runtime. Another possibility is to adjust the size of the form and the control elements in the IDE manually or at runtime to the intended values.


# 12.2.0.13 Gambas and the bindings to QT4/QT5 and GTK+2/3 as a GUI toolkit

You need to know that Gambas supports both GTK+2/3 and QT4/QT5 with the gb.gtk, gb.gtk3 and gb.qt4/5 components. There is another component, gb.gui, which loads one of the first three components depending on the existing desktop. This occasionally causes problems because although the interfaces of the components are compatible, the behaviour of GTK+ and QT4 differs internally in some parts. You should therefore refrain from using gb.gui and decide for one of the two options when creating a new project (GUI): “QT graphical application” or “GTK+ graphical application”.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters

NO CONTENT


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.2.2 Form - Screen Pop

The method


```
ShowPopup( [ X As Integer, Y As Integer ] ) As Integer
```

opens an existing window in the project folder as a (borderless) pop-up window for another window. If the optional coordinates X and Y are specified, the pop-up window is displayed at position (X|Y), where this position represents the upper left corner of the pop-up window. Otherwise the pop-up window is displayed under the mouse pointer.
In the following example, two pop-up windows are used to display an analogue clock and to display a help text for the project window (start form):
Figure 12.2.2.1: Double-clicking on the shape shows the clock in a pop-up window.
Figure 12.2.2.2: A screen pop as a help window
After a double-click on the window area, the analogue clock is displayed and a click on the button with the question mark symbol displays the help in a pop-up window.
With special care and in a suitable manner, the information for the programme user that the programme offers the possibility to open pop-up windows must be realised.—-Note:In this project to demonstrate the creation and display of pop-up windows, changing the image width, transparency and image type does not result in any changes to the displayed image in the PictureBox!


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.2.3 Shape - Transparent Windows

In the context of 'Transparent windows' and 'Windows with transparent background', this note from Minisini provides valuable information:
… OK, it was a bit difficult, but I succeeded: in revision #6308, you get a new Window.Transparent property. By setting it, you make your window (or form) transparent, and then you can use a RGBA background colour and/or a background picture with an alpha channel. Of course, that works only if you have a compositing window manager. Regards, Benoît Minisini
Compositing window managers are window managers that support special effects such as window transparency. The answer to the question of whether a compositing window manager is active is provided by this line in a console:


```
xprop -id $(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}') -notype \
-f _NET_WM_NAME 8t | grep _NET_WM_NAME | sed 's/.*"\(.*\)"/\1/'
```

and displays the window manager under Mint 17.3 LTS Chinnamon:


```
Mother (Muffin)
```

On Ubuntu 12.04, the following command (→http://askubuntu.com/questions/72549/how-to-determine-which-window-manager-is-running) yielded:


```
hans@linux:~$ wmctrl -m
Name: Metacity  Class: N/A  PID: N/A
Window manager's "showing the desktop" mode: OFF
```

also gave a clear answer. The window manager is Metacity, but it was not activated. The remedy was to activate it with the help of the configuration editor 'gconf-editor' in the settings 'metacity' > general> compositing-manager = on →https://wiki.ubuntuusers.de/metacity#Effekte. For Mint 17.3, the programme 'wmctrl' (WindowsManagerControl) must be installed.
The following projects each create a fully transparent window or a window with a transparent background. A fully transparent window is a window with the properties Form.Transparent = True and Form.Border = False. This causes only the frameless transparent background to represent the active window. An alternative concept is needed to be able to move and close fully transparent windows. A window with a transparent background and visible title bar (title and buttons) is created when the properties Form.Transparent = True and Form.Border = True are set.
This source code should create a window with a transparent window background in the (background) colour light green:


```
PublicSubForm_Open()FMain.Center()FMain.Transparent=TrueFMain.Border=TrueFMain.Background=&H0091B75B&End
```

Here is the result:
Figure 12.2.3.1: Alpha channel 00 (0dez)
Transparency looks different! As you can see, the RGBA colour value &H0091B75B& in the source code excerpt above has an alpha channel of 0, which in Gambas is to be interpreted as 'zero transparency' or 'completely opaque'.
Changes to the value for the alpha channel gave these results:
Figure 12.2.3.2: Alpha channel 3F (63dec).
Figure 12.2.3.3: Alpha channel B0 (176dec)
Figure 12.2.3.4: Alpha channel FF (255dec)


# 12.2.3.0.1 Project 1

In the SimpleClock project, the current time text is displayed in a simple label on a fully transparent window background. The decision to show the window frame has only practical reasons, because this way the window can be moved and closed without any effort:
Figure 12.2.3.5: Window with fully transparent background
Then this source code is enough to display the current time on transparent window background:


```
' Gambas class filePublicSubForm_Open()FMain.Transparent=TrueFMain.Border=TrueFMain.Resizable=FalseFMain.Margin=TrueFMain.Arrangement=Arrange.FillFMain.Center()lblShowTime.Alignment=Align.CenterlblShowTime.Font=Font["FreeMono, Bold, +16"]Timer1.Enabled=TrueTimer1.Delay=1000Timer1.Trigger()End' Form_Open()PublicSubTimer1_Timer()lblShowTime.Text=Format(Now,"hh:nn:ss")End' Timer1_Timer()
```

You can find the SimpleClock project together with the other projects in the download area.


# 12.2.3.0.2 Project 2

For the project 'TransparentClock_Digital' as a mini program for the desktop (widget, desklet or GadGets) this note is necessary: The effort to draw the time text with Paint methods is not necessary. Originally, the layout for this digital clock was to have a frame with rounded corners. Therefore, the decision was made for the drawn version with Paint methods.
Figure 12.2.3.6: Transparent window
More interesting than the questions:
are the answers. The source code is given in full and then commented on:


```
[1]' Gambas class file[2][3]Private$fFontSizeAsFloat[4]Private$MXAsInteger[5]Private$MYAsInteger[6][7]PublicSubForm_Open()[8][9]$fFontSize=64[10][11]FMain.Font=Font[$fFontSize][12]FMain.Arrangement=Arrange.Fill[13]FMain.Margin=True[14]FMain.Padding=21[15]FMain.Resize(FMain.Font.TextWidth("00:00:00")+64, FMain.Font.Height+16)[16]FMain.Resizable=False[17]FMain.Text="Was - schon so spät ?"[18]FMain.Background=&HFFFFFFFF[19]FMain.Opacity=100[20]FMain.Border=False[21]FMain.Transparent=True[22]FMain.Tooltip="Move with pressed LMT\nClose via context menu (RMT)"[23]FMain.Center()[24][25]PictureBox1.Expand=True[26]PictureBox1.Alignment=Align.Center[27][28]Timer1.Trigger()[29][30]End' Form_Open()[31][32]PublicSubTimer1_Timer()[33]PaintDigitalClock($fFontSize)[34]End' Timer1_Timer()[35][36]PrivateSubPaintDigitalClock(FontSizeAsFloat)[37][38]DimhPictureAsPicture[39]DimsTextAsString[40][41]sText=Str(Time)[42][43]' The picture has the transparent mask if the optional parameter 'Transparent' has the value True.[44]' LINK: https://sourceforge.net/p/gambas/mailman/message/32766778/[45]hPicture=NewPicture(FMain.Width, FMain.Height,True)[46][47]Paint.Begin(hPicture)[48]Paint.Font.Size=FontSize[49]Paint.Font.Bold=True[50]Paint.Brush=Paint.Color(&H7F9FFF)[51]Paint.DrawText(sText,0,0, hPicture.W, hPicture.H, Align.Center)[52]Paint.End()[53][54]FMain.PictureBox1.Picture=hPicture[55][56]End' PaintDigitalClock()[57][58]PublicSubPictureBox1_DblClick()[59]FMain.Close()[60]End' PictureBox1_DblClick()[61][62]PublicSubPictureBox1_MouseDown()[63][64]DimhPopUpMenu, hMenuItemAsMenu[65][66]$MX=Mouse.ScreenX-Me.X[67]$MY=Mouse.ScreenY-Me.Y[68]FMain.Background=&H00E2E2E2[69][70]IfMouse.Right=TrueThen[71]' Create a PictureBox context menu[72]hPopUpMenu=NewMenu(Me)As"mnuPopUpMenu"[73]hMenuItem=NewMenu(hPopUpMenu)As"mnuExit"[74]hMenuItem.Text="Exit"[75]hMenuItem.Picture=Picture["icon:/16/quit"][76]hPopUpMenu.Popup()[77]Endif[78][79]End' PictureBox1_MouseDown()[80][81]PublicSubPictureBox1_Mouseup()[82]FMain.Background=&HEEFFFFFF[83]End' PictureBox1_Mouseup()[84][85]PublicSubPictureBox1_MouseMove()[86]IfMouse.LeftThenMe.Move(Mouse.ScreenX-$MX,Mouse.ScreenY-$MY)[87]End' PictureBox1_MouseMove()[88][89]PublicSubmnuExit_Click()[90]Me.Close()[91]End' mnuExit_Click()[92][93]' Public Sub Form_MouseDown()[94]'   $MX = Mouse.ScreenX - Me.X[95]'   $MY = Mouse.ScreenY - Me.Y[96]'   FMain.Background = &H00C3DDFF[97]' End[98][99]' Public Sub Form_MouseUp()[100]'   FMain.Background = &HEEFFFFFF[101]' End[102][103]' Public Sub Form_MouseMove()[104]'   If Mouse.Left Then Me.Move(Mouse.ScreenX - $MX, Mouse.ScreenY - $MY)[105]' End
```

Comment:
Figure 12.2.3.7: Marked transparent window with context menu


# 12.2.3.0.3 Project 3

The project TransparentClock_Analog by Claus Dietrich shows an analogue clock whose design you can change via a context menu. The menu also contains the menu item 'Close'.
Figure 12.2.3.8: Analogue clock with context menu
You can move the fully transparent programme window freely on the desktop with the mouse:
Figure 12.2.3.9: Analogue clock as desklet
The setting for the design used is saved in a settings file when the transparent programme window is closed and is available as a default value for the design when the programme is started again.
In the readme file for this desklet, you will find information on how to create a starter on the desktop for this programme as well as the information that the clock faces are modifications of free graphics whose sources are given.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.2.4 Form - dialogue window

In this chapter, a project presents, among other things, a dialogue that follows the descriptions for user-defined dialogues explained in detail in chapter → 12.4. In this project, the special _call(..) method is used to call the dialogue window. It allows an object to be used syntactically like a function. By calling the _call(..) method, the self-designed dialogue window can display itself modally! Good to know: In the optional arguments of the _call(…) method you can pass data to the dialogue window and in the return value of the method you can read data from the dialogue as a function value, save it and process it further.
The special feature of the project is the password-protected access to a (main) programme via a dialogue window to request a password. The login_password file contains the required password, which is stored encrypted in the file. The password file is generated in a separate project:
Figure 12.2.4.1: Generate password


```
sHash=Digest["sha512"](txbPassword.Text)File.Save(Application.Path&/"login_password", sHash)
```

Login window as dialogue
Already when the main programme is opened, the password is read from the password file and assigned to the variable hHash. Even before the main programme is displayed, the login window is opened as a dialogue and the user is prompted to enter the password:


```
' The login window (dialogue) is opened *modally* before the main window:fLoginDialog=NewFLogin
  aDialogData=fLoginDialog("Enter the login password:")
```

Figure 12.2.4.2: Create password
If the dialogue window is closed, it can be determined whether the user has cancelled the dialogue or entered an incorrect password:


```
' Dialog auswertenIfNotaDialogDataThen' Dialogue abort?Me.Close()' Close main window *without* commentReturnEndif' Passwort-CheckIfDigest["sha512"](aDialogData["Password"])<>sHashThen' Error? End programme with comment.Message.Title="Password Error ..."Message.Error("<center>Login failed!<hr>The main programme is terminated.</center>")Me.Close()ReturnEndif
```

Figure 12.2.4.3: Password error
In both cases, the main programme is terminated and only in the case of the incorrect password is a comment output.
If the stored encrypted password in the password file matches the password entered in the dialogue window, the main programme is displayed:
Figure 12.2.4.4: Main program window
The source code for the login dialogue is given in full:


```
' Gambas class filePublicFunction_call(sMessageAsString)AsCollectionlblMessage.Text=sMessage' Returns when one of the buttons has been clicked!' The return value is indicated in the Me.Close() call and' shows whether it was cancelled or not.txbPassword.SetFocus()IfMe.ShowModal()=0ThenReturnNullReturn["Name":User.Name,"Password": txbPassword.Text]' Me.ShowModal() = 1End' Function _call(...)PublicSubbtnOK_Click()IfNottxbPassword.TextThenMessage.Title="Password error ..."Message.Warning("No password was entered.")txbPassword.SetFocus()ReturnEndifMe.Close(1)End' btnOK_Click()PublicSubbtnCancel_Click()' 0 is also returned when closing by the cross in the window bar;' this corresponds to an abort of the dialogue by the user.Message.Warning("The login was cancelled ....")Me.Close(0)EndPublicSubtxbPassword_Activate()btnOK_Click()End' txbPassword_Activate()
```

In the download area you will find the two projects mentioned above.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.2.5 Form - Minimum-Maximum Window

If you set the Utility window property to True, you can write a programme whose window follows the FreeDesktop standard. You can maximise such a window and it will assume a minimum size equal to the size of the form at development time in the IDE or the window created in the source code at runtime. If you implement this, then you should consider the following points:
The enclosed project uses the utility property in the (start) form to manually adjust the window size to the different image formats with sufficient precision - without allowing image fragments in the display at minimum window size:
Figure 12.2.5.1: Minimum window size
The 'Tips of the Day …' in the Help menu item in the Gambas IDE also employs the Utility window property to always display the complete and easy-to-read information:
Figure 12.2.5.2: Minimum window size for the selected tip


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.2.6 Form - Persistence

Imagine the following situation: You open a (main) window FMain and from it you open another window F2. Then you edit selected data in window F2. Then you close the F2 window.
What answer would you have to the question: How do you realise the (necessary) data exchange between the window F2 and the (main) window FMain?
Normally, after closing F2, all data related to the form F2, such as text in a TextBox or the values of variables in the class F2, are lost. You can prevent this by setting the property F2.Persistent to 'True' for form F2. This is simple and effective, because you can access the data of the objects in the F2 window at any time - even if the F2 window has been closed.
The following experience of working with the Form.Persistent property can be given:


# 12.2.6.1 Project

In the (main) window FMain you can change the property F2.Persistent via a CheckBox. It also displays the current values for the range of random numbers from the two control elements (TextBox First, TextBox Last) on F2. To realise this, the Public property has been set to the value 'True' for both SpinBars on F2.
Figure 12.2.6.1.1: (Main) window
In the presented project, the class F2 generates only random numbers, whose range in the window F2 can be changed via two control elements (SpinBar). The F2 window is not displayed when the (main) window is opened.
Figure 12.2.6.1.2: (Main) window with dialogue window F2 open.
If you now change the values for the range of random numbers, the changed values will be displayed in the (main) window at the next timer cycle. After closing F2, the result will not surprise you - the changes have not been applied:
Figure 12.2.6.1.3: (Main) window again with the default values values!
All updated data in F2 is deleted and reset to the default values because the Persistent property of F2 was set to the value 'False' when the (main) window was started. This is changed, as you can see from the highlighted CheckBox:
Figure 12.2.6.1.4: (Main) window with default values
New values for the range of random numbers are now set in the dialogue:
Figure 12.2.6.1.5: (Main) window and dialogue window F2
Figure 12.2.6.1.6: (Main) window
With the adopted, new dialogue values, F2 now only generates random numbers from 7 to 14 and displays them in the (main) window. Attention: Changing the state of the CheckBox does not automatically change the functionality of F2! You can only achieve this by calling F2 again after the value for the CheckBox has been set to 'not selected' and by closing F2:
Figure 12.2.6.1.7: (Main) window
The source code is given for both classes and commented:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]FMain.Resizable='False'[5]' FMain.Utility = 'True' ' ERROR![6]Timer1.Delay=1000[7]Timer1.Enabled='True'[8]Timer1.Trigger()[9]F2.Persistent='False'[10]End[11][12]PublicSubbtnShowFormP_Click()[13]IfckBoxPersistence.ValueThen[14]F2.Persistent='True'[15]Else[16]F2.Persistent='False'[17]Endif[18]F2.Showmodal()[19]End[20][21]PublicSubTimer1_Timer()[22]txbFirst.Text=F2.sbarFirst.Value[23]txbLast.Text=F2.sbarLast.Value[24]txlRandomNumber.Text=F2.SetRandomNumber()[25]End
```

Comment:
Line 9 ensures that the persistence property of F2 is set to 'False' when the (main) window is opened.The timer (lines 6 to 8) generates the clock in which the random numbers (line 24) are retrieved and displayed as the function value of the SetRandomNumber() function from the Dialog class, and in lines 22 and 23 the default values for the current range of random numbers.
In lines 12 to 19, the persistence property of F2 is set and then the dialogue window F2 modal is displayed.
Source code F2.class:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]F2.Center()[5]End[6][7]PublicFunctionSetRandomNumber()AsInteger[8]Randomize[9]ReturnRand(sbarFirst.Value, sbarLast.Value)[10]End[11][12]PublicSubbtnClose_Click()[13]F2.Close()[14]End
```

Comment:
In line 9, the SetRandomNumber() function generates random numbers in the specified range. The Rand(First, Last) function generates numbers of type integer!The random number generator is initialised by Randomize with the current timestamp if the optional parameter is missing.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.2.7 Form - Form in Form

The question “Is it possible to embed a form in another form (FormInForm), the selection of which can be changed at will?” can generally be answered YES, although the detailed answers vary:

In this chapter, you will be presented with projects in which answers 2 and 3 are implemented in practice. The development of your own control elements is described in → Chapter 12.2.8. The corresponding projects are also presented.


# 12.2.7.1 Project 1

In all projects presented, including those in chapter 12.2.8, the following procedure is implemented:
In order to focus attention on inserting a form into a (main) form, the functionality of the (main) form is spartan. It is limited to making the background colour of the inserted form visible via a SwitchButton and a button with which the (main) form can be closed. The inserted form displays either a text in a TextArea or a picture in a PictureBox. Switching is done with the 'Switch View' button on the inserted form. An inserted form has no title bar with the window title and the usual buttons because it is not a top-level window. Therefore, the inserted form has a menu to show here that the inserted form is its own event observer and therefore you can manage its events - such as _Close() - in the source code of the class itself.
Figure 12.2.7.1.1: Main window with inserted window in action.
Figure 12.2.7.1.2: Main window with selected window (left)
Figure 12.2.7.1.3: Main window with outlined but empty container (panel).
In connection with the development of projects where forms are inserted into a (main) form, this experience could be gained:
From the source code of the class for the inserted form FEmbedded, only this excerpt is interesting for the constructor:


```
PublicSub_new(iColorAsInteger)TextArea1.Background=iColorEnd' _new(...)
```

This is how the form FEmbedded is inserted into the form FMain:


```
PrivatehFEmbeddedAsFEmbeddedPublicSubForm_Open()FMain.Center()' Weitere Initialisierungen ...SwitchButton1.Value=FalsehFEmbedded=NewFEmbedded(&HE1EAF6, panEmbedder)End' Form_Open()
```

Comment:


```
hFEmbedded = New FEmbedded(&HE1EAF6, panEmbedder)
```

First the argument for the colour is noted (obligatory parameter) and only then the argument for the parent container (optional parameter).Note that you do not have to open the FEmbedded window! It will open automatically when it is inserted into the container (panel) on the (main) form FMain.


# 12.2.7.2 Project 2

In the second project you will learn how to insert two different forms into a (main) form and also how to remove them from their container on the (main) form.
Figure 12.2.7.2.1: Three top-level windows
Figure 12.2.7.2.2: (Main) window with window 1 inserted.
Figure 12.2.7.2.3: (Main) window with window 1 and 2 inserted.
Figure 12.2.7.2.4: (Main) window with the two windows 1 and 2 removed.
For a test in the project trial, you can display the number of top-level windows, their titles and window heights, and the names of the control elements on the (main) form:


```
FMain
Number of open windows = 3

1. Window: Caption      = MAIN FORM
1. Window: Window height = 301
------------------------------------------
2. Window: Caption      = FORM 1
2. Window: Window height = 126
------------------------------------------
3. Window: Caption      = Form 2
3. Window: Window height = 126
------------------------------------------
panContainer
HBox1
```

The insertion of the two windows in project 2 is done by one of the two procedures in the event handler Form_Open() of FMain, respectively:


```
PublicSubForm_Open()' When this window is closed, all project windows are closed automaticallyApplication.MainWindow=FMain
  ...' Insert Form1 and Form2 in FMain - Set Button TextsbtnEMUNForm1_Click()btnEMUNForm2_Click()EndPublicSubbtnEMUNForm1_Click()IfbtnEMUNForm1.ValueThenForm1.Reparent(panContainer,0,0)' InsertbtnEMUNForm1.Text=("Unembed F1")ElseForm1.Reparent(Null)' RemovebtnEMUNForm1.Text=("Embed F1")EndifEndPublicSubbtnEMUNForm2_Click()IfbtnEMUNForm2.ValueThenForm2.Reparent(panContainer,0,0)' InsertbtnEMUNForm2.Text=("Unembed F2")ElseForm2.Reparent(Null)' RemovebtnEMUNForm2.Text=("Embed F2")EndifEnd
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.2.8 Form - Self-developed controls

In the RSS Reader project in → Chapter 18.12.5 it is shown how to create an RSS feed form in the Gambas IDE in addition to the (main) form (→ class FeedItem.Class) and how to insert several controls (2 TextAreas and a PictureBox) into the RSS feed form:
Figure 12.2.8.1: RSS feed form (IDE)
Then RSS feed forms are created in the (main) form according to the number of current news items in the selected RSS data stream and immediately inserted and displayed in a ListContainer. From an application point of view, you can consider these RSS feed forms inserted into the (main) form as their own self-developed controls - as a compound control element or 'Compound Control'. The container for the RSS feed forms is the ListContainer control, which is now considered obsolete and for which there is currently a sufficiently equivalent replacement in the form of the ScrollView control element.
Figure 12.2.8.2: Two RSS feed forms in a ListContainer
It is interesting to note that many control elements from gb.form - which most users may think of as “built-in” - have been created as specially designed form classes; much like the FeedItem class from the project above.


# 12.2.8.1 Strategy 1

The RSS Reader project consistently implements the strategy already mentioned in chapter 12.2.7:


```
Private hFSelfmadeControl As FSelfmadeControl ' » Compound Control

Public Sub Form_Open()
...
  hFSelfmadeControl = New FSelfmadeControl(Container) As "hFSelfmadeControl"
...
End
```

Implementing the above strategy is a great way to easily develop your own controls because you can design forms and write class source code for them using the form editor in the IDE. This design process in the Gambas IDE even takes care of organising projects into classes as an implementation of the principle of encapsulation in object-oriented programming (OOP).


# 12.2.8.2 Project 1

In one project it was necessary to realise a colour selection that should fulfil the following requirements:
Before you reinvent the wheel in such a case, it is worth taking a look at the collection of control elements in the Gambas IDE. The relevant control elements ColorChooser and ColorPalette did not fulfil all the requirements in a suitable way. The colour selection via an additional dialogue, as shown in the following two illustrations, spoke against the ColorButton:
Figure 12.2.8.2.1: ColorButton dialogue (right)
So it was clear: The control element FMinimalColorChooser will be developed according to strategy 1 in the IDE of Gambas itself! The control element has these two properties:
Table 12.2.8.2.1 : Properties of the class FMCChooser
The control element FMinimalColorChooser has only the event Change. It is triggered when a colour in the colour palette has been selected with a mouse click - it has been changed:
Figure 12.2.8.2.2: MiniColorChooser in action
To test the self-developed control element, a (main) form was designed so that the selected colour in the control element FMinimalColorChooser is used as the foreground colour for a text in a TextArea. In addition, the number of colours in the colour palette is displayed in a SpinBox, which can also be used to change their number in the specified interval [1|12]. The currently selected colour value is displayed in a TextBox (hexadecimal).
Source code:


```
[1]' Gambas class file[2][3]PrivatehMCChooserAsFMinimalColorChooser' ➘ Compound Control[4][5]PublicSubForm_Open()[6][7]FMain.Resizable=False[8]panMCC.Arrangement=Arrange.Fill[9]' panMCC.Border = Border.Plain ' Option: Border around the embedded window[10]sboxNumberOfColors.MinValue=1[11]sboxNumberOfColors.MaxValue=12[12]txbColorHex.ReadOnly=True[13][14]hMCChooser=NewFMinimalColorChooser(panMCC,5)As"hMCChooser"[15][16]' Set selected properties of the embedded window of FMinimalColorChooser.[17]hMCChooser.Arrangement=Arrange.Vertical[18]hMCChooser.Spacing=True[19]' Set selected properties of control elements on FMinimalColorChooser,[20]' whose Public property was set to True at development time.[21]hMCChooser.dwgColors.Expand=True[22]hMCChooser.dwgColors.Border=Border.Solid[23]hMCChooser.panShowColor.Border=Border.Solid[24][25]hMCChooser_Change()[26][27]End[28][29]PublicSubhMCChooser_Change()[30]SetTAColor(hMCChooser.ValueOfColor)[31]txbColorHex.Text="#"&Hex$(hMCChooser.ValueOfColor,6)[32]sboxNumberOfColors.Value=hMCChooser.NumberOfColors[33]End[34][35]PublicSubsboxNumberOfColors_Change()[36]hMCChooser.NumberOfColors=sboxNumberOfColors.Value[37]End[38][39]PrivateSubSetTAColor(FGColorAsInteger)[40]TextArea1.Foreground=FGColor[41]txbColorHex.SetFocus()[42]End
```

Comment:
The form for the control element looks less spectacular:
Figure 12.2.8.2.3: Form with DrawingArea and Panel (IDE and runtime).
The source code for the FMinimalColorChooser class is given in full:


```
[1]' Gambas class file[2][3]PropertyNumberOfColorsAsInteger'' Number of colours, interval \[1..12\] (read + write)[4]PropertyReadValueOfColorAsInteger'' Colour Value (Read Only)[5][6]Private$iNumberOfColorsAsInteger[7]Private$iValueOfColorAsInteger[8][9]EventChange[10][11]PublicSub_new(OptionalNumberOfColorsAsInteger=6)[12]IfNotIsMissing(NumberOfColors)Then$iNumberOfColors=NumberOfColors[13]' $iValueOfColor = GetColor(0) ' Option: Set start colour[14]End[15][16]PublicSubdwgColors_Draw()[17][18]DimiYAsInteger[19][20]Paint.LineWidth=dwgColors.H/$iNumberOfColors' Relative width - related to DrawingArea[21]Paint.Translate(0, Paint.LineWidth/2)[22]ForiY=0To$iNumberOfColors-1[23]Paint.Background=GetColor(iY)[24]Paint.MoveTo(0, iY*Paint.LineWidth)[25]Paint.LineTo(dwgColors.W, iY*Paint.LineWidth)' Relative height - related to DrawingArea[26]Paint.Stroke()[27]Next[28][29]$iValueOfColor=GetColor(0)[30]UpdatePreviewColor()[31][32]End[33][34]PrivateFunctionGetColor(IndAsInteger)AsInteger' Generate colour palette[35][36]DimfR, fG, fBAsFloat[37]DimfFreqAsFloat=Pi(2)/$iNumberOfColors[38][39]fR=Sin(fFreq*Ind)*127+128[40]fG=Sin(fFreq*Ind+Pi(1/3))*127+128[41]fB=Sin(fFreq*Ind+Pi)*127+128[42][43]ReturnColor.RGB(fR, fG, fB)[44][45]End[46][47]PrivateSubUpdatePreviewColor()[48]panShowColor.Background=$iValueOfColor[49]End[50][51]PublicSubdwgColors_MouseMove()[52]dwgColors_MouseUp()[53]End[54][55]PublicSubdwgColors_MouseUp()[56]$iValueOfColor=GetColor(Mouse.Y*$iNumberOfColors/dwgColors.H)[57]UpdatePreviewColor()[58]RaiseChange' The Change event is triggered[59]End[60][61]PrivateFunctionNumberOfColors_Read()AsInteger[62]Return$iNumberOfColors[63]End[64][65]PrivateSubNumberOfColors_Write(ColorsAsInteger)[66]IfColors<1Orcolors>12ThenError.Raise(Subst$(("Invalid number: &1"), Colors))[67]$iNumberOfColors=Colors[68]dwgColors.Refresh()' Colour palette is redrawn[69]End[70][71]PrivateFunctionValueOfColor_Read()AsInteger[72]Return$iValueOfColor[73]End
```

Comment:


# 12.2.8.3 Outlook Strategy 2

Things get really interesting when you put the class FMinimalColorChooser in a control element that can also be integrated into the collection of control elements (tool collection) with its own symbol:
Figure 12.2.8.3.1: Tool collection (Chooser)
It is not until Chapter 30 that components, classes, modules and control elements are described in more detail under the aspect of object-oriented programming. To give you an insight into the strategy for developing and implementing self-developed control elements for the tool collection in the Gambas IDE, a suitable project by Tobias Boege is presented in the download area.
Please note: To integrate the control element MinimalColorChooser into the tool collection, the directory MinimalColorChooser has to be copied into the project directory which shall use the control element MinimalColorChooser.
The source code for the crucial MinimalColorChooser class looks like this:


```
' Gambas class fileInheritsUserControlExportEventChangePublicConst_PropertiesAsString="*,NumberOfColors=8"PublicConst_GroupAsString="Chooser"PublicConst_SimilarAsString="ColorChooser"PublicConst_DefaultEventAsString="Change"PropertyNumberOfColorsAsIntegerPropertyReadValueOfColorAsIntegerPrivate$hMCChooserAsFMinimalColorChooserPublicSub_new()$hMCChooser=NewFMinimalColorChooser(Me,6)EndPublicSubRaise_ColorChange()RaiseChange' To be called from the FMinimalColorChooserEndPrivateFunctionNumberOfColors_Read()AsIntegerReturn$hMCChooser.NumberOfColorsEndPrivateSubNumberOfColors_Write(ValueAsInteger)$hMCChooser.NumberOfColors=ValueEndPrivateFunctionValueOfColor_Read()AsIntegerReturn$hMCChooser.ValueOfColorEnd
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.2.9 Data exchange between application windows

At the latest when you start another window F1 from a (main) window FMain, the question might have to be answered according to which concept the data transfer between the two application windows should take place. The following considerations will certainly enter into the concept:
In the following sections, you will find chapters in which the data transfer for the above considerations has already been described.


# 12.2.9.1 Start values F1

You can give start values to the window F1 with an appropriately designed constructor via mandatory and optional parameters in the _new method → Chapter 12.2.7.1 Project 1. Another possibility is offered by self-developed dialogues → Chapter 24.3.4 Account.Manager.


# 12.2.9.2 Unidirectional or bidirectional data exchange

You can also consider moving data from control elements to FMain and F1 via the Drag&Drop methods as a data transfer.


# 12.2.9.3 Data Exchange - Project 1

In a real, tested project, the temperature is recorded via a temperature sensor on a circuit board via an RS232 interface in an application window FSensor. From a main window FMain, the temperature reading is accessed on FSensor and the temperature is displayed in FMain:
Figure 12.2.9.3.1: Temperature display on FMain - next to it FSensor
So that you can follow the project, the temperature values are generated by a random generator in a certain temperature range. This eliminates the need for a real board and the class SerialPort (gb.net).
If you want to access properties and methods of control elements on FMain and FSensor alternately, you must set the property Public of the respective control elements to True at development time, in addition to the declaration of project-wide variables. This is not possible at runtime because the Public property is virtual. As already noted in → Chapter 12.2.0 'Form - Window class and Form class', the following applies:As long as there is no compelling reason to change the Public property from False to True, you should give preference to the complete encapsulation of the state and behaviour of objects.
On the other hand, the bidirectional data exchange between FMain and FSensor via the public control elements and variables is very simple. The source code for the classes FMain and FSensor in projects 1 and 2 is sufficiently short and is therefore given in full.FMain.class


```
' Gambas class filePublicSubForm_Open()Application.MainWindow=FMain
  FMain.Center()FMain.Resizable=FalsepiboxOn.Picture=Picture["LED/led_yellow.svg"]ValueBox1.Value=0.2btnStartSensor1.Text="Start temperature measurement sensor 1".EndPublicSubbtnStartSensor1_Click()piboxOn.Picture=Picture["LED/led_green.svg"]FSensor.fTIBegin=22.9FSensor.fTIEnd=24FSensor.fTITrigger=ValueBox1.ValueFSensor.Show()FSensor.X=FMain.X+FMain.W+20FSensor.Y=FMain.Y+FMain.H-FSensor.HbtnStartSensor1.Enabled=FalseEndPublicSubValueBox1_Change()IfValueBox1.Value>=0AndIfValueBox1.Value<=0.9ThenFSensor.fTITrigger=ValueBox1.ValueEndPublicSubForm_Close()FMain.Close()End</close>FSensor.class<code gambas>' Gambas class filePublicfCurTemperatureAsFloatPublicfTIBeginAsFloatPublicfTIEndAsFloatPublicfTITriggerAsFloatPrivatefSavedTemperatureAsFloatPublicSubForm_Open()FSensor.Center()FSensor.Resizable=FalseTimerSimulation.Trigger()EndPublicSubTimerSimulation_Timer()DimbChangedAsBooleanRandomizefCurTemperature=Rnd(fTIBegin, fTIEnd)bChanged=Abs(fCurTemperature-fSavedTemperature)>fTITrigger
  fSavedTemperature=fCurTemperatureIfbChangedThenFMain.lblTemperaturAnzeige.Text=Format(FSensor.fCurTemperature,"##.0 °C")EndifEndPublicSubForm_Close()FMain.piboxOn.Picture=Picture["LED/led_yellow.svg"]' piboxOn.Public = TrueFMain.btnStartSensor1.Enabled=True' btnStartSensor1.Public = TrueFMain.lblTemperaturAnzeige.Text="--- °C"' lblTemperaturAnzeige.Public = TrueFMain.ValueBox1.Value=0.2' ValueBox1.Public = TrueEnd
```

Comment:


# 12.2.9.4 Data exchange - project 2

In the second project, data exchange between the application windows FMain and FSensor takes place only via public interfaces whose signatures are known. Each class thus completely encapsulates its data vis-à-vis the other class. This is also clear in the source code for the two classes FMain and FSensor: there are no public control elements and also no public variables!


```
FMain.class' Gambas class filePrivatefTITriggerAsFloat=0.2PublichSensorAsFSensorPublicSubForm_Open()Application.MainWindow=FMain
  FMain.Center()FMain.Resizable=FalsepiboxOn.Picture=Picture["LED/led_yellow.svg"]ValueBox1.Value=fTITriggerEndPublicSubbtnStartSensor1_Click()CreateSensor1()piboxOn.Picture=Picture["LED/led_green.svg"]btnStartSensor1.Enabled=FalseEndPublicSubSensor1_Close()piboxOn.Picture=Picture["LED/led_yellow.svg"]btnStartSensor1.Enabled=TruelblTemperature1.Text="--- °C"ValueBox1.Value=fTITriggerEndPublicSubSensor1_Change()lblTemperature1.Text=Format(hSensor.Temperature,"##.0 °C")EndPublicSubValueBox1_Change()IfhSensorThenIfValueBox1.Value>=0AndIfValueBox1.Value<=0.9ThenhSensor.TriggerValue=ValueBox1.ValueEndifEndifEndPublicSubCreateSensor1()DimhObserverAsObserverDimaRangesAsFloat[]=[19.9,21]hSensor=NewFSensor(aRanges[0], aRanges[1])hSensor.Caption="TEMPERATUR-SENSOR 1"hSensor.TriggerValue=fTITrigger
  hSensor.Show()hSensor.X=FMain.X+FMain.W+20hSensor.Y=FMain.Y+FMain.H-hSensor.HhObserver=NewObserver(hSensor)As"Sensor1"EndPublicSubForm_Close()FMain.Close()End
```

FSensor.class


```
' Gambas class filePrivatefSavedTemperatureAsFloat=0.0Private$fIBeginAsFloatPrivate$fIEndAsFloat'--------------------------------------------------------------------'' Property: Temperature, Access right: public, Modus: read-onlyPropertyReadTemperatureAsFloat'' Property: TriggerValue, access right: publicPropertyTriggerValueAsFloat'---------------------------------------------------------------------Private$fTemperatureAsFloat' Local variable ➘ Cut pointPrivate$fTriggerValueAsFloat' Local variable ➘ Cut point'---------------------------------------------------------------------'' Event: ChangeEventChange'---------------------------------------------------------------------PublicSub_new(IBeginAsFloat, IEndAsFloat)IfNotTypeOf(IBegin)=gb.FloatThenError.Raise("Type error: Start value of temperature interval.")IfNotTypeOf(IEnd)=gb.FloatThenError.Raise("Type error: end value of temperature interval.")IfIBegin>=IEndThenError.Raise("The start value is greater than or equal to the end value of the interval..")$fIBegin=IBegin
  $fIEnd=IEndEndPublicSubForm_Open()Me.Center()Me.Resizable=FalseTimerSimulation.Delay=1000TimerSimulation.Start()TimerSimulation.Trigger()End' Form_Open()PublicSubTimerSimulation_Timer()DimbChangedAsBooleanRandomize$fTemperature=Rnd($fIBegin, $fIEnd)bChanged=Abs($fTemperature-fSavedTemperature)>$fTriggerValue
  fSavedTemperature=$fTemperatureIfbChangedThenRaiseChangeEnd' Additional service or interface (public method): Temperature_readPrivateFunctionTemperature_Read()AsFloatReturn$fTemperatureEnd' Additional service or interface (public method): Trigger_readPrivateFunctionTriggerValue_Read()AsFloatReturn$fTriggerValueEnd' Additional service or interface (public method): Trigger_WritePrivateSubTriggerValue_Write(ValueAsFloat)IfValue<0OrValue>1ThenError.Raise("The trigger value is not in the interval. [0|1]")Endif$fTriggerValue=ValueEnd
```

Comment:


```
PublicSubTimerSimulation_Timer()DimbChangedAsBooleanRandomize$fTemperature=Rnd($fIBegin, $fIEnd)bChanged=Abs($fTemperature-fSavedTemperature)>$fTriggerValue
  fSavedTemperature=$fTemperatureIfbChangedThenRaiseChangeEndPublicSubSensor1_Change()lblTemperature1.Text=Format(hSensor.Temperature,"##.0 °C")End
```



```
PublicSubSensor1_Close()piboxOn.Picture=Picture["LED/led_yellow.svg"]btnStartSensor1.Enabled=TruelblTemperature1.Text="--- °C"ValueBox1.Value=fTITriggerEnd
```

FSensor.class:


```
PublicSub_new(IBeginAsFloat, IEndAsFloat)IfNotTypeOf(IBegin)=gb.FloatThenError.Raise("Type error: Start value.")IfNotTypeOf(IEnd)=gb.FloatThenError.Raise("Type error: End value of temperature interval.")IfIBegin>=IEndThenError.Raise("The start value is greater than or equal to the end value.).")$fIBegin=IBegin
  $fIEnd=IEndEnd
```

FMain.class:


```
PublicSubCreateSensor1()DimhObserverAsObserverDimaRangesAsFloat[]=[19.9,21]hSensor=NewFSensor(aRanges[0], aRanges[1])hSensor.Caption="TEMPERATURE-SENSOR 1"hSensor.TriggerValue=fTITrigger
  hSensor.Show()hSensor.X=FMain.X+FMain.W+20hSensor.Y=FMain.Y+FMain.H-hSensor.HhObserver=NewObserver(hSensor)As"Sensor1"End
```

The observer must be created because the FSensor class inherits from the Form class but does not have the extensions (2 properties and an event) of the class 'in view'.
In my opinion, the project offers several advantages over project 1:
The advantages sound convincing. The only thing is that you will soon realise that these advantages quickly melt away in larger projects, because encapsulating a class consistently and neatly can be very difficult and tedious in design. Occasionally the code even becomes too cumbersome. These are the only cases for the carefully considered use of public controls! Such a case does not exist for project 1, so preference should be given to project 2.


# 12.2.9.5 Data Exchange - Project 3

The 3rd project works with 3 sensor application windows. All three application windows are instances of the class FSensor, which is taken over from project 2. Therefore, only the source code of the class FMain is presented and commented:


```
[1]' Gambas class file[2][3]Private$iSensorsAsInteger=1[4]PrivateaSensorsAsNewFSensor[][5]PrivateaTriggerAsFloat[]=[0.1,0.3,0.5][6][7]PublicSubForm_Open()[8]Application.MainWindow=FMain[9]FMain.Center[10]FMain.Resizable=False[11]piboxOn.Picture=Picture["LED/led_green.svg"][12]CreateSensors()[13]ValueBox1.Value=aTrigger[0][14]ValueBox2.Value=aTrigger[1][15]ValueBox3.Value=aTrigger[2][16]End[17][18]PrivateSubCreateSensors()[19]DimhSensorAsFSensor, hObserverAsObserver[20]DimiAsInteger[21]DimaRangesAsFloat[][]=[[20,21],[40.0,42],[33,35.8]][22][23]Fori=1ToaRanges.Count[24]hSensor=NewFSensor(aRanges[i-1][0], aRanges[i-1][1])[25]hSensor.Caption="TEMPERATURE-SENSOR "&Str($iSensors)[26]hSensor.Tag=$iSensors' The tag property stores the number of the sensor[27]hSensor.TriggerValue=aTrigger[i-1][28]hSensor.Show()[29]aSensors.Add(hSensor)[30]hObserver=NewObserver(aSensors[i-1])As"Sensor"[31]hObserver.Tag=$iSensors' The tag property stores the number of the observer[32]Inc$iSensors[33]Next[34]End[35][36]PublicSubSensor_Change()[37]SelectCaseLast.Tag[38]Case1[39]lblTemperature1.Text=Format(Last.Temperature,"##.0 °C")[40]Case2[41]lblTemperature2.Text=Format(Last.Temperature,"##.0 °C")[42]Case3[43]lblTemperature3.Text=Format(Last.Temperature,"##.0 °C")[44]EndSelect[45]End[46][47]PublicSubSensor_Close()[48]SelectCaseLast.Tag[49]Case1[50]lblTemperature1.Text="--- °C"[51]Case2[52]lblTemperature2.Text="--- °C"[53]Case3[54]lblTemperature3.Text="--- °C"[55]EndSelect[56]End[57][58]PublicSubValueBox1_Change()[59]aSensors[0].TriggerValue=ValueBox1.Value[60]End[61][62]PublicSubValueBox2_Change()[63]aSensors[1].TriggerValue=ValueBox2.Value[64]End[65][66]PublicSubValueBox3_Change()[67]aSensors[2].TriggerValue=ValueBox3.Value[68]End
```

Comment:
Note: An alternative is to replace line 30 with this source code:


```
hObserver = New Observer(aSensors[i - 1]) As "Sensor" & Str($iSensors)
```

Now you get three observers, each with its own event name, and for this reason you can evaluate the Change() event and the Close() event separately if you replace lines 36 to 56 with the following two source code sections:


```
Public Sub Sensor1_Change()
  lblTemperature1.Text = Format(aSensors[0].Temperature, "##.0 °C")
End

Public Sub Sensor2_Change()
  lblTemperature2.Text = Format(aSensors[1].Temperature, "##.0 °C")
End

Public Sub Sensor3_Change()
  lblTemperature3.Text = Format(aSensors[2].Temperature, "##.0 °C")
End
```



```
Public Sub Sensor1_Close()
  lblTemperature1.Text = "--- °C"
  ValueBox1.Enabled = False
End

Public Sub Sensor2_Close()
  lblTemperature2.Text = "--- °C"
  ValueBox2.Enabled = False
End

Public Sub Sensor3_Close()
  lblTemperature3.Text = "--- °C"
  ValueBox3.Enabled = False
End
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters

NO CONTENT


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.3.0 Component gb.form.mdi

This component opens up the possibility of realising a multi-document interface with the Workspace control element and offers, among other things, a ToolBar container. The component has the three classes Workspace, ToolBar and Action.
Workspace → Chapter 12.3.1The class implements a workspace tab where you can insert top-level windows.
Figure 12.3.0.1: Container 'Workspace' in the Gambas IDE.
ToolBar → Chapter 12.3.2The ToolBar class implements a toolbar to hold ToolButton and MenuButton.
Action → Chapter 12.3.3The Action class (gb.form.mdi) extends the Action class from gb.qt4. It provides you with a list in an array via the Action.List property, in which all specified actions are entered in an ordered manner. The new Configure() method opens a dialogue for configuring shortcuts.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.3.1 Workspace

The Workspace class (gb.form.mdi) implements a workspace into which you can add top-level windows. To add new windows to the workspace, they must first be instantiated. Use the Add() method to insert a top-level window into a workspace. You can switch between windows in the workspace by switching tabs. The terms workspace, workspace and tab are used interchangeably in this chapter.
Figure 12.3.1.1: Four top-level windows in a workspace


# 12.3.1.1 Properties

The Workspace class has these selected properties, among others:
Table 12.3.1.1 : Properties of the class Workspace


# 12.3.1.2 Methods

The following table describes some methods of the Workspace class:
Table 12.3.1.2.1 : Methods of the Workspace Class


# 12.3.1.3 Events

Of the events of the Workspace class, only these four are presented to you:
Table 12.3.1.3.1 : Selected Events of the Class Workspace
The workspace has a context menu - callable in the tab tab line - with which you can implement the following features:
Hints:


# 12.3.1.4 Project

The project provides, among other things, a workspace in which 4 top-level windows are anchored, behind which 4 external programmes are located. It has proved advantageous to store all the programmes to be inserted in their own directories in the project folder. In addition, the main programme has a menu that allows you to add a window back to the workspace if you had removed it from the workspace management. You can detach a special window in the workspace (OpenStreetMap) from the workspace and add it again. The 4 top-level windows in the presented project do not belong together in terms of content. In a productive environment, one would choose programmes with which to solve a task. For example, a programme for calculating value tables would fit well with a function plotter.
Figure 12.3.1.4.1: Main programme with the workspace (4 windows)
In the source code of each external programme, you should set the Caption and Icon properties with appropriate values. Note: The programme icon is also adopted as the icon for the corresponding tab in the workspace. Unfortunately, the icon - unlike the programme icon - isnotscaled to the required size. Therefore, already choose a programme icon with a size of 16×16 pixels → line 4 in the following source code excerpt:


```
[1]PublicSubForm_Open()[2]FGeoMap.Center[3]FGeoMap.Caption="  OpenStreetMap"[4]FGeoMap.Icon=Picture["icon:/16/internet"][5]ShowMap()[6]End' Form_Open()
```

The source code is manageable and holds no surprises:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4][5]FMain.Center[6]FMain.Resizable=True[7]FMain.Caption="Container Workspace"[8][9]Workspace1.Image=Image.Load("Symbols/intro.jpg")[10]Workspace1.Add(FDBWizard)[11]Workspace1.Add(FGeoMap)[12]Workspace1.Add(FTools)[13]Workspace1.Add(FPing)[14]Workspace1.ActiveWindow=FTools[15][16]btnInOut.Text="  Solve OpenStreetMap"[17][18]End' Form_Open[19][20]PublicSubMenu11_Click()[21]IfNotWorkspace1.Exist(FDBWizard)ThenTryWorkspace1.Add(FDBWizard)[22]End' Menu11[23][24]PublicSubMenu12_Click()[25]IfNotWorkspace1.Exist(FGeoMap)ThenWorkspace1.Add(FGeoMap)[26]btnInOut.Visible=True[27]PrintLast.Text[28]End' Menu12[29][30]PublicSubMenu13_Click()[31]IfNotWorkspace1.Exist(FTools)ThenWorkspace1.Add(FTools)[32]End' Menu13[33][34]PublicSubMenu14_Click()[35]IfNotWorkspace1.Exist(FPing)ThenWorkspace1.Add(FPing)[36]PrintLast.Text[37]End' Menu14[38][39]PublicSubbtnInOut_Click()[40][41]IfWorkspace1.Exist(FGeoMap)[42]IfNotWorkspace1.TagThen[43]Workspace1.Detach(FGeoMap)[44]Workspace1.Tag="A"[45]btnInOut.Text="  Anchor OpenStreetMap"[46]Else[47]Workspace1.Tag=""[48]Workspace1.Attach(FGeoMap)[49]btnInOut.Text="  Solve OpenStreetMap"[50]Workspace1.ActiveWindow=FGeoMap[51]Endif[52]Endif[53][54]End' btnInOut_Click()[55][56]PublicSubWorkspace1_Activate()[57]DimsProgramNameAsString[58]' For control:[59]IfWorkspace1.Count>1ThenPrintWorkspace1.ActiveWindow.Name[60]End' Workspace1_Activate()[61][62]PublicSubWorkspace1_Close(hWindowAsWindow)[63]' For control:[64]Print"OK 1"[65]IfhWindow=FGeoMap.WindowThenbtnInOut.Visible=False[66]End' Workspace1_Close(hWindow As Window)
```

Notes:


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.3.2 ToolBar

The ToolBar class (gb.form.mdi) implements a toolbar to hold ToolButton and MenuButton. It has some special properties, but only one method and exactly one event as well as 2 constants for specifying the alignment of a ToolBar.
Figure 12.3.2.1: Toolbar with ToolButton in the Gambas IDE


# 12.3.2.1 Properties, method and event

The two properties ToolBar.Key and ToolBar.Text only need to be set if you want to use the ToolBar.Configure method. The method allows you to change the design of a ToolBar within narrow limits during the runtime of a programme. The changes concern the height of the icons on the ToolButton or MenuButton (small, medium or large), the addition or removal of ToolButtons or MenuButtons, the addition or removal of separators and spaces as well as the regrouping of elements in the ToolBar. You can only add tool or menu buttons that have previously been removed and 'parked' in a configuration dialogue. It is up to you to decide whether this feature is a successful gimmick or a useful addition.


# 12.3.2.2 Properties

Table 12.3.2.2.1: Selected ToolBar Properties


# 12.3.2.3 Method

The ToolBar.Configure method only takes effect if.
Hints:
You call theToolBar.Configuremethod in an event handler routine or you conveniently use thecontext menu of the ToolBarcomponent.


# 12.3.2.4 Event

TheToolBar_Configure()event is raised when the ToolBar has been configured.


# 12.3.2.5 Example

This example demonstrates the use of a ToolBar that can be configured at programme runtime. The ToolBar contains several ToolButtons and a MenuButton, but the MenuButton is not configurable because its .Action property has not been set.
Figure 12.3.2.5.1: ToolBar with ToolButton and MenuButton
After you have placed all the components on the form in the development environment (IDE), you must set the ToolButton.Key property and the .Action property for the ToolButton and MenuButton there in the Properties tab, which should be configurable because the following source code will not produce an error but will have no effect:


```
ToolBar1.Key = "Emma"
toolbtnOpen.Action = "A1"
toolbtnPlay.Action = "A2"
toolbtnFTP.Action = "A3"
toolbtnConfiguration.Action = "A4"
toolbtnClose.Action = "A5"
```



# 12.3.2.6 Project source code

The source code is given in full and then commented:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]FMain.Center[5]FMain.Resizable=False[6]PictureBox1.Picture=Picture["fractal.jpg"][7][8]ToolBar1.Height=32[9]ToolBar1.Orientation=ToolBar1.Horizontal' Alternative: ToolBar1.Orientation = 0[10]ToolBar1.Separator=False[11]toolbtnFTP.Toggle=True[12]toolbtnFTP.Value=False[13][14]mnubtnHelp.Width=72[15]mnubtnHelp.Text="Aids"[16]mnubtnHelp.Menu="mnuHelp"[17]mnubtnHelp.MenuOnly=True[18][19]End' Form_Open()[20][21]PublicSubmnu21Help_Click()[22]FHelp.Show' → F1[23]End' mnuHelp_Click()[24][25]PublicSubmnu22Information_Click()[26]Desktop.Open("http://www.gambas-buch.de/dw/doku.php?id=k18:k18.6:start")' → F12[27]End' mnu22Information_Click()[28][29]PublicSubtoolbtnOpen_Click()[30]OpenImage()[31]End' toolbtnOpen_Click()[32][33]PublicSubtoolbtnFTP_Click()[34]FTPStartStop()[35]End' toolbtnFTP_Click()[36][37]PublicSubtoolbtnConfiguration_Click()[38]ToolBar1.Configure()[39]End' toolbtnConfiguration_Click()[40][41]PublicSubtoolbtnClose_Click()[42]FMain.Close[43]End' toolbtnClose_Click()[44][45]PublicSubForm_Close()[46]FHelp.Close[47]FMain.Close[48]End' Form_Close()[49][50]'**************************************************************************[51][52]PrivateSubOpenImage()[53]Dialog.Title="Import a picture file!"[54]Dialog.Filter=["*.png","Picture Files"][55][56]IfDialog.OpenFile(False)=TrueThen' Multiselect=False (Standard)[57]Message.Info("The opening of the image file was cancelled!")[58]Return' Cancel button pressed[59]Else[60]TryPictureBox1.Picture=Picture.Load(Dialog.Path)[61]IfErrorThen[62]Message.Error("Error when opening the image file")[63]Else[64]Label1.Alignment=Align.Left[65]Label1.Text=" File: "&File.Name(Dialog.Path)[66]Endif' ERROR ?[67]Endif' Dialog.OpenFile(...) = TRUE ?[68]End' OpenImage()[69][70]PrivateSubFTPStartStop()[71]IftoolbtnFTP.Value=TrueThen[72]toolbtnFTP.Picture=Picture["icon:/16/disconnect"][73]toolbtnFTP.Tooltip="Launch FTP-Server"[74]' FTP-Server ---> Execute start command[75]Else[76]toolbtnFTP.Picture=Picture["icon:/16/connect"][77]toolbtnFTP.Tooltip="Stop FTP-Server"[78]' FTP-Server ---> Execute stop command[79]Endif' toolbtnFTP.Value = True ?[80]End' FTPStartStop()[81][82]PublicSubToolBar1_Configure()[83]FMain.Background=Color.Red[84]Wait0.05[85]FMain.Background=Color.ButtonBackground[86]End' ToolBar1_Configure()
```

Comments:


# 12.3.2.7 Configuration of the ToolBar

You start the configuration dialogue for configuring the ToolBar either via the 4th ToolButton (call the procedure ToolButton.Configure() ) or via the context menu of the ToolBar:


```
Public Sub toolbtnConfiguration_Click()
  ToolBar1.Configure()
End ' toolbtnConfiguration_Click()
```

In the context menu there are 3 entries - Set up, Icon size (3 possibilities: small, medium, large) and Cancel. The ToolBar1_Configure() event is triggered via the context menu!
Figure 12.3.2.7.1: Context menu of the ToolBar
Both variants open a dialogue for the configuration of a ToolBar. When the configuration dialogue has been opened, the ToolBar is in configuration mode. In this mode the ToolBar is deactivated. You can
Figure 12.3.2.7.2: Deactivated ToolBar and Configuration Dialogue
After the changes, exit the configuration dialogue via the 'Close' button. The toolbar changes configuration mode and is usable again.After changing the geometry of the ToolBar configuration dialogue window, you will find the following entry in the configuration file ~/.config/gambas3/ToolBar.conf:


```
[gb.form.mdi/FToolbarConfig]
Geometry=[1042,337,592,329,0]
```

or after configuring the ToolBar with these settings, an extended entry:


```
[gb.form.mdi/FToolbarConfig]
Geometry=[1042,337,592,329,0]

[gb.form.mdi/Toolbars/Emma]
Layout=["A1","|","A2","|","A3","|","A4","-","$mnubtnHelp","-","A5"]
```

Figure 12.3.2.7.3: Configured ToolBar
A “Reset” in the dialogue means that the ToolBar properties, except for the icon size, are reset to the start settings after a confirmation prompt → Figure 12.3.2.5.1.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.3.3 Action

The two classes Action (gb.qt4) and Action (gb.form.mdi) allow you to manage the actions that you can define in the Action property of many components. The Action (gb.qt4) class behaves like a ReadOnly array. With the help of the Action (gb.qt4) class, you can then synchronously access all these controls thus distinguished. The following components have the 'Action' property:
Button, ButtonBox, CheckBox, ColorButton, ColorChooser, ColumnView, ComboBox, Container, Control, DateBox, DateChooser, Dial, DirChooser, DirView, Drag, DrawingArea, Editor, Embedder, Expander, FMain, FileChooser, FileProperties, FileView, FontChooser, Form, Frame, GridView, HBox, HPanel, HSplit, IconPanel, IconView, ImageView, LCDLabel, LCDNumber, Label, ListBox, ListContainer, ListView, MaskBox, Menu, MenuButton, MovieBox, Panel, PictureBox, ProgressBar, RadioButton, ScrollArea, ScrollBar, ScrollView, Separator, SidePanel, Slider, SliderBox, SpinBox, TabPanel, TabStrip, TableView, TextArea, TextBox, TextEdit, TextLabel, ToggleButton, ToolButton, ToolPanel, TreeView, UserContainer, UserControl, VBox, VPanel, VSplit, ValueBox, Window, Wizard, _IconPanelContainer, _Split, _TabPanelContainer, _TreeView, _WizardContainer.
Example:
A ToolButtonS (on a toolbar) and a menu item are both intended to save a file. Both components would therefore be assigned as an action string in the IDE, for example “SaveFile”, in order to synchronise their actions. Only if the opened file was modified, then the save function should be activated, which was switched off for both components when the file was opened. Both the corresponding ToolButtonS and the associated menu item are still visible - but greyed out! Here are the two matching source code excerpts:


```
Action["SaveFile"].Enabled = False 	' Save for ToolButton and deactivate menu item
Action["SaveFile"].Enabled = True 	' Save for ToolButton and activate menu item
```

It has proven advantageous to assign the Action property to the corresponding components and menu items directly in the IDE, because you can only call up both the dialogue for defining ShortCuts by the user and read out the list of all actions if you use the Action class (gb.form.mdi). If you want to do without this, then define the actions for selected components in the source code as follows as an example:


```
mnu12SaveFile.Action = "SaveFile"
toolbSaveFile.Action = "SaveFile"
```

In the hidden project folder .action is the Gambas action file formularname.action, which contains, for example, information about the name of the action (action string), the text to be displayed or the set ShortCut:


```
# Gambas Action File 3.0

{ Actions
  { Action SaveFile
    Text = "Save"
    Shortcut = "CTRL+S"
    Picture = "icon:/16/save"
  }
  { Action HelpMe
    Text = "Program help"
    Shortcut = "F1"
    Picture = "icon:/16/help"
  }
  ...
}
```



# 12.3.3.1 Properties of the Action (gb.qt4) class

The properties of the Action (gb.qt4) class are given in the following table:
Table 12.3.3.1.1: Action Properties (gb.qt4)
Please note that you can only set the properties that exist for all associated components.


```
mnu15Print.Action = "PrintImage"
toolbPrintImage.Action = "PrintImage"
...
Action["PrintImage"].ToolTip = "Print image file"
```

The last statement, for example, generates an error and the error message also gives the reason: Unknown symbol 'ToolTip' in class 'Menu' in FMain:31; property does not exist in class Menu.
The effect of the Action.Value property depends on the component in question:


# 12.3.3.2 The Action_Activate event handler

To know when an action is triggered, you must define the event handler “Action_Activate” in the form. This event handler takes a string as an argument that denotes the action that is triggered.


```
PublicSubAction_Activate(sActionStringAsString)AsBooleanSelectCasesActionStringCase"ImageOpen"ImageOpenCase"HelpMe"FHelp.ShowCase"PrintFile"' Procedure for printing the edited fileCase"FormClose"FHelp.CloseFMain.CloseEndSelect' sActionStringEnd' Action_Activate(..)
```



# 12.3.3.3 Properties and methods Class Action (gb.form.mdi)

The Action (gb.form.mdi) class has only one property and one method:


# 12.3.3.4 Project

In many programmes it is possible to extend the interactive user guidance via a menu bar by a toolbar. The toolbar provides DeepL access to the most important sub-programs of the application programme.
The use of a toolbar next to a menu is based on the idea that the selection of a certain menu item causes the same (partial) programme call as a mouse click on the corresponding tool button. The linking of individual menus and their function with the selected tool button is of decisive importance for the desired effect. In the project, the Action class is used for synchronisation between the menu and the associated ToolButton on a toolbar. For the project with the very manageable menu bar and the few ToolButtons in the toolbar, this is not absolutely necessary, but it focuses all programme calls triggered by the menu and ToolButton in one procedure! This is an advantage you will appreciate if you want to use a menu bar with many menus and submenus and a toolbar in an extensive menu structure.
To implement the idea, it is useful to enter all menus and (tool) buttons in a table, define suitable identifiers and specify the associated components:
Table 12.3.3.4.1: Entries in the menu editor (S → Synchronisation, FT → Function key)
In the project presented, the menu - as a compilation of many menus - is created and configured with the menu editor according to the specifications in Table 20.6.4.1:
Illustration 12.3.3.4.1: Menu Editor (detail)
For 5 menus, the appropriate action string from table 20.6.4.1 is entered under the 'Action' property and the qualified values for the 'Visible' and 'Enabled' properties are set.For the 5 associated components (ToolButton), the action strings from table 20.6.4.1 are also entered in the IDE at development time. It is only important that the identifiers for the action property for the associated menus and ToolButton are the same!
The ToolBar component is used as a container for the horizontal toolbar in which 6 ToolButtons are placed next to each other. At development time, the 5 associated components are assigned the same icons (16px) from the Gambas inventory (so that the ToolButton can be recognised) and the menus in the editor none! Apart from the height (32px) and a width of the toolbar that matches the form, no other properties are changed. The arrangement of the 5/6 tool buttons is done automatically at runtime with a fixed distance to each other:
Figure 12.3.3.4.2: Menu and toolbar
The source code is given in full and commented on in essential parts:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4][5]FMain.Center[6]FMain.Resizable=False[7][8]FMain.Text="Synchronisation menu and toolbar"[9]PictureBox1.Border=Border.Sunken[10]PictureBox1.Picture=Picture["blume.jpg"][11]lblPictureFileName.Text="Flowers in Allgäu - Eyebright"[12][13]Action["OpenImage"].Enabled=True[14]Action["OpenImage"].Picture=Picture["icon:/16/open"][15]Action["OpenImage"].Shortcut="Ctrl+O"[16]Action["OpenImage"].Visible=True[17][18]Action["PrintImage"].Enabled=True[19]Action["PrintImage"].Picture=Picture["icon:/16/print"][20]Action["PrintImage"].Shortcut="Ctrl+P"[21]Action["PrintImage"].Visible=False' (!)[22][23]Action["CloseForm"].Enabled=True[24]Action["CloseForm"].Picture=Picture["icon:/16/quit"][25]Action["CloseForm"].Shortcut="Ctrl+Q"[26]Action["CloseForm"].Visible=True[27]Action["CloseForm"].Text=" End"[28][29]Action["ConfigAction"].Enabled=True[30]Action["ConfigAction"].Picture=Picture["icon:/16/access"][31]Action["ConfigAction"].Shortcut="F6"[32]Action["ConfigAction"].Visible=True[33][34]Action["HelpMe"].Enabled=True[35]Action["HelpMe"].Picture=Picture["icon:/16/help"][36]Action["HelpMe"].Shortcut="F1"[37]Action["HelpMe"].Visible=True[38][39]tbSyncList.Tooltip="List of"&gb.NewLine&"Synchronised components"[40][41]End' Form_Open()[42][43]PublicSubAction_Activate(sActionStringAsString)AsBoolean[44][45]SelectCasesActionString[46]Case"OpenImage"[47]OpenImage[48]Case"PrintImage"[49]PrintImage[50]Action["PrintImage"].Enabled=False[51]Case"CloseForm"[52]Form_Close()[53]Case"ConfigAction"[54]Action.Configure[55]Case"HelpMe"[56]FHelp.Show[57]EndSelect' sActionString[58][59]End' Action_Activate(..)[60][61]PublicSubOpenImage()[62][63]Dialog.Title="Import an image file!"[64]Dialog.Filter=["*.png","Image file"][65][66]IfDialog.OpenFile(False)=TrueThen' Multiselect=False (Standard)[67]Message.Info("The opening of the image file was cancelled!")[68]Return' Cancel button pressed[69]Else[70]TryPictureBox1.Picture=Picture.Load(Dialog.Path)[71]IfErrorThen[72]Message.Error("Error opening the picture file.")[73]Return[74]Else[75]lblPictureFileName.Alignment=Align.Left[76]lblPictureFileName.Text="File name: "&File.Name(Dialog.Path)[77]Action["PrintImage"].Visible=True[78]Action["PrintImage"].Enabled=True[79]Endif' ERROR ?[80]Endif' Dialog.OpenFile ?[81][82]End' OpenImage()[83][84]PublicSubPrintImage()[85]Message.Info("Insert print routine here!\nThe image is printed.")[86]End' PrintImage()[87][88]' Note: The menu name is also the identifier for the event handler.[89]PublicSubmnu32HelpNet_Click()[90]Desktop.Open("http://www.gambas-buch.de/dw/doku.php?id=k20:k20.6:start")[91]End' mnu32HelpNet_Click()[92][93]PublicSubmnu22ListAction_Click()[94]DimiCountAsInteger[95]DimsMessage, sTrennLinie, sSpace, sSpace2AsString[96][97]sTrennLinie="-----------------------"[98]sSpace="   »   "[99]sSpace2="   *   "[100]sMessage=sTrennLinie&sTrennLinie&gb.NewLine[101]sMessage&="Liste aller Action-Strings"&gb.NewLine[102]sMessage&=sTrennLinie&sTrennLinie&gb.NewLine&gb.NewLine[103][104]ForiCount=1ToAction.List.Count[105]IfAction.List[iCount-1]Like"[A-Z]*"Then[106]sMessage&=iCount&sSpace&Action.List[iCount-1]&gb.NewLine[107]Else[108]sMessage&=iCount&sspace2&Action.List[iCount-1]&gb.NewLine[109]Endif' Action.List[iCount - 1] Like "[A-Z]*" ?[110]Next' iCount[111][112]Message.Title=gb.tab[113]Message.Info(sMessage)[114][115]End' mnu22ListAction_Click()[116][117]PublicSubtbSyncList_Click()[118]DimiCount, kAsInteger=1[119]DimsActionString, sMessage, sTrennLinie, sSpaceAsString[120][121]sTrennLinie="--------------------------------"[122]sSpace="              » "[123]sMessage=sTrennLinie&sTrennLinie&gb.NewLine[124]sMessage&="List of synchronised components"&gb.NewLine[125]sMessage&=sTrennLinie&sTrennLinie&gb.NewLine&gb.NewLine[126][127]ForEachsActionStringInAction.List[128]IfAction[sActionString].Controls.Count>=2Then[129]Fork=0ToAction[sActionString].Controls.Max[130]Ifk=0ThensMessage&="Action = "&sActionString&gb.NewLine[131]sMessage&=sSpace&Action[sActionString].Controls[k].Name&gb.NewLine[132]Next' k[133]Endif' Action[sActionString].Controls.Count >= 2 ?[134]Next' sActionString[135][136]Message.Title=gb.Tab[137]Message.Info(sMessage)[138][139]End' tbSyncList_Click()[140][141]PublicSubForm_Close()[142]FHelp.Close[143]FMain.Close[144]End' Form_Close()
```

Comments:
Lines 13 to 37 set selected action properties for the 5 associated components.Lines 43 to 57 carry the specifications in the event handler “Action_Activate”.The de-activation of the print function can be found in line 50 if the printing of the image was successful. In lines 18 and 21 this function was de-activated at the start of the programme.After loading an image it could be printed. Therefore, the print function is activated in lines 77 and 78.In lines 104 to 110, all action strings are read out and prepared for display. Since all self-defined action strings begin with a capital letter - in contrast to those pre-defined by Gambas - they receive a “-character.
Figure 12.3.3.4.3: List of all action strings
The preparation of the compilation of all associated components in lines 127 to 134 is somewhat more extensive, as only those components are included in the compilation that contain at least 2 associated components. The action string 'SynchronList' exists only once - for the component tbSyncList (→ Figure 20.6.4.3 and project MenuAction) and therefore the component tbSyncList is missing in Figure 20.6.4.4.
Figure 12.3.3.4.4: List of all associated components.
Here you see a source code snippet for a (partial) synchronisation of menu item “Open…” and ToolButton tbOpen that you would have to use if you do not use the Action class:


```
PublicSubmnu11OpenImage_Click()ImageOpen()mnu13PrintImage.Enabled=TruetbPrint.Enabled=TrueEnd' mnu11OpenImage_Click()PublicSubtbOpen_Click()ImageOpen()mnu13PrintImage.Enabled=TruetbPrint.Enabled=TrueEnd' tbOpen_Click()
```

In contrast, the corresponding source code with the same effect in lines 48 and 50 in the procedure Action_Activate(sActionString As String) looks more than modest.
Regardless of the chosen procedure for synchronising the menu and ToolButton in the ToolBar, you must programme all procedures to give the programme the desired functionality. At the start of the programme you will find only 5 ToolButtons on the toolbar because the print function has been deactivated. You will find the corresponding ToolButton in the toolbar after successfully opening an image file:
Figure 12.3.3.4.5: Toolbars at runtime
You can trigger the configuration of the ShortCuts with F6, by clicking on the corresponding menu item or ToolButton:
Figure 12.3.3.4.6: Configuration of short commands


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.4.0 Dialogues

Gambas provides you with two dialogue classes from two different components with which you can call dialogue boxes and further use their return values in the program.
Figure 12.4.0.1: Dialogue box 'Open file' (gb.qt4)


# 12.4.0.1 Dialogue (gb.qt4)

The class has these properties:
The Dialog class (gb.qt4) contains static methods for calling standard dialogue boxes from the QT4 toolkit:
A 'default dialogue box' is always the dialogue box specified by the toolkit currently in use.


# 12.4.0.2 Dialog (gb.form.dialog)

The extended standard dialogues class contains methods for calling the gambas-specific dialogue boxes. This class is static. The class extends the Dialog class in gb.qt4.
The Dialog class has the following properties:
The class has these methods:


# 12.4.0.3 Note

As long as the specification of the following two dialogue properties from the Dialogue class (gb.form.dialog) is dispensable in your projects and you call the 'DateChooser' control directly instead of the 'SelectDate' method and and you want the appearance of the standard dialogues to be specified by the toolkit, then you can dispense with the use of thegb.form.dialogcomponent:
The dialogues ingb.form.dialogare written in Gambas. Thus their appearance isindependentof the toolkit used.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.4.1 Dialogue class (gb.form.dialog)

The component defines extended versions of the standard dialogues, based on the standard dialogues defined in the gb.qt4 component for calling dialogue boxes. This chapter introduces properties and methods of the Dialog class (gb.form.dialog) and supplements them with examples.


# 12.4.1.1 Properties

The Dialog (gb.form.dialog) class has these properties:
Table 12.4.1.1 : Properties of the class Dialog (gb.form.dialog)


# 12.4.1.2 Methods

Class Dialog (gb.form.dialog) has the following methods. Note optional arguments.
Table 12.4.1.2.1 : Methods of the class Dialog (gb.form.dialog)


# 12.4.1.3 Examples

In order to be able to follow all the examples, you will find a project archive in the download area. For this reason, the complete source text is not included here. Only source code excerpts are presented in which important passages are highlighted in colour and the results achieved are displayed.
Example 1 - Dialog.SelectDirectory()
In the first example, a (existing) directory is selected:


```
PublicSubbtnSelectDirectory_Click()Dialog.Title="Select an image directory ..."Dialog.Path=Application.PathIfDialog.SelectDirectory()ThenReturnsImageDirectoryPath=Dialog.PathbtnOpenFileImage.Enabled=TrueEnd' btnSetFont_Click()
```

Figure 12.4.1.3.1: Directory selection dialogue box
Example 2 - Dialog.Openfile(..) - Image files.
Exactly one specific (image) file is to be selected from the directory selected in the first example - the optional argument has the value False (default). In addition to the file filter, it is specified that hidden files are not displayed:


```
PublicSubbtnOpenFileImage_Click()Dialog.Title="Select an image file ..."' Dialog.Filter = ["*.jpg", "JPG image file", "*.png", "PNG image file", "*", "All files"]' Dialog.Filter = ["*.png;*.jpg;*.jpeg;*.gif", "Image Files", "*", "All Files"]Dialog.ShowHidden=FalseIfNotsImageDirectoryPathThenDialog.Path=Application.Path&/"Images"IfDialog.Openfile(False)ThenReturn' Select exactly 1 file (False -> Multiselect switched off)sImagePath=Dialog.Path' Secure PathPictureBoxD.Picture=Picture.Load(Dialog.Path)FMain.Text="The image file is processed:  "&File.Name(Dialog.Path)btnOpenFileText.Enabled=TrueCatchMessage.Info(Error.Text)End' btnOpenFileImage_Click()
```

Figure 12.4.1.3.2: File Open dialogue box - 1
The first filter is not used, but the activated one as a compact filter list. With the first filter, the individual filters are displayed one below the other in the combo box.
Example 3 - Dialog.Openfile(..) - Text Files
Exactly one text file with the extension txt is selected. In this project, the individual lines have a specific format.


```
PublicSubbtnOpenFileText_Click()DimiAsIntegerDimaTextArray, aImagetextAsString[]Dialog.Title="Select an image description file ..."Dialog.Filter=["*.txt","Text Files","*","All Files"]Dialog.Path=Application.Path&/"Images"IfDialog.OpenFile(False)ThenReturn' Select exactly 1 file (False -> Multiselect switched off)aTextArray=Split(File.Load(Dialog.Path), gb.NewLine)' Each text line is an element in the arrayaImageText=NewString[2]' Create another array with 2 elementsFori=0To1' Only the first two lines are split at the separator ':' and the 2nd part is stored in each caseaImagetext[i]=Split(aTextArray[i],":")[1]NextlblImagetext1.Text=Trim(aImagetext[0])lblImageText2.Text=Trim(aImageText[1])btnSelectFont.Enabled=TrueCatchMessage.Info(Error.Text)End' btnOpenFileText_Click()
```

This is what the first lines in the text file look like:


```
Image title: Flora of the Alps
Image title2: Eyebright(Euphrasia minima)- Allgäu -2012Camera model: COOLPIX L22
Name: image1.jpg
Width:510Pixel
Height:294Pixel
Type: JPEG image
Bytes:42.6kB
Aperture value: f/5.5...
```

Figure 12.4.1.3.3: File open dialogue box - 2
Example 4 - Dialog.SelectFont().
In addition to the title of the dialogue box, the font of a particular label control is also set as the default font. In addition, it is agreed that all existing fonts are available for selection and not only the non-proportional fonts are displayed. You can also do without this agreement, as the default is 'Dialog.FixedOnly = False'.
Figure 12.4.1.3.4: Font dialogue box


```
PublicSubbtnSelectFont_Click()Dialog.Title="Select a font ..."Dialog.Font=lblImageText1.FontDialog.FixedOnly=FalseIfDialog.SelectFont()ThenReturnlblImageText1.Font=Dialog.FontlblImageText1.Font.Size=0.7*Dialog.Font.SizelblImageText2.Font=Dialog.FontlblImageText2.Font.Size=0.7*0.8*Dialog.Font.SizeLblImageText2.Font.Bold=FalsehFont=Dialog.Font' Save current fontlblImageText2.Tooltip=lblImageText2.TextbtnSelectColor.Enabled=TrueEnd' btnSelectFont_Click()
```

Example 5 - Dialog.SelectColor().
To add colour to the game, you can call the Colour dialogue. In addition to the dialogue title, the colour white is declared as the default colour.


```
PublicSubbtnSelectColor_Click()Dialog.Title="Select a colour ..."Dialog.Color=Color.WhiteIfDialog.SelectColor()ThenReturnlblImageText1.Foreground=Dialog.ColorlblImageText2.Foreground=Color.WhitehColor=Dialog.Color' Save current colourbtnPreview.Enabled=TrueEnd' btnSelectColor_Click()
```

Figure 12.4.1.3.5: Colour dialogue box
Example 6 - Dialog.SaveFile().
In addition to setting the dialogue box title, default path and file filter, the Dialog.AutoExt property, which is only present in the SaveFile dialogue, is also set to True. This has the effect that you can enter the file name of the file to be saved without an extension; this is added automatically → Figure 12.4.1.3.6 bottom left.
Figure 12.4.1.3.6: File Save dialogue box.


```
PublicSubbtnSaveFileImage_Click()Dialog.Title="Save the changed image ..."Dialog.Filter=["*.png","PNG image file","*","All files"]Dialog.Path=Application.Path&/"Results/"Dialog.AutoExt=TrueIfDialog.SaveFile()ThenReturn' File.Save(Dialog.Path, PictureBoxD.Picture) ' Not allowed - only strings are saved!PictureBoxD.Picture.Save(Dialog.Path,100)' hImage.Save(Dialog.Path, 100) ' → AlternativeGetReset()CatchMessage.Info(Error.Text)End' btnSaveFileImage_Click()
```

Example 7 - Dialog.Date().
This dialogue for selecting a date is special in that it calls the DateChooser that exists in the gb.form component. You can again specify the dialogue title and a date; in the example set to the current date:


```
PublicSubbtnSelectDate_Click()Dialog.Title="Select a date ..."Dialog.Date=Now()IfDialog.SelectDate()ThenReturndDate=Dialog.Date' Save selected date' Print Format(dDate, "dddd - dd. mmmm yyyy")End' btnSelectDate_Click()
```

Figure 12.4.1.3.7: Dialogue → DateChooser
The source codes used above were taken from a project that is available in the download section for your own experiments:
Figure 12.4.1.3.8: Programme interface


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.4.2 Class Dialogue (gb.qt4)

The component provides standard dialogues for calling dialogue boxes. In this chapter, properties and methods of the class Dialog (gb.qt4) are presented. Examples and a project complete the description.


# 12.4.2.1 Properties

The Dialog (gb.qt4) class has these properties:
Table 12.4.2.1.1 : Properties of the Dialog class (gb.qt4)


# 12.4.2.2 Methods

Class Dialog (gb.qt4) has the following methods. Note optional arguments.
Table 12.4.2.2.1 : Methods of the class Dialog (gb.qt4)


# 12.4.2.3 Examples

In order to be able to reproduce all the examples, you will find a project archive in the download area. Since this project is based on the project presented in chapter → 12.4.1 Class Dialogue (gb.form.dialog) and only the component gb.form.dialog has been omitted, only the dialogue boxes and the program interface are presented.
12.4.2.4 Dialog.SelectDirectory()
Figure 12.4.2.4.1: Directory select dialogue box.


# 12.4.2.5 Dialog.Openfile(..) - image files

Figure 12.4.2.5.1: File Open dialogue box - 1


# 12.4.2.6 Dialog.Openfile(..) - text files

Figure 12.4.2.6.1: File Open dialogue box - 2


# 12.4.2.7 Dialog.SelectFont()

Figure 12.4.2.7.1: Font dialogue box


# 12.4.2.8 Dialog.SelectColor()

Figure 12.4.2.8.1: Colour dialogue box


# 12.4.2.9 Dialog.SaveFile()

Figure 12.4.2.9.1: File Save dialogue box.


# 12.4.2.10 Programme interface

Here you can see the programme interface for the project:
Figure 12.4.2.10.1: Programme interface


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.4.3 Class Dialog - Multiple Selection

The OpenFile( [ Multi ] ) method has an optional argument 'Multi' of data type 'Boolean'. If the argument 'Multi' has the value True, the user can select multiple files. The method itself returns True if the user pressed the Cancel button or False if the user pressed the OK button. In this case, the paths of the selected files are stored in a string array in the Dialog.Paths property.
In the following project, the multiple selection (MultiSelect) is used to select several image files from a directory. The selected images are then displayed in an image viewer. A simple navigation is provided.
Figure 12.4.3.1: Picture Viewer (GUI)
Pressing the button 'Select images' starts the file selection dialogue and opens the following dialogue box:
Figure 12.4.3.2: File open dialogue box (multi-select)
You can then navigate through the image list - in the example this contains 5 images:
Figure 12.4.3.3: Image viewer
If you close the opened dialogue box via 'Cancel', the file list remains empty, because the propertyDialog.Pathsthen has the value zero.
Figure 12.4.3.4: Dialogue box is cancelled
Only a source code excerpt is displayed and provided with supplementary comments:


```
[1]PublicSubbtnOpenFileImage_Click()[2]DimsMessage1, sMessage2AsString[3][4]SetEnabled()[5]Dialog.Title="Select Picture Files (Picture List)..."[6]' Dialog.Filter = ["*.jpg", "JPG image file", "*.png", "PNG image file", "*", "All files"][7]Dialog.Filter=["*.png;*.jpg;*.jpeg;*.gif","Image Files","*","All Files"][8]Dialog.ShowHidden=False[9]Dialog.Path=Application.Path&/"Images"[10][11]' Select picture (True -> Multiselect aktiviert)[12]IfDialog.Openfile(True)Then[13]FMain.Text="Dialog.OpenFile(True) with Multi-Select"[14]PictureBoxD.Picture=Picture["Symbols/intro.jpg"][15]Return[16]Endif[17][18]sImagePaths=NewString[]' New image list[19]sImagePaths=Dialog.Paths' Save image list → Navigation[20]iPictureIndex=0[21][22]' For control:[23]' For Each sPathName In Dialog.Paths[24]'   Print sPathName[25]' Next[26][27]PictureBoxD.Picture=Picture.Load(Dialog.Paths[0])' Display of the first image[28][29]sMessage1="The image list contains exactly "&Dialog.Paths.Count&" image".[30]sMessage2="The picture list contains "&Dialog.Paths.Count&" Pictures"[31]FMain.Text=IIf(Dialog.Paths.Count=1, sMessage1, sMessage2)[32][33]' Switch on image navigation if the image list contains more than one image.[34]IfDialog.Paths.Count>1Then[35]btnNext.Enabled=True[36]Else[37]btnNext.Enabled=False[38]Endif[39][40]Catch[41]Message.Info(Error.Text)[42]End' btnOpenFileImage_Click()
```

Comment:
The complete source code can be found in the download area in the project archive.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.4.4 Custom Dialogues

Adialogallows the selection, entry or modification of data required by a (main) program at program start-up or run-time. The terms dialogue, dialogue box and dialogue window are used synonymously. A dialogue is realised as part of the graphical user interface - as you have become acquainted with in Chapters 12.4.0 to 12.4.2 with the standard dialogues. A dialogue is almost always called modally from the (main) program. This has the effect that the (main) program pauses while selections are made or data is edited interactively in the dialogue window. Alternatively, the edited data is then accepted or the dialogue is cancelled - in both cases the dialogue window is closed. The examples and projects presented in the above chapters have shown that using the standard dialogues in Gambas is simple and convenient.
For special tasks outside the field of application of standard dialogues, Gambas offers tried and tested concepts for developing your own dialogues. It is precisely these concepts and their implementation that this chapter is dedicated to.
For a simple Internet radio client (GUIfor the console program mplayer), for example, there was a requirement to maintain a list of stations (URLand station name) at program runtime. A dialogue → Figure 12.4.4.1 should be developed with which new stations can be added to the list or existing stations can be changed or deleted individually. In addition, it should be possible to move individual stations in the list or to delete the station list completely. On the one hand, the changed station list should be taken over as a new station list or, on the other hand, the dialogue should be cancelled at any time and changes already made to the station list discarded.
Figure 12.4.4.1: Dialogue window
In the figure → '12.4.4.1 Dialogue box' you can see that the data in the transmitter list can be edited in a variety of ways and that the two buttons typical of a dialogue box are present for cancelling the dialogue and accepting the edited data.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.5 Embedder (gb.qt4)

The Embedder (gb.qt4) class provides a control element that can be used to embed X11 windows from another X11 application into a Gambas window. The Embedder class is considered obsolete with gb.qt5 and should not be used any further! You can read notes on the background by following these links:


```
http://gambas.8142.n7.nabble.com/Embedder-depricated-in-gb-qt5-td52992.html
http://www.mail-archive.com/gambas-user@lists.sourceforge.net/msg20712.html
```

The impressive possibilities of the Embedder class are to be demonstrated in a project in → Section 12.5.4, where you start another programme from a Gambas programme and embed its window in the Gambas programme. For example, if you embed the window of the editor LibreOffice-Writer, you can write or edit a text in the embedded window of LibreOffice-Writer, save the text and convert it to PDF format.
The following picture shows a Gambas programme with the embedded window of the programme 'GnuPlot', which has been given a script file with GnuPlot commands as an argument:
Figure 12.5.1: Program 'GnuPlot' - embedded in a Gambas program


# 12.5.1 Properties

Only essential properties of the Embedder class are described:
Table 12.5.1.1 : Properties of the Embedder class


# 12.5.2 Methods

The Embedder class has these methods, among others:
Table 12.5.2.1 : Selected methods of the Embedder class.


# 12.5.3 Events

From the Embedder class, you will mainly use these events:
Table 12.5.3.1 : Methods of the Embedder class


# 12.5.4 Project

You should follow these notes:
Here you can see an excerpt from the source code:


```
[1]…[2]PublicSubbtnEmbed_Click()[3]DimsPatternAsString[4]DimiX11IdAsInteger[5]DimDTWindowAsDesktopWindow[6]DimaX11ListAsNewInteger[][7]…[8]' Version with predefined URL[9]sPattern="*Firefox*"[10]hProcess=Shell"firefox http://www.gambas-buch.de/dw/doku.php"ForReadAs"hProcess"[11]…[12]WaitfWaitPeriod[13][14]Desktop.Windows.Refresh' Updates the list of all top-level windows[15]ForEachDTWindowInDesktop.Windows[16]IfDTWindow.VisibleNameLIKEsPatternThen[17]aX11List.Add(DTWindow.Id)[18]Endif[19]Next[20][21]TryiX11Id=aX11List[aX11List.Max][22]TryembX11.Embed(iX11Id)[23]IfErrorThenMessage.Warning(Error.Text)[24][25]End' btnEmbed_Click()[26]…
```

Line 9 defines the search pattern, while line 10 starts the program whose window is to be embedded in the Gambas program. Of course, you can also give this programme suitable parameters, for example, to allow a specific web page to be displayed immediately in the Firefox web browser. However, this only works without errors if there is no other Firefox window or if the following is set in the Firefox settings:
Figure 12.5.4.1: Firefox window in the Gambas project programme
When testing the project, these notes may help you:
Figure 12.5.4.2: Gambas program window - embedded in the Gambas project program.
Here you can see the list of tested programmes whose windows could be successfully embedded in the Gambas programme.


```
sPattern = "*VLC*"
hProcess = Shell "vlc" For Read As "hProcess"

sPattern = "*Bluefish*"
hProcess = Shell "bluefish" For Read As "hProcess"

sPattern = "*Document*"
hProcess = Shell "abiword" For Read As "hProcess"

' General version
sPattern = "*Firefox*"
hProcess = Shell "firefox" For Read As "hProcess"

' Version with predefined URL
sPattern = "*Firefox*"
hProcess = Shell "firefox http://www.gambas-buch.de/dw/doku.php" For Read As "hProcess"

sPattern = "hans@linux: ~"
hProcess = Shell "gnome-terminal" For Read As "hProcess"

sPattern = "*Gambas 3*"
hProcess = Shell "gambas3" For Read As "hProcess"

sPattern = "*Image viewer*"
hProcess = Shell "gbr3 " & Application.Path &/ "GPE/gpe.gambas" For Read As "hProcess"

' General version
sPattern = "*Document*"
hProcess = Shell "evince --fullscreen"

' Version with predefined PDF-File
sPattern = "*k25.1.13.pdf*"
hProcess = Shell "evince --fullscreen " & Application.Path &/ "Text/k25.1.13.pdf" For Read As "hProcess"

' General version
sPattern = "*LibreOffice Writer*"
hProcess = Shell "soffice --writer --nologo"

' Version with predefined ODT-File
sPattern = "*LibreOffice Writer*"
hProcess = Shell "soffice --writer --nologo " & Application.Path &/ "Text/k25.1.13.odt" For Read As "hProcess"

sPattern = "*Gnuplot*"
hProcess = Shell "gnuplot -persist " & Application.Path &/ "GnuPlotScripts/start.plot" For Read As "hProcess"
```

In the programme tests by author Ingo Beckert, even this worked without errors - starting a Windows programme from a Gambas programme via the Wine runtime environment:


```
sPattern = "*Ole*"
hProcess = Shell "wine oleview" For Read As "hProcess"
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.6.0 Class TabStrip

The class TabStrip (gb.qt4) implements a tab control. The advantage of this control is to map several dialogues of a programme on individual tabs located one behind the other and to realise a fast navigation via the tabs tabs.
The next picture shows the compact programme interface for the administration of a server, where, for example, over 35 tabs were used in 13 tabs:
Figure 12.6.0.1: Programme for the administration of a school server


# 12.6.0.1 Properties

In the next section, only essential properties of the TabStrip (gb.qt4) class are presented:
Table 12.6.0.1.1 : Properties of the class TabStrip
Note that the properties in the upper part of the table always refer to the current tab!


# 12.6.0.2 Methods

Of the methods of the TabStrip class, only this one is interesting:


```
TabStrip.FindIndex (gb.qt4)
Function FindIndex (Child As Control) As Integer
```

Use this method to find the index of the specified control in a tab. If the control is not found, -1 is returned as the function value.


# 12.6.0.3 Events

The Close(Index As Integer) event of the TabStrip class is only raised when a particular tab is closed. This assumes that the TabStrip.Closable property has been set to the value 'True' (default is 'False'). The index of the tab card to be closed is passed as the argument.


# 12.6.0.4 .TabStripContainer

The virtual class.TabStripContainerrepresents a tab card in a TabStrip component (Register). You can use a TabStrip like an array to get an object of the class.TabStripContainer(i.e. a tab map) via its index. The class.TabStripContainerhas six properties and has only one method.
Table 12.6.0.4.1 : Properties of the virtual class .TabStripContainer
The Delete method deletes the current tab.


# 12.6.0.5 .TabStripContainer.Children

The virtual class .TabStripContainer.Children represents a collection of all components on a tab map. This class has only one property: Count, which returns the number of components on a tab card. However, bear in mind that, for example, in the case of a container component, only this container component is counted, but none of the components in the container!
You can iterate over all components on the tabs of a register and, for example, have the names of the components output. In Project1 of Chapter 12.6.1, this is exactly what is realised and provides this result → Figure 12.6.0.5.2 if, for example, a tab card is not visible in a register:
Figure 12.6.0.5.1: Tab 3 exists - but is not displayed
Figure 12.6.0.5.2: Display of selected tab properties.
Use this source code snippet to display selected register properties in a MessageBox or in the Gambas IDE console:


```
PublicSubbtnGetInformations_Click()Dimi, kAsIntegerDimhControlAsControlDimsMessageAsStringsMessage="<hr><b><font color='Red'>Tab-Properties</font></b><hr>"Fori=0ToTabStrip1.Count-1sMessage&="<font color='Blue'>Index = "&CStr(i)&"</font>"sMessage&="<br>Tab-Map-"&CStr(i+1)&"-labelling =  '"sMessage&=TabStrip1[i].Caption&"'"sMessage&="<br>Tab-Map-"&CStr(i+1)&"  activated? "&String.Chr(10230)sMessage&=IIf(TabStrip1[i].Enabled="T"," Yes"," No")sMessage&="<br>Tab-Map- "&String.Chr(10230)sMessage&=IIf(TabStrip1[i].Visible="T"," Yes"," No")sMessage&=" <br>Number of control elements on the "&CStr(i+1)sMessage&=". Tab-Map = "&CStr(TabStrip1[i].Children.Count)k=1ForEachhControlInTabStrip1[i].ChildrensMessage&="<br>"&CStr(k)&". Control item-Name = '"&hControl.Name&"' "InckNextsMessage&="<br><hr>"NextMessage.Info(sMessage)' Displaying the information in the console in the IDE' For i = 0 To TabStrip1.Count - 1'   Print "Index = "; i'   Print "Tab Map-"; i + 1; "-Label = "; "'"; TabStrip1[i].Caption; "'"' Print "Tab Map-"; i + 1; " activated? --> "; TabStrip1[i].Enabled' Print "Tab Map-"; i + 1; " visible?  --> "; TabStrip1[i].Visible' Print "Number of control elements on the "; i + 1; ". Tab Map = "; TabStrip1[i].Children.Count'   k = 1'   For Each hControl In TabStrip1[i].Children'     Print k; ". Control item-Name = "; "'"; hControl.Name; "'"'     Inc k'   Next'   Print' NextEnd' btnGetInformations_Click()
```

Note: If you have the mouse over a tab at runtime, you can use the mouse wheel to navigate through the individual tabs.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.6.1 TabStrip - Projects

In the development of the two projects presented - in which one or moreTabStrips (registers)are used - it has proved useful to specify already in the preliminary considerations
In the following paragraphs, the terms TabStrip and tab are used synonymously. If you are working with a tab strip for the first time, you need to know that some properties in the Properties window apply globally to the selected tab as a container component and others only to the selected tab card. When you drag a tab strip control in the IDE from the component tab in the 'Container' tab onto the form, you will initially only see one tab card with the label 'Tab0' for the tab tab. After you have set the required number of tabs in the properties window, the number of visible tabs also increases - whereby the additional tabs have no labels. At this point at the latest, you should save the project! If you now click on the first tab, the label 'Tab0' for the first tab disappears. Since the first tab is marked (→ marker at the top of the tab), you can now set its essential properties in the properties window:
After selecting more tabs, you can also change their properties, with the 'Form' toolbar changing in the following way when a tab is selected:
Figure 12.6.1.1: Toolbar 'Form' - Original
Figure 12.6.1.2: Modification of the toolbar 'Form' - navigation and button
If you then click on the button marked in red in → Figure 12.6.1.2, you can on the one hand see all the labels of the tabs and select the tab to be edited, which can otherwise also be done by clicking on a tab in the tab:
Figure 12.6.1.3: Tab tab caption menu
Alternatively, use the offered navigation through the tabs with the 4 new buttons → Figure 12.6.1.2. Start the programme and you will see a functional tab:
Figure 12.6.1.4: Registers
The next step is to implement the plannedfunctionalityby designing the individual register cards.


# 12.6.1.1 Project 1

The special feature of the first project is that a register with two register cards is created at development time, and the properties of the register and register cards have been set in the properties window and in the source code. At runtime, another register card can be inserted into the register (source code 1). This 3rd register card can then be shown and hidden and the properties of all three register cards can be read out.
Source text 1:


```
PublicSubbtnCreateNewTab_Click()IfTabStrip1.Count=2Then' Insert another tab cardIncTabStrip1.Count' Set essential properties of the tab cardTabStrip1[2].Caption="Gambas-Wiki"TabStrip1[2].Picture=Picture["icon:/16/connect"]TabStrip1[2].Enabled=TrueTabStrip1[2].Visible=True' Insert 2 control elements into the tab card (container)' 1st control element: WebViewhWebView=NewWebView(TabStrip1)As"hWebView
  ' WebView properties
    hWebView.Expand = True
  ' 2nd control element: HBox
    hhboxNavigation = New HBox(TabStrip1) As "hhboxNavigation
  PropertiesHBoxhhboxNavigation.Height=24hhboxNavigation.Spacing=True' Insert 2 control elements into the HBox (container)' 1st control element: TextBoxhtxtURL=NewTextBox(hhboxNavigation)As"htxtURL"' Properties TextBox(hhboxNavigation)' Properties TextBoxhtxtURL.Height=24htxtURL.Background=&HF5FFE6
    htxtURL.Expand=TruehtxtURL.Text="http://gambaswiki.org/wiki/comp/gb.qt4/tabstrip/findindex"' 2nd control element: button' 2. Control element: ButtonhbtnOpen=NewButton(hhboxNavigation)As"hbtnOpen"' Properties ButtonhbtnOpen.Height=24hbtnOpen.Width=32hbtnOpen.Picture=Picture["icon:/16/right"]' Tab map 'Gambas-Wiki' declared as current tab mapTabStrip1.Index=TabStrip1.Count-1htxtURL_Activate()' Display specified web page → htxtURL.TextEndifEnd' btnCreateNewTab_Click()PublicSubbtnChangeVisibility_Click()IfTabStrip1.Count>2ThenTabStrip1[2].Visible=NotTabStrip1[2].VisibleEnd' btnChangeVisibility_Click()PublicSubbtnGetInformations_Click()Dimi, kAsIntegerDimhControlAsControlDimsMessageAsStringsMessage="<hr><b><font color='Red'>Tab properties</font></b><hr>"Fori=0ToTabStrip1.Count-1sMessage&="<font color='Blue'>Index = "&CStr(i)&"</font>"sMessage&=" <br>Tab-Map-"&CStr(i+1)&"-Label = '"sMessage&=TabStrip1[i].Caption&"'"sMessage&=" <br>Tab Map-"&CStr(i+1)&" activated? "&String.Chr(10230)sMessage&=IIf(TabStrip1[i].Enabled="T"," Yes"," No")sMessage&=" <br>Tab Map-"&CStr(i+1)&" visible? "&String.Chr(10230)sMessage&=IIf(TabStrip1[i].Visible="T"," Yes"," No")sMessage&=" <br>Number of control elements on the "&CStr(i+1)sMessage&=". Tab-Map= "&CStr(TabStrip1[i].Children.Count)k=1ForEachhControlInTabStrip1[i].ChildrensMessage&="<br>"&CStr(k)&". Control items-Name = '"&hControl.Name&"' "InckNextsMessage&="<br><hr>"NextMessage.Info(sMessage)End' btnGetInformations_Click()
```

The following figure shows the generated 3rd tab map with an excerpt from the Gambas documentation on the TabStrip class (gb.qt4) in a WebView:
Figure 12.6.1.1: Tab Map 3


# 12.6.1.2 Project 2

The second project has another register with two register cards as a special feature on the first register card:
Figure 12.6.1.2.1: Use of two registers
The next source code snippet from the Form_Open() procedure refers to register 1 and the setting of the properties of register card 2 and the components placed on it:


```
' Tab 1 Map 1 - Editors ------------------------------' Tab 2 in Tab1 Map 1 ---------------------------TabStripEditors.Count=2' Both editors completely fill tabs 2.1 and 2.2 respectively.TabStripEditors.Arrangement=Arrange.FillTabStripEditors.Expand=True' Can be omitted because of Arrange.FillTabStripEditors.Margin=TrueTabStripEditors.Orientation=Align.BottomTabStripEditors[0].Text="TextArea"TabStripEditors[1].Text="Editor (Syntax highlighting Gambas)"hboxFileOpen.Spacing=TruepanSpace1.Expand=True' Tab-Map 2.1 - TextAreaTextArea1.Background=&HF5FFE6' Tab-Map 2.2 - Editor (gb.qt4.ext)Editor1.Highlight=Highlight.Gambas' Syntax highlighting for the Gambas language.Editor1.KeywordsUseUpperCase=True' Capitalisation of all (Gambas) key wordsEditor1.Flags[Editor1.ShowLineNumbers]=True' Display of line numbersEditor1.Flags[Editor1.ShowCurrentLine]=True' Highlight the current lineEditor1.Flags[Editor1.BlendedLimits]=True' Separation line between the individual procedures' Display of tab 2.2 (Editor)TabStripEditors.Index=1
```

As of Gambas 3.8.0, you should replace the editor with the TextEditor (gb.form.editor).


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.7 Class TabPanel (gb.form)

The TabPanel (gb.form) class implements a tab control. This control is a TabStrip replacement with a fine border around the tab tabs.
If you are working with the two controls TabStrip and TabPanel, the question quickly arises whether you should prefer a TabPanel to a TabStrip. The decision will be easier if you know the following facts:
Figure 12.7.1: TabStrip
Figure 12.7.2: TabPanel with TabPanel.Highlight = False


# 12.7.1 Properties

In the following next section, only the additional properties of the TabPanel (gb.form) class - compared to the TabStrip (gb.qt4) class - are presented:
Table 12.7.1.1 : Selected properties of the class TabPanel


# 12.7.2 Methods

The methods of the TabStrip class have been extended to include the TabPanel.Remove (gb.form) method:


```
Sub Remove (Index As Integer)
```

With this method you remove the tab panel with the specified index from the tab, provided that the tab panel does not contain any controls. Otherwise you will get the error message “TabPanel container is not empty”.


# 12.7.3 Project

The project presented is based on the TabStrip project in → Chapter 12.6.2. The two propertiesTabPanel.HighlightandTabPanel.Moveablewere additionally used. The source code can be read when testing the project because it is displayed in an editor at runtime. The following pictures give an impression of the layout of the 3 tab cards on the TabPanel.
Figure 12.7.3.1: Original arrangement of the tab cards with TabPanel.Highlight = True.
If you switch to the first tab panel, you will see a small section of the project source text. You can also see the changed arrangement of the tabs (below) for the 2nd tab with two tabs, where the propertyTabPanel.Highlightwas not set.
Figure 12.7.3.2: Displaying project source text in an editor
However, you can also view the source text legibly in a TextArea if you maximise the programme window:
Figure 12.7.3.3: Alternative display of project source text in an editor
Use the button at the bottom left to switch immediately to tab 3 (index = 2) and call up the arguments x and the function values f(x) there with the preset function and the specified argument interval and step size for the arguments in a value table. Note that internally a check is made for valid function values - but that is already out of the scope of TabPanel!
Figure 12.7.3.4: Value table
You can move the tab tab - and thus the tab card - with the text 'Colour selection' to the right, for example, by holding down the mouse button, because the property TabPanel.Moveable has been set to the value True, and you will then get this changed arrangement of the tab cards compared to the original → Figure 12.7.3.1:
Figure 12.7.3.5: Moving the 'Colour selection' tab to the right.
Hint:
The possibility of moving register cards at runtime must be responded to appropriately when switching to the register card with the value table → Figure 12.7.3.3, as its index then changes:


```
PublicSubbtnSwitchToTabWT_Click()DimiAsIntegerFori=0ToTabPanel1.Count-1IfTabPanel1[i].Text=WT_CAPTIONThen'  WT_CAPTION = "Table of values"TabPanel1.Index=iBreakEndifNextEnd' btnSwitchToTabWT_Click()
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.8.0 Wizard

In Gambas there is a classWizard (gb.form), which is amulti-containerthat provides a wizard-like interface. In computer science, a wizard is understood as an assistant that guides you through a (sufficiently) linear process in a finite number of steps - such as installing Gambas via SVN. The terms wizard and assistant are usedsynonymouslyin this chapter.
These dialogues in the Gambas IDE use a wizard:
Figure 12.8.0.1: Database Wizard
In the Gambas IDE, you will find the Wizard component under the 'Container' tab.
For the activation mode of the Wizard buttons in the navigation:
The 'OK' button as a button in the last step has by default no image and the label 'OK'. You can change this via the propertiesWizard.ActionPictureandWizard.ActionText→ Figure 12.8.0.1. If the 'Cancel' button is pressed, then the wizard will exit.


# 12.8.0.1 Properties

Only selected properties are described by the Wizard class:
Table 12.8.0.1.1 : Properties Class Wizard


# 12.8.0.2 Methods

Of the methods of the Wizard class, these two are particularly noteworthy:


```
Sub MoveNext( )
```

Goes to the next step of the wizard - as if the “Next” button has been clicked. You can then use this method when the current step has been fully processed.


```
Sub MovePrevious( )
```

Goes to the previous step of the wizard - as if the “Back” button was clicked. Use this method to respond if, for example, the current step requires certain data from the last step, or if the last step was incomplete or had errors.


# 12.8.0.3 Events

These four selected events give scope for shaping the programme flow, with the BeforeChange() method deserving special attention:
Table 12.8.0.3.1 : Overview of selected events of the class Wizard
The eventBeforeChange()makes it possible to carry out an evaluation of previous inputs and the further, targeted control of the wizard between two steps. For example, you could use Stop Event to cancel the change to another step after checking the data in the current step.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# Table of Contents



# 12.8.1 Wizard - Projects

The Wizard class is mainly used to realise a dialogue that consists of several steps, which can be cancelled if necessary, and which triggers a certain action in the final step with the OK button, which provides dialogue data. On the other hand, the Wizard component can also be used to navigate through a sequence of steps - without returning a result, as would be the case with a help wizard, for example.
In the development of the projects presented - in which the two use cases mentioned above are realised - the preliminary considerations referred to in the first part of chapter → 12.6.1 'TabStrip - Projects' have proven to be adequate.


# 12.8.1.1 Project 1

The first project is characterised by using a wizard for a dialogue. The dialogue is called by a database programme and provides it with an active DB connection as a result of a successful dialogue, or no DB connection if the dialogue was aborted or faulty.
Figure 12.8.1.1: Calling a dialogue (wizard) in the database programme
Source code extract from the database programme:


```
Private$hConnectionAsConnectionPublicSubForm_Open()FMain.CenterEnd' Form_Open()PublicSubmnuOpen_Click()DimhNewConnectionAsConnectionTry$hConnection.Close()hNewConnection=FMakeConnection.RunDialog()IfNothNewConnectionThenReturn$hConnection=hNewConnection
  Refresh()End' mnuOpen_Click()
```

In the class FMakeConnection.class, the RunDialog() function contains the complete dialogue.
Source text dialogue:


```
[1]' Gambas class file[2][3]Private$hDBConnectionAsNewConnection[4]PrivateConstACTIONTEXTAsString="Open database"[5][6]PublicFunctionRunDialog()AsConnection[7]Me.ShowModal()[8]Return$hDBConnection[9]End' Run() As Connection[10][11]PublicSubForm_Open()[12][13]FMakeConnection.Text="Dialog - Database connection"[14][15]wizConnect.Count=3[16]wizConnect.Animated=True[17]wizConnect.Margin=True[18]wizConnect.ShowTitle=True[19]wizConnect.ShowButton=True[20][21]wizConnect.ActionPicture=Picture["icon:/16/view-detail"][22]wizConnect.ActionText=ACTIONTEXT[23][24]wizConnect.ShowIndex=True[25]wizConnect[0].Text="Select the database type!"' #1[26]wizConnect[1].Text="Select a SQLite3 database!"' #2[27]wizConnect[2].Text="Enter credentials and connect to the server with '"&ACTIONTEXT&"'.!"[28]' Start-Verzeichnis im FileChooser (Step #2 - SQLite3)[29]fchSqlite.Root=Application.Path&/"DBSQLite3"[30][31]End' Form_Open()[32][33]PublicSubwizConnect_BeforeChange()[34]' If SQLite3 is selected as the DBMS, then show step #2.[35]' and hide step #3. Opposite for MySQL and PostgreSQL.[36][37]IfNotwizConnect[wizConnect.Index].EnabledThenReturn[38]IfradSqlite3.Value=TrueThen[39]wizConnect[1].Enabled=True' Step #2 display[40]wizConnect[2].Enabled=False' Step #3 hide[41]wizConnect.ActionText="Open SQLite3-database"[42]Else[43]wizConnect[2].Enabled=True' Step #3 display - logically this is step 2[44]wizConnect[1].Enabled=False' Step #2 hide[45]' Set port for PostgreSQL (5432) or MySQL (3306) in step #3[46]spbPort.Value=IIf(radPostgreSql.Value,5432,3306)[47]wizConnect.ActionText=ACTIONTEXT[48]Endif[49]End' wizConnect_BeforeChange()[50][51]PublicSubwizConnect_Close()[52][53]IfradSqlite3.ValueThen[54]IfNotfchSqlite.SelectedPathThen[55]Message.Error("No database file was selected.")[56]Return[57]Endif[58]$hDBConnection.Type="sqlite3"[59]$hDBConnection.Name=fchSqlite.SelectedPath[60]Else[61]$hDBConnection.Type=IIf(radPostgreSql.Value,"postgresql","mysql")[62]$hDBConnection.Host=txtHost.Text[63]$hDBConnection.Port=spbPort.Value[64]$hDBConnection.Login=txtUser.Text[65]$hDBConnection.Password=txtPassword.Text[66]$hDBConnection.Name=txtDatabase.Text[67]Endif[68]$hDBConnection.Open()[69]Me.Close()[70]Catch[71]Message.Error(Error.Text)[72]End' wizConnect_Close()[73][74]PublicSubwizConnect_Cancel()[75]Me.Close()[76]End' wizConnect_Cancel()[77][78]PublicSubwizConnect_Change()[79]' Print "CURRENT INDEX = "; wizConnect.Index[80]End' wizConnect_Change()[81][82]PublicSubForm_Close()[83]IfNot$hDBConnectionOrIfNot$hDBConnection.OpenedThen$hDBConnection=Zero[84]End' Form_Close()
```

Comment:
Figure 12.8.1.1.2: Display of the DB data for the table 'contacts' in the selected database.
Conversion:
Figure 12.8.1.1.3: Step 1 - DBMS selection
In the first step of the wizard, a database management system (DBMS) can be selected.
Figure 12.8.1.1.4: Step 2 - Selection SQLite3 database
In the 2nd step, for example, an SQLite3 database is selected.
Notice: In project 1, an SQLite3 database is provided in the project folder for you to try out yourself. You can restart the dialogue at any time via the DB programme menu.


# 12.8.1.2 Project 2

The second project uses a wizard to navigate through several related steps. The display of a recipe in 4 steps serves as an example. Since no action needs to be triggered in the last step and the display can be cancelled at any time by the end of the programme, the buttons are not displayed in the lower panel of the wizard. Therefore, set the propertyWizard.ShowButtontoFalsealready in the IDE.
However, you now have to take care of the navigation between the individual steps yourself. This can be done without problems by using the two methodsWizard.MoveNextandWizard.MovePrevious:


```
Public Sub btnNext_Click()
  If wizRezept.Index < wizRezept.Count Then
     wizRezept.MoveNext
     btnPrevious.Enabled = True
  Endif
  If wizRezept.Index = wizRezept.Count - 1 Then btnNext.Enabled = False
End ' btnNext_Click()
```



```
Public Sub btnPrevious_Click()
  If wizRezept.Index < wizRezept.Count Then
     wizRezept.MovePrevious
     btnNext.Enabled = True
  Endif
  If wizRezept.Index = 0 Then btnPrevious.Enabled = False
End ' btnPrevious_Click()
```

In the following figure you can see the content of the 2nd step and the two buttons for navigation as well as the end button:
Figure 12.8.1.2.1: Display step 2


# 12.8.1.3 Project 3

For project 3 - which is similar in layout to the first project - only the project archive is made available to you for testing. The project implements the installation of Gambas in the current version via SVN. The wizard has only 2 steps:
First check whether the Subversion programme is installed on the system. If it is not, the programme will exit with an error message.Otherwise, the very first time you start the programme, the first step 1K will be displayed and you can specify the installation path or choose the default path.At each subsequent start of the programme, step 1U will be displayed and an update will be offered if the version on the server is higher than the version of the local copy of the SVN repository. The directory for the local SVN repository is saved at the end of the programme and read in at the start of the programme (Settings class).
Figure 12.8.1.3.1: Display step 1K
Figure 12.8.1.3.2: Local copy of the SVN repository.
Figure 12.8.1.3.3: Display step 1U
Figure 12.8.1.3.4: Update of the local SVN repository
Figure 12.8.1.3.5: Step 2 - Installing Gambas
In step 2 of the wizard you can still specify the number of jobs and then start the installation of Gambas.
If this interface is displayed when starting the programme, you can either force a reconfiguration of the sources or cancel the programme or install the displayed local version of Gambas after 'Next' - if this has not already been done:
Figure 12.8.1.3.6: Nothing new to discover …


# download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.9 Class Window

For both the Window and Form classes:
Athttp://gambaswiki.org/wiki/comp/gb.qt4/form, the Gambas Wiki lists somepeculiaritiesof the classFormcompared to the classWindow.
The properties, methods and events of the class Form (gb.qt4) have already been described in detail in → Chapter 12.1 Form. Therefore, only Chapter 12.1 is referred to here.
Figure 12.9.1: Programme window


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Forms



# Chapters



# 12.10 Class Windows

The classWindows (gb.qt4)returns a collection of all windows opened by a Gambas program. The (static) class has only one property:Windows.Countreturns the number of windows opened by a Gambas program. You can use the Windows class like a read-only array.
Example:


```
PublicSubbtnShowInformations_Click()DimiAsIntegerDimhWindowAsWindowPrint"Number of open windows = "; Windows.CountPrintForEachhWindowInWindowsInciPrinti;". Window: ";"Caption =      "; hWindow.CaptionPrinti;". Window: ";"Window-height = "; hWindow.HPrint"------------------------------------------"NextEnd'  btnShowInformations
```

Figure 12.10.1: Three open windows of a Gambas programme.
For the application with three open windows → Figure 12.10.1 results in the following output in the console of the IDE:


```
Number of open windows = 3

1. Window: Caption =      un-embed-forms
1. Window: Window-height = 336
------------------------------------------
2. Window: Caption =      Window 1
2. Window: Window-height = 144
------------------------------------------
3. Window: Caption =      Window 2
3. Window: Window-height = 144
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.0 Menus

In programs with a graphical user interface, you can call subprograms by activating command buttons (button) or menu entries (menu bars, context menus).
Based onhttp://de.wikipedia.org/wiki/Menü/Computeris:
“A menu… a form of interactive user guidance for computer programs with a graphical, character-oriented or rarely language-oriented user interface (GUI, TUI or VUI). It makes it possible to select the desired command from an offer (hence' menu') and execute it without having to know and apply precise control commands. Today, menu bars are standard in' Common User Access'….. Menus are usually grouped hierarchically into menu bars at the edge of the screen or window, which summarize the commands under keywords or symbols, the basic menus. If these terms are selected, a list opens up, the dropout menu with the corresponding menu items, which then trigger commands (programs, modules, actions of the program). Special submenu items do not execute a function directly, but open another menu level, as a further dropout, as a pop-up menu or as a dialog box. All in all, the most important functions that the operating system or application program offers are listed. A variant is a toolbar with icons, the toolbar designed for direct commands rather than hierarchical selection ”.
Figure 13.0.1: Use of command buttons (button)
Figure 13.0.2: Menu barExtraswith submenus (icon, text)
Figure 13.0.3: Menu bar and toolbar (taskbar)
Additions:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.1 Menu - Source code

There is no menu for a form, but only individual menus - often in a menu bar (MenuBar), which contains further menus in a structured menu list. Often, however, one speaks only of the menu and then means this above-mentioned menu structure (tree structure). The term submenu refers to entries in a list of menus; either in a menu bar or a menu in a list to which additional menus can be assigned.
Figure 13.1.1: Menu on a form - menu list with 7 (sub)menus


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.1.1.1 Menu on the form

Figure 13.1.1.1: Tree structure in a menu list
The 'Tools' menu, for example, contains the three menus: Options, Color palettes and the Preview (Optional) menu, with the Color palettes menu containing two menus in the menu list, as shown in Figure 13.1.1.1.1:
Please note that in this example, the two menusExtrasandColour palettesonly fulfil the role as containers for further menus, because they only display the other menus in the assigned menu list after one click, but do not trigger any program actions! In addition, the terms menu, menu bar, menu list and submenu are used as described in the first part.
There are 3 proven variants of how to create menus in a self-defined structure using source code at runtime. This can be done quickly and easily if you have already noted the tree structure of the future menu in full beforehand.
Here is an approach, where only one menu list for the 'Extras' menu from the above mentioned project (→ Figure 13.1.1.1) is described:


```
...PrivatemnuMenu2AsMenuPrivatemnu21OptionenAsMenuPrivatemnu22SelectColorAsMenuPrivatemnu23PreViewAsMenuPrivatemnu221Palette1AsMenuPrivatemnu222Palette2AsMenu...PrivatemnuSpaceAsMenuPublicSubForm_Menu()mnuMenu2=NewMenu(FMain,False)' 2. Entry in the menu bar, visiblemnuMenu2.Caption="Extras"mnu21Optionen=NewMenu(mnuMenu2)As"mnuOptionen"mnu21Optionen.Caption="Optionen"mnu21Optionen.Picture=Picture["icon:/16/options"]mnu22SelectColor=NewMenu(mnuMenu2)As"mnuSelectColor"mnu22SelectColor.Caption="Colour palettes"mnu22SelectColor.Picture=Picture["icon:/16/fill"]mnu221Palette1=NewMenu(mnu22SelectColor)As"mnuPalette1"mnu221Palette1.Caption="Colour chart 1"mnu221Palette1.Picture=Picture["icon:/16/pen"]mnuSpace=NewMenu(mnu22SelectColor)mnuSpace.Caption=""' Separation linemnu222Palette2=NewMenu(mnu22SelectColor)As"mnuPalette2"mnu222Palette2.Caption="Colour chart 2"mnu222Palette2.Picture=Picture["icon:/16/color"]mnu23PreView=NewMenu(mnuMenu2)As"mnuPreView"mnu23PreView.Caption="Preview"mnu23PreView.Checked=Truemnu23PreView.Toggle=True...End' Form_Menu()
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.1.2 Source code - Module MM. module

Even with a simple menu on the form, the source code for a project quickly becomes confusing, because you have to distinguish between the procedures for generating the menus, the procedures for assigning the program actions to the individual menus, and the procedures that describe the program actions. It is a good idea to place the source code in a module for generating the individual menus.
The source code for the module and the project MenuQM are completely specified and commented in substantial parts.


```
[1]' Gambas class file[2][3]PrivatemnuMenu1AsMenu[4]PrivatemnuMenu2AsMenu[5]PrivatemnuMenu3AsMenu[6][7]Privatemnu11OpenAsMenu[8]Privatemnu12NewAsMenu[9]Privatemnu13SaveAsMenu[10]Privatemnu14SaveAsAsMenu[11]Privatemnu15PrintAsMenu[12]Privatemnu16CloseAsMenu[13]Privatemnu21OptionenAsMenu[14]Privatemnu22SelectColorAsMenu[15]Privatemnu23PreViewAsMenu[16]Privatemnu221Palette1AsMenu[17]Privatemnu222Palette2AsMenu[18]Privatemnu31HelpAsMenu[19]Privatemnu32InformationAsMenu[20]PrivatemnuSpaceAsMenu[21][22]PublicSubShowMenu()[23][24]mnuMenu1=NewMenu(FMain,False)' 1. Entry in the menu bar , visible[25]mnuMenu1.Caption="Image-File"[26][27]mnu11Open=NewMenu(mnuMenu1)As"mnuOpen"[28]mnu11Open.Caption="Open Image-File..."[29]mnu11Open.Shortcut="CTRL+O"[30]mnu11Open.Picture=Picture["icon:/16/open"][31]mnu12New=NewMenu(mnuMenu1)As"mnuNew"[32]mnu12New.Caption="Create new Image-File"[33]mnu12New.Shortcut="CTRL+N"[34]mnu12New.Picture=Picture["icon:/16/new"][35]mnu13Save=NewMenu(mnuMenu1)As"mnuSave"[36]mnu13Save.Caption="Save"[37]mnu13Save.Shortcut="CTRL+S"[38]mnu13Save.Picture=Picture["icon:/16/save"][39]mnu13Save.Enabled=False[40]mnu14SaveAs=NewMenu(mnuMenu1)As"mnuSaveAs"[41]mnu14SaveAs.Caption="Save file as..."[42]mnu14SaveAs.Shortcut="CTRL+SHIFT+S"[43]mnu14SaveAs.Picture=Picture["icon:/16/save-as"][44]mnu14SaveAs.Enabled=False[45]mnuSpace=NewMenu(mnuMenu1)[46]mnuSpace.Caption=""[47]mnu15Print=NewMenu(mnuMenu1)As"mnuPrint"[48]mnu15Print.Caption="Print picture"[49]mnu15Print.Picture=Picture["icon:/16/print"][50]mnu15Print.Enabled=False[51]mnuSpace=NewMenu(mnuMenu1)[52]mnuSpace.Caption=""[53]mnu16Close=NewMenu(mnuMenu1)As"mnuClose"[54]mnu16Close.Caption="Close"[55]mnu16Close.Action="FormClose"[56]mnu16Close.Picture=Picture["icon:/16/quit"][57]'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[58]mnuMenu2=NewMenu(FMain,False)' 2. Entry in the menu bar , visible[59]mnuMenu2.Caption="Extras"[60][61]mnu21Optionen=NewMenu(mnuMenu2)As"mnuOptionen"[62]mnu21Optionen.Caption="Optiones"[63]mnu21Optionen.Picture=Picture["icon:/16/options"][64]mnu22SelectColor=NewMenu(mnuMenu2)As"mnuSelectColor"[65]mnu22SelectColor.Caption="Color pallets"[66]mnu22SelectColor.Picture=Picture["icon:/16/fill"][67]mnu221Palette1=NewMenu(mnu22SelectColor)As"mnuPalette1"[68]mnu221Palette1.Caption="Color chart 1"[69]mnu221Palette1.Picture=Picture["icon:/16/pen"][70]mnuSpace=NewMenu(mnu22SelectColor)[71]mnuSpace.Caption=""[72]mnu222Palette2=NewMenu(mnu22SelectColor)As"mnuPalette2"[73]mnu222Palette2.Caption="Color chart2"[74]mnu222Palette2.Picture=Picture["icon:/16/color"][75]mnu23PreView=NewMenu(mnuMenu2)As"mnuPreView"[76]mnu23PreView.Caption="Preview"[77]mnu23PreView.Checked=True[78]mnu23PreView.Toggle=True[79]'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[80]mnuMenu3=NewMenu(FMain,False)' 3. Entry in the menu bar , visible[81]mnuMenu3.Caption="Hilfe"[82][83]mnu31Help=NewMenu(mnuMenu3)As"mnuHelpMe"[84]mnu31Help.Caption="Help"[85]mnu31Help.Shortcut="F1"[86]mnu31Help.Action="HelpMe"[87]mnu31Help.Picture=Picture["icon:/16/help"][88]mnu32Information=NewMenu(mnuMenu3)As"mnuInformation"[89]mnu32Information.Caption="Online-Hilfe"[90]mnu32Information.Picture=Picture["icon:/16/internet"][91][92]End' ShowMenu()[93][94]PublicSubmnuOpen_Click()[95]FMain.ImageOpen()[96]mnu15Print.Enabled=True[97]End' mnuOpen_Click()[98][99]PublicSubmnuNew_Click()[100]mnu13Save.Enabled=False[101]mnu14SaveAs.Enabled=True[102]FMain.CreateImage[103]End' mnuNew_Click()[104][105]PublicSubmnuSaveAs_Click()[106]FMain.SaveAsDialog[107]mnu13Save.Enabled=True[108]mnu14SaveAs.Enabled=False[109]End'  mnuSaveAs_Click()[110][111]PublicSubmnuSave_Click()[112]FMain.SaveImage[113]End'  mnuSaveAs_Click()[114][115]PublicSubmnuPrint_Click()[116]FMain.PrintImage[117]End' mnuPrint_Click()[118][119]PublicSubmnuClose_Click()[120]FHelp.Close[121]FMain.Close[122]End' mnuClose_Click()[123][124]PublicSubmnuOptionen_Click()[125]FMain.SetOptions[126]End' mnuOptionen_Click()[127][128]PublicSubmnuPalette1_Click()[129]FMain.GetColor_1()[130]End' mnuPalette1_Click()[131][132]PublicSubmnuPalette2_Click()[133]FMain.GetColor_2()[134]End' mnuPalette2_Click()[135][136]PublicSubmnuPreView_Click()[137]Ifmnu23PreView.Checked=TrueThen[138]Message.Info("Show future preview image or"&gb.NewLine&"generate or...")[139]Endif' Checked = True[140]End' mnu23PreView_Click()[141][142]PublicSubmnuHelpMe_Click()[143]FHelp.Show[144]End' mnuHelpMe_Click()[145][146]PublicSubmnuInformation_Click()[147]Desktop.Open("http://www.gambas-buch.de/dw/doku.php?id=k13:start")[148]End' mnu32Information_Click()
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.1.3 Source code - Form. class



```
' Gambas class filePublicSubForm_Open()FMain.CenterFMain.Resizable=FalsePictureBox1.Border=Border.NonePictureBox1.Picture=Picture["muster.jpg"]Label1.text="Fractal Geometry (Computer Science Course 12)"FMain.Height+=24' Space must be created for the menu barMM.ShowMenuEnd' Form_Open()PublicSubImageOpen()Dialog.Title="Import a image file!"Dialog.Filter=["*.png","image files"]IfDialog.OpenFile(False)=TrueThen' Multiselect=False (Standard)Message.Info("The opening of the image file was cancelled!")Return' Cancel button pressedElseTryPictureBox1.Picture=Picture.Load(Dialog.Path)IfErrorThenMessage.Error("Error opening the image file")ElseLabel1.Alignment=Align.LeftLabel1.Text=" File: "&File.Name(Dialog.Path)Endif' ERROR?Endif' Dialog.OpenFileEnd' ImageOpen()PublicSubCreateImage()Message.Info("A programme is called up to generate an image file..")End'  CreateImage()PublicSubSaveImage()Message.Info("Call: Save dialogue")End' SaveImage()PublicSubSaveAsDialog()Message.Info("Call: Save sub-dialogue")End' SaveAsDialog()PublicSubPrintImage()Message.Info("Now the image is printed ...")End' PrintImage()PublicSubSetOptions()Message.Info("Programme options can be set here...")End' SetOptions()PublicSubGetColor_1()Message.Info("A colour selection dialogue 1 is called up here.")End' GetColor1()PublicSubGetColor_2()Message.Info("A colour selection dialogue 2 is called up here.")End' GetColor1()PublicSubForm_Close()FHelp.CloseFMain.CloseEnd' Form_Close()
```

Comments:
In the download area you will find 3 projects with the same goal. For the first project, the file Form. class contains the complete source code. A module is used in the second project and the third project works with functions within a module. This makes the source code shorter, but also more complicated in the syntax when declaring individual menus.


# 13.1.3 Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.2 Menu Editor

The easiest way to equip your program with a menu (→ Figure 13.2.4) is to use the menu editor. It is a good plan if you record this structure - especially with a complex menu structure - and then map it in a table:
Table 13.2.1: Menu structure (V=Visible, E=Enabled, T=Toogle and C=Checked)
Start the menu editor
Figure 13.2.1: (partial) view of the menu editor
When you create a menu structure, the following steps have been tried and tested:
Figure 13.2.2: (Part) view2 of the menu editor
Confirm all entries or changes in the menu editor with OK. When you close the menu editor although you have made changes, the system asks whether you want to save the changes:
Figure 13.2.3: Save - demand
Entries in the menu editor for Action are only necessary if, for example, you want to use the Action class for synchronization between the menu and an inserted toolbar. The chapter' 13.5 Menu and Toolbar' explains how to implement this synchronization.
Figure 13.2.4: Select 'Exit' menu item
To do this, click on the entry you want to add code as an event handling procedure in the form menu; for example, for the mnu15Close_Click() event:


```
PublicSubmnu15Close_Click()FHelp.CloseFMain.CloseEnd' mnu15Close_Click()
```

Further procedures (selection):


```
PublicSubmnu11Open_Click()ImageOpen()mnu14Print.Enabled=TrueEnd' mnu11Open_Click()PublicSubmnu15Close_Click()FHelp.CloseFMain.CloseEnd' mnu15Close_Click()PublicSubmnu23PreView_Click()Ifmnu23PreView.Checked=TrueThenMessage.Info("Show preview or"&gb.NewLine&"Generate preview image or...")Endif' Checked = TrueEnd' mnu23PreView_Click()PublicSubmnu31Help_Click()FHelp.ShowEnd' mnu31Help_Click()PublicSubmnu32Web_Click()Desktop.Open("http://www.gambas-buch.de/dw/doku.php?id=k13:start")End' mnu32Web_Click()
```

Note that you cannot assign procedures to all menu entries. This applies, for example, to all entries of level 0 as well as to entries that contain further entries as (sub-)menus as in mnu22SelectColor.
Whether you make entries in the Tag text field (data type Variant) depends on whether you later evaluate this entry in the program and react depending on the evaluation result.
In the exampleFNotepad 3.0.0in the Gambas examples it is demonstrated that you can also select a menu at runtime of the program viaALT+underlined_letters, if you prefix the selected letter with a & sign in front of the entry' Caption'. For example, the combinationALT+acalls the save dialog:
Figure 13.2.5: (Part) view3 of the menu editor


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.3 Menu - Special

In this chapter '13.3 Menu - Special' you will be introduced to two special menus.
This form of a menu is also used by Gambas in its program interface in the menu bar under 'File':
Figure 13.3.1: Dynamic menu in the Gambas IDE


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# Table of Contents



# 13.3.1 Option menu

An option menu is a menu with a text and a CheckBox whose value can be toggled between the two states ☑ (activated) and ☐ (deactivated). To implement a menu with this property, you must use the Checked property of a menu. You can set this property in the menu editor or in the source code. The Checked property of a menu corresponds to the Toggle property.
The property Menu.Checked is a synonym for Menu.value and indicates whether the checkmark ☑ is displayed in front of the menu text or not. However, it does not control in any way the behaviour of the option menu! If Menu.Toggle is set, Menu.Checked is inverted automatically when the option menu is clicked.


# 13.3.1.1 Example 1

In a program that loads and displays images, you want to allow the user to edit the image, among other things. For example, you can create a (sub)menu item mnu21AllowedEdit with the label “Image Editing” in a menu mnuMenu2 with the label “Extras”:


```
PublicSubCreateAndShowMenus()…'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~mnuMenu2=NewMenu(FMain,False)' Menu bar is displayedmnuMenu2.Caption="Extras"mnu21AllowedEdit=NewMenu(mnuMenu2)As"mnuAllowedEdit"mnu21AllowedEdit.Caption="Image edit"mnu21AllowedEdit.Visible=Truemnu21AllowedEdit.Toggle=Truemnu21AllowedEdit.Checked=False'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~…End' CreateAndShowMenus()
```

Figure 13.3.1.1.1.1: Checkbox de-activated - Image editing not allowed (default setting)


```
[1]PublicSubmnuAllowedEdit_Click()[2][3]IfbOpenImage=TrueThen[4]MM.mnu12Edit.Enabled=mnu21AllowedEdit.Checked[5]Endif' bOpenImage = True ?[6][7]End' mnuAllowedEdit_Click()
```

Figure 13.3.1.1.1.2: Checkbox activated - image editing allowed


# 13.3.1.2 Example 2

Example 2 refers to the editor 'Notepad' from the example collection of gambas. In the editor, you can switch the line break in the TextArea text display component on and off. The mnuWrap.Checked = False and mnuWrap.Toggle properties are not set in the menu editor. Therefore, you must switch the checkbox states as in line 3:


```
[1]PublicSubmnuWrap_Click()[2][3]mnuWrap.Checked=NotmnuWrap.Checked[4]txtNotePad.Wrap=mnuWrap.Checked[5][6]End' mnuWrap_Click()
```

Figure 13.3.1.2.1: Checkbox is activated at program startup
Figure 13.3.1.2.2: Checkbox de-activated - line break can be activated
The display of an icon in the menu item 'Line break' on the one hand and the display of an activated checkbox ☑ only succeed if you use either the QT/QTK+ alternate component (gb.gui) or the GTK+ component as Graphical User Interface. The use of the QT4 component causes an error when displaying the provided icon.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# Table of Contents



# 13.3.2 Dynamic menu

The development environment (IDE) of Gambas sets in the menu bar under 'File' in the menu 'Recently opened' a menu list of k menus, which changes dynamically at runtime of the development environment. The list can be empty or contain entries whose number is limited. A menu with such properties is calleddynamic menu.
Figure 13.3.2.1: Menu with menu list in the Gambas IDE
Planning the use of a dynamic menu requires, among other things, clear answers to the following questions:
(F1) Which menu in the menu structure should be equipped with a dynamic menu?(F2) What will be saved in the menu list - recognizable by the sign >?(F3) In which form should the entries in the menu list of the menu selected with (F1) be saved?(F4) Is the selected menu not displayed or only deactivated if the menu list is empty?(F5) What is the maximum number of entries to include in the menu list?(F6) Should the entries in the menu list be sorted?


# 13.3.2.1 Preliminary considerations for the dynamic menu

The above 6 questions are answered project-related in the following project DynMenu:
Figure 13.3.2.1.1.1: Menu with menu list (project DynMenu)



# 13.3.2.2 Project DynMenu

In a project, the preliminary considerations described inSection 13.3.2.1are implemented when using a dynamic menu. This program has been in use since the beginning of the first publications of chapters of the online book ongambas-buch. deby the authors, when extensive tables have to be converted from a document - written with LibreOffice Writer - into the DokuWiki format.


# 13.3.2.3 Source Code Module MS. module

The procedures that create an instance of the Settings class and configure the Settings object, as well as importing and saving the paths of the recently opened table files, are stored in a moduleMS.module.


```
[1]' Gambas module file[2]' MS = Module & Settings[3][4]PrivatehFileAsFile[5]PublicpSettingsAsSettings[6]PublicMatrixAsNewString[][7]PublicShortMatrixAsNewString[][8]PublicConstiLastNumberAsInteger=5[9][10]PublicSubInit()[11]DimsSettingsPath, sSlotName, sSettingsFileNameAsString[12][13]sSlotName="LastFiles"[14]sSettingsPath=Application.Path&/sSlotName[15]sSettingsFileName="lastfiles.conf"[16][17]IfNotExist(sSettingsPath)Then[18]MkdirsSettingsPath[19]Endif[20]IfNotExist(sSettingsPath&/sSettingsFileName)Then[21]hFile=Open(sSettingsPath&/sSettingsFileName)ForCreate[22]hFile.Close[23]Endif' Not Exist(..)[24][25]' A Settings object sees the light in the memory ...[26]pSettings=NewSettings(sSettingsPath&/sSettingsFileName,"Filelist")[27][28]End' Init()[29][30]PublicSubGetLastListFromSettings()[31]DimiCountAsInteger[32][33]pSettings.Reload()' optional[34]Matrix.Clear[35]ShortMatrix.Clear[36]iCount=0[37][38]WhilepSettings["FileList"&"/File"&Str(iCount)]<>Zero[39]IfExist(pSettings["FileList"&"/File"&Str(iCount)])Then' Does this file exist?[40]Matrix.Add(pSettings["FileList"&"/File"&Str(iCount)])' Save file path in matrix[41]' Save file name in ShortMatrix[42]ShortMatrix.Add(File.Name(pSettings["FileList"&"/File"&Str(iCount)]))[43]Endif' File.Exist?[44]InciCount[45]Wend' <> Zero[46][47]End' GetLastListFromSettings()[48][49]PublicSubSetLastListToSettings()[50]DimiCountAsInteger[51][52]pSettings.Clear[53]ForiCount=0ToMatrix.Max[54]pSettings[sSlotName&"/File"&Str(iCount)]=Matrix[iCount][55]' The maximum of 5 key-value pairs under the "LastFiles" slot are generated.[56]Next' iCount[57]pSettings.Save' Update the configuration file 'lastfiles.conf'.[58][59]End' SetLastListToSettings()
```



# 13.3.2.4 Source code FMain. class

The complete project can be found in the download area. Here, the source code - stored in the file FMain. class - is only played back and commented on in excerpts:


```
[1]' Gambas class file[2][3]PublicfFileAsFile[4]PublicsCurrentFilePathAsString[5][6]PublicSubForm_Open()[7][8]FMain.Center[9]FMain.Resizable=False[10]mnu1ConvertTable.Enabled=False[11]mnu1SaveTable.Enabled=False[12]mnu2CenteredTable.Checked=False[13]btnReset.Enabled=False[14][15]MS.Init()[16]MS.GetLastListFromSettings()[17]UpdateMenu()[18][19]End' Form_Open()[20][21]PublicSubUpdateMenu()[22]DimMenuItemAsMenu[23]DimsFileNameAsString[24][25]mnu1LastFiles.Children.Clear' Delete all old entries in the menu list of mnu1LastFiles.[26]IfMS.ShortMatrix.Count=0Then' If the menu list is empty ...[27]mnu1LastFiles.Visible=False' then the menu 'mnu1LastFiles' is not visible[28]Else[29]' Create menu list for the menu 'mnu1LastFiles'.[30]ForEachsFileNameInMS.ShortMatrix[31]MenuItem=NewMenu(mnu1LastFiles)As"mnuLast"' EventName is 'mnuLast'![32]MenuItem.Text=sFileName[33]MenuItem.Picture=Picture["icon:/16/insert-text"][34]Next' sFileName[35]Endif' MS.ShortMatrix.Count = 0?[36][37]End' UpdateMenu[38][39]PublicSubmnuLast_Click()[40]DimiIndexAsInteger[41][42]IfMS.ShortMatrix.Find(Last.Text)<>-1Then[43]iIndex=MS.ShortMatrix.Find(Last.Text)[44]sCurrentFilePath=MS.Matrix[iIndex][45]' Alternative: sCurrentFilePath = MS.Matrix[MS.ShortMatrix.Find(Last.Text)][46]fFile=OpensCurrentFilePathForInput[47]Reset()[48]mnu1ConvertTable.Enabled=True[49]ShowTable()[50]Endif' Find?[51][52]End' mnu1Last_Click[53][54]PublicFunctionOpenTable()AsBoolean[55][56]Dialog.Title="Import a table text file!"[57]Dialog.Filter=["*.txt","Text Files"][58][59]IfDialog.OpenFile(False)=TrueThen' Multiselect = False (Standard)[60]Message.Info("The opening of the table file was cancelled!")[61]ReturnFalse' Cancel button pressed[62]Else[63]fFile=OpenDialog.PathForInput[64]IfLof(fFile)=0Then[65]Message.Info("The Text file is empty!")[66]fFile.Close[67]ReturnFalse[68]Endif' Lof(fFile) = 0?[69]Endif' Dialog.OpenFile(False) = True[70][71]sCurrentFilePath=Dialog.Path' The DialogPath is assigned to the variable 'sCurrentFilePath'.[72][73]IfNotMS.Matrix.Exist(Dialog.Path)Then' If this file does not exist in the matrix ...[74]IfMS.Matrix.Count=MS.iLastNumberThen' and there are already 5 elements in the array Matrix,[75]MS.Matrix.Remove(0)' then delete the 1st element in the array matrix[76]MS.ShortMatrix.Remove(0)' then delete the 1st element in the array ShortMatrix.[77]Endif' MS.Matrix.Count = MS.iLastNumber?[78]MS.Matrix.Add(Dialog.Path)' The file path is inserted at the end of the array 'Matrix'.[79]MS.ShortMatrix.Add(File.Name(Dialog.Path))' File name is inserted at the end of 'ShortMatrix[80]UpdateMenu()' The menu list is updated.[81]Endif' Matrix.Exist?[82]Wait[83]Reset()[84]mnu1ConvertTable.Enabled=True[85]ReturnTrue[86][87]End' OpenTable()[88][89]...[90][91]PublicSubForm_Close()[92]MS.SetLastListToSettings()[93]TryfFile.Close[94]End' Form_Close
```

Additional comments:
Extract from the source code of the procedure GetLastListFromSettings():


```
[1]WhilepSettings["FileList"&"/File"&Str(icount)]<>Zero[2]IfExist(pSettings["FileList"&"/File"&Str(icount)])Then' Does this file exist?[3]Matrix.Add(pSettings["FileList"&"/File"&Str(icount)])' Save file path in Matrix[4]' Save file name in ShortMatrix[5]ShortMatrix.Add(File.Name(pSettings["FileList"&"/File"&Str(icount)]))[6]Endif' File.Exist?[7]Incicount[8]Wend' <> ZERO
```

This is the content of the configuration file lastfiles.conf at a certain point in time:


```
# Dateiliste
[FileList]
File0="/home/hans/k12.3.4_tab.txt"
File1="/home/hans/k22.3.2_tab.txt"
File2="/home/hans/k3.7_tab.txt"
```



# 13.3.2.5 Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# Table of Contents



# 13.4 Context menu

A special type of menu is the context menu as a pop-up menu. The context is a visible component. This means that the pop-up menu only refers to this component. A menu only becomes a context menu when it is assigned to a special context menu. If you use the menu editor, you can define a list of different menus and assign them to individual components in the source code - ComboBox and PictureBox in this case - as context menus:


```
PublicSubComboBox1_Menu()mnuCombobox1.PopupEnd' ComboBox1_Menu()PublicSubPictureBox1_Menu()mnuPictureBox1.PopupEnd' PictureBox1_Menu()
```

You save these 2 statements if you already make the assignment in the object inspector with the' PopupMenu' property from the list of defined menus offered there.
The context menu opens after right-clicking over the component at the position of the mouse pointer. A context menu contains a list of menus that trigger a subroutine call after clicking with the left mouse button. You can create and configure the context menu at design time in the menu editor or encode it in the source code. You can equip the following components with a context menu:
Button, ButtonBox, CheckBox, CheckBox, ColorButton, ColorChooser, ColumnView, ComboBox, ComboBox, Container, Control, DateBox, DateChooser, Dial, DirChooser, DirView, DrawingArea, Editor, Embedder, Expander, FileChooser, FileView, FontChooser, Form, Frame, GridView, HBox, HPanel, HSplit, HSplit
Good to know:For example, if you use the TextArea_Menu() and mnuContextTextArea.Popup event to declare a context menu for a TextArea, the original is overwritten as shown in the following two images:
Figure 13.4.1: Context menu TextArea - Original
Figure 13.4.2: TextArea context menu - user-defined
You can not only overwrite context menus of selected components with your own menus, but you can also deactivate the context menu in general. The following code is used here for the (fictitious) component TextArea3:


```
PublicSubTextArea3_Menu()StopEventEnd
```



# 13.4.1 Project

In the presented project, the original context menu of the two components 'TextArea' is replaced by a user-defined, simple context menu. At the same time, the use of the ClipBoard class is demonstrated by copying or cutting text from the TextArea1 and pasting it into the TextArea2. You can also view the type (text format) of the inserted text after a copy operation. A violent click on the reset button (R) restores the start state of the program.
Figure 13.4.1.1: ClipBoard is empty {link_3}
Figure 13.4.1.2: Marked text is copied to the ClipBoard - context menu1
Figure 13.4.1.3: Contents of the ClipBoard can be inserted into the TextArea2 - Context menu2
Figure 13.4.1.4: Contents of the ClipBoard was inserted into the TextArea2


# 13.4.2 Project source code

The source text is completely specified and only commented on in selected parts, because the comments in the source text already show essential information:


```
[1]' Gambas class file[2][3]PrivatesTextAsString[4][5]PublicSubForm_Open()[6][7]FMain.Center[8]FMain.Resizable=False[9]sText="Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming "[10]sText&="id quod mazim placeratfacer possim assum. Lorem ipsum dolor sit amet, consectetuer "[11]sText&="adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna "[12]sText&="aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation "[13]sText&="ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat."[14]TextArea1.Text=sText[15]TextArea1.Wrap=True[16]TextArea2.Wrap=True[17][18]End' Form_Open[19][20]PublicSubTextArea1_Menu()[21][22]DimmnuContextTextArea1AsMenu[23]DimmnuMenuItemAsMenu[24][25]' A new menu object is created for the Textarea1[26]mnuContextTextArea1=NewMenu(FMain,False)[27]' 1. Menu in Menu1 of the TextArea1 component[28]mnuMenuItem=NewMenu(mnuContextTextArea1)As"mnuSelectAll"[29]mnuMenuItem.Text="Select all and copy all text to clipboard"[30]mnuMenuItem.Picture=Stock["select"][31]' 2. Menü im Menü1[32]mnuMenuItem=NewMenu(mnuContextTextArea1)As"mnuSelectedCopy"[33]mnuMenuItem.Text="Copy selected text to clipboard"[34]mnuMenuItem.Picture=Stock["copy"][35]' 3. Menü im Menü1[36]mnuMenuItem=NewMenu(mnuContextTextArea1)As"mnuSelectedCut"[37]mnuMenuItem.Text="Cut selected text"[38]mnuMenuItem.Picture=Stock["cut"][39][40]mnuContextTextArea1.Popup'Menu1 is assigned to TextArea_1 as a pop-up menu.[41][42]' One disadvantage of this procedure of giving each menu item the identifier mnuMenuItem should be[43]' should not be concealed: It is not possible in the program to select individual menu properties[44]' at runtime. This disadvantage does not apply when using the menu editor.[45][46]End' TextArea1_Menu[47][48]' The 3 actions that are triggered are now programmed here,[49]' if the corresponding menu was selected in the context menu of TextArea1.[50][51]' Menu 1 - Component TextArea1[52]PublicSubmnuSelectAll_Click()[53]TextArea1.SelectAll()[54]TextArea2.Clear[55]IfTextArea1.Selection.Text<>ZeroThen[56]Clipboard.Copy(TextArea1.Text)[57]' Alternative: TextArea1.Copy()[58]Endif' TextArea1.Selection.Text <> Zero[59]End' mnuSelectAll_Click[60][61]' Menu 2 - Component TextArea1[62]PublicSubmnuSelectedCopy_Click()[63]IfTextArea1.Selection.Text<>ZeroThen[64]TextArea2.Clear[65]Clipboard.Copy(TextArea1.Selection.Text)[66]' Alternative: TextArea1.Copy()[67]Endif' TextArea1.Selection.Text <> Zero[68]End' mnuSelectedCopy_Click[69][70]' Menu 3 - Component TextArea1[71]PublicSubmnuSelectedCut_Click()[72]IfTextArea1.Selection.Text<>ZeroThen[73]TextArea2.Clear[74]Clipboard.Copy(TextArea1.Selection.Text)[75]TextArea1.Cut()[76]Endif' TextArea1.Selection.Text <> Zero[77]End' mnuSelectedCopy_Click[78][79]PublicSubTextArea2_Menu()[80]DimmnuContextTextArea2AsMenu[81]DimmnuP2TAsMenu[82][83]' A new menu object is created for the text area2.[84]mnuContextTextArea2=NewMenu(FMain,False)[85]' Create a menu in Menu2 of the TextArea2 component.[86]mnuP2T=NewMenu(mnuContextTextArea2)As"mnuPasteToTextArea2"[87]mnuP2T.Text="Paste from ClipBoard"[88]mnuP2T.Picture=Stock["paste"][89][90]IfClipboard.Type=Clipboard.TextThen[91]mnuContextTextArea2.Popup' Menu2 is assigned to TextArea_2 as a screen pop menu (active).[92]Else[93]mnuP2T.Enabled=False[94]mnuContextTextArea2.Popup' Menu2 is assigned to TextArea_2 as a pop-up menu (not active).[95]Endif' Clipboard.Type = Clipboard.Text[96][97]End' TextArea2_Menu[98][99]PublicSubmnuPasteToTextArea2_Click()[100]' The one action that is triggered is programmed here,[101]' when the one menu is selected in the context menu of TextArea2.[102]TextArea2.Insert(Clipboard.Paste("text/plain"))[103]End' mnuPasteToTextArea2_Click[104][105]PublicSubbtnFormats_Click()[106]DimsElementAsString[107][108]TextArea2.Clear[109]ForEachsElementInClipboard.Formats[110]TextArea2.Insert(sElement&gb.NewLine)[111]Next' sElement[112][113]End' btnFormats_Click[114][115]PublicSubbtnReset_Click()[116]Clipboard.Clear[117]TextArea2.Clear[118]TextArea1.Text=sText[119]TextArea1.SetFocus[120]End' Reset[121][122]PublicSubbtnClose_Click()[123]IfNotClipboard.Type=Clipboard.NoneThenClipboard.Clear[124]FMain.Close[125]End' btnClose
```

Comment:


# 13.4.3 Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.5 Menu and Toolbar

In many programs it is possible to extend the interactive user guidance with a toolbar via a menu bar. The toolbar provides quick access to the most important subroutines of the application program.
In the presented project the main menu - as a combination of many menus - is created and configured with the menu editor:
Figure 13.5.1: Menu Editor - Help menu 'Program Help'.
For the horizontal toolbar, the ToolBar component is used as a container, in which only 4 ToolButtons are placed next to each other, which are assigned suitable icons (16px) from the Gambas inventory in the IDE. Except for the height (32) and a width of the toolbar that matches the form, no other properties are changed. The arrangement of the 4 ToolButtons at runtime is done automatically with a fixed distance to each other:
Figure 13.5.2: Menu and toolbar
The use of a toolbar next to a menu is based on the assumption that the selection of a certain menu item causes the same (sub-)program call as a mouse click on the corresponding ToolButton. The linking of individual menus and their functions with the selected ToolButton with the same event handling routines → Project is of decisive importance for the desired effect.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.6 Context menu - TrayIcon

The component gb. gui. trayicon with the two classes TrayIcon and TrayIcons is described in chapter 19.2. This chapter deals with assigning a context menu to a tray icon, which can be called up with the right mouse button in the task bar above the tray icon. 
If you want to run a Gambas program in the background, you can use the class TrayIcon to access the program via an icon in the task bar. This has the advantage that you always have access to the program interface, or alternatively you can call up selected subprograms in a context menu assigned to the tray icon. The menu is declared in a module in the presented project. You can also create it with the menu editor, whose description can be found in Chapter 13.2 Menu Editor.
Since not every reader has a USB interface for temperature measurement and the class TrayIcon is especially interesting for programs that work hidden for a long time and signal their presence only by an icon in the taskbar, a simulation project is presented to you. The temperature values are generated and displayed randomly in a specified temperature range. The temperature values are also logged in a log file:


```
MEASUREMENT PROTOCOL
DATE:14. February2018---------------------------->09:47:56|T =22,3°C>09:47:57|T =22,1°C>09:47:58|T =21,8°C>09:47:59|T =21,0°C>09:48:00|T =21,5°C>09:48:01|T =20,3°C>09:48:02|T =19,9°C
```

The program section dedicated to the tray icon context menu has been saved in a module. In this module, the
The source code for the module MTI (module TrayIcon) does not come as a surprise:


```
[1]' Gambas module file[2][3]PublicM10MainMenuAsMenu[4]PublicM11ProgramHideShowAsMenu[5]PublicM12ShowDataAsMenu[6]PublicM13CloseExperimentAsMenu[7][8]PublicSubCreateMenu()[9][10]' True -> The menu is NOT displayed in the main program![11]M10MainMenu=NewMenu(FMain,True)As"Menu"[12]M10MainMenu.Text=("Caption")[13][14]' This property is required for the assignment as pop-up menu of the tray icon![15]M10MainMenu.Name="M10MainMenu"[16][17]M11ProgramHideShow=NewMenu(M10MainMenu)As"M11ProgramHideShowShow"[18]M11ProgramHideShow.Text=("Hide program")[19]M11ProgramHideShow.Picture=Picture["icon:/16/down"][20][21]M12ShowData=NewMenu(M10MainMenu)As"M12ViewData"[22]M12ShowData.Text=("Display data")[23]M12ShowData.Picture=Picture["icon:/16/view-icon"][24][25]M13CloseExperiment=NewMenu(M10MainMenu)As"M13CloseExperiment"[26]M13CloseExperiment.Text=("Close experiment")[27]M13CloseExperiment.Picture=Picture["icon:/16/quit"][28][29]End[30][31]PublicSubM11ProgramHideShowShow_Click()[32]IfM11ProgramHideShow.Text=("Hide program")Then[33]FMain.Visible=False[34]M11ProgramHideShow.Text=("Show program")[35]M11ProgramHideShow.Picture=Picture["icon:/16/up"][36]Else[37]FMain.Visible=True[38]M11ProgramHideShow.Text=("Hide program")[39]M11ProgramHideShow.Picture=Picture["icon:/16/down"][40]Endif[41]End[42][43]PublicSubM12ViewData_Click()[44]Message.Info(("Measurement data are displayed ..."))[45]End' M12ViewData[46][47]PublicSubM13CloseExperiment_Click()[48]FMain.Close()[49]End
```

The complete project for the simulation of a long-term temperature measurement can be found in the long. time. experiment. tar. gz repository in the download area. The source code for the main program can also be found at the end of the chapter.
Figure 13.6.1:GUIof the simulation project
Hints:
Figure 13.6.2: Contents of the context menu for the tray icon
In the following source code, important sections are highlighted in color:


```
' Gambas class filePublictimerDataLogAsTimerPublictimerReadDataAsTimerPublictimerSimulationAsTimerPublicfTemperatureAsFloatPublichTrayIconAsTrayIconPublicSubForm_Open()FMain.Resizable=FalseFMain.Height=160expRX_TX.Hidden=TrueexpRX_TX.Animated=TrueSetRS232Parameters()timerSimulation=NewTimerAs"timerSimulation"' Generate a random temperature value from the specified interval every 100 mstimerSimulation.Delay=100timerReadData=NewTimerAs"timerReadData"' The current temperature value is read out every 1000 mstimerReadData.Delay=1000timerDataLog=NewTimerAs"timerDataLog"' Time interval of data storage in a log filetimerDataLog.Delay=3000*1SetLEDColor(picStatus,"red")btnExperimentStop.Enabled=FalsehTrayIcon=NewTrayIconAs"hTrayIcon"hTrayIcon.Icon=Picture["Symbols/experiment.png"]hTrayIcon.Tooltip=("Long time experiment")hTrayIcon.Visible=FalseMTI.CreateMenu()' The menu declared in the module MTI.module is assigned to the tray icon as a context menu.hTrayIcon.PopupMenu=MTI.M10MainMenu.NameEndPublicSubbtnExperimentStart_Click()GetRS232Parameters()IfExist(Application.Path&/"rs232.log")ThenIfMessage.Question(("Should the last measurement log be deleted?"),("Yes"),("No"))=1ThenTryKillApplication.Path&/"rs232.log"AddTextToFile(("Log of measurement data")&gb.NewLine)AddTextToFile(("Date")&":  "&Format(Now,"dd. mmmm yyyy"))AddTextToFile("------------------------------")EndifElseAddTextToFile(("Log of measurement data"))AddTextToFile(("Date")&":  "&Format(Now,"dd. mmmm yyyy"))AddTextToFile("-------------------------------")EndifbtnExperimentStart.Enabled=FalsebtnExperimentStop.Enabled=TrueSetLEDColor(picStatus,"green")lblTemperaturAnzeige.Text="--- °C"timerSimulation.Start()timerSimulation.Trigger()timerReadData.Start()timerReadData.Trigger()timerDataLog.Start()timerDataLog.Trigger()expRX_TX.Hidden=TrueMTI.M11ProgramHideShow.Text=("Show measuring program")MTI.M11ProgramHideShow.Picture=Picture["icon:/16/up"]FMain.Hide()hTrayIcon.Show()EndPublicSubbtnExperimentStop_Click()timerSimulation.Stop()timerReadData.Stop()timerDataLog.Stop()btnExperimentStart.Enabled=TruebtnExperimentStop.Enabled=FalseSetLEDColor(picStatus,"red")lblTemperaturAnzeige.Text="--- °C"EndPublicSubTimerSimulation_Timer()DimaRangeAsFloat[]=[19.0,22.0]RandomizefTemperature=Round(Rnd(aRange[0], aRange[1]),-1)EndPublicSubtimerReadData_Timer()lblTemperaturAnzeige.Text=Str(fTemperature)&" °C"EndPublicSubtimerDataLog_Timer()AddTextToFile(">  "&Format(Now,"hh:nn:ss")&"  |  "&"T = "&Str(fTemperature)&" °C")EndPublicSubexpRX_TX_Hide()FMain.Height=160expRX_TX.Hidden=TrueEndPublicSubexpRX_TX_Show()FMain.Height=430expRX_TX.Hidden=FalseEndPublicSubAddTextToFile(TextAsString)DimhFileAsFileDimFilePathAsStringFilePath=Application.Path&/"rs232.log"TryhFile=OpenFilePathForAppendIfErrorThenMessage.Error(("File error"))ReturnEndifPrint#hFile, TextClose#hFileEndPublicSubhTrayIcon_Click()Message.Info(("I am the little program help..."))EndPublicSubhTrayIcon_MiddleClick()FMain.Close()EndPublicSubhTrayIcon_Scroll(DeltaAsFloat, OrientationAsInteger)IfOrientation=TrayIcon.VerticalThenPrint"VERTICAL"PrintDeltaEndPrivateSubSetRS232Parameters()DimaDataFlowAsNewString[]aDataFlow.Add("None")aDataFlow.Add("XON/XOFF")aDataFlow.Add("RFR/CTS")aDataFlow.Add("RFR/CTS + XON/XOFF")cmbFlow.List=aDataFlow
 
  cmbRS232Port.List=[("/dev/ttyUSB0.virtual")]cmbSpeed.List=["4800","9600","2400"]cmbParity.Add("None")cmbParity.Add("Even")cmbParity.Add("Odd")cmbDataBits.List=["8","7","6","5"]cmbStopBits.List=["1","2"]EndPrivateSubGetRS232Parameters()RS232.PortName=cmbRS232Port.Text' Setting the transmission parametersRS232.Speed=cmbSpeed.TextRS232.Parity=cmbParity.IndexRS232.DataBits=cmbDataBits.TextRS232.StopBits=cmbStopBits.TextRS232.FlowControl=cmbFlow.IndexEndPrivateSubSetLEDColor(picBoxAsPictureBox, sLEDColorAsString)picBox.Picture=Picture["LED/led_"&sLEDColor&".svg"]EndPublicSubForm_Close()IfMessage.Question(("Finish this experiment?"),("Yes"),("No"))=1ThenhTrayIcon.Hide()FMain.Close()EndifEnd
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.7 Menu button

The development environment (IDE) of Gambas uses several MenuButtons at different places in different toolbars:
Figure 13.7.1: MenuButton in the IDE of Gambas 3
This makes sense if you want to use a complete, but dislocated menu on the program interface in the smallest space. The use of a MenuButton as a single button on the form is unusual. You can not only equip a MenuButton with a menu, but you can also assign a context menu to it, as shown in the Properties window (F4) of a MenuButton.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.7.1 Insert MenuButton

If you want to use one or more MenuButtons in a project on a form, the following notes must be observed:
First you should place the MenuButton in a container. A ToolBar is well suited for a (horizontal) toolbar:
Figure 13.7.1.1: Two MenuButtons in one toolbar
Then the individual menus are to be designed and most safely declared with the MenuEditor in the desired structure:
Figure 13.7.1.2: Menu editor with the individual menus
Make sure to set the.Visibleproperty for the menus in the top level of the hierarchy (image file and help) toFalseso that they do not appear on the form. For each menu in the menu list - except for the menumnuSpace- the property.Captionmust be set to a string that is not empty; even if this character string is not displayed, otherwise a hyphen will be generated! You can assign a suitable icon to each menu.
Afterwards, the actions that are triggered when a certain menu is activated by a click must be described in the source code. Here is a corresponding extract from a source text:


```
PublicSubmnu11Open_Click()OpenImage()mnu13Print.Enabled=TrueEnd'  mnu11Open_Click()PublicSubmnu13Print_Click()PrintImage()mnu13Print.Enabled=FalseEnd' mnu13Print_Click()
```

Finally, the mentioned actions OpenImage() and PrintImage() have to be coded, which basically determine the functionality of the program:


```
' Eigene Programm-AktionenPublicSubOpenImage()Dialog.Title="Import an image file!"Dialog.Filter=["*.png","Image files"]IfDialog.OpenFile(False)=TrueThenMessage.Info("The opening of the image file was cancelled!")Return' Cancel-Button pressed...Endif' Dialog.OpenFileEnd' OpenImage()PublicSubPrintImage()Message.Info("The image is printed (print routine is called up)!")End' PrintImage()
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Menus



# Chapters



# 13.7.2 Project MenuButton

The complete project can be found in the download area. The source code ofFMain.classis specified here. The code consistently implements the above-mentioned remarks and notes:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4][5]FMain.Center[6]FMain.Resizable=False[7]PictureBox1.Border=Border.None[8]PictureBox1.Picture=Picture["fractal.jpg"][9]Label1.Text="Fractal Geometry - Computer Science Course 2012"[10]ToolBar1.H=24[11][12]mnubtnFile.Width=48[13]mnubtnFile.H=24[14]mnubtnFile.Picture=Picture["icon:/16/options"][15]mnubtnFile.Menu="mnuFile"[16]mnubtnFile.Tooltip="File-Operationes"[17]mnubtnFile.MenuOnly=False[18][19]mnubtnHelp.Width=72[20]mnubtnHelp.H=24[21]mnubtnHelp.Text="Hilfen"[22]mnubtnHelp.Menu="mnuHelp"[23]mnubtnHelp.MenuOnly=True[24][25]toolbtnClose.Picture=Picture["icon:/16/quit"][26]toolbtnClose.Tooltip="Quit Program"[27][28]End' Form_Open()[29][30]PublicSubForm_Close()[31]FHelp.Close[32]FMain.Close[33]End' Form_Close()[34][35]'Own Program Actions -----------------------------------------------------------[36][37]PublicSubOpenImage()[38][39]Dialog.Title="Import an image file!"[40]Dialog.Filter=["*.png","image files"][41][42]IfDialog.OpenFile(False)=TrueThen' Multiselect=False (Standard)[43]Message.Info("The opening of the image file was cancelled!")[44]Return' Cancel button pressed[45]Else[46]TryPictureBox1.Picture=Picture.Load(Dialog.Path)[47]IfErrorThen[48]Message.Error("Error when opening the image file")[49]Else[50]Label1.Alignment=Align.Left[51]Label1.Text=" File: "&File.Name(Dialog.Path)[52]Endif' ERROR?[53]Endif' Dialog.OpenFile[54][55]End' OpenImage()[56][57]PublicSubPrintImage()[58]Message.Info("The image is printed (print routine)!")[59]End' PrintImage()[60][61]' Menu-Actions -----------------------------------------------------------[62][63]PublicSubmnu11Open_Click()[64]OpenImage()[65]mnu13Print.Enabled=True[66]End' mnu11Open_Click()[67][68]PublicSubmnu13Print_Click()[69]PrintImage()[70]mnu13Print.Enabled=False[71]End' mnu13Print_Click()[72][73]PublicSubmnu21Help_Click()[74]FHelp.Show[75]End' mnuHelp_Click()[76][77]PublicSubmnu22Information_Click()[78]Desktop.Open("http://www.gambas-buch.de/dw/doku.php?id=k13:start")[79]End' mnu32Information_Click()[80][81]PublicSubtoolbtnClose_Click()[82]FMain.Close[83]End' toolbtnClose_Click()[84][85]PublicSubmnubtnFile_Click()[86]Message.Info("Click on symbol ---> Call sub-programme or help text ...\nClick on the small black arrow ---> View menu list.")[87]End' mnubtnFile_Click()
```

Figure 13.7.2.1: MenuButton in use
Comments:


# 13.7.3 Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# 14.0 Keyboard and mouse

The two input devices, keyboard and mouse, have been standard on computers for many years.In this chapter you will learn about the use of keyboard and mouse under Gambas.
Figure 14.0.1: Keyboard K102


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# 14.1.0 Keyboard

The set emphasis placed in this chapter follows the requirements of using the keyboard under Gambas:
Figure 14.1.0.1: Keyboard K102 - Function keys F1 - F12


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# Table of Contents



# 14.1.1 Class Key

The (static) Key class (gb. qt4) is used to retrieve information from the keyboard and defines constants for selected keys. Apart from the properties, this class has no methods.
Similar to the class Mouse (→ chapter 14.2), the class Key does not have any events itself, but there are keyboard events that are dealt with in → chapter 14.1.3.


# 14.1.1.1 Properties of the class Key

The following table presents selected properties of the Key class:
Table 14.1.1.1.1: Description of selected properties of the 'Key' class
Please note that, for example, the propertiesKey. Alt,Key. Control,Key. ShiftandKey. Normalare always associated with the two eventsComponent_KeyPressorComponent_KeyRelease!


# 14.1.1.2 Keys - Constants

Gambas has a set of keyboard constants for certain keys with sufficient self-explanatory names:


```
F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24
Enter Return
Left Right Down Up
Home End PageUp Insert PageDown Delete
BackSpace Space Tab NumLock CapsLock Esc Pause Print
```

Observe these notes:


```
'...DimiKeyValueAsInteger' Syntax: anInteger = Key[ Key As String ]iKeyValue=Key["R"]'...
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# Table of Contents



# 14.1.3 Keyboard and events

Keyboard events are events that refer to events of visible control elements (components) associated with the keyboard.


# 14.1.3.1 Overview of keyboard events

You will get information about the pressed key if you use theClass Keykey described in chapter 14.1.1.1.


# 14.1.3.2 Project

The following project tries to evaluate the information about a pressed key and to react appropriately to it in the program. In the text field, only characters from a highly restricted character range [&, 0-9, a-f, A-F] are used. (→ Chapter 8.3.3.3 LIKE operator), whereby the &-character may only be entered as the first character (optional). The correct syntax of the entered color value is checked with a regular expression. If the color value is syntactically correct, the corresponding color is displayed briefly, otherwise an error message is displayed.
Figure 14.1.3.2.1: Entering a color value
Figure 14.1.3.2.2: Display of the color to the color value
The completely specified source code must also be considered under this aspect. In a productive project, coding would be more effective because some restrictions are doubly secured.


```
' Gambas class filePrivatesSubjectAsStringPrivatesPatternAsStringPublicSubForm_Open()FMain.Text="KeyPress - KeyRelease"FMain.CenterFMain.Resizable=FalsetxbColourvalue.CleartxbColourvalue.MaxLength=6PictureBox1.Stretch=TruePictureBox1.Picture=Picture["Symbols/colour.png"]End' Form_Open()PublicSubtxbColourvalue_KeyPress()IfKey.ControlAndKey.Code=Key.F1ThenbtnHelp_Click()' Help function with CTRL+F1If(Key.Code=Key.ReturnOrKey.Code=Key.Enter)AndtxbColourvalue.TextThenMessage.Info("The entered Characters are:\n\n"&Upper(txbColourvalue.Text))IfLeft(txbColourvalue.Text,1)="&"ThentxbColourvalue.MaxLength=7ElsetxbColourvalue.MaxLength=6Endif' Left(txbColourvalue.Text, 1) = "&" ?Endif' Key.Code = Key.Return Or Key.Code = Key.Enter ?IfKey.Code=Key.BackSpaceAndLen(txbColourvalue.Text)>0ThentxbColourvalue.Text=Left(txbColourvalue.Text,Len(txbColourvalue.Text)-1)Endif' Key.Code = Key.BackSpace And Len(txbColourvalue.Text) > 0 ?' Permissible characters for a colour value in hexadecimal representationIfKey.TextNotLike"[&0-9a-fA-F]"ThenStopEventEndif' Key.Text Not Like "[&0-9a-fA-F]"End' txbColourvalue_KeyPress()PublicSubtxbColourvalue_KeyRelease()IfLen(txbColourvalue.Text)=0ThentxbColourvalue.MaxLength=6IfLeft(txbColourvalue.Text,1)="&"ThentxbColourvalue.MaxLength=7End' txbColourvalue_KeyRelease()PublicSubbtnCheckColorValue_Click()DimpPanelAsPanelpPanel=NewPanel(FMain)pPanel.H=88pPanel.W=pPanel.HpPanel.x=208pPanel.y=16pPanel.Border=Border.RaisedsSubject=txbColourvalue.TextsPattern="^(&)?[a-fA-F0-9]{6}$"IfNottxbColourvalue.TextThenMessage.Warning("Enter a colour value (hex)!")txbColourvalue.SetFocusReturnEndif' txbColourvalue.Text = "" ?IfMatch(sSubject, sPattern)=TrueThenPictureBox1.HidepPanel.ShowIfLen(txbColourvalue.Text)=6ThenpPanel.Background=ZModul.NumberToDezimal(Upper(txbColourvalue.Text),16)ElsepPanel.Background=ZModul.NumberToDezimal(Right(Upper(txbColourvalue.Text),6),16)Endif' Len(txbColourvalue.Text) = 6 ?Wait2' Colour is displayed for 2 secondstxbColourvalue.CleartxbColourvalue.SetFocusPictureBox1.ShowElseMessage.Info("The HTML colour value is not correct.")txbColourvalue.SetFocusEndif' Match(sSubject, sPattern) = True ?pPanel.DeleteEnd' btnCheckColorValue_Click()'*** ADDITIONS *******************************************************************************PublicFunctionMatch(SubjectAsString, PatternAsString)AsBooleanDimrRegexAsRegexprRegex=NewRegexp(Subject, Pattern)IfrRegex.Offset=-1ThenReturnFalseElseReturnTrueEndif' rRegex.Offset = -1End' Match(Subject As String, Pattern As String) As BooleanPublicSubbtnHelp_Click()DimsMessageAsStringsMessage="<hr><b>Help on the character stock</b><hr>"sMessage&="-> Character &"sMessage&="<br>-> Digits 0-9"sMessage&="<br>-> Letters from the fields a-f and A-F<hr>"Message.Info(sMessage)txbColourvalue.SetFocusEnd' btnHelp_Click()
```

Hints:


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# 14.2.0 Mouse - Mouse

The chapter 'Mouse - Mouse' focuses on the following four topics:
Figure 14.2.0.1: Without my mouse nothing runs…


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# Table of Contents



# 14.2.1 Class Mouse

The (static) classMouse (gb.qt4)is used to retrieve information about the mouse and defines constants for the shape of the mouse pointer. In addition to the properties, this class has only 2 methods. The class Mouse hasnoevents!


# 14.2.1.1 Mouse Properties

Only selected mouse properties are presented in the following table, because essential information about the mouse wheel (MouseWheel) is described in → chapter 14.2.3 Mouse Wheel - MouseWheel.
Table 14.2.1.1.1: Description of selected properties of the 'Mouse' class


# 14.2.1.2 Methods of the class Mouse

TheMouse.Insidemethod returns True when the mouse pointer is over the specified component:


```
Static Function Inside ( Control As Control ) As Boolean
```

TheMouse.Movemethod moves the mouse pointer to the defined xy position on the screen:


```
Static Sub Move ( X As Integer, Y As Integer )
```



# 14.2.1.3 Mouse pointer - constants

Mouse pointers are always bound to components. Gambas has a set of defined mouse pointers and provides constants with sufficient self-explanatory names for these mouse pointers:


```
Arrow Blank Cross Custom Default Horizontal Pointing SizeAll SizeE SizeH SizeN SizeNE
SizeNESW SizeNW SizeNWSE SizeS SizeSE SizeSW SizeV SizeW SplitH SplitV Text Vertical Wait
```

The following constants are particularly important: Mouse.Blank, Mouse.Default, Mouse.Wait and for using your own mouse cursor Mouse.Custom.


```
txtValue.Mouse=Mouse.Blank' The Text Field component does not have a mouse pointer
```



```
' The default mouse pointer is replaced by your own existing mouse pointerDrawingArea1.Mouse=Mouse.CustomDrawingArea1.Cursor=NewCursor(Picture["icon:/16/pen"],0,15)
```

Alternatively, you can call the image editor in the Gambas IDE and draw your own mouse pointers and use them for your own projects:

In the following procedure, the mouse pointer of the form FMain is switched from the standard mouse pointer Mouse.Arrow to Mouse. Wait and after the output of the command 'ping' is changed back to the standard mouse pointer Mouse.Arrow.


```
PublicSubbtnPingOverShell_Click()DimsCommandAsStringSetLEDColor("green")TextArea.ClearFMain.Mouse=Mouse.WaitWaitsCommand="ping"&Chr(32)&TextBox1.Text&" -c 4"ShellsCommandToTextArea.TextTextArea.Text=gb.newline&TextArea.TextWaitFMain.Mouse=Mouse.DefaultSetLEDColor("orange")End' PingOverShell
```

This part of the source code belongs to a program with a window without window line, which can still be moved comfortably. The specified procedures use the properties Mouse.Left, Mouse.X and Mouse.Y:


```
' Gambas class file' Context menu to exit the program!PUBLICiDeltaXASIntegerPUBLICiDeltaYASIntegerPUBLICSUBForm_Open()FMain.CenterEND' Form_Open()PUBLICSUBForm_MouseDown()IFMouse.LeftTHENiDeltaX=Mouse.XiDeltaY=Mouse.YENDIF' Mouse.Left ?ENDPUBLICSUBForm_MouseMove()IFMouse.LeftTHENFMain.Move(FMain.X-iDeltaX+Mouse.X, FMain.Y-iDeltaY+Mouse.Y)ENDIF' Left mouse button pressed during mouse movement?END' Form_MouseMove()
```

Hints:
Mouseis the property of a component that is only viewed in conjunction with the mouse pointer. It indicates which mouse pointer is to be used - either a mouse pointer from the collection of gambas or a mouse pointer of your own:


```
FMain.Mouse=Mouse.WaitsCommand=sProgramName&Chr(32)&TextBox1.Text&" -c 4"ShellsCommandToTextArea.TextTextArea.Text=gb.newline&TextArea.TextFMain.Mouse=Mouse.Default
```

Even if the class Mouse itself does not have mouse events, there are events in the classes for certain components that refer to the mouse. These events are dealt with in chapter 14.2.2.2.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# Table of Contents



# 14.2.2 Mouse and events

Mouse events are events that refer to events of visible control elements (components) associated with the mouse. This means that you can only use the mouse object in connection with an event that refers to such mouse events:


```
PublicSubForm_Open()PrintMouse.XEnd' Form_Open()
```

The above instruction to display the value of Mouse.X in a console therefore produces the error message: No mouse event data. Understandable, because the procedure Form_Open() has nothing to do with the mouse.
The following section of the source code is correct:


```
PublicSubForm_MouseDown()' MouseDown() is a mouse eventPrintMouse.XEnd
```

In this way, the system determines internally in Gambas components and complex control elements such as a drawing area and other containers which (logical) sub-element of the container was clicked on. Mouse. X is compared with the absolute position of the container plus the relative position of the sub-element to its container, and the overview of events in a class captures all events related to the mouse - even if this is not immediately apparent from the name of some events:
The events of the last line are listed here and described in detail in other chapters (→ chapter 14.2.3 MouseWheel).


# 14.2.2.1 Examples 1-3

These procedures show you how to use selected events - MouseWheel, MouseDown, MouseUp and MouseMove - for 3 different components:


```
PublicSubdwgKS1_MouseWheel()IfMouse.Delta=+1Then' Mouse wheel forward? Enlarge picture (free definition)IffZoom<300ThenfZoom=fZoom+5KS_RP_G_Drawing()' Drawing of coordinate system, grid and graph of the functionEndifElseIffZoom>20ThenfZoom=fZoom-5KS_RP_G_Drawing()EndifEndif' Mouse.Delta = +1 ?End
```

The 'Control_MouseWheel()' event exists for selected components. This event is triggered when the mouse wheel is moved or pressed while the mouse cursor is over the component. The event returns the value Mouse.Delta of type Float. The value is +1 if the mouse wheel has been turned forwards.
As an alternative to IF Mouse.Delta = +1 THEN… you can also use IF Mouse.Forward THEN… as an alternative to IF Mouse.


```
PUBLICSUBForm_MouseDown()IFMouse.LeftTHENiDeltaX=Mouse.XiDeltaY=Mouse.YENDIF' Mouse.Left ?END' Form_MouseDown()PublicSubbtnGetInformation_MouseUp()Timer1.StopEnd' btnGetInformation_MouseUp()PUBLICSUBForm_MouseMove()IFMouse.LeftTHENFMain.Move(FMain.X-iDeltaX+Mouse.X, FMain.Y-iDeltaY+Mouse.Y)ENDIF' Left mouse button pressed during mouse movement?END' Form_MouseMove()
```



# 14.2.2.2 Example 4 - Use of mouse and special keys

Since the component WebView1 (gb.qt4.webkit) already uses the mouse wheel to scroll vertically through the web page, the zoom function had to be switched on or off with a switch in order to be able to work with the event MouseWheel(). The control key (Ctrl, Ctrl) is used as a switch. The event component_MouseWheel () refers to the WebView component mentioned above. The zoom factor is only changed if the CTRL key is held down at the same time as the mouse wheel is turned, otherwise the original scroll function for the content of the web page would be active:


```
[1]PublicSubWebView1_MouseWheel()[2]IfMouse.ControlThen' CTRL key (additional) pressed?[3]SelectCaseMouse.Delta[4]Case-1[5]IfWebView1.Zoom<2.26Then[6]WebView1.Zoom=Round(WebView1.Zoom-Mouse.Delta/4,-2)[7]Endif[8]Case+1[9]IfWebView1.Zoom>0.61[10]WebView1.Zoom=Round(WebView1.Zoom-Mouse.Delta/10,-2)[11]Endif[12]EndSelect[13]Endif' Mouse.Control = True?[14]End' WebView1_MouseWheel()
```

You can use the Mouse.Middle property to determine whether the middle mouse button - the mouse wheel - was pressed over a component.


```
[1]PublicSubWebView1_MouseDown()[2]IfMouse.MiddleThenWebView1.Zoom=1[3]End' WebView1_MouseDown()
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# Table of Contents



# 14.2.3 Mouse Wheel - MouseWheel

Many PC mice have a mouse wheel in addition to the left and right mouse buttons. This mouse wheel can be turned forwards or backwards. It is also possible to press the mouse wheel, so that the mouse wheel acts as (middle) mouse button. The mouse wheel is used in many applications to scroll through the contents of scrollable components or to trigger a zoom function for a specific component.
In Gambas, the 'Control_MouseWheel()' event exists for selected components. This event is triggered when the mouse wheel is moved or pressed while the mouse cursor is over the component. The event returns the value Mouse. delta of type Float. The value is +1 if the mouse wheel was turned forward and -1 if the mouse wheel was turned backward. You can use the Mouse. Middle property to determine whether the middle mouse button - the mouse wheel - was pressed over a component.


# 14.2.3.1 Project 1 - Zoom function for a function plotter

The presented project realizes a function plotter, in which the displayed section of the graph of a function can be enlarged[+], reduced[-] and reset to the normal resolution[1] by pressing three buttons.
Figure 14.2.3.1.1: Function Plotter
In addition, it should be possible to change the zoom factor using the mouse wheel in a given zoom range.
Only the procedure for implementing the zoom function is specified here, because the complete project function plotter is discussed in → chapter 23.4.6:


```
[1]PublicSubdwgKS1_MouseWheel()[2]IfMouse.Delta=1Then' Mouse wheel forward? Enlarge image - defined by the programmer[3]IffZoom<300Then[4]fZoom=fZoom+5[5]KS_RP_G_Drawing()' Drawing coordinate system, raster points and graph of function[6]Endif[7]Else[8]IffZoom>20Then[9]fZoom=fZoom-5[10]KS_RP_G_Drawing()[11]Endif[12]Endif[13]End' dwgKS1_MouseWheel()
```

Comments:


# 14.2.3.2 Project 2 - Zoom function for a WebBrowser

The presented project implements a WebBrowser for which the WebView component is used. Since this component already uses the mouse wheel to scroll vertically through the web page, the zoom function had to be switched on or off with a switch in order to work with the event MouseWheel(). The control key (Strg, Ctrl) is used as a switch.
Figure 14.2.3.2.1: Demonstration program WebBrowser with zoom function (mouse wheel)
In the following section, the complete source code for the project is specified and then commented on:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]FMain.Center[5]WebView1.Url="http://gambasdoc.org/help/comp/gb.qt4.webkit/webview?v3"[6]End' Form_Open()[7][8]PublicSubWebView1_MouseWheel()[9]IfMouse.ControlThen[10]SelectCaseMouse.Delta[11]Case-1[12]IfWebView1.Zoom<2.26Then[13]WebView1.Zoom=Round(WebView1.Zoom-Mouse.Delta/4,-2)[14]Endif[15]Case+1[16]IfWebView1.Zoom>0.61[17]WebView1.Zoom=Round(WebView1.Zoom-Mouse.Delta/10,-2)[18]Endif[19]EndSelect[20]Endif' Mouse.Control = True?[21]End' WebView1_MouseWheel()[22][23]PublicSubWebView1_MouseDown()[24]IfMouse.MiddleThenWebView1.Zoom=1[25]End' WebView1_MouseDown()[26][27]PublicSubbtnHelpMe_Click()[28]Message.Info("Zoom-Function:\nHold down the 'Control' key and turn the mouse wheel!")[29]End' btnHelpMe_Click()[30][31]PublicSubbtnClose_Click()[32]FMain.Close[33]End' btnClose_Click()[34]
```

Comments:


# 14.2.3.3 Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# 14.2.4 Class Cursor

The Cursor class implements custom mouse pointers. Please note that a mouse pointer is always bound to a specific component. The mouse pointer is the image that indicates the position of the mouse on the screen. For example, if you want to use your own mouse pointer, you must first specify that you want to replace the mouse pointer for a particular component with a user-defined mouse pointer. A new cursor object is then created, to which a small image is assigned as the appropriate mouse pointer. As an option, the coordinates of the mouse tip can also be specified if necessary.
You can select appropriate mouse pointers from these sources:
In the presented project 'Cursor' special mouse pointers are used for selected components, which originate from the three sources mentioned above. You will also learn how to use the mouse to draw in a DrawArea while holding down the left mouse button.
Figure 14.2.4.1: User-defined mouse pointer - drawing pencil - in the 'Cursor' project


```
The source textiscompletely specifiedandthencommented on:[1]' Gambas class file[2][3]PublicbStartAsBoolean[4][5]PublicSubForm_Open()[6][7]FMain.Center[8]FMain.Resizable=False[9]DrawingArea1.Cached=True[10]txtMouseX.Mouse=Mouse.Blank' TextBox without mouse pointer[11]txtMouseY.Mouse=Mouse.Blank[12]btnClose.Mouse=Mouse.Pointing' Mouse constant (hand)[13][14]btnClear.Mouse=Mouse.Custom[15]btnClear.Cursor=NewCursor(Picture["Mouse pointer/erase.png"])[16][17]' Standard mouse tip is the upper left corner of the mouse image[18]' With x=0 and y=15 the mouse tip lies on the pencil lead[19]DrawingArea1.Mouse=Mouse.Custom[20]DrawingArea1.Cursor=NewCursor(Picture["icon:/16/pen"],0,15)[21][22]Draw.Begin(DrawingArea1)[23]Draw.Foreground=Color.Red[24]Draw.Font.Size=30[25]Draw.Font.Bold=True[26]' Text centered on the drawing sheet in the specified rectangle[27]Draw.Text("Are you afraid of mice?",0,0, DrawingArea1.ClientW, DrawingArea1.ClientH, Align.Center)[28]Draw.End[29]bStart=True[30][31]End' Form_Open()[32][33]PublicSubDrawingArea1_MouseMove()[34][35]IfbStart=TrueThen[36]Wait0.2[37]bStart=False[38]DrawingArea1.Clear[39]Endif'  bStart = True?[40]txtMouseX.Text=Mouse.X[41]txtMouseY.Text=Mouse.Y[42]IfMouse.Left=TrueThen[43]Draw.Begin(DrawingArea1)[44]IfMouse.X>5AndMouse.X<DrawingArea1.Width-5AndMouse.Y>5AndMouse.Y<DrawingArea1.Height-5Then[45]Draw.Point(Mouse.X,Mouse.Y)[46]Endif[47]Draw.End[48]Endif' Mouse.Left = True?[49]End' DrawingArea1_MouseMove()[50][51]PublicSubbtnClear_Click()[52][53]DrawingArea1.Clear[54]txtMouseX.Text="0"[55]txtMouseY.Text="0"[56][57]End' btnClear_Click()[58][59]PublicSubbtnClose_Click()[60]FMain.Close[61]End' btnClose_Click()
```

Comments:
Figure 14.2.4.2: Mouse pointer in the image editor
In the project folder you will find custom mouse pointers that you can use for your own projects.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# 15.0 Desktop

By using this component, you can use routines based on the xdg-utils scripts of the Portland project to run, among other things, independently of the desktop:
You will learn how to send keyboard events to the window that has the focus, save and retrieve passwords depending on the desktop environment in use. It shows you how to manage top-level windows using freedesktop.org window manager specifications.
The following sections describe the following classes of the Desktop component with their properties, methods and events:

Figure 15.0.1: Project example for using the class SendMail


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# 16.0 Control elements 1

In this chapter you will learn everything important about the components and classes listed in the navigation. In addition to the properties, the methods that you need - like the events - for working independently on your projects are explained. Tried and tested projects for all components are made available to you in the download area, so that you can quickly gain practical experience in using the components.
}
Figure 16.0.1: Use of a text area to display data


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# 16.1 Label

You can use a label to display descriptive text. Therefore, the Label.Text property is also the most important. For the ValueBox program, for example, six labels were used to display a description of the contents of the six ValueBoxes:

Figure 16.1.1: Six labels in action
The following table describes further properties of a label:
Table 16.1.1: Selected label properties
You can use the method Label.Adjust() to react if the text for a label has changed at runtime and the label size is to adapt automatically to the changed text. Text changes refer not only to the label text itself, but also to changes to the font properties of the label. Then it becomes increasingly difficult to maintain the design on the form.


```
PublicSubbtnAdjust_Click()Label1.Text="Neue IP-Adresse (IPv6)"Label1.Adjust()End' btnAdjust_Click()PublicSubbtnAutoResize_Click()Label1.AutoResize=TrueLabel1.Text="IP-Adresse (IPv4)"End' btnAutoResize_Click()
```

Alternatively, set the Label. AutoResize property to True and achieve the same effect.
You can only mark the text to be displayed using theLabel.Fontproperty with regard to font, style and size, and this always applies to theentiretext. Since the font color is not a font property, you must set it using theLabel.Foregroundproperty.
In the component 'StatusBar' ofRaymonde de Bruijne, for example, 4 labels are used to display different information in 4 sections of the status bar:

Figure 16.1.2: Four labels in one StatusBar
In the following project the text “Running Text Speed” is used as descriptive text for the component Slider and a freely selectable text is displayed in another label as so-called Running Text:

Figure 16.1.3: Texts in two labels (→ 'Scrolling text')


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# ﻿16.6.1   TextBox und ihre Spezialisierungen

Die folgenden Komponenten sind TextBoxen mit speziellen Eigenschaften:
MaskBox:
Die Klasse MaskBox implementiert eine TextBox mit einer Eingabeformat-Maske.
ButtonBox:
Eine ButtonBox ist eine TextBox mit einer integrierten Schaltfläche. Eine Format-Maske ist optional einsetzbar.
ValueBox:
Eine ValueBox ist entweder eine TextBox, eine DateBox oder eine MaskBox in Abhängigkeit vom zugewiesenen Typ:
HistoryBox:
Eine HistoryBox ist eine TextBox mit “Gedächtnis”, bei der eine bestimmte Anzahl von Eingaben temporär gespeichert und wieder aufgerufen werden kann und wurde von Tobias Boege entwickelt.
InputBox:
Eine InputBox enthält neben einer Textbox auch einige Label in einem eigenen Formular.
Die aufgabenspezifische Prüfung der (Eingabe-)Zeichenkette aus der Text-Eigenschaft einer TextBox und den Rückgabewerten ihrer Spezialisierungen – die nicht notwendigerweise vom Typ String sind – liegt beim Programmierer, um valide Daten weiter zu verarbeiten.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.2 TextLabel

The Text-Label component can display simpleHTMLtext, also known as RichText. A text label will always be used if you only want to output the text to be displayed in plain format:

Figure 16.2.1: Display of extensive RichText in a TextLabel


# 16.2.1 Text Label Properties

In a text label, you can display text that you assign via the Text Label, Text or Text Label, Caption property. Further properties of a text label are described in the table:
Table 16.2.1.1: Selected text label properties


# 16.2.2 Syntax of RichText in Gambas

RichText in Gambas uses a subset ofHTML. The followingHTMLtags are allowed to mark text elements:


```
<h1>, <h2>, <h3>, <h4>, <h5>, <h6> → Headlines
<b> → Bold font
<i> → Italic 
<s> → Crossed out
<u> → Underlined
<sub> → Subscript 
<sup> → Superscript
<small> → Small
<p> → Paragraph
<br> → Line break
<a> → Link
<font> → Font
```

Information about <font> tag is given in the following table. Please note that the <font> tag no longer exists under HTML5.
tablelayout
Table 16.2.2.2.1: Information about <font> tag
With <a>….</a> insert a link into the RichText. It is underlined and displayed in blue format - as it is expected for a hyperlink - but has no effect! After right-clicking on the link, you can copy the link address in the context menu.
These tags are also tested to mark single or multi-line source code, insert a horizontal line or display an unsorted list of n entries:


```
<tt> → single-line source text 
<pre> → multiline source code
<hr> → horizontal line
<ul> → unsorted list
<li> → list
```

Hints:
Like a simple label, you react with the TextLabel.Adjust() method if the text for a text label has changed at runtime and the text label size should automatically adapt to the changed text:


```
PublicSubbtnAdjust_Click()TextLabel.Wrap=False' Bei längeren Textpassagen TRUETextLabel.AutoResize=FalseTextLabel.Padding=8TextLabel.Text="<font size=4 face=Ubuntu color=#C3DDFF>IP-Adresse &rarr; IPv4</font>"TextLabel.Text&="<hr>Informationen auf <a href=http://de.wikipedia.org/wiki/IPv4>"TextLabel.Text&="www.wikipedia.de</a>!"TextLabel.Adjust()End' btnAdjust_Click()PublicSubbtnAutoResize_Click()TextLabel.AutoResize=TrueTextLabel.Padding=8TextLabel.Text="<font size=+1 face=Arial color=Red>Neue IP-Adresse &rarr; IPv6</font>"TextLabel.Text&="<hr>Informationen auf <a href=http://de.wikipedia.org/wiki/IPv6>"TextLabel.Text&="www.wikipedia.de</a>!"End' btnAutoResize_Click()
```

Alternatively, set the TextLabel. AutoResize property to True to achieve the same effect.
16.2.3 Project {c_hl} 16.2.3 Project {c_hl}

Figure 16.2.3.1: RichText display for each HotSpot in a text label
As you can see, the source code for the project is very straightforward:


```
' Gambas class filePrivatemTextAsString[]PublicSubForm_Open()FMain.CenterFMain.Resizable=FalsemText=NewString[]mText=Split(File.Load("Text/architecture.txt"),"|")lblProject.Tag=mText[0]lblCompiler.Tag=mText[1]lblArchiver.Tag=mText[2]lblCompiledFiles.Tag=mText[3]lblExecutableFile.Tag=mText[4]lblMMAP.Tag=mText[5]lblClassLoader.Tag=mText[6]lblExecutionUnit.Tag=mText[7]lblSubRoutines.Tag=mText[8]lblComponentInterface.Tag=mText[9]lblComponentLoader.Tag=mText[10]lblInterpreter.Tag=mText[11]lblComponents.Tag=mText[12]lblNativeClasses.Tag=mText[13]End' Form_Open()PublicSubHotSpots_MouseDown()TextLabel1.Text=Last.TagEnd
```

The procedureHotSpots_MouseDown()replaces, in conjunction with the special objectLast- which returns a reference to the object that last triggered an event - here at least 14 individual procedures!


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.3 Button (gb. qt4)

This class implements a button - a button. A button can display a text, an image or both:

Figure 16.3.1: Three buttons in the GeoMap → project Chapter 17.15.1


# 16.3.1 Properties

Table 16.3.1.1: Selected button properties


# 16.3.2 Events

For a button, the click event is the dominant event. It is triggered when the user clicks on the button with the mouse.


```
' This function returns the names of the classes with the required property in a matrix.PrivateFunctionSearchClasses(sPropertyAsString)AsString[]DimhClassAsClassDimaNamesMatrixAsNewString[]ForEachhClassInClassesIfhClass.Symbols.Exist(sProperty, gb.IgnoreCase)ThenaNamesMatrix.Add(hClass.Name)NextReturnaNamesMatrix.Sort()' Return of the sorted array of namesEnd' Function SearchClasses(..)PublicSubbtnAnzeigeLast_Click()DimsElementAsStringTextArea.ClearForEachsElementInSearchClasses("PopupMenu")TextArea.Insert(sElement&", ")NextEnd' btnAnzeigeLast_Click()
```

Extensions exist if the properties Button. Default, Button. Cancel or Button. Value are set to the value True? properties.


# 16.3.3.3 Example 1

Example 1 shows a button with which three different actions (start, stop and reset) can be triggered. The pivotal point here is the use of the tag property. A process is started and the time duration in seconds is displayed hexadecimal. After stopping, the time can be read off and finally the start state can be set with reset:

Figure 16.3.3.1: Short-time measurement with hexadecimal display
The source code contains only the relevant sections of a larger project:


```
[1]...[2][3]PrivatesSecondAsInteger[4][5]PublicSubForm_Open()[6]...[7][8]btnStartStop.Tag="start"[9]btnStartStop.Picture=Picture["icon:/16/play"][10]btnStartStop.Caption="  Starten"[11]Timer1.Delay=1000[12]LCDNumber1.Mode=2' Hexadecimal[13][14]...[15]End' Form_Open()[16][17]PublicSubbtnStartStop_Click()[18][19]SelectCasebtnStartStop.Tag[20]Case"start"[21]btnStartStop.Picture=Picture["icon:/16/stop"][22]btnStartStop.Tag="stop"[23]btnStartStop.Caption="  Stoppen"[24]Timer1.Start' Aktion starten[25]Case"stop"[26]btnStartStop.Picture=Picture["icon:/16/redo"][27]btnStartStop.Tag="reset"[28]btnStartStop.Caption="  Reset"[29]Timer1.Stop' Aktion stoppen[30]Case"reset"[31]btnStartStop.Picture=Picture["icon:/16/play"][32]btnStartStop.Tag="start"[33]btnStartStop.Caption="  Starten"[34]sSecond=0[35]LCDNumber1.Value=0[36]EndSelect' btnStartStop.Tag[37][38]End' btnStartStop_Click()[39][40]PublicSubTimer1_Timer()[41][42]IncsSecond[43]LCDNumber1.Value=sSecond[44][45]End' Timer1_Timer()
```



# 16.3.4 Example 2

Example 2 shows the project to demonstrate the component gb. map for displaying maps from openstreetmap. org. However, the focus is not on the display of the maps, but rather the use of properties, methods and the click event for the three buttons on the form Figure 16.3.4.2.
From the source code (complete) only lines 1 to 33 are relevant for the topic button. The source code is then commented:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]FMain.Center[5]FMain.Caption="GeoMap - Daten von OpenStreetMap ©"[6][7]btnShowMap.Picture=Picture["icon:/16/internet"][8]btnShowMap.Text="  Anzeige GeoMap"[9]btnShowMap.Default=True[10]btnShowMap.SetFocus[11][12]btnClose.Caption="&Beenden"[13][14]btnShowHelp.Text=Null[15]btnShowHelp.Tooltip="Hinweise zur Nutzung von GeoMap"[16]btnShowHelp.Picture=Picture["icon:/16/help"][17][18]End' Form_Open()[19][20]PublicSubbtnShowMap_Click()[21]IfbtnShowHelp.Tag=NullThen[22]btnShowHelp.Value=True[23]btnShowHelp.Tag=1[24]Endif' btnHelp.Tag = Null ?[25]ShowMap()[26]End' btnShowMap_Click()[27][28]PublicSubbtnShowHelp_Click()[29]HelpMessage()[30]End' btnShowHelp_Click()[31][32]PublicSubbtnClose_Click()[33]FMain.Close[34]End' btnClose_Click()[35][36]'************************************************************************[37]PrivateSubShowMap()[38]DimiZoomAsInteger[39]DimfLatitude, fLongitudeAsFloat[40]DimsCacheName, sTileName, sTilePatternAsString[41]DimcArgumentsAsNewCollection[42][43]iZoom=13[44]fLatitude=52.78631' °Breite Osterburg[45]fLongitude=11.73872' °Länge  Osterburg[46]sTileName="OpenStreetMap"[47]sTilePattern="85.30.190.241/{z}/{x}/{y}.png"[48]cArguments=Null[49]sCacheName=Null[50]MapView1.Map.AddTile(sTileName, sTilePattern, cArguments, sCacheName)[51]MapView1.AllowEffect=False[52]MapView1.Map[sTileName].Visible=True[53]MapView1.Map.Center=MapPoint(fLatitude, fLongitude)[54]MapView1.Map.Zoom=iZoom[55][56]End' ShowMap[57][58]PrivateSubHelpMessage()[59]DimsMessageAsString[60][61]sMessage="<hr><b>Hinweise zum Einsatz der Komponente Map</b><hr>"[62]sMessage&="» Verschieben der Karte mit der linken Maustaste"[63]sMessage&="<br>» Zoomen mit dem Maus-Rad>"[64]sMessage&="<br>» Original-Zoom mit 'Anzeige GeoMap'<hr>"[65]sMessage&="» Enter-Taste setzt Standard-Anzeige (Original-Zoom)"[66]sMessage&="<br>» Tastenkombination ALT+b beendet das Programm<hr>"[67]sMessage&="▪ Entwickler der Komponente gb.map ist Fabien Bodard"[68]sMessage&="<br>▪ EMail: gambix@users.sourceforge.net<hr>"[69]Message.Info(sMessage)[70]End' HelpMessage()
```

Comments:

Figure 16.3.4.1: Program help

Figure 16.3.4.2: Project GeoMap
Hint:
If the function is called with only one argument, then there is only the “OK” button.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.4 ToggleButton (gb. qt4)

This class implements a ToogleButton - a switchable button that has two states: engaged and disengaged. A ToggleButton can display a text, an image or both.


# 16.4.1 Properties

The properties of a ToggleButton differ only in some of the properties of a button and these are specified in the table:
Table 16.4.1.1: Selected ToggleButton properties


# 16.4.2 Events

The click event is also the dominant event for a ToggleButton. It is triggered when the user clicks with the mouse on the toggle button or when the value of the. value property changes.


# 16.4.3 Example 1

Example 1 shows the use of a toggle button in the source code section, which can be used to set two different print modes. The ToggleButton displays two different icons and tooltip texts depending on the switching status. The source code contains only the relevant sections of a project for printing images, which is fully described in chapter 23.6.1:


```
PublicSubForm_Open()...togbtnColorModus.Picture=Picture["icon:/16/fill"]togbtnColorModus.Tooltip="FarbModus: Farbdruck"myPrinter.GrayScale=False...End' Form_Open()PublicSubtogbtnColorModus_Click()IftogbtnColorModus.Value=TrueThentogbtnColorModus.Picture=Picture["icon:/16/properties"]togbtnColorModus.Tooltip="FarbModus: Graustufen"printerImage.GrayScale=TrueElsetogbtnColorModus.Picture=Picture["icon:/16/fill"]togbtnColorModus.Tooltip="FarbModus: Farbe"printerImage.GrayScale=FalseEndif' togbtnColorModus.Value = True ?End' togbtnColorModus_Click()
```



# 16.4.4 Example 2

If you use the TextArea component to display single-color text, the text is wrapped after a line end character. If the paragraph is longer, you may have to scroll right through the text to read it completely. You can prevent this behavior by using the TextArea.Wrap = True property to specify that the text is wrapped before the word which can no longer be displayed completely in the relevant line. Attention: There is no automatic hyphenation!
Source code extract:


```
PublicSubForm_Open()...ToggleWrapping.Text="Switch on wrapping"...End' Form_Open()PUBLICSUBToggleWrapping_Click()IfToggleWrapping.ValueThenToggleWrapping.Text="Switch off wrapping"TextArea.Wrap=TrueElseToggleWrapping.Text="Switch on wrapping"TextArea.Wrap=FalseEndif' ToggleWrapping.Value = True ?END' ToggleWrapping_Click()
```

It is not a good plan to use “Wrapping on” or “WordWrapping off” as a label, for example, because it is not possible to decide whether it is a status or a request.


# 16.4.5 Example 3

With the property ToggleButton. Radio you can specify that a group of at least 2 ToggleButtons in a container component behaves like a RadioButton: Only a ToggleButton from the group can be activated.
Four toggle buttons are placed on a panel. The first three form a group and the first button is engaged. The ToggleButton number 4, on the other hand, has its own ToggleButton life, independent of the states of the first three and is engaged when the program is started:


```
[1]PublicSubForm_Open()[2]...[3]ToggleButton1.Radio=True[4]ToggleButton2.Radio=True[5]ToggleButton3.Radio=True[6]ToggleButton1.Value=True[7][8]ToggleButton4.Value=True[9]...[10]End' Form_Open()
```


Figure 16.4.5.1: ToggleButton on a panel
Comments:


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.5 ToolButton (gb. qt4)

This class implements a button for a ToolBar. A ToolButton can display an image, a text or both. In most cases, the text is dispensed with:

Figure 16.5.1: ToolButton and separators in a toolbar in the IDE


# 16.5.1 Properties

The properties of a ToolButton differ only slightly from the special properties of a' normal' button.
Table 16.5.1.1: Selected button properties
You can use any icon on the button - it will be automatically stretched - provided that you only use ToolButton or MenuButton in the toolbar (ToolBar).


# 16.5.2 Events - Events

The click event is also the dominant event for a ToolButton. It is triggered when the user clicks with the mouse on the ToolButton or when the value of the. value property changes.
Section of a source code for a project in which 4 toolbuttons (→ Figure 16.5.3.1) are used:


```
[1]PublicSubtbImageOpen_Click()[2]ImageOpen()[3]mnu13Print.Enabled=True[4]tbPrint.Enabled=True[5]End' tbOpen_Click()[6][7]PublicSubtbImagePrint_Click()[8]ImageOpen()[9]mnu13Print.Enabled=True[10]tbPrint.Enabled=True[11]End' tbOpen_Click()[12][13]PublicSubtbHelp_Click()[14]FHelp.Show[15]End' tbOpen_Click()[16][17]PublicSubtbFormClose_Click()[18]FHelp.Close[19]FMain.Close[20]End' tbOpen_Click()
```



# 16.5.3 Example

A tried and tested project for the use of a ToolBar with some ToolButtons can be found in → chapter 12.5 ToolBar. There you will find the complete source code, which is commented on in the relevant passages.

Figure 16.5.3.1: ToolButton and separators in a toolbar
Another project is described in chapter 18.6 Toolbar in connection with the properties, methods and events of the container component ToolBar.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.6.0 TextBoxes

Subjects of the considerations in chapters 16.6 to 16.11 are the component TextBox and its specializations MaskBox, ValueBox, HistoryBox, InputBox and ButtonBox.


# 16.6.0.1 TextBox

The class TextBox (gb.qt4) implements a one-line text input component.

Figure 16.6.0.1.1: TextBoxes for entering ①, ② and displaying ③ strings
First, selected properties and methods of the TextBox class are described and then essential events are characterized. Finally, in → chapter 16.6.3 examples for the use of a TextBox in different applications are presented.


# 16.6.0.2 Property TextBox

The class TextBox has these essential properties:
Table 16.6.0.2.1: Properties of the TextBox class


# 16.6.0.3 Methods TextBox

Only essential methods are presented for the TextBox class:
Table 16.6.0.3.1: Methods of the TextBox class


# 16.6.0.4 Events TextBox

These events are specific to a TextBox:
Table 16.6.0.4.1: Selected events of the TextBox class


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# 16.6.1 TextBox and its specializations

The following components are TextBoxes with special properties:
MaskBox:The class MaskBox implements a TextBox with an input format mask.
ButtonBox:A ButtonBox is a TextBox with an integrated button. A format mask is optionally available.
ValueBox:A ValueBox is either a TextBox, a DateBox or a MaskBox depending on the assigned type:
HistoryBox:A HistoryBox is a TextBox with “memory”, in which a certain number of entries can be temporarily stored and recalled and was developed by Tobias Boege.
InputBox:In addition to a text box, an InputBox also contains some labels in its own form.
The task-specific check of the (entry) string from the text property of a TextBox and the return values of its specializations - which are not necessarily of the type string - lies with the programmer to process valid data further.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.6.2 Valid data

Data is processed in all computer programs. Data is to be seen as information bound to characters. These statements make it clear once again that we are still dealing with electronic data processing (EDP) at present! Today, this is done at a high level in terms of the algorithms, programming languages and computers used. No comparison to the beginnings in computer science, which the author experienced in the computer center at the TH Magdeburg and in the computer science lectures of Dr. Stuchlik from 1967-1971.
The data to be processed
This chapter focuses on the component 'Textbox'. Note that a text box in the TextBox.Text property returns a string (data type String) when you read input from a TextBox. You must decide whether you want to remove the text from a text box or not.
for further use.
Irrespective of your decision for the specific application, you as a program developer should ensure that only valid character strings are forwarded to the program as (valid) data from a TextBox in order to prevent runtime errors! A runtime error in the program flow occurs, for example, if a string is entered in a TextBox that cannot be converted into a natural number, which is expected there, or a file that does not exist in the specified directory is accessed in a procedure. A large number of such errors can be intercepted, displayed or processed in appropriate error handling routines by defensive programming. In all cases, protection of the programme has priority!
Before embarking on the rather arduous path of validating entries from a text box, you should check whether there are alternatives to the TextBox and its specializations in order to be able to make secure entries!
These alternatives - in the context of the tasks to be solved - include the following components:
The following components are not alternatives because you must always check the entries before you can continue to process valid data:
If none of the above-mentioned alternative components are considered for your Gambas project, you must design, implement and test your own concepts for validating entries from a TextBox (InputBox, MaskBox, ValueBox, HistoryBox and ButtonBox). A tried and tested approach consists of
Often the character scanner is omitted as a pre-check and only the return value from the text box or its specializations is examined. Note that the return value is from a TextBox, MaskBox or HistoryBox of type String and from type Date from a DateBox.


# 16.6.2.1 Tasks

The following tasks are to be processed to check entries from a TextBox or its specializations in order to provide valid data:
(A1) Save that in a program only valid date values in the (English) format tt.mm.jjjj can be processed further!
(A2) Develop suitable procedures to check entries from the following components:


# Solution to task A1:



```
PublicdDatumAsDate...PublicSubDateChooser1_Activate()dDatum=DateChooser1.ValueDateBox1.Value=dDatumEnd' DateChooser1_Activate()
```



# Solution to task A2:

If you are using a MaskBox or DateBox or ValueBox (Date type), you must check the entries yourself before you can save an entered date in the variable dDate and process it further or display an error message:

Figure 16.6.2.1.1: Secure entries from a TextBox or its specializations


# Solution subtask A.2.1:

In the Date-TextBox the function IsDate () is used for checking the date in the German format dd. mm.yyyyy. However, this function includes the current system language in its test. Therefore, a date in the German format can only be recognized as such if the system language is set to German, otherwise the program will always return an input error in spite of correct date input.
The used solution idea consists of
first save the character string from the TextBox in the local variable sEnter (line 24),
remove all blanks at the beginning and end of the string (line 25) and reduce all duplicate blanks in the character string to a single space if they exist (lines 27 to 29); and 
then split the character string with the split function into 3 parts (line 32), using the space character as a separator. All 3 parts are stored as elements in a string array aMatrix.
This idea can be adapted for many tasks with other separators. The source code for all four partial solutions is completely specified and commented on:


```
[1]PublicdDatumAsDate[2]PublicsMACAsString[3]PublicsMessageAsString[4]PublicsIPAdresseAsString[5][6]PublicSubForm_Open()[7]FMain.Center()[8]FMain.Resizable=False[9]' Mode constants are in the DateChooser class and not in DateBox class![10]DateBox1.Mode=DateChooser.DateOnly[11]' DateBox1.Value = Now ' Then no data check would be necessary![12]DateBox1.ReadOnly=True[13]ValueBoxIP.Type=ValueBoxIP.IPAddress[14]MaskBoxMAC.Mask="[a-fA-F0-9][a-fA-F0-9]:[a-fA-F0-9][a-fA-F0-9]:[a-fA-F0-9]\[a-fA-F0-9]:[a-fA-F0-9][a-fA-F0-9]:[a-fA-F0-9][a-fA-F0-9]:[a-fA-F0-9][a-fA-F0-9]"[15]End' Form_Open()[16][17]PublicSubtxtDate_Activate()[18]DimaMatrixAsString[][19]DimaMonateAsString[][20]DimsMonat, sEingabe, sDatumAsString[21][22]aMonate=["Januar","Februar","März","April","Mai","Juni","Juli","August",\"September","Oktober","November","Dezember"][23][24]sEingabe=txtDate.Text[25]sEingabe=Trim(sEingabe)[26][27]WhileInStr(sEingabe,"  ")[28]sEingabe=Replace$(sEingabe,"  "," ")[29]Wend[30]txtDate.Text=sEingabe[31][32]aMatrix=Split(sEingabe," ")[33][34]IfaMatrix.Count<>3Then[35]Message.Error("Input error")[36]Return[37]Endif' aMatrix.Count <> 3 ?[38][39]IfaMonate.Exist(aMatrix[1])Then[40]sMonat=Str(aMonate.Find(aMatrix[1])+1)[41]Else[42]Message.Error("Input error")[43]Return[44]Endif' aMonate.Exist(aMatrix[1]) ?[45][46]sDatum=aMatrix[0]&sMonat&"."&aMatrix[2][47][48]IfIsDate(sDatum)Then[49]dDatum=Val(sDatum)[50]DateBox1.Value=dDatum' For control only[51]Else[52]Message.Error("Input error")[53]Return[54]Endif' IsDate(sDatum)[55]End' txtDate_Activate()
```

Comment:
Lines 34-37 check whether exactly 3 elements were stored in array aMatrix. In the event of an error, an error message is output, and the system checks whether the month name was written correctly in lines 39-44; if an error occurs, a corresponding message is output. If the test is positive, the variable sMonth in line 46 is used to specify a date string in the format tt.mm.jjjj. Finally, the function IsDate(…) checks whether the character string sDate can be interpreted as a valid German date - otherwise there is a suitable message.


# Solution subtask A. 2.2.2

“The MAC address (Media Access Control Address) is the hardware address of each individual network adapter that serves as the unique identifier of the device in a computer network.” can be found under the link:http://de.wikipedia.org/wiki/MAC-Adresse. A MAC address is a 48-bit data word or a 6-byte data word. The 6 bytes are hexadecimal and are separated by 5 colons. An adapted solution idea is implemented as in the subtask A. 2.1. By using the set MAC mask it is guaranteed that only allowed characters[0-9a-fA-F] are accepted by the MaskBox. All other characters are ignored. Therefore, lines 10 to 13 and a character scanner in lines 15 to 20 could also be omitted here. The mask with spaces and colons will not be displayed until you activate the box with a single click. The source code in line 22 only ensures that the entered letters are displayed in the MAC address as uppercase letters - pure display cosmetics.


```
[1]PublicSubMaskBoxMAC_Activate()[2]' Datentyp von MaskBoxMAC.Text ist String[3]DimaMatrixAsString[][4]DimsEingabe, sElementAsString[5][6]sEingabe=MaskBoxMAC.Text[7]sEingabe=Trim(sEingabe)[8]aMatrix=Split(sEingabe,":")[9][10]IfaMatrix.Count<>6Then[11]Message.Error("Input error_1")[12]Return[13]Endif' aMatrix.Count <> 6 ? ' Can be omitted here because a mask is used[14][15]ForEachsElementInaMatrix[16]IfLeft(sElement)NotLike"[abcdefABCDEF0123456789]"Or\Right(sElement)NotLike"[abcdefABCDEF0123456789]"Then[17]'If Left(sElement) Not Like "[a-fA-F0-9]" Or Right(sElement) Not Like "[a-fA-F0-9]" Then[18]Message.Error("Input error_2")[19]Return[20]Endif' Character not in input alphabet?[21]Next' sElement[22]sMAC=Upper(sEingabe)[23]MaskBoxMAC.Text=sMAC[24]End' MaskBoxDate_Activate()
```



# Solution subtask A. 2.3

A DateBox is a specialized MaskBox. By specifying the propertyDateBox. Modeyou can select either a date (Mode = 0) or a time (Mode = 2) or a timestamp with date and time (Mode = 1). The mode constants are currently only available in the DateChooser class and not in the DateBox class - what to expect. You must set the mode so:


```
DateBox1.Mode = 0
DateBox1.Mode = DateChooser.DateOnly ' Alternative
```

A click on the small button on the right opens a date selection dialog, from which you can select a valid date that is then displayed with the corresponding date mask. If you set the DateBox. readonly property to True, you can no longer change this displayed date.
If you do not initialize the DateBox with a (valid) date, you must check the entries in the DateBox in this way:


```
PublicSubDateBox1_Activate()' TypeOf(DateBox1.Value) = 8 => Data type: DateIfNotIsDate(Str(DateBox1.Value))ThensMessage="The entry is not a correct date!"' DateBox1.Value is NULL!Message.Error(sMessage)ReturnElsedDatum=DateBox1.ValueEndif' Not IsDate(Str(DateBox1.Value)) ?End' DateBox1_Activate()PublicSubDateBox1_DblClick()DateBox1_Activate()End' DateBox1_DblClick()
```

With the following lines in the procedure Form_Open() a check is omitted. However, you can then no longer enter a date yourself and must use the date selection dialog box - but you will then receive valid date data:


```
DateBox1.Mode = DateChooser.DateOnly 
DateBox1.Value = Now 
DateBox1.ReadOnly = True
```



# Solution subtask A. 2.4

The entry of IP addresses into a Value-Box as a specialized MaskBox works without any problems with the specification of the type in the procedure Form_Open():


```
ValueBoxIP.Type = ValueBoxIP.IPAddress
```

However, you have to check the IP address you have entered, because the default mask only allows digits at the allowed places in the 4 digit blocks as input characters - but these can only be used at any position in the range from 0 to 9. 192.189.100.1 as well as 192.189.245.202 are accepted as inputs! The validation of valid data is based on proven approaches:


```
PublicSubValueBoxIP_DblClick()' Datentyp von ValueBoxIP.Value ist StringDimaMatrixAsString[]DimiCountAsIntegeraMatrix=Split(ValueBoxIP.Value,".")ForiCount=0ToaMatrix.MaxIfVal(aMatrix[iCount])<0OrVal(aMatrix[iCount])>255ThensMessage="Die IP-Adresse ist im "&(icount+1)&". Block fehlerhaft ("&aMatrix[iCount]&") !"Message.Error(sMessage)ReturnEndifNext' iCountsIPAdresse=ValueBoxIP.ValueEnd' ValueBoxIP_DblClick()
```

After entering an IP address, the check is carried out by double-clicking on the ValueBox. Note that you can change the cursor position in the ValueBox with the arrow keys < or >!
Note:Please note the explanations in chapter → 19.6.5 Checking the syntax of character strings, because the new MATCH operator (from Gambas 3.4.2) in the component gb.pcre (Perl Compatible Regular Expression) simplifies the checking of character strings considerably.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.6.3 Examples for using a TextBox - Validation of input

Securing the use of valid data in a program is part of the concept for avoiding runtime errors. In → chapter 16.6.2 Valid Data you will find information on the topic and approaches how to validate data from TextBoxes and their different specializations (MaskBox, ValueBox, HistoryBox, InputBox and ButtonBox). For the input of complex numbers, matrices, polynomials or vectors you will find examples in the chapters 29.1 Complex Numbers, 29.3.3 Matrix, 29.3.4 Polynomial and 29.3.5 Vector.
There is no generally valid procedure for checking whether an input string from a TextBox can be converted to a valid date - if the specializations cannot be used. However, the following examples should show you how to use different strategies to provide a program with valid data from an input string for processing.


# 16.6.3.1 Example 1

A number A is recorded in a TextBox and an average measured value (without unit) as a real number R in another TextBox. From the two inputs, a quotient with four decimal places is calculated in the program QM = (A²-Pi) / R and output in a third TextBox (read only). The contents of the output TextBox are deleted each time the entries are changed.

Figure 16.6.3.1.1: Calculation of QM
Before you get started quickly, you should consider the following hints in peace and quiet, although the order does not correspond to any order of precedence:
The source code is presented in extracts:


```
[1]' Die Eigenschaft txbResult.ReadOnly wird auf TRUE gesetzt[2]PublicSubbtnCalculate_Click()[3]DimsInputN, sInputR, sPatternN, sPatternRAsString[4]DimiCountAsInteger[5]DimfValue, fCoefficientAsFloat[6][7]IfNottxbInteger.TextThen' Prüfung: TextBox leer?[8]Message.Error("Eingabefehler 1!")' Kommentar in einer MessageBox[9]txbInteger.SetFocus' Fokus auf die TextBox txbInteger setzen[10]Return' Prozedur verlassen[11]Endif[12]IfNottxbReal.TextThen' Prüfung: TextBox leer?[13]Message.Error("Eingabefehler 2!")[14]txbInteger.SetFocus[15]Return[16]Endif[17][18]'----------------------------------------------------------------------------[19][20]sInputN=Trim(txbInteger.Text)' Leerzeichen am Anfang und am Ende entfernen[21]TryiCount=CInteger(sInputN)' Versuch: Konvertierung String → Ganze Zahl[22]IfErrorThen' Fehlerbehandlung[23]Message("Fehler 1")[24]txbInteger.SetFocus[25]Return[26]Endif[27][28]' Anzahl Null herausfiltern[29]IfiCount=0Then[30]Message.Info("Die Anzahl muss größer als Null sein!")[31]txbReal.SetFocus[32]Return[33]Endif[34][35]'----------------------------------------------------------------------------[36][37]sInputR=Trim(txbReal.Text)' Leerzeichen am Anfang und am Ende entfernen[38]' Dezimalseparator der aktuellen Locale durch den Punkt ersetzen[39]sInputR=Replace$(sInputR,Left$(Format$(0,".0")),".")[40][41]TryfValue=CFloat(sInputR)' Versuch: Konvertierung String → Reelle Zahl[42]IfErrorThen[43]Message("Fehler 2")[44]txbReal.SetFocus[45]Return[46]Endif[47][48]IffValue=0Then' Null herausfiltern[49]Message.Info("Die (reelle) Zahl 0 ist nicht zulässig!")[50]txbReal.SetFocus[51]Return[52]Endif[53][54]'----------------------------------------------------------------------------[55][56]fCoefficient=Round((iCount*iCount-Pi())/fValue,-4)' Berechnung Quotient[57]txbResult.Text=Str(fCoefficient)' Anzeige Quotient (Koeffizient QM)[58][59]End' btnCalculate_Click()[60][61]'----------------------------------------------------------------------------[62][63]PublicSubtxbInteger_KeyPress()' Umsetzung Eingabe-Alphabet[64]CheckInput("0123456789")[65]End' txbDigits_KeyPress()[66][67]PublicSubtxbReal_KeyPress()' Umsetzung Eingabe-Alphabet[68]CheckInput("+-,0123456789")[69]End' txbDigits_KeyPress()[70][71]PublicSubCheckInput(sAllowedAsString)' Idee Charles Guerin[72]SelectCaseKey.Code[73]CaseKey.Left,Key.Right,Key.BackSpace,Key.Delete,Key.End,Key.Home,Key.Enter,Key.Return[74]Return[75]Default[76]IfKey.TextAndIfInStr(sAllowed,Key.Text)Then[77]Return[78]Endif[79]EndSelect[80]StopEvent[81]End' CheckInput(sAllowed As String)[82][83]' Public Sub txbInteger_Change()[84]'    txbResult.Clear[85]' End[86]' Public Sub txbReal_Change()[87]'   txbResult.Clear[88]' End[89][90]PublicSubTBIR_Change()[91]txbResult.Clear[92]End' TBIR_Change()
```

Comment:


```
[1]sInputN=Trim(txbInteger.Text)[2]sPatternN="^[1-9][0-9]*$"' Alternative mit Null: "^[0]{1}$|^[1-9][0-9]*$"[3]IfsInputNNotMatch sPatternNThen[4]Message.Error("Eingabefehler 3!")[5]txbInteger.SetFocus[6]Return[7]Endif[8]iCount=CInteger(sInputN)
```



# 16.6.3.2 Example 2

To ensure that only certain characters - here it is the numbers 0 to 9 - are accepted in a TextBox, the following sample source code is offered in the documentation:


```
' My text box only accepts digitsPublicSubMyTextBox_KeyPress()IfInstr("0123456789",Key.Text)=0ThenStopeventEndifEnd
```

Hints:
Works - but unfortunately, you can't correct the sequence of digits in any way, which can be considered a deficiency. Therefore, the following section introduces an improved solution in which you can move the cursor in the TextBox and delete individual digits with the BackSpace key:


```
PublicSubtxbDigits_KeyPress()' Nur die Ziffern 0..9 als zulässige Ziffern zulassenIf(Key.TextNotLike"[0-9]")And(Key.Code<>Key.BackSpace)And(Key.Code<>Key.Left)\\And(Key.Code<>Key.Right)ThenStopEventEndif' Key.Text Not Like "[0-9]" ?End' txbDigits_KeyPress()
```

You will undoubtedly still discover a disadvantage - the input alphabet is not variable if you think, for example, of the case that all digits 0-9 are allowed, plus the two sign (+-) and the characters dot, comma and asterisk, as well as the letter x. The input alphabet is not variable. The following solution safely eliminates the disadvantage:


```
PublicSubCheckInput(sAllowedAsString)' Idee Charles GuerinSelectCaseKey.CodeCaseKey.Left,Key.Right,Key.BackSpace,Key.Delete,Key.End,Key.Home,Key.Enter,Key.ReturnReturnDefaultIfKey.TextAndIfInStr(sAllowed,Key.Text)ThenReturnEndifEndSelectStopEventEnd' CheckInput(sAllowed As String)PublicSubtxbDigits_KeyPress()CheckInput("+-,.*0123456789x")End' txbDigits_KeyPress()
```

The check whether a character entered belongs to the input alphabet or not works without errors. However, remember to check the validity of the input string afterwards if, for example, the input string is to be interpreted as a term in a linear equation. The string -5,88*x+7,1+*23 contains only characters from the input alphabet and is nevertheless not suitable for processing, since it contains a syntax error in the sense of the term specification.


# 16.6.3.3 Example 3

This example does not focus on checking but on prevention, because the user is shown a hint text in the TextBox to minimize incorrect entries. A special TextBox developed by Tobias Boege is used - the Explain-TextBox. The Explain-TextBox is a TextBox, which allows to display an explanatory text (explanation) in the font color grey, if the TextBox is empty and does not have the focus. In this way, you might be able to dispense with explanatory labels in front of the text boxes:

Figures 16.6.3.3.3.1: Explain-TextBox
The class ExplainTextbox is provided in a project in the download area.


# 16.6.3.4 Example 4

It should be checked whether the input of a year number in the interval from 1600 to 2100 in a text box is or will be a leap year.
An astronomical year is the duration of the revolution of the Earth around the central body Sun - our star. In our time units this is 365 days, 5 hours, 48 minutes and 47 seconds. A normal calendar year - but what is already normal - has a length of 365 days. After 4 years, the 5 hours, 48 minutes and 47 seconds, which corresponds to about a quarter of a day, are combined into one day, the 29th of February, and thus a leap year has 366 days. There is a leap year every 4 years, but not every 100 years, but then every 400 years to compensate for the discrepancies of the inserted quarter days to 6 hours. I am thrilled!
As a preventive measure, the number of characters is limited to a maximum of 4 characters:


```
[1] Public Sub Form_Open()
[2]   txbLeapYear.MaxLength = 4
[3]   ...
[4] End ' Form_Open()
```

The function IsLeapYear (..) converts the above rule for leap years and returns the function value True if the year used as argument was or is a leap year:


```
[1] Public Function IsLeapYear(iYear As Integer) As Boolean
[2] 
[3]   If (iYear Mod 4) = 0 And (iYear Mod 100) <> 0 Or ((iYear Mod 400) = 0) Then
[4]      Return True
[5]   Else
[6]      Return False
[7]   Endif
[8] 
[9] End ' Function IsLeapYear(..)
```

In the following source code section - which is followed by a comment - you will see various (preliminary) checks:


```
[1]PublicSubtxbLeapYear_Activate()[2]DimiCountAsInteger[3]DimsInputAsString[4][5]sInput=Trim(txbLeapYear.Text)' Entfernung von Leerzeichen am Anfang und am Ende des Strings[6][7]ForiCount=1ToLen(sInput)[8]IfMid(sInput, iCount,1)NotLike"[1234567890]"Then' Zeichen-Prüfung auch mit [0-9][9]Message.Error("Eingabefehler - Zeichen!")[10]Return[11]Endif[12]Next[13][14]IfLen(sInput)<>4Then[15]Message.Error("Jahreszahl nicht vierstellig!")' optional[16]Return[17]Endif[18][19]IfCInt(sInput)<1600OrCInt(sInput)>2100Then' Bereichsprüfung [1600..2100][20]Message.Error("Eingabefehler - Bereich!")[21]Return[22]Endif[23][24]IfIsLeapYear(CInt(sInput))Then' Prüfung Schaltjahr und Kommentare[25]IfCInt(sInput)<Year(Now)Then[26]Message.Info("Das Jahr "&sInput&" war ein Schaltjahr.")[27]Else[28]Message.Info("Das Jahr "&sInput&" wird ein Schaltjahr sein.")[29]Endif[30]Else[31]IfCInt(sInput)<Year(Now)Then[32]Message.Info("Das Jahr "&sInput&" war kein Schaltjahr.")[33]Else[34]Message.Info("Das Jahr "&sInput&" wird kein Schaltjahr sein.")[35]Endif[36]Endif[37][38]End' txbLeapYear_Activate()
```

Comment:
The alternative presented here uses a regular expression with which all checks are performed in one step:


```
PublicSubtxbLeapYear_Activate()DimsSubject, sPatternAsStringsSubject=Trim(txbLeapYear.Text)sPattern="^([1][6789][0-9]{2})|[2][0]([0-9]{2})|2100$"' Check pattern as regular expressionIfsSubjectNotMatch sPatternThenMessage.Error("Eingabefehler!")ReturnEndifMessage.Info(Subst$("Das Jahr &1 ist &2ein Schaltjahr!",sSubject,IIf(IsLeapYear(CInt(sSubject)),"","k")))End' txbLeapYear_Activate()
```



# 16.6.3.5 Example 5

With the following source code you can completely synchronize the two TextBoxes txbA and txbB during input:


```
Public Sub txbA_Change() 
  txbB.Text = txbA.Text 
End ' txbA_Change()
```



# 16.6.3.6 Example 6



```
PublicSubtxbInput_Activate()DimsInputAsString=txbInput.Text' Replace the decimal separator of the current (German) locale with the dotPrintsInput
    sInput=Replace$(sInput,Left$(Format$(0,".0")),".")PrintsInputEnd
```



# 16.6.3.7 Example 7

There are n TextBoxes on a form, where the content of k selected TextBoxes (k ≤ n) is to be deleted with one call. The solution is to define a unique selling point for the TextBoxes whose content is to be deleted, and the tag property is a good way to do this.


```
PublicSubForm_Open()FMain.CentertxbBox1.Tag="L"txbBox2.Tag="L"txbBox4.Tag="L"txbBox6.Tag="L"...End' Form_Open()PrivateSubTBMultiClear()DimCAsControlDimtBoxAsTextBoxForEachCInMe.ControlsIfCIsTextBoxThenIfC.Tag="L"Then' Print C.Name ' KontrolletBox=C
           tBox.ClearEndifEndifNextEnd' TBMultiClear()PublicSubbtnTBClear_Click()TBMultiClear()End' btnTBClear_Click()
```



# 16.6.3.8 Example 8

The following task must be processed: When activating the Activate-Event of a textbox A (printing on the return key) a certain action is to be triggered and then the cursor is to be placed in the textbox B, which receives the focus. This is done manually with the tab key if the TextBox B in the hierarchy immediately follows the TextBox A. You define the hierarchy of components in the IDE in the hierarchy window. The following source code also implements the above mentioned behavior:


```
PublicSubtxb_A_KeyPress()IfKey.Code=Key.EnterOrKey.Code=Key.ReturnThen' ACTION ...txb_B.SetFocus()' Desktop.SendKeys("\t") ' Alternative if the Desktop component is usedEndifEnd' txb_A_KeyPress()
```

The use of the alternative has the advantage that the text is marked in the TextBox B, just like when using the tabulator key.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# 16.7 MaskBox

The class MaskBox (gb. form) implements a TextBox with an input mask. As tempting as the use of a MaskBox may seem - the masks 990.990.990.990 for an IP address or 09.09.0000 for a date also allow nonsensical entries such as a date with 02.13.2014 or an IP address with 202.112.237.273.
The most important property of a MaskBox isMaskBox.Mask. The mask is a string that specifies which input characters are allowed (input alphabet). The mask can be set or read out. If the mask is empty, the MaskBox behaves like a TextBox.
Table 16.7.1 Overview of the characters in a MaskBox
Examples of selected masks:
For example, specifying a date mask does not necessarily imply that the entry of the date 02/29/2013 - in contrast to 02/29/2012 - is recognized as an incorrect date. You must check entries that are read from a MaskBox to use valid data in the program. This means that there are two tasks for you if you want to use the MaskBox component as a specialized TextBox:
In a project with 5 MaskBoxes for different inputs you will be shown how to handle these two tasks successfully. Therefore, the complete source code is presented. There you will find the special input masks and the check procedures, which all rely on the component gb.pcre.


```
' Gambas class filePublicsMaskeAsStringPrivatesSubjectAsStringPrivatesPatternAsStringPublicSubForm_Open()FMain.Center()FMain.Resizable=FalsemboxTime.Mask="00:00 Uhr"mboxCurrency.Mask="########0<!,00 €"mboxColor.Mask="&H![0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]&"' mboxPictureSize.Mask = "### x ### px" ' AlternativemboxPictureSize.Mask="[0-9][0-9][0-9]x[0-9][0-9][0-9][ ]px"' 999 x 100mboxPoint3D.Mask="P(!#0|#0|#0)"' Koordinaten im Intervall 00..99End' Form_Open()'*********************************************************************************************************PublicSubMBGroup_Activate()SelectLast.TagCase"T"lblValue.Text=MBGroupCheck(mboxTime.Text,"T")Case"G"lblValue.Text=MBGroupCheck(mboxCurrency.Text,"G")Case"F"lblValue.Text=MBGroupCheck(mboxColor.Text,"F")Case"B"' DefaultlblValue.Text=MBGroupCheck(mboxPictureSize.Text,"B")Case"3D"' DefaultlblValue.Text=MBGroupCheck(mboxPoint3D.Text,"3D")EndSelectEnd' MBGroup_Activate()PublicSubMBGroup_DblClick()MBGroup_Activate()End' MBGroup_DblClick()PublicFunctionMBGroupCheck(sMBTextAsString, sTagAsVariant)AsStringDimaMatrixAsString[]SelectsTagCase"T"sSubject=Replace(sMBText," Uhr","")' Stunden gibt es von 00-19 Uhr und von 20-23 und 24 Uhr ist 00:00 Uhr' Minuten von 00 bis 59sPattern="^([01][0-9]|2[0-3]):[0-5][0-9]$"' hh:mm' sPattern = "^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$" ' hh:mm:ss mit SekundenIfMatch(sSubject, sPattern)=TrueThenReturn"Zeit-Eingabe O.K."ElseReturn"Zeit-Eingabe falsch!"Endif' Match(...) = True ?Case"G"sSubject=sMBText
        sPattern="^[ 0-9]+,[0-9]{2}( €)$"IfMatch(sSubject, sPattern)=TrueThenReturn"Geldwert-Eingabe O.K."ElseReturn"Geldwert-Eingabe falsch!"Endif' Match(...) = True ?Case"F"sMBText=Replace(sMBText,"&H","")sMBText=Replace(sMBText,"&","")sSubject=sMBText
      sPattern="^[0-9a-fA-F]{6}$"IfMatch(sSubject, sPattern)=TrueThenmboxColor.Text="&H"&Upper(sMBText)&"&"Return"FarbWert-Eingabe (hex) O.K."ElseReturn"Farbwert-Eingabe falsch!"Endif' Match(...) = True ?Case"B"sSubject=Replace(sMBText," px","")sPattern="^[0-9]{3}x[0-9]{3}$"IfMatch(sSubject, sPattern)=TrueThenReturn" Bildgrößenangabe O.K."ElseReturn"Bildgrößenangabe falsch!"Endif' Match(...) = True ?Case"3D"sMBText=Replace(sMBText,"P(","")sMBText=Replace(sMBText,")","")aMatrix=Split(sMBText,"|")Return"x = "&aMatrix[0]&", y = "&aMatrix[1]&", z = "&aMatrix[2]EndSelectEnd' MBGroupCheck(...)PublicFunctionMatch(SubjectAsString, PatternAsString)AsBooleanDimrRegexAsRegexp' Die Komponente gb.pcre (Perl Compatible Regular Expression) muss eingebunden seinrRegex=NewRegexp(Subject, Pattern)IfrRegex.Offset=-1ThenReturnFalseElseReturnTrueEndif' rRegex.Offset = -1End' Match(...) As Boolean
```

You do not need to use the Group and Tag property for the 5 mask boxes if you only perform one check in your project. By selecting the mask “P(!#0|#0|#0)” a check is not necessary for the coordinates of a point in the room, because only valid coordinates can be entered. This is not true for the mask mboxPoint3D.Mask = “P(!##|##|##)” - here it has to be checked! This mask also reserves 2 digits for each coordinate, but the default value for # is a blank character and not zero as in the case of the wildcard character 0.

Figure 16.7.1: Project MaskBox
After the complete input in a MaskBox you can check the input string and display the result by pressing Enter or double-clicking on the MaskBox.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.8 ButtonBox

The component ButtonBox (gb.qt4) is a composite component. It contains a TextBox and a small button on the (right) side. If you set the ButtonBox. editor. mask property, you can administrate the mask of the internal MaskBox to use the full range of functions. You already know fields of application for a ButtonBox from other contexts such as project selection in the start window of the Gambas IDE (→ chapter 16.6 Text Boxes).
Selected properties are listed and described in the following table:
Table 16.8.1: Overview of ButtonBox properties


# 16.8.1 Example 1 - ButtonBox

The use of a ButtonBox is ideal for secure path input. On the one hand, ButtonBox. ReadOnly = True in the dialog only valid path specifications can be selected and on the other hand, the selected path in the. text property is available as a character string for further use in the program. A mask is not used in the first example. An icon from the Gambas collection is used as a picture on the button:

Figure 16.8.1.1: ButtonBox
After a click on the internal button in the ButtonBox opens a dialog:

Figure 16.8.1.2: Directory selection dialog
After selection, all components are displayed in the selected project directory.

Figure 16.8.1.3: Display of the directory path in the ButtonBox
Finally, you can create an archive of all component files of the selected Gambas3 project. The complete project can be found in the download area. Only a section of the source code is displayed here:


```
' Gambas class filePublicSubForm_Open()FMain.CenterFMain.Resizable=TrueButtonBoxProject.Picture=Picture["icon:/16/open"]ButtonBoxProject.ReadOnly=TruebtnList.Enabled=FalsebtnMakeArchive.Enabled=FalseEnd' Form_Open()PublicSubButtonBoxProject_Click()' Diese Prozedur wird nach einem Klick auf das Icon in der ButtonBox generiertIfDialog.SelectDirectory()ThenReturnButtonBoxProject.Text=Dialog.PathbtnList.Enabled=TrueEnd' ButtonBoxProject_Click()…
```



# 16.8.2 Example 2 - ButtonBox with input mask

For example, in order to allow only dates to be entered, a DateChooser dialog box could be displayed after clicking on the button to select a date. You will now say that there is the DateBox class for this. But this is only a modified ButtonBox, as you will find confirmed after a look at the Gambas source code undercomp/src/gb.form/.src/Date/DateBox.class. A very small class that actually contains only one ButtonBox, whose mask is based on dates and times and opens a dialog with DateChooser. In the second example, this approach is implemented for a selection of a date. Since the specification of a mask is not automatically followed by a check of the entered date, you are required to allow only valid data from a secure entry:

Figure 16.8.2.1: ButtonBox with mask (date)

Figure 16.8.2.2: ButtonBox with error message when date entered
More secure is the selection of a (valid) date in the date selection dialog. It opens after a click on the small date button:

Figure 16.8.2.3: Date selection dialog

Figure 16.8.2.4: Display of the selected date
The source text is completely specified:


```
' Gambas class filePublicdDatumAsDatePublicSubForm_Open()Me.Center()Me.Resizable=FalseUpdateMask()End' Form_Open()PublicSubbtnboxDate_Click()FDateChooser.ShowModalbtnboxDate.Text=Format(dDatum, gb.ShortDate)btnboxDate_Activate()End' btnboxDate_Click()'********************************************************************************************PrivateSubUpdateMask()DimsMaskeAsStringsMaske=Format(Date(1111,11,11), gb.ShortDate)btnboxDate.Editor.Mask=Replace(sMaske,"1","0")End' UpdateMask()PublicSubbtnboxDate_Activate()Label1.Text=""IfNotIsDate(btnboxDate.Text)ThenLabel1.Text=String.Chr(187)&" Die Eingabe "&btnboxDate.Text&" ist kein Datum!"ElseLabel1.Text=String.Chr(187)&" Das Datum "&btnboxDate.Text&" ist o.k."Endif' Not IsDate(bbDate.Text) ?End' btnboxDate_Activate()PublicSubbtnboxDate_Change()Label1.Text=""End' btnboxDate_Change()
```

The contents of the procedure UpdateMask () are significant. Only ones are formatted as gb. ShortDate. This observes the current language settings, so that in Germany dd. mm. yyyyy appears. They cannot be zeros, because such a zero date would not generate any output! Now that the format is correct, will the ones for the correct syntax of the MaskBox be replaced with zeros, where 0 stands for any number? chapter 16.7 MaskBox (MaskBox. Mask) and only dates are accepted in the ButtonBox.
Quetext from FDateChooser.class:


```
' Gambas class filePublicSubForm_Open()WithMe.Center().Resizable=False.Arrangement=Arrange.Vertical.Margin=True.Spacing=TrueEndWithDateChooser1.Expand=TrueDateChooser1.Mode=DateChooser1.DateOnly' Only date selectionEnd' Form_Show()PublicSubDateChooser1_Activate()FMain.dDatum=DateChooser1.Value' Saving the date in a (global) variableMe.Close()End' DateChooser1_Activate()
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# 16.9 ValueBox

If you want to import only one value interactively in a program, you can use several components. One of them is the ValueBox component, whose properties and use are described in this chapter. You have to check the entered data for further use in your programs - such as the IP addresses, for example - to some extent yourself. But it is also unusual to be able to enter a time of 7:90, which leads internally to a time of 8:30 o' clock. You can assign a defined start value to each Valuebox. The set property ValueBox. read-only is only accepted for the types Number and Currency, but it can be read for all types. Six different types are available for the Valuebox:
(1) Type NumberOnly digits are accepted in the Valuebox of type Number and the comma as decimal separator. A dot is immediately converted to a comma if the German language setting is selected.
(2) Type DateA selected date is only transferred to the display with a double-click. The date displayed cannot be edited.
(3) Type TimeThe time can be taken over from a list (time interval 30 minutes) by double-clicking on the clock symbol. Use the cursor keys to navigate through the list. You can also enter the time directly in the format hh: mm - but with leading zero - and then edit this time.
ATTENTION: You can also enter a time of 27:88 o' clock, because an interval of 00 to 99 is allowed for both the hours and minutes. The time of issue is then 7:60 but 8:00. The input 60:99 o' clock becomes 13:39 o' clock (60h: 24= 2d+12h; 99min: 60=1h+39min. Thus 13h+39min are displayed as remaining time in the 24-hour interval! Unusual - but has a system.
(4) Type CurrencyMoney amounts - in Germany in euros - are entered separately with euro and cent with the decimal sign! Only the comma is allowed as decimal separator. The currency symbol is only displayed in the Valuebox. Internally, only the numerical value is stored. You can only enter positive currency amounts.
(5) Type DateTimeYou can select the date from the calendar and the time from the displayed list with a time difference of 30 minutes. Both values are transferred to the display by double-clicking. You can correct the values in the Valuebox. In the DateTime type Valuebox, in contrast to the Time type, you can only use the following intervals for hours 00.. 23 and minutes 00… 59. In the DateTime type Valuebox, you can only use the following intervals for hours 00… 23 and minutes 00… 59.
(6) IP address in IPv4 formatTo enter, place the corsor at the first position after the last digit (default is zero) and then enter the number triple in blocks. Use the two cursor keys (> and <) to switch to the other input fields. Leading zeros are suppressed in the Valuebox. You have to check the correctness of the IP address yourself, because the entries of the numerical triple are accepted for a block in the interval of 0 to 999 (!):


```
PublicSubbtnIPAdress_Click()DimaMatrixAsString[]DimiCountAsIntegerDimsMessageAsStringtxbDisplay.CleartxbDisplay.Alignment=Align.BottomRighttxbDisplay.Text=valBoxIPAdress.ValueaMatrix=Split(valBoxIPAdress.Value,".")ForiCount=0ToaMatrix.MaxsMessage="Die IP-Adresse ist im "&(icount+1)&". Block fehlerhaft ("&aMatrix[iCount]&") !"IfVal(aMatrix[iCount])<0OrVal(aMatrix[iCount])>255ThenMessage.Error(sMessage)valBoxIPAdress.SetFocusEndifNext' iCountEnd' IPAdress_Click
```

}}
Figure 16.9.1: Valuebox - 6 types
The source code for a project to demonstrate the use of the 6 types of a Valuebox is given here in full:


```
' Gambas class filePublicSubForm_Open()FMain.CenterFMain.Resizable=FalsebtnEnde.Cancel=True' Programm-Ende mit ESC-TastevalBoxNumber.Type=valBoxNumber.Number' valBoxNumber.ReadOnly = TruevalBoxDate.Type=valBoxDate.DatevalBoxTime.Type=valBoxTime.TimevalBoxCurrency.Type=valBoxCurrency.Currency' valBoxCurrency.ReadOnly = TruevalBoxDateTime.Type=valBoxDateTime.DateTimevalBoxIPAdress.Type=valBoxIPAdress.IPAddressvalBoxIPAdress.Value="192.168.100.11"End' Form_OpenPublicSubbtnNumber_Click()txbDisplay.CleartxbDisplay.Alignment=Align.BottomRighttxbDisplay.Text=valBoxNumber.ValueEnd' Number_ClickPublicSubbtnDate_Click()txbDisplay.CleartxbDisplay.Alignment=Align.BottomRighttxbDisplay.Text=Format$(valBoxDate.Value,"dddd - dd.mm.yyyy")End' Date_ClickPublicSubbtnTime_Click()txbDisplay.CleartxbDisplay.Alignment=Align.BottomRighttxbDisplay.Text=Format$(valBoxTime.Value,"hh:nn")&" Uhr"End' Time_ClickPublicSubbtnCurrency_Click()txbDisplay.CleartxbDisplay.Alignment=Align.BottomRighttxbDisplay.Text=valBoxCurrency.Value&" Euro"End' Currency_ClickPublicSubbtnDateTime_Click()txbDisplay.CleartxbDisplay.Alignment=Align.BottomRighttxbDisplay.Text=Format$(valBoxDateTime.Value,"dd.mm.yyyy - hh:nn")&" Uhr"End' DateTime_ClickPublicSubbtnIPAdress_Click()DimaMatrixAsString[]DimiCountAsIntegerDimsMessageAsStringtxbDisplay.CleartxbDisplay.Alignment=Align.BottomRighttxbDisplay.Text=valBoxIPAdress.ValueaMatrix=Split(valBoxIPAdress.Value,".")ForiCount=0ToaMatrix.MaxIfVal(aMatrix[iCount])<0OrVal(aMatrix[iCount])>255ThensMessage="IP-Adresse im "&(icount+1)&". Block fehlerhaft ("&aMatrix[iCount]&") !"Message.Error(sMessage)valBoxIPAdress.SetFocusEndifNext' iCountEnd' IPAdress_ClickPublicSubbtnEnde_Click()FMain.CloseEnd' Close
```

In the download area you will find the source repository.


# Download

Articles and Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# 16.10 HistoryBox

The HistoryBox is a TextBox that has been extended by the property to temporarily store a certain number of entries. In the HistoryBox, you can use the arrow keys↑and↓to search for input that has already been entered, for example, like in a console, and then call it up.
The classesHistoryBox,Historyand_HistoryOptionshave been developed by Tobias Boege.

Figure 16.10.1: Icon for the component HistoryBox
As with all components, theHistoryBoxwas also given an icon by the authors, which you can see in the IDE's properties window under 'Form'. The icon must be inserted in the project directory in an invisible folder.hidden/controlas an image of type 'png', so that it can be seen in the IDE in the virtual folder 'Project'.
The chapter '21.3.5 ProjectGUIMySQL' describes in detail the use of a HistoryBox for the database client presented there. You will also find the three classes HistoryBox, History and _HistoryOptions as well as the icon mentioned above in the project archive.

Figure 16.10.2:GUIfor the console program 'mysql'.
For this reason, the relevant source code can be shortened considerably in relation to the componentHistoryBox:


```
' Gambas class file...PublicSubForm_Open()FMain.CenterFMain.Resizable=True...txbHistoryEingabe.Foreground=Color.GraytxbHistoryEingabe.Alignment=Align.CentertxbHistoryEingabe.Text="*** Enter the SQL statement and activate it with the ENTER key! ***"txbHistoryEingabe.ReadOnly=TruetxbHistoryEingabe.History=NewHistory(50)' 50 entries are stored internally...End' Form_Open()PublicSubbtnProcessStart_Click()...txbHistoryEingabe.Alignment=Align.NormalEnd' btnProcessStartPublicSubbtnTextAreaClear_Click()...txbHistoryEingabe.SetFocusEnd' btnTextAreaClear...PublicSubProcessStart()DimsCommandAsStringtxbHistoryEingabe.Foreground=Color.BlacktxbHistoryEingabe.Clear...txbHistoryEingabe.ReadOnly=FalsetxbHistoryEingabe.SetFocusEnd' ProcessStart()...PublicSubtxbHistoryEingabe_Activate()IftxbHistoryEingabe.Text=""ThenReturntxbHistoryEingabe.Text=Trim(txbHistoryEingabe.Text)WriteToMyProcess(txbHistoryEingabe.Text)' txbHistoryEingabe.Clear   ---> This is done by the History-Box itself!End' txbHistoryEingabe_Activate()...PublicSubForm_Close()...End' Form_Close()
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.11 InputBox

The class InputBox (gb. form) implements a simple input dialog box. The class is static and can be used like a function. Therefore, do not search for this component in the IDE!


# 16.11.1 Call InputBox

The call of the following function opens an input dialog box:


```
Static Function InputBox (Prompt As String [, Title As String, Default As String] ) As String
```

The function returns as a function value the text (data type String) that the user enters or NULL if the user cancels the dialog. The InputBox is less suitable for entering passwords, as the text in the input field cannot be replaced by asterisks or similar for each character.


# 16.11.2 Example Insert InputBox

The InputBox is a suitable component for interactive user guidance if only one value is to be read in the program flow. This input must then be checked in an appropriate manner so that only valid data can be processed further.

Figure 16.11.2.1: input box
The source code is simple - but implements all possible options for the parameters of the function InputBox(…) and two formatting in the rich text of the string sPrompt:


```
[1][2]PublicsOrtAsString[3]…[4]..[5]PublicSubSetLocation()[6]DimsPrompt, sTitle, sDefaultAsString[7][8]FMain.Hide' Option[9]sPrompt="Geben Sie den <b><font color='blue'>Bestimmungsort</font></b> ein!"[10]sTitle="Angabe Bestimmungsort ( Deutschland )"[11]sDefault="Osterburg"[12][13]sOrt=InputBox(sPrompt, sTitle, sDefault)[14][15]IfsOrt=NullThenMessage.Info("No location has been entered!")[16]FMain.Show' Option[17][18]End' SetLocation
```

If you want to force a city entry, replace line 15:


```
IfsOrt=NullThenMessage.Info("No location has been entered!")SetLocation()' Recursive callEndif' sOrt = Null ?
```

The location entered must then be checkedsyntacticallyto prevent nonsensical entries; → 19.6.5 Checking the syntax of character strings.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# 16.12 SpinBox

If you want to interactively read in an integer from an interval[min… max] in a program, you can use the SpinBox component, whose most important properties and its use are described in this chapter.
The Spinbox is a text field with two small keys (up/down), which can be used to increase or decrease the current value with a freely selectable step size in the interval[min… max]. You can also enter an integer value directly into the spinbox. To accept this value, you must press the Enter key. You can only enter integers because all other entries are not accepted without a response. You can assign a defined start value to each spinbox. Since all values in a spinbox are of the integer type, you may have to convert these values for your program, for example, if you want to map the interval from [3… 10] to the interval [0,0… 3,5].
If the maximum or minimum value has been reached, this can be recognized at runtime by the Spinbox's appearance, because one of the up/down keys is grayed out. The SpinBox has a repeat function for the up/down keys.
You can add a context menu (PopupMenu) to the componentSpinBoxwhich replaces the standard context menu of the spinbox. The menu has to be declared beforehand - for example in the menu editor - so that you can select the corresponding menu in the properties window and assign it to the SpinBox. Alternatively, you can also make the assignment at runtime. Detailed information on this path can be found in chapter 13.4' Context menu'.
You can assign the following values (data type integer) for selected properties of a spinbox at the program start, otherwise the default values are set:
In the following example, a spinbox is used to set the zoom factor for the image of a function f (x). The zoom factor can be changed in a range of [20%… 300%]. The step size is set to 5(%) and the zoom start value is set to 50(%).

Figure 16.12.1: Function plotter with zoom function
The source code is only specified in those parts that demonstrate the conversion of the above-mentioned concept for a zoom function:


```
PublicSubForm_Open()FMain.CenterFMain.Resizable=False…
  spinboxZoom.MinValue=20' 4 starting valuesspinboxZoom.MaxValue=300spinboxZoom.Step=5spinboxZoom.Value=50fZoom=spinboxZoom.Value' Initialize the zoomspinboxZoom.Tooltip="Zoom-Bereich 20...300"' mnu0Einstellungen.Visible = False ' optional' spinboxZoom.PopupMenu = "mnu0Einstellungen" ' optionalyspinboxZoom.SetFocus…End' Form_OpenPublicSubspinboxZoom_Change()fZoom=spinboxZoom.ValueKS_RP_G_Zeichnen(fZoom)End' spinboxZoom_Change()
```

The procedurespinboxZoom_Change()of the spinboxZoom component reacts to the change event. The variable fZoom (data type float) is then assigned the current value of the spinbox. This value is the parameter value of the procedure KS_RP_G_Draw (fZoom) which draws the coordinate system, the raster points and finally the graph of the given function f(x) with the current zoom factor.
The use of the three buttons with the labels +, - and 1 shows as an optional extension another way to realize a zoom function, where the Spinbox is used to display the current zoom factor:


```
PublicSubbtnZoomNormal_Click()fZoom=50' Angabe in %spinboxZoom.Value=fZoom
  KS_RP_G_Zeichnen(fZoom)' Koordinatensystem, Rasterpunkte und GraphEnd' btnZoomNormal_Click()PublicSubbtnZoomG_Click()IffZoom<300ThenfZoom+=5spinboxZoom.Value=fZoom
     KS_RP_G_Zeichnen(fZoom)Endif' fZoom < 300End' btnZoomG_Click()PublicSubbtnZoomK_Click()IffZoom>20ThenfZoom-=5spinboxZoom.Value=fZoom
     KS_RP_G_Zeichnen(fZoom)Endif' fZoom > 20End' btnZoomK_Click()
```

Digression
For example, in order to linearly map the interval of [3… 10] to the interval [0,0… 3,5], you need the linear function with the two points P0(3|0] and P1(10|3,5). The (general) approach for a linear equation (y-y0)-(x1-x0) = (y1-y0)-(x-x0) leads to k(x) = 0.5·x - 1.5 with x ∈ N in the restricted definition range 3 ≤ x ≤ 10.


```
PublicFunctionk(xAsInteger)AsFloatReturn0.5*x-1.5End' Function k(x)
```

The general approach to determine the interval [a….b] to the interval [p….q] leads to the linear equation (y-y0)·(x1-x0) = (y1-y0)·(x-x0) → (y-p)·(b-a) = (q-p)·(x-a) with a ≠ b. Converting to y results in the general equation for the conversion function k(x) with x ∈ N in the restricted definition range a ≤ x ≤ b.


# Download

Articles and Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.13 ComboBox

The component ComboBox (gb.qt4) is a combination of aTextboxand a(PopUp-)ListBox. The field of application for a ComboBox is the input of data as a character string. Either select an element from the list box, which is then displayed in the text box, or enter text in the text box.
Only if the propertyComboBox. ReadOnlyhas been set toTrue, will the entries become valid data that you can continue to work with in the program. Otherwise the data must always be checked!


# 16.13.1 Properties and methods ComboBox

Selected properties and methods of a ComboBox are listed and described in a table:
Table 16.13.1.1: Overview of ComboBox component properties
TextBox.Selection has the following properties:
The TextBox.Selection.Hide method hides the selected text in the TextBox.
Like any other TextBox, the TextBox of a ComboBox has a standard context menu, which you can call up with a click of the right mouse button.
A brief description of the ComboBox component's methods can be found in the following table:
Table 16.13.1.2: Overview of methods of the ComboBox class


# 16.13.2 Events ComboBox

The special events of the ComboBox component and additional comments can be found here:
Notes on the ComboBox_Click () event


# 16.13.3 ComboBox lists

Before you can use a ComboBox to enter data (data type string) in a program, you must fill in the list (data type array) from which the user can make a selection. Which of the approaches you prefer depends on the tasks to be solved and the value of the ComboBox.Read-only property. First, individual approaches are presented and then implemented with examples:
Importing elements of a list, for example


# 16.13.4 Example 1 - Filling the ComboBox List



```
[1]' Gambas class file[2][3]PublicSub_new()[4]SetCBList()[5]End' _new()[6][7]PublicSubForm_Open()[8]FMain.Center[9]FMain.Resizable=False[10]End' Form_Open()[11][12]PublicSubSetCBList()[13]DimaMatrixAsNewString[][14][15]ComboBox1.List=["Element2","Element1"]' Inline-Array[16]ComboBox1.Add("Element3")[17]ComboBox1.Add("Element5")[18]ComboBox1.Add("Element4")[19]aMatrix.Add("Element6")[20]aMatrix.Add("Element7")[21]ComboBox1.List=ComboBox1.List.Insert(aMatrix)[22]ComboBox1.Sorted=True[23]ComboBox1.Text=ComboBox1.List[0][24][25]End' SetList()
```

You should transfer the call of SetCBList () to the _new procedure, because the statements


```
ComboBox1.Text = ComboBox1.List[0] ' Display first entry in the CB list
ComboBox1.Text = ComboBox1.List[ComboBox1.List.Max] ' Display last entry in the CB list
```

would trigger the click event!
Comments:


# 16.13.5 Example 2 - ComboBox with history

In this example, a ComboBox is given a history. This reads the last path entries into the list of the ComboBox at program start. Newer paths are dynamically inserted into the list at runtime and overwrite older entries. The source code shows that the current list content is stored in a configuration file because the componentgb. settingsis used, which implicitly provides all file operations for exporting and importing the list content.


```
' Gambas class filePrivate$aFavoritesAsString[]PrivateConst$iCountAsInteger=4PublicSubForm_Open()FMain.Center$aFavorites=Settings["Favorites"]' Import' Konfigurationsdatei: /home/hans/.config/gambas3/ComboBoxFavourites.confIfNot$aFavoritesThen$aFavorites=NewString[]ReloadFavorites()End' Form_Open()PublicSubbtnSelect_Click()' Create only existing directoriesIfNotIsDir(cmbPath.Text)ThenMessage.Error(("The specified path is not a directory!"))cmbPath.SetFocusReturnEndif' Not IsDir(cmbPath.Text) ?' Do not allow duplicates and limit historyIf$aFavorites.Count<=$iCountThenIfNot$aFavorites.Exist(cmbPath.Text)Then$aFavorites.Add(cmbPath.Text)ElseIfNot$aFavorites.Exist(cmbPath.Text)Then$aFavorites.Remove(0)$aFavorites.Add(cmbPath.Text)EndifEndifReloadFavorites()End' btnSelect_Click()PublicSubForm_Close()Settings["Favorites"]=$aFavorites' ExportEnd' Form_Close()'********************************************************************************************PrivateSubReloadFavorites()' An empty entry for input in the TextBox, then the favoritescmbPath.List=[""].Insert($aFavorites)End' ReloadFavorites()PublicSubdchPath_Change()cmbPath.Text=dchPath.ValueEnd' dchPath_Change()PublicSubcmbPath_Activate()btnSelect_Click()End' cmbPath_Activate()
```


Figure 16.13.5.1: ComboBox with history


# 16.13.6 Example 3 - ComboBoxes

During the development of a program for measuring temperatures, a circuit board from Stephan Mischnik (www.strippenstrolch.de) could be used. It was only known that an NTC serves as a temperature sensor, a PIC 08M2+ was used as an AD converter and the temperature data could be read in via an RS232 interface. In order to keep the program test open, a combo box was used for the RS232 port and 5 combo boxes were used for setting the individual transmission parameters of the serial interface, whose ReadOnly property was set to True in each case:

Figure 16.13.6.1: Configuration RS232
Here only the use of the 6 ComboBoxes is of interest. Therefore, only selected passages from the source text are presented. The excerpts show how the lists of the combo boxes cmbSpeed, cmbParity, cmbDataBits, cmbStopBits and cmbFlow are filled statically - related to number and values. A special feature is that the list of the ComboBox cmbRs232PortName is only filled dynamically at runtime, depending on the serial interfaces found on the system or the USB-RS232 adapter interfaces:


```
[1]PublicSubForm_Open()[2]DimaDataFlowAsNewString[][3]…[4]aDataFlow.Add("None")[5]aDataFlow.Add("XON/XOFF")[6]aDataFlow.Add("RFR/CTS")[7]aDataFlow.Add("RFR/CTS + XON/XOFF")[8]cmbSpeed.List=["2400","4800","9600"][9]cmbParity.Add("None")[10]cmbParity.Add("Even")[11]cmbParity.Add("Odd")[12]cmbDataBits.List=["5","6","7","8"][13]cmbStopBits.List=["1","2"][14]cmbFlow.List=aDataFlow[15][16]RS232PortListeGenerieren()[17]…[18]End' Form_Open[19][20]PublicSubRS232PortListeGenerieren()[21]DimiCountAsInteger[22]DimsZeile, sListeV24, sListeUSB, sAsString[23]DimaSchnittstellenMatrixAsNewString[][24]DimaListeAsNewString[][25]DimhProcessAsProcess[26][27]cmbRS232PortName.Clear()[28][29]' Ermittlung echter RS232-Schnittstellen[30]Shell"dmesg | grep ttyS | grep 00:"TosListeV24[31]IfLen(sListeV24)>0Then[32]aSchnittstellenMatrix=Split(sListeV24," ")[33]ForEachsZeileInaSchnittstellenMatrix[34]IfInStr(sZeile,"ttyS")Then[35]cmbRS232PortName.Add("/dev/"&Trim$(sZeile))[36]Endif[37]Next' FOR EACH[38]Endif' Len(sListeV24) > 0 ?[39][40]' Ermittlung USB-RS232-Adapter-Schnittstellen[41]Shell"dmesg | grep ttyUSB"TosListeUSB[42]IfLen(sListeUSB)>0Then[43]aSchnittstellenMatrix=Split(sListeUSB,"\n")[44]ForEachsZeileInaSchnittstellenMatrix[45]ForiCount=0To7[46]IfInStr(sZeile,"ttyUSB"&CInt(iCount))Then[47]aListe.Add("ttyUSB"&CInt(iCount))[48]Endif[49]Next' iCount[50]Next' FOR EACH[51]Endif' Len(sListeUSB) > 0 ?[52][53]aListe.Sort[54]aListe=RemoveMultiple(aListe)[55][56]ForiCount=0ToaListe.Max[57]cmbRS232PortName.Add("/dev/"&Trim$(aListe[iCount]))[58]Next' iCount[59][60]IfcmbRS232PortName.Count=0[61]cmbRS232PortName.Background=Color.RGB(255,191,191)[62]cmbRS232PortName.Add("           Keine RS232-Schnittstelle gefunden!")[63]btnOnOff.Enabled=False[64]Endif' cmbRS232PortName.Count = 0 ?[65][66]End' RS232PortListeGenerieren()[67][68]PublicFunctionRemoveMultiple(aStringListeAsString[])AsString[][69]DimiCountAsInteger[70]DimiIndexAsInteger[71]DimsElementAsString[72][73]iIndex=0' Initialisierung NICHT notwendig[74]WhileiIndex<aStringListe.Count[75]iCount=0[76]sElement=aStringListe[iIndex][77]WhileaStringListe.Find(sElement)<>-1[78]InciCount[79]aStringListe.Remove(aStringListe.Find(sElement))[80]Wend[81]IfiCountMod2=1Then[82]aStringListe.Add(sElement, iIndex)[83]InciIndex[84]Endif' iCount Mod 2 = 1 ?[85]Wend[86][87]ReturnaStringListe[88][89]End' RemoveMultiple(...)
```

After setting the correct transmission parameters, the expander could be folded in:

Figure 16.13.6.2: Temperature measurement


# 16.13.7 Example 4 - Editing ComboBox lists at runtime (export/import)

If you set the ReadOnly property of combo boxes to True, make sure that only valid data from these combo boxes is processed in the program. However, you can no longer change the lists directly in the combo box, which is sometimes necessary. The following project describes how to edit, export and import the lists of selected combo boxes at runtime.

Figure 16.13.7.1: Three combo boxes

Figure 16.13.7.2: Editing ComboBox lists (runtime)
Before closing the program window, the contents of the lists of the 3 combo boxes are stored in a separate file in the project directory (list export). Each time the main program is restarted, the contents of the three files are read out separately and assigned to the lists of the three combo boxes (list import).
The quite extensive but well-documented source code of the project is not specified here. It is definitely worthwhile to take a close look at the complete source code. The source code will offer you a lot of new features and will change your view on programming with gambas. This is mainly due to the fact that the source code for processing lists represents an excerpt from the source code of the Gambas IDE.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 1



# Chapters



# Table of Contents



# 16.14.0 TextArea

The class TextArea (gb. qt4) implements a multiline text field.

Figure 16.14.0.1: Value table in a TextArea


# 16.14.0.1 Properties

Selected properties of the TextArea class are described in the following table:
Table 16.14.0.1.1.1: Overview of selected properties of the TextArea class (gb. qt4)
Hints:
Only the two properties Foreground and Font are available for marking the text in a TextArea. They always apply globally for the entire TextArea!


```
txaArea.Foreground=Color.RGB(0,0,0)' Font color blacktxaArea.Font=Font["Monospace, 10"]' calligraphic font' Zur Kontrolle:' Print txaArea.Font.ToString()
```

The overview of the selected methods of the TextArea class contains three methods for reciprocal conversion of values of the properties Pos, Column and Line.


```
Print "Zeile = "; txaTest.ToLine(91)
  Print "Spalte = "; txaTest.ToColumn(91)
  Print "Cursor-Position = "; txaTest.ToPos(1, 30)
```

The propertyTextArea. ReadOnly = Trueis used if text is only to be displayed and manual text changes in the text field are not allowed. Examples: Help texts, display of measured values, console outputs or similar…


# 16.14.0.2 Methods

A description of selected methods of the class TextArea can be found here:
Table 16.14.0.2.1: Selected methods of the TextArea class (gb. qt4)
Hint:


# 16.14.0.3 Events

These two events are particularly important for the practical work with a TextArea:
Table 16.14.0.3.1: Overview of selected events of the TextArea class (gb. qt4)
Hints:
Note that changing the text does not necessarily change the cursor position, but the example Gambas program Notepad (text editor) implements the above mentioned properties, methods and events very well, so that it will be worthwhile for you to test this example intensively in any case.


# 16.14.0.4 Context menu

The context menu of a TextArea, together with the short cuts - even without menus and toolbars - guarantees a fast working with texts:

Figure 16.14.0.4.1: Context menu


# 16.14.0.5 Inserting text

You can insert text into a TextArea at any cursor position in several ways:
Inserting Text Using Drag&Drop
Inserting text using drag & drop was successfully tested in the editors 'gedit', 'bluefish' and in the Internet browser 'firefox'. The selected text in the source is dragged over the text field while holding the mouse button down. Then the mouse button is released and the selected text is located in the TextArea and can be edited there.
Text import from a text file
Minisini said on this topic in a forum that you can only enter UTF-8 strings in a TextArea and emphasized: “If another character set works…, then the benevolence of QT or coincidence.
With this section of source code you are always on the right page:


```
[1]...[2]DimsMimeTypeCharSet, sCharSet, sMimeAsString[3]DimsFilePathAsString[4][5]Dialog.Title="Wählen Sie eine Text-Datei aus!"[6]Dialog.Filter=["*.ini","INI-Dateien","*.txt","Text-Dateien","*","Alle Dateien"][7]Dialog.Path="/etc/odbcinst.ini"[8]IfDialog.OpenFile()ThenReturn[9]sFilePath=Dialog.Path[10][11]Exec["file","-bi", sFilePath]TosMimeTypeCharSet' Ermittlung MimeTyp und Zeichensatz[12]Wait[13]PrintsMimeTypeCharSet[14]sMime=Split(sMimeTypeCharSet,";")[0][15]Print"Mime-Typ = ";Trim(sMime)[16]sCharSet=Trim(Split(Split(sMimeTypeCharSet,";")[1],"=")[1])[17]Print"CharSet  = ";Trim(sCharSet)[18][19]IfsCharSet<>"utf-8"Then[20]TrytxaArea.Text=Conv(File.Load(sFilePath), sCharSet,"UTF-8")[21]' Try txaArea.Insert(Conv(File.Load(sFilePath), sCharSet, "UTF-8"))[22]Else[23]txaArea.Text=File.Load(sFilePath)[24]' txaArea.Insert(File.Load(sFilePath))[25]Endif[26][27]txaArea.Pos=0[28]...
```

Comment:
The configuration fileodbcinst. iniprovided the followingcombined valuefrom mime type and character set:


```
text/plain; charset=us-ascii
```

The character set of the file was therefore converted to UTF-8 according to the requirement in line 19. This was not necessary in the case of us-ascii becauseASCIIis included in UTF-8.
Text changes using the Text Property and the Insert(..) method
In this section, on the one hand, text is inserted into a TextArea, in which a change of the property TextArea.Text = text string the old text is completely overwritten by the new text and on the other hand, it is shown how to add text at the current text cursor position:


```
TextArea.Text = "Ich bin der neue Text!"
TextArea.Text = TextArea.Text & "Ich bin weiterer Text!"
TextArea.Text &= "Ich bin weiterer Text!"
TextArea.Text &= gb.NewLine ' erzwingt einen Zeilenwechsel
TextArea.Text &= gb.NewLine & gb.NewLine ' erzeugt eine Leerzeile nach dem Text
```



```
TextArea.Insert("Ich bin Text – an der aktuellen Cursor-Position eingefügt!")
```

Text export
If you want to save text via the ClipBoard, this only creates an apparent security, because the content of the ClipBoard is automatically deleted when you exit the program with the TextArea!
The easiest way to save the contents of a TextArea is to use a file save dialog:


```
PublicSubbtnTextToFile_Click()Dialog.Filter=["*.txt","Text-Dateien"]IfDialog.SaveFile()ThenReturnFile.Save(Dialog.Path, txaArea.Text)CATCHMessage.Info(Error.Text)END
```

Useful information
The following commented source code sections are helpful when working with a TextArea:


```
Print "Number of characters = "; txaTest.Length
Print "Number of lines = "; Split(txaTest.Text, gb.NewLine).Count
Print "Number of lines = "; txaTest.ToLine(txaTest.Length) + 1
```



```
Public Sub btnSetWrapping_Click()
  txaTest.Wrap = Not txaTest.Wrap ' Alternative change of the wrap property (line break)
End
```



```
TextArea.Text = "" ' deletes the entire text 
TextArea.Clear ' deletes the entire text
```



```
Public Sub txaTest_Cursor()
  Print "Zeile = "; txaTest.Line
  Print "Spalte = "; txaTest.Column
  Print "Position = "; txaTest.Pos
  Print "Cursor in row "; txaTest.Line; " in column "; txaTest.Column; " at position "; txaTest.Pos
End
```



```
txaTest.Pos = 0 ' Jump to the first line (physical 1) to column 0
txaTest.Pos = txaTest.Length ' Jump to the last line
```



```
Public Sub txaTest_Cursor()
  lblAktuelleZeile.Text = "Z: " & txaTest.Line     ' Display of the current line 
  lblAktuelleSpalte.Text = "S: " & txaTest.Column  ' Display of the current column (in the row)
  lblCursorPosition.Text = "P: " & txaTest.Pos     ' Display of the current cursor position
End
```

Limited Text
An SMS normally comprises a maximum of 160 characters. You can guarantee this number of characters with this section of the source code. Also the case that there is too much text in the TextArea by copying and pasting has been taken into account:


```
PublicConstMAX_CHARAsInteger=160PublicSubtxaTest_Change()' If Len(Last.Text) < MAX_CHAR Then ' AlternativeIftxaTest.Length<MAX_CHARThentxaTest.Foreground=&00007FFF&IfMAX_CHAR-txaTest.Length=1ThenFMain.Text=Subst$("Exactly 1 character is still available!")ElseFMain.Text=Subst$("There are still &1 characters available!", MAX_CHAR-txaTest.Length)EndifElseIftxaTest.Length=MAX_CHAR
     txaTest.Foreground=&00007FFF&txaTest.ReadOnly=TrueFMain.Text=Subst$("The maximum number of characters "&Str(MAX_CHAR)&" has been reached!")ElsetxaTest.Foreground=Color.RedFMain.Text=Subst$("&1 characters are inserted too many.",-MAX_CHAR+txaTest.Length)EndifEnd' txaTest_Change()...PublicSubtxaTest_KeyPress()IfKey.Code=Key.BackSpaceOrKey.Code=Key.DeleteThentxaTest.ReadOnly=FalseEnd' txaTest_KeyPress()
```

The topic 'Finding and replacing text in a TextArea' is dealt with in the next chapter.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.0 Control elements 2

This chapter introduces you to other components with the most important properties and methods.An overview of the components shows the navigation.



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.1 ProgressBar - Progress Bar

As visual indicators of the status of a task being performed by a programme,Throbbersare often used in addition to different mouse pointers.Throbbersare small animated graphics of various sizes and designs. A well-known throbber graphic is the spinning wheel. Throbbers mark the beginning and the end of a current operation (examples: downloading, uploading or decompressing a file, waiting time).

Figure 17.1.1: Four Throbbers
Often not only thestatusis of interest, but also information about theprogressof a task. Progress bars are used precisely for this application.

Figure 17.1.1: Status display and progress bar in the email client Thunderbird
With the componentProgressBar (gb.qt4)Gambas provides a progress bar. In a ProgressBar, the progress can not only be signalled visually via the length of the displayed bar, but also optionally text (specified as a percentage) can be displayed on the bar.
Three typical cases of use have proven themselves for a ProgressBar:


# 17.1.1 Properties and methods ProgressBar

This ProgressBar (gb.qt4) class implements a progress bar.
There are only 2 selected properties and one special method for a ProgressBar:
Notes:


# 17.1.2 Project 1 - Progressbar as Throbber

In the presented project ThrobberPB, well-known Throbbers are used and a Progressbar is configured as a Throbber. It is also shown how you can display numerical values in a Progressbar (static and relative) - visualise them. In this context, a function is presented with which you can map numbers from an interval [x0|x1] linearly to an interval [y0|y1].


```
PublicFunctionTransform(fValueAsFloat, x0AsFloat, x1AsFloat, y0AsFloat, y1AsFloat)AsFloat' Lineare Abbildung: Intervall [x0|x1] ---> [y0|y1]' 2-Punkte-Gleichung mit P1(x0|y0) und P2(x1|y2) im Definitionsbereich [x0|x1]' (y-y0)*(x1-x0) = (y1-y0)*(x-x0)' y = ((y1-y0)/(x1-x0)*(x-x0)) + y0 → y=g(x)=m*x+nIfAbs(x1-x0)>0.0001ThenReturn(((y1-y0)/(x1-x0))*(fValue-x0))+y0ElseMessage.Error("FEHLER!")Endif' Abs(x1 - x0) > 0.0001 ?End' Function  Transform(..)
```


Figure 17.1.2.1: Three throbbers and relative display number interval [0|60] → [0|1].
The source code snippet shows the main procedures:


```
[1]' Gambas class file[2][3]PrivatebSuccessAsBoolean=False[4][5]PublicSub_new()[6]Slider1.MinValue=0[7]Slider1.MaxValue=60[8]Slider1.Value=20[9]...[10]End' _new()[11][12]PublicFunctionTransformation(...)[13]...[14]PublicSubSlider1_Change()[15]Progressbar1.Value=Transformation(Slider1.Value, Slider1.MinValue, Slider1.MaxValue,0,1)[16]Wait[17]End' hSlider1_Change[18][19]PublicSubbtnWaitOutStart_Click()[20]WaitOut(0.05)[21]End' btnWaitOutStart_Click()[22][23]PublicSubbtnWaitOutStop_Click()[24]bSuccess=True[25]End' btnWaitOutStop_Click()[26][27]PublicSubWaitOut(iTimeAsFloat)[28]DimiCountAsInteger[29][30]IfiTime<0.01OriTime>0.2TheniTime=0.05[31]pbWait.Visible=True[32]pbWait.Label=False[33]Repeat[34]ForiCount=0To10[35]TrypbWait.Value=iCount/10[36]WaitiTime[37]Next[38]ForiCount=0To10[39]TrypbWait.Value=1-(iCount/10)[40]WaitiTime[41]Next[42]UntilbSuccess=True[43]bSuccess=False[44][45]End' WaitOut(iTime As Integer)[46][47]PublicSubbtnStart_Click()[48]movieboxWaitOut.Path="WaitOutIcons/time.bar.a.gif"[49]movieboxWaitOut.Playing=True' Animierte Grafik 1 zeigen[50]movieboxWaitOut2.Path="WaitOutIcons/arrows_a.gif"[51]movieboxWaitOut2.Playing=True' Animierte  Grafik 2 zeigen[52]End' btnStart_Click()[53][54]PublicSubbtnStop_Click()[55]movieboxWaitOut.Playing=False[56]movieboxWaitOut.Path="WaitOutIcons/time.bar.0.gif"[57]movieboxWaitOut.Playing=True' Standbild 1 zeigen[58]movieboxWaitOut2.Playing=False[59]movieboxWaitOut2.Path="WaitOutIcons/arrows_0.gif"[60]movieboxWaitOut2.Playing=True' Standbild 2 zeigen[61]End' btnStop_Click()[62][63]PublicSubbtnClose_Click()[64]FMain.Close[65]End' btnClose_Click()[66]PublicSubForm_Close()[67]bSuccess=True[68]End' Form_Close()
```

If you start the programme, you will certainly recognise possibilities to use this and similar throbbers as well as the relative display of number intervals in your own programmes.


# 17.1.3 Project 2 - Progress bar as progress indicator for a file download

In this project, the challenge is to determine the total size of the download file before the download as well as current file size of the download file locally in the download folder during the download. Therefore, an external (console) programme, wget, is used in a process so that the programme's output can be collected, filtered and evaluated. As a special feature, it turned out that the wget programme redirects all outputs from the standard (internal) output to the standard error output! In the project, the hints - especially from chapter 21.3.3 Project - Process Control and Process Data - were successfully implemented. Therefore, only the source code of the two most important procedures is presented to you.

Figure 17.1.3.1: The download is active

Figure 17.1.3.2: The download is finished


```
[1]PublicSubTimer1_Timer()[2]DimiCurrentFileSizeAsInteger[3][4]iCurrentFileSize=Stat($sArchivPath).Size' Aktuelle Dateigröße beim Download[5]ProgressBar1.Value=iCurrentFileSize/$iArchivSize' Wert im Intervall [0-1][6]Wait[7]End' Timer1_Timer()[8][9]PublicSubmyWGETProcess_Error(sOutputAsString)[10]' Alle Ausgaben kommen über die Standard-Fehler-Ausgabe[11]DimaMatrix, aListeAsString[][12]DimsElementAsString[13]DimiSizeMBAsFloat[14][15]aMatrix=Split(sOutput, gb.newline)[16]ForEachsElementInaMatrix[17]IfsElement Begins"Länge:"OrsElement Begins"Length:"Then[18]aListe=Split(sElement," ")[19]$iArchivSize=CInteger(aListe[1])' 0,9765625 (Byte), 0,953674316 (MB)[20]iSizeMB=Round(($iArchivSize/1000000)*0.953674316,-1)[21]txaContent.Insert(gb.NewLine)[22]txaContent.Insert("Archiv = "&Str($iArchivSize)&" Byte  »  ( "&Str(iSizeMB)&" MiB )")[23]txaContent.Insert(gb.NewLine&gb.NewLine)[24]Timer1.Start[25]Endif' sElement Begins "Länge:" ?[26]IfsElement Ends"200 OK"Then[27]SetLEDColor("red")[28]Endif' Ends "200 OK" ?[29]IfsElementLike"* Server existiert."OrsElementLike"*Remote file exists*"Then[30]SetLEDColor("green")[31]txaContent.Insert("Dateigrößenübermittlung abgeschlossen!"&gb.NewLine)[32]Endif' LIKE ... ?[33]IfsElementLike"*gespeichert*"OrsElementLike"*saved*"Then[34]SetLEDColor("green")[35]txaContent.Insert("Download beendet!"&gb.NewLine)[36]Wait2[37]Timer1.Stop[38]ProgressBar1.Value=1[39]Wait[40]$bFlag=True[41]Endif' LIKE ... ?[42][43]Next' sElement[44]End' myWGETProcess_Error(..)
```

The unpacking of the archive file is signalled with a Throbber. The Throbber graphic LevelBar only shows up in a MovieBox during unpacking:

Figure 17.1.3.3: The download archive is unpacked - LevelBar as Throbber
Project 3 can only be found in the download area. It uses a ProgressBar on the one hand to show how many files are still to be processed (Time-remaining Progress Indicator) and a progress bar on the other hand to show the progress of a file download of k files:

Figure 17.1.3.4: Download progress


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.3 ListBox

The component ListBox (gb. qt4) implements a list of selectable text elements:

Figure 17.3.1: A double click on the text element starts the selected WebSite here


# 17.3.1 ListBox - Properties and Methods

Selected properties and methods of a ListBox are listed and described in a table:
Table 17.3.1.1: Selected properties of the ListBox component
The class ListBox.Item represents:
Example 1: A TextBox is assigned the selected text in a ListBox:


```
txtElement.Text = listBoxURL.Current.Text
```

Example 2: Only selected text elements from a ListBox are copied to an array:


```
lsbListe.Mode =  Select.Multiple
…
For iIndex = 0 To lsbListe.Count - 1
  If lsbListe[iIndex].Selected = True Then arrayListe.Add(lsbListe[iIndex].Text)
Next ' iIndex
```

A description of selected methods of a ListBox can be found in the following table:
Table 17.3.1.2: Overview of selected methods of the ListBox class


# 17.3.2 Events ListBox

Special events of the ListBox component and additional comments can be found here:
Table 17.3.2.1: Overview of the 3 events of the component ListBox


# 17.3.3 Project ListBox

The ListBox used in the presented project is used to display a website after clicking on a text element. The project is characterized by the following features:

Figure 17.3.3.1: ListBox with context menu
Only if you have set the ListBox.Mode property to Select.Multiple, it is possible to select several text elements with the mouse while holding down the CTRL key. Figure 17.3.3.3.1 to select all elements in the ListBox.

The source text is completely specified. When reading, you can be sure that almost all properties, methods and events from the above three tables have been used.


```
[1]' Gambas class file[2][3]Private$hFileAsFile[4]Private$sFilePathAsString[5]Private$sProjectPathAsString=Application.Path[6]Private$iCountAsInteger=1[7][8]PublicSubForm_Open()[9][10]FMain.Center[11]FMain.Resizable=False[12][13]$sFilePath=$sProjectPath&/"url.lis"[14]IfExist($sFilePath)Then[15]ImportLBList($sFilePath, lsbURL)[16]Else[17]lsbURL.Add("http://www.gambas-buch.de")[18]Endif' Exist($sFilePath) ?[19][20]lsbURL.Sorted=False' Notwendig wegen UP und DOWN[21]lsbURL[0].Selected=True[22]Refresh[23][24]End' Form_Open()[25][26]PublicSubbtnInsertElement_Click()[27]lsbURL.Add("Text | Link"&CStr($iCount))[28]Inc$iCount[29]Refresh[30]lsbURL.Index=lsbURL.Count-1[31]Object.Lock(txtElement)[32]txtElement.Text=lsbURL.Current.Text[33]Object.Unlock(txtElement)[34]txtElement.SetFocus[35]txtElement.SelectAll[36]End' btnInsertSenderURL_Click()[37][38]PublicSubbtnDeleteElement_Click()[39]DimiCurrentIndexAsInteger[40][41]iCurrentIndex=lsbURL.Index[42]IflsbURL.Index<0ThenReturn[43][44]IflsbURL.Count>1OrlsbURL.Count<=lsbURL.Count-2Then[45]IfMessage.Question("Element löschen?","Löschen","Abbrechen")<>1ThenReturn[46]lsbURL.Remove(lsbURL.Index)[47]Else[48]IfMessage.Question("Letztes Element löschen?","Löschen","Abbrechen")<>1ThenReturn[49]lsbURL.Remove(lsbURL.Index)[50]Endif' lsbURL.Count > 1 ?[51][52]IflsbURL.Index>=lsbURL.CountThenDeclsbURL.Index[53]txtElement.Text=lsbURL[lsbURL.Index].Text[54]Refresh[55][56]End'  btnDeleteRadioURL_Click()[57][58]PublicSubbtnUp_Click()[59]DimiCurrentIndexAsInteger[60][61]iCurrentIndex=lsbURL.Index[62]IfiCurrentIndex>0Then[63]SwaplsbURL[iCurrentIndex].Text, lsbURL[iCurrentIndex-1].Text[64]lsbURL.Index=iCurrentIndex-1[65]Endif' iCurrentIndex > 0 ?[66][67]End' btnUp_Click()[68][69]PublicSubbtnDown_Click()[70]DimiCurrentIndexAsInteger[71][72]iCurrentIndex=lsbURL.Index[73]IfiCurrentIndex<(lsbURL.Count-1)Then[74]SwaplsbURL[iCurrentIndex].Text, lsbURL[iCurrentIndex+1].Text[75]lsbURL.Index=iCurrentIndex+1[76]Endif' iCurrentIndex < (lstValue.Count – 1) ?[77][78]End' btnDown_Click()[79][80]PublicSubbtnDeleteList_Click()[81]IfMessage.Question("Komplette Liste löschen?","Löschen","Abbrechen")<>1ThenReturn[82]lsbURL.Clear[83]Refresh[84]End' btnDeleteList_Click()[85][86]PublicSubcboxMultiSelect_Click()[87]IfcboxMultiSelect.Value=cboxMultiSelect.TrueThen[88]lsbURL.Mode=Select.Multiple[89]Else[90]lsbURL.Mode=Select.Single[91]IflsbURL.Count>0ThenlsbURL[0].Selected=True[92]Endif' cboxMultiSelect.Value = cboxMultiSelect.True ?[93]End' cboxMultiSelect_Click()[94][95]PublicSubbtnCopyList_Click()[96]DimiIndexAsInteger[97]DimsElementAsString[98]DimaListe2AsNewString[][99][100]IfcboxMultiSelect.Value=cboxMultiSelect.TrueThen[101]ForiIndex=0TolsbURL.Count-1[102]IflsbURL[iIndex].Selected=TrueThen[103]aListe2.Add(lsbURL[iIndex].Text)[104]Endif' lsbURL[iIndex].Selected = True ?[105]Next' iIndex[106]Else[107]Message.Info("MultiSelect nicht markiert?\nKein Element markiert?")[108]Return[109]Endif' cboxMultiSelect.Value = cboxMultiSelect.True ?[110][111]'  For Each sElement In aListe2 ' Nur zur Kontrolle ...[112]'      Print sElement[113]'  Next ' sElement[114][115]End' btnCopyList_Click()[116][117]PublicSublsbURL_Click()[118]IfNotlsbURL.CurrentThenReturn[119]Object.Lock(txtElement)[120]txtElement.Text=lsbURL.Current.Text[121]Object.Unlock(txtElement)[122]txtElement.SetFocus[123]txtElement.SelectAll[124]End' lsbList_Click()[125][126]PublicSublsbURL_DblClick()[127]DimaMatrixAsString[][128][129]aMatrix=Split(lsbURL.Current.Text,"|")[130][131]IfTrim(Lower(aMatrix[1]))Begins"http"OrTrim(Lower(aMatrix[1]))Begins"https"Then[132]TryDesktop.Open(Trim(aMatrix[1]))[133]Else[134]Message.Error("In der URL fehlt das Protokoll 'http' oder 'https'!")[135]Return[136]Endif' Protokoll ok ?[137][138]End' lsbURL_DblClick()[139][140]PublicSubbtnEnde_Click()[141]FMain.Close(True)[142]End' btnEnde_Click()[143][144]'*************************************************************************************[145][146]PublicSubtxtElement_Change()[147]IflsbURL.CurrentThen[148]IflsbURL.List.Exist(txtElement.Text)Then[149]Message.Error("Dieser Eintrag existiert bereits.")[150]Else[151]lsbURL.Current.Text=txtElement.Text[152]Endif[153]Endif' lsbCBList.Current ?[154]End' txtElement_Change()[155][156]PrivateSubRefresh()[157]DimbEnabledAsBoolean[158][159]bEnabled=lsbURL.Count[160]txtElement.Enabled=bEnabled[161]btnDeleteElement.Enabled=bEnabled[162]btnUp.Enabled=bEnabled[163]btnDown.Enabled=bEnabled[164]btnDeleteList.Enabled=bEnabled[165]IfNotbEnabledThentxtElement.Clear[166][167]End' Refresh()[168][169]' Diese Routine lädt die ListBox-Liste aus einer binären, gambas-spezifischen Datei.[170]' Parameter:[171]' sPath - Datei-Pfad zur ausgewählten Import-Datei.[172]' lsb_URL - Referenz auf die ausgewählte ListBox auf der Form.[173]PublicSubImportLBList(sPathAsString, lsb_URLAsListBox)[174]$hFile=OpensPathForRead[175]lsb_URL.List=Read#$hFileAsArray[176]Close#$hFile[177]Catch[178]Message.Error("Der Daten-Import war fehlerhaft!"&gb.NewLine&"Fehler: "&Error.Text)[179]End' ImportLBList(...)[180][181]' Diese Routine speichert eine ListBox-Liste in eine binäre, gambas-spezifische Datei.[182]' Parameter:[183]' sPath - Datei-Pfad zur ausgewählten Export-Datei.[184]' lsb_URL - Referenz auf die ausgewählte ListBox auf der Form.[185]PublicSubExportLBList(sPathAsString, lsb_URLAsListBox)[186]Iflsb_URL.Count=0Then[187]Return[188]Else[189]$hFile=OpensPathForWriteCreate[190]Write#$hFile, lsb_URL.ListAsArray[191]Close#$hFile[192]Catch[193]Message.Error("Der Daten-Export war fehlerhaft!"&gb.NewLine&"Fehler: "&Error.Text)[194]Endif' lsb_URL.Count = 0 ?[195]End' ExportLBList(...)[196][197]PublicSublsbURL_Menu()[198]DimmnuContextLBAsMenu[199]DimmnuMenuItem1, mnuMenuItem2AsMenu[200][201]' Es wird ein neues Menü-Objekt für die Liste erzeugt:[202]mnuContextLB=NewMenu(FMain,False)[203]' 1. Unter-Menü im Menü mnuContextLB[204]mnuMenuItem1=NewMenu(mnuContextLB)As"mnuEditLB"[205]mnuMenuItem1.Text="ListBox-Hilfe aufrufen"[206]mnuMenuItem1.Picture=Stock["help"][207]' 2. Unter-Menü im Menü mnuContextLB[208]mnuMenuItem2=NewMenu(mnuContextLB)As"mnuSelectAll"[209]mnuMenuItem2.Text="Alle Elemente markieren"[210]mnuMenuItem2.Picture=Stock["select-all"][211]mnuContextLB.Popup' Das mnuContextLB wird der Liste als PopUp-Menü zugewiesen[212][213]End' lsbURL_Menu()[214][215]' 2 Aktionen, wenn das Kontextmenü der ListBox ausgewählt wurde:[216]PublicSubmnuEditLB_Click()[217]Message.Info("Ich bin die kleine ListBox-Hilfe ...")[218]End' mnuEditLB_Click()[219][220]PublicSubmnuSelectAll_Click()[221]IfcboxMultiSelect.Value=cboxMultiSelect.TrueThen[222]lsbURL.SelectAll[223]lsbURL.Refresh[224]Wait[225]Else[226]Return[227]Endif' cboxMultiSelect.Value = cboxMultiSelect.True ?[228]End' mnuSelectAll()[229][230]PublicSubForm_Close()[231]$sFilePath=$sProjectPath&/"url.lis"[232]ExportLBList($sFilePath, lsbURL)[233]End' Form_Close()
```

Chapter 17.4 ListView introduces you to the WebRadio project, in which you no longer have to separate a text element into two parts by a separator - in the above-mentioned project it was the pipe character - but use the link address as a key and only see the name of the web radio station in the ListView. The Web radio station is called after selecting the displayed name of the Web radio station in the ListView using the corresponding key. Only 2 informatic flies with one stone - but still…..


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.4.0 ListView

The ListView control in gb.qt4 (→ gb.gui.base) implements a list of selectable elements.
*  To set the visible pointer - as a selection of a particular element in the ListView - assign the key of the element to be selected to the key property of an element.


# 17.4.0.1 Properties ListView

The ListView class has these properties, among other things:
Table 17.4.0.0.1.1: Selected properties of the ListView class


# 17.4.0.2 Methods ListView

The ListView class has these selected methods:
Table 17.4.0.2.1: Selected methods of the ListView class
The Add (…) method inserts a new element into the ListView:


```
Function Add ( Key As String, Text As String [ , Picture As Picture, After As String ] ) As _TreeView_Item
```

In the following example from the ListViewE project, the individual elements in the ListView are generated from the contents of a file:


```
PrivateSubListViewImport(PathAsString, hListViewAsListView)DimcJSONCollectionAsJSONCollectionDimcCollectionAsJSONCollectionDimsKey, sTextAsStringDimpicPictureAsPicturehListView.ClearcJSONCollection=JSON.Decode(File.Load(Path),True)ForEachcCollectionIncJSONCollection
    sKey=cCollection["KEY"]sText=cCollection["TEXT"]picPicture=Picture[cCollection["PICTURE"]]hListView.Add(sKey, sText, picPicture,Null)' Null, weil die Reihenfolge feststehtNextEnd' ListViewExport(...)
```



# 17.4.0.3 Events ListView

The ListView class has the following events, among others:
Table 17.4.0.3.1: Selected events of the ListView class
The next section introduces important properties and methods of the virtual class _TreeView_Item, since the properties Current and Item are of type _TreeView_Item.


# 17.4.0.4 Properties and methods of the class _TreeView_Item

The virtual class _TreeView_Item represents an entry in a ListView.


# 17.4.0.5 Properties of the class _TreeView_Item

Table 17.4.0.5.1: Selected properties of the virtual class _ListView_Item
The ListView only really shows its strength as a control element for displaying data when you generate the text as RichText and use it together with an image (data type Picture) in front of the text:


Figure 17.4.0.5.1: Using RichText in a ListView


# 17.4.0.6 Methods of the class _TreeView_Item

Table 17.4.0.6.1: Selected methods of the virtual class _TreeView_Item
The use of different methods is illustrated by the following, extensively commented sample source code for deleting an (selected) element:


```
PublicSubbtnDeleteElement_Click()' Only one selected element may be deleted.IfNotListView1.KeyThenReturn' First place the internal cursor on the selected element (start position)ListView1.MoveCurrent()' Then place the internal cursor on the next *visible* - higher lying - element.ListView1.MoveAbove()' ***' The selected element is deletedListView1.Remove(ListView1.Key)' The internal cursor points after (***) to the element to be selected after deletion.' If there is still an upper element after deletion, the external cursor is placed on it -> it is marked.IfListView1.ItemThenListView1.Key=ListView1.Item.Key' Otherwise, the internal cursor is set to the first entry, if it exists and then marks the top element.ElseIfNotListView1.MoveFirst()ThenListView1.Key=ListView1.Item.KeyEndifEnd
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.4.1 Project - Excursion ListView


Figure 17.4.1.1: ListView with selected entry (after a search)
The project demonstrates how you can work with a ListView:
Clicking an item in the ListView displays selected information about the selected item in the console of the Gambas IDE:


```
Key = KX1 | Text = X1-Element | Bild-Pfad = icon:/22/record
Key = KY1 | Text = Y1-Element | Bild-Pfad = icon:/22/record
Key = KY31 | Text = Y31-Element | Bild-Pfad = icon:/22/linux
...
```

The quite extensive source code can be found in the project' ListViewE' in the download area. The source code is adequately commented. For example, the following source code section inserts new elements into the ListView:


```
PublicSubbtnInsertElement_Click()IftxbElement.Text<>NullThenIfNotListView1.Exist("K"&txbElement.Text)ThenListView1.MoveCurrent()ListView1.Add("K"&txbElement.Text, ,Picture["icon:/22/info"], ListView1.Key)ListView1.Item.EnsureVisible()ElseMessage.Warning("Das Element '"&txbElement.Text&"' existiert bereits!")txbElementName.Clear()ReturnEndiftxbElementName.Clear()' Das neue Element wird markiertListView1.Key=ListView1.Item.KeyEndifEnd' btnInsertElement_Click()
```

You should decide in good time whether you want the elements to be displayed sorted after inserting or not. You cannot use the' Sorted' property as a switch between sorted and unsorted display. By clicking on the check box with the label' Sort elements' you can change the display once to sorted display. Any further change of the value (true or false) of the CheckBox - interpreted as' sort' or' do not sort' - has the following effect:
For your own projects, you have to select the passages from the source code you need.
Note: The Current property represents the user-selected entry in a ListView, while the Item property of the _TreeView_Item type is an internal, invisible and current-independent pointer. Current is used to evaluate user input in a ListView and item for all algorithms that run through a ListView.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.4.2 Two Projects - ListView

You will be introduced to two projects that focus on the use of the ListView class.
Claus Dietrich's project demonstrates how you can present the data to be displayed in a special way with RichText and images on the elements in a ListView.
The context menu of the ListView allows you to
The following three pictures show three different designs:

Figures 17.4.2.1: Watches with different designs
With the order:


```
Shell "timedatectl --no-pager list-timezones" To sTimeZoneList
```

the list of available time zones is imported from the operating system.
With the order:


```
Shell "zdump " & sTimeZone To sTime
```

the data of a time zone is retrieved from the operating system (database tzdata), then split into a string array, then parsed according to weekday, date and time for the time zone to be displayed and finally formatted for display in a suitable way:


```
Asia/Seoul Wed May 18 20:48:18 2016 KST
```

Ingo Beckert's project also displays data with rich text and images that are interactively loaded from the Internet. These basic data provide a selection of cities, countries or regions in the ListView and also display the corresponding national flag:

Figure 17.4.2.2: Selection' Wellington'.
A double-click on an element in the ListView - in the example Wellington Point - shows the time zone, the day of the week, the date and the current local time. The data is supplemented by the time zone for the location and the differences to other time zones.

Figure 17.4.2.3: Dates for Wellington Point
A click on the yellow display changes back to the selection → figure 17.4.2.2.2.
The complete projects can be found in the download area.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.5.0 ColumnView

The class ColumnView in gb.qt4 (→ gb.gui.base) implements a control that displays a TreeView with columns.


# 17.5.0.1 ColumnView Properties

The ColumnView class has these properties, among other things:
Table 17.5.0.0.1.1: Selected properties of the ColumnView class
Class _ColumnView_Columns:
The _ColumnView_Columns class has only these four properties:


```
Ascending As Boolean
Specifies whether the sorting is set to ascending or descending.

Count As Integer
Returns or sets the number of columns.

Max As Integer
Returns the largest column index.

Sort As Integer
Returns the column index used to sort the ColumnView row or determines this column using the index.
The value -1 indicates that the rows are not sorted.
```

In the following example, a column is returned - according to its index - whose 4 properties you can then query, for example:


```
DimhColumnViewAsColumnViewDimhGridViewColumnAs_ColumnView_Columns
 
hGridViewColumn=hColumnView.Columns[IndexAsInteger]PrinthGridViewColumn.Count' hColumnView.Columns[Index As Integer].CountPrinthGridViewColumn.Max' hColumnView.Columns[Index As Integer].MaxPrinthGridViewColumn.Sort' hColumnView.Columns[Index As Integer].SortPrinthGridViewColumn.Ascending' hColumnView.Columns[Index As Integer].Ascending
```



# 17.5.0.2 ColumnView methods

The ColumnView class has these selected methods:
Table 17.5.0.2.1: Selected methods of the ColumnView class
The Add (…) method inserts a new row into the ColumnView:


```
Add ( Key As String, Text As String [ , Picture As Picture, Parent As String, After As String ] ) As _TreeView_Item
```

To understand the properties, methods, and events of the ColumnView control, you need to understand the (virtual) _TreeView class, because the ColumnView is basically a _TreeView that has been added to the source code to manage columns that are already available in _TreeView. To increase confusion, _TreeView is internally a GridView - a grid of cells into which you can insert text and images. However, you cannot freely access these cells from a _TreeView. The reason for this is that a single _TreeView row is an entire *row* in the GridView.
Example: By calling the Add method:


```
ColumnView.Add("1", "Text erste Spalte", pibIcon1)
```

create a new line - identified by the key “1” - to which the text “Text first column” and a preceding icon are added in the only (first) column. Since the return value of the add method is a _TreeView_Item object, you can use this object to specify the texts of other ColumnView columns, but without an image of the type Picture, if required:


```
ColumnView.Add("1", "Text erste Spalte")[1] = "Text zweite Spalte der 1. Zeile"
ColumnView.Add("1", "Text erste Spalte")[2] = "Text dritte Spalte der 1. Zeile"
```

For example, an alternative to creating a row of a ColumnView with several columns is not to use the return value of the add method directly, but to save it in a variable of the data type _TreeView_Item and to continue working with this variable:


```
DimhItemAs_TreeView_Item
 
hItem=ColumnView.Add("1","Text erste Spalte", pibIcon1)hItem[1]="Text zweite Spalte der 1. Zeile"hItem[2]="Text dritte Spalte der 1. Zeile"
```

Another approach with a double indexing offers alternative 2:


```
ColumnView.Add("1","Text erste Spalte", pibIcon1)ColumnView[1][1]="Text zweite Spalte der 1. Zeile"ColumnView[1][2]="Text dritte Spalte der 1. Zeile"
```

The special treatment of the first column in a row (row) of a ColumnView compared to the other columns requires getting used to, especially since only the first column can be assigned an image.


# 17.5.0.3 Events ColumnView

The ColumnView class has the following events, among others:
Table 17.5.0.3.1: Selected events of the ColumnView class


# 17.5.0.4 Excursus GridView, TableView and ColumnsView

The following table contains some information about selected properties of the GridView, TableView and ColumnsView controls to help you select the grid for your projects:
The ColumnView class has the following events, among others:
Table 17.5.0.4.1: Selected properties of GridView, TableView and ColumnsView


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.5.1 ColumnView Project 1

In addition to using properties of the ColumnView control, the project demonstrates the sorting of the data and especially the use of the various Move() methods.

Figure 17.5.1.1: Program window - sorting by last name switched on
You can create new (random) data (12 elements) at any time. It is advantageous if you see an element as a row in a ColumnView.


```
PublicSubbtnNewData_Click()covData.Clear()' Delete content of the ColumnView. Does not apply to the optional header line!SetData(12)' 12 Inserting new elements with random data' Marking of the first element - if at least one existsIfNotcovData.MoveFirst()ThencovData.Key=covData.Item.KeytxbCurrentKey.Text=covData.Item.KeyEndPrivateSubSetData(iCountAsInteger)DimiAsIntegerDimaFirstNamesAsString[]=["Hans","Maria", ...,"Robert","Stefan","Emma","Yvonne","Claus"]DimaSurNamesAsString[]=["Meyer","Lehmann", ...,"Müller","Grahn","Kaiser","Vogt","Zechlin"]DimaPicturesAsString[]=["led_green16.png","led_red16.png","led_blue16.png"]Fori=1ToiCount 
    covData.Add(Str(i),Str(i),Picture[aPictures[Rand(0, aPictures.Max)]])' 1. Spalte + BildcovData[Str(i)][1]=aFirstNames[Rand(0, aFirstNames.Max)]' 2. SpaltecovData[Str(i)][2]=aSurNames[Rand(0, aSurNames.Max)]' 3. SpaltecovData[Str(i)][3]=Format$(Date(CFloat(Now()-Rnd(7000,8200))),"dd.mm.yyyy")' 4. SpalteNextEnd
```

The data can also be sorted out (→ CheckBox), whereby the data are sorted first after the 3rd column 'Last name'. Afterwards, all other columns can be sorted as well.


```
PublicSubckboxSorting_MouseDown()txbCurrentKey.Text=covData.Item.KeyIfckboxSorting.Value=TrueThencovData.Sorted=FalseElsecovData.Sorted=True' It's to be sorted!covData.Columns.Ascending=True' A → ZcovData.Columns.Sort=2' Sort by last nameEndifEnd
```

You can immediately move the internal pointer to the first or last element if there is at least one element - which will be checked. The first or last element is then selected so that you can see the current end position:


```
PublicSubbtnFirst_Click()IfcovData.Count>0Then' There is at least one element...covData.MoveFirst()txbCurrentKey.Text=covData.Item.Key' Select element (ColumnView without Focus: Mark gray)covData.Key=covData.Item.KeyEndifEndPublicSubbtnLast_Click()IfcovData.Count>0Then' There is at least one element...covData.MoveLast()txbCurrentKey.Text=covData.Item.Key' Select element (ColumnView without Focus: Mark gray)covData.Key=covData.Item.KeyEndifEnd
```

From any position you can move the internal pointer step by step to the first or last element:


```
PublicSubbtnUp_Click()IfcovData.Count>0Then' There is at least one element...IfNotcovData.MoveAbove()ThentxbCurrentKey.Text=covData.Item.Key&" : "&covData.Item[1]covData.Key=covData.Item.KeyElsecovData.MoveFirst()EndifEndifEndPublicSubbtnDown_Click()IfcovData.Count>0Then' There is at least one element...IfNotcovData.MoveBelow()ThentxbCurrentKey.Text=covData.Item.Key&" : "&covData.Item[1]covData.Key=covData.Item.KeyElsecovData.MoveLast()EndifEndifEnd
```

From any position you can move the internal pointer from the first to the last element (iteration). This procedure is well suited for reading data from a ColumnView or importing it into a ColumnView. Since the marking is switched off to demonstrate the independence of the internal pointer from the external (marking) pointer, you can recognize the current position during iteration in the text box (key and text of the first column):


```
PublicSubbtnIterationDown_Click()DimiLastKeyAsIntegerIfcovData.Count>0Then' There is at least one element...iLastKey=covData.Key' Start-Key speichern für ***Endif' Set the internal pointer to the topmost element, if possibleIfNotcovData.MoveFirst()Then' There is at least one element...Repeat' ... then iteration of the top elementtxbCurrentKey.Text=covData.Item.Key&" : "&covData.Item[1]' covData.Key = covData.Item.Key ' Mark element disabledWait0.4' Here are further instructions for processing data from the ColumnView: For example' Print covData.Item[0]; gb.Tab; covData.Item[1]; gb.Tab; covData.Item[2]; gb.Tab; covData.Item[3]UntilcovData.MoveBelow()' ... until the last element in the ColumnView is reachedcovData.MoveTo(iLastKey)' ***EndifEnd
```

To fully specify the source code, you can see how the layout of the ColumnView is defined and start values are set:


```
PublicSubForm_Open()FMain.Resizable=FalseWithcovData' Anzahl der Spalten festlegen.Columns.Count=4.Header=True' Kopfzeile anzeigen' Header-Spalten-Namen festlegen.Columns[0].Text=("RGB").Columns[1].Text=("Vorname").Columns[2].Text=("Nachname").Columns[3].Text="Geburtsdatum"' Spalten-Weite festlegen.Columns[0].Width=25.Columns[1].Width=130.Columns[2].Width=130.Columns[3].Width=150' Spalten-Ausrichtung festlegen.Columns[0].Alignment=Align.Center.Columns[1].Alignment=Align.Normal.Columns[2].Alignment=Align.Normal.Columns[3].Alignment=Align.Center.Mode=Select.Single.Sorted=False' Es soll *nicht* sortiert werden!.AutoResize=True.Resizable=TrueEndWithckboxSorting.Value=ckboxSorting.FalseSetData(12)' Markierung des 7. Elementes' If covData.Count > 0 Then ' Es existiert mindestens ein (oberes) Element ...IfNotcovData.MoveFirst()Then' Es existiert mindestens ein (oberes) Element ...IfcovData.MoveTo(7)=TrueThen' Wenn ein Fehler auftrat ...covData.MoveBack()' ... dann zurück zum AusgangselementcovData.Key=covData.Item.Key' Element markierenElse' Element markieren (ColumnView hat Focus → Markierung hellgrün (Mint 17.3))covData.Key=covData.Item.KeyEndifEndifEndPublicSubckboxSorting_MouseDown()txbCurrentKey.Text=covData.Item.KeyIfckboxSorting.Value=TrueThencovData.Sorted=FalseElsecovData.Sorted=True' Es soll sortiert werden!covData.Columns.Ascending=True' A → ZcovData.Columns.Sort=2' Sortieren nach NachnameEndifEndPublicSubForm_Close()FMain.Close()End
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.5.2 ColumnView Project 2

Project 2 for Chapter 17.5 ColumnView demonstrates the use of properties, methods and events of the ColumnView control as well as memory management for data export and data import.

Figure 17.5.2.1: Main programme with the GridView

Figure 17.5.2.2: Change a contact
For notes on valid data checks, see → Chapters 16.6.1 TextBox and its specialisations, 16.6.2 Valid data and 19.6.5 Checking the syntax of strings.

Figure 17.5.2.3: Inserting a new contact
The source code is given in selected extracts showing iteration over all the elements of a ColumnView, implemented by different control structures:


```
[1]PrivateSubSetDBData()[2][3]DimrDBResultAsResult[4]DimiKeyAsInteger[5]DimsDBTableName, sSQL_Command, sKeyAsString[6]DimhItemAs_TreeView_Item[7][8]sDBTableName="kontakte"' Name of the DB[9]sSQL_Command=Subst("&1 &2&3","SELECT vorname, nachname, email, web, pbo FROM", sDBTableName,";")[10][11]rDBResult=DBC.DBConnection.Exec(sSQL_Command)[12][13]IfrDBResult.Count=0Then[14]Message.Warning(Subst("&1 &2 &3","<h1>",("The number of selected records is zero!"),"</h1>"))[15]Return[16]Endif[17][18]IfrDBResult.AvailableThen[19]ForEachrDBResult[20]InciKey' Der erste Key ist "1", weil eine Kopfzeile definiert ist[21]sKey=Str(iKey)[22]SelectrDBResult["pbo"][23]Case"p"[24]covData.Add(sKey,"",Picture["green16.png"])' 1. Spalte[25]Case"b"[26]covData.Add(sKey,"",Picture["red16.png"])[27]Case"o"[28]covData.Add(sKey,"",Picture["gray16.png"])[29]EndSelect[30]' Weitere ColumnView-Spalten einfügen ...[31]covData[sKey][1]=rDBResult["vorname"][32]covData[sKey][2]=rDBResult["nachname"][33]covData[sKey][3]=rDBResult["email"][34]covData[sKey][4]=rDBResult["web"][35]Next[36]Endif[37][38]' If rDBResult.Available Then[39]'    For Each rDBResult[40]'      Inc iKey[41]'      sKey = Str(iKey)[42]'      Select rDBResult["pbo"][43]'        Case "p"[44]'          hItem = covData.Add(sKey, "", Picture["green16.png"])[45]'        Case "b"[46]'          hItem = covData.Add(sKey, "", Picture["red16.png"])[47]'        Case "o"[48]'          hItem = covData.Add(sKey, "", Picture["gray16.png"])[49]'      End Select[50]'    ' Weitere ColumnView-Spalten einfügen ...[51]'      hItem[1] = rDBResult["vorname"][52]'      hItem[2] = rDBResult["nachname"][53]'      hItem[3] = rDBResult["email"][54]'      hItem[4] = rDBResult["web"][55]'    Next[56]' Endif[57][58]CVSettings["ImportDBData/Imported"]=1[59]CVSettings.Save()[60][61]Catch[62]Message.Error(Error.Text)[63][64]End
```

Notes:
In line 11 the DB connection defined in the (static) class DBC is used and the result of the DB query is stored in the variable rDBResult.The reading of the selected fields of the DB table 'kontakte' is done in lines 18 to 36.An alternative can be found in lines 38 to 56.In line 58 the value in the settings file in the slot 'ImportDBData' is changed from 0 to 1 and stored in line 59. By changing this value, all exported data from the ColumnView - stored in a file in JSON format - will be read back into the ColumnView from this file in the future.
The next two paragraphs will introduce you to the export and import procedures:
Data Export:


```
[1]PrivateSubExportData(sJSONPathAsString)[2][3]DimiAsInteger[4]DimcJSONCollectionAsJSONCollection[5]DimcJSONAsJSONCollection[6][7]cJSON=NewJSONCollection' Ein neues JSONCollection-Objekt erzeugen[8]Repeat[9]cJSONCollection=NewJSONCollection[10]cJSONCollection["pbo"]=covData.Item[0][11][12]SelectcovData.Item.Picture' Bild in der 1. Spalte (Index=0)[13]CasePicture["red16.png"][14]cJSONCollection["picture"]="red16.png"[15]CasePicture["green16.png"][16]cJSONCollection["picture"]="green16.png"[17]CasePicture["gray16.png"][18]cJSONCollection["picture"]="gray16.png"[19]EndSelect[20][21]cJSONCollection["vorname"]=covData.Item[1]' Text in der 2. Spalte (Index=1)[22]cJSONCollection["nachname"]=covData.Item[2][23]cJSONCollection["email"]=covData.Item[3][24]cJSONCollection["web"]=covData.Item[4][25]Inci[26]' In die JSONCollection 'cJSON' eine JSONCollection als Element einfügen[27]cJSON["RECORD_"&Str(i)]=cJSONCollection[28]UntilcovData.MoveBelow()' ... das letzte Element in der ColumnView erreicht ist[29][30]File.Save(sJSONPath&/"json.data", JSON.Encode(cJSON))' Den JSONText in einer Datei speichern[31][32]End
```

Data import:


```
[1]PrivateSubImportData(sJSONPathAsString, hColumnViewAsColumnView)[2][3]DimiElementAsInteger=1[4]DimcJSONCollectionAsJSONCollection[5]DimcCollectionAsJSONCollection[6][7]IfNotExist(sJSONPath)ThenReturn[8]hColumnView.Clear()[9]cJSONCollection=JSON.Decode(File.Load(sJSONPath),True)[10][11]ForEachcCollectionIncJSONCollection[12]hColumnView.Add(Str(iElement), cCollection["pbo"],Picture[cCollection["picture"]])[13]hColumnView[iElement][1]=cCollection["vorname"][14]hColumnView[iElement][2]=cCollection["nachname"][15]hColumnView[iElement][3]=cCollection["email"][16]hColumnView[iElement][4]=cCollection["web"][17]InciElement[18]Next[19]End
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.6 IconView

The IconView component (gb.qt4) implements a control that can display labeled icons. IconView elements are indexed by a key. The component has an internal cursor for accessing its elements. Use the MoveFirst, MoveNext, MovePrevious, MoveBack or MoveTo methods to move the internal cursor and the Item property to display the current element.

Figure 17.6.1: IconView in the Project Explorer
The Project Explorer in the examples of Gambas under the headingMiscellaneoususes an IconView to display the directory structure.


# 17.6.1 Properties and Methods IconView

The following 2 tables describe selected properties and methods of an IconView:
Table 17.6.1.1: Selected properties of the component IconView
You can assign a self-defined context menu to an IconView, which you call by clicking with the right mouse button (RMT).
The alignment of the displayed text and the icon can take the values Arrange.vertical (text under the icon and vertical display of the icon) or Arrange.horizontal (text next to the icon and horizontal display of the icon).
Methods of an IconView:


# 17.6.2 Events IconView

Special events of the IconView component can be found here:
Table 17.6.2.1: Overview of events of an IconView


# 17.6.3 Project 1 - IconViewCompare

You can use the IconView.sorted property to display the elements in an IconView sorted by the displayed text. The property IconView.Compare and the event IconView_Compare(Key As String, OtherKey As String) also enable you to sort by user-defined criteria. Use the Compare property to display the result of the comparison of a Compare event. The return value of the comparison is valid:

Figure 17.6.3.1: IconView with three elements
The order of the display at program start is determined by the order in which the IconView is filled → Figure 17.6.3.1.

Figure 17.6.3.2: IconView with sorted elements
After sorting with the sort criterionImage.width ∗ Image.heightthe display has changed → Figure 17.6.3.2. The source text is fully specified:


```
' Gambas class filePublicSubForm_Open()DimaPathsAsString[]=["icon:/48/book","icon:/64/calendar","icon:/32/play"]DimsPathAsStringFMain.CenterFMain.Resizable=False' Als Key wird der Pfad zum Bild gewählt.ForEachsPathInaPaths
    ivwIcons.Add(sPath,File.BaseName(sPath),Picture[sPath])' Füllen der IconViewNext' sPathEnd' Form_Open()PublicSubivwIcons_Compare(KeyAsString, OtherKeyAsString)DimiSize, iOtherSizeAsInteger' Sortier-Kriterium: Bild.Breite * Bild.HöheWithivwIcons[Key].PictureiSize=.W*.HEndWithWithivwIcons[OtherKey].PictureiOtherSize=.W*.HEndWithivwIcons.Compare=IIf(iSize=iOtherSize,0,IIf(iSize>iOtherSize,1,-1))' Alternative:' ivwIcons.Compare = Sgn(iSize - iOtherSize)EndPublicSubbtnSort_Click()' Nach dem Setzen von ivwIcons.Sorted auf True wird das IconView im Hintergrund' eine Reihe von Compare-Events auslösen, um die Liste sortieren zu lassen.' Wird ivwIcons.Sorted auf False gesetzt, dann wird nicht weiter sortiert.ivwIcons.Sorted=NotivwIcons.SortedIfivwIcons.SortedThenbtnSort.Text=("Icon sind sortiert.")btnSort.Enabled=FalseEndif' ivwIcons.Sorted = True ?End' btnSort_Click()
```



# 17.6.4 Project 2 - IconViewEdit

If you set theIconView.editableproperty to True, you can set a selected element to edit mode withF2, change the text and exit edit mode with Enter. The changed text is copied:

Figure 17.6.4.1: IconView - Rename elements
The extract from the source code allows the edit mode for an icon view with saving of the old text of the renamed icon:


```
Private$sLastIconNameAsStringPublicSubForm_Open()FMain.CenterFMain.Resizable=True...IconView.Editable=TrueEnd' Form_Open()PublicSubIconView_Rename()Message.Info("Das Icon '"&$sLastIconName&"' wurde umbenannt in "&"'"&\\IconView.Current.Text&"'")End' IconView_Rename()PublicSubIconView_Select()$sLastIconName=IconView.Current.TextEnd' IconView_Select()
```



# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.1 Frame

The Frame component is a container with a frame and an identifier. The actual appearance of the frame depends on theGUIused.

Figure 18.1.1: Frames


# 18.1.1 Frame properties

The componentFramehas only one specific property. It is theTextproperty of the String data type. You can set or read the identifier for a frame using this property. The two synonymsCaptionandTitleexist for the Text property.


# 18.1.2 Note

There are no restrictions on the components in theFramecontainer.


# Download

Projects
download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.2 Panel

The Panel component is a container for other components whose border can be changed in various ways. The classes HBox, VBox, HPanel and VPanel are also panels that are initialised with different arrangement values.


# 18.2.1 Properties Panel

You control the type of border on a panel using the Panel.Border property. Other properties of a panel can be found in the following table:
Table 18.2.1.1: Selected Panel Properties
The Margin, Padding and Spacing properties have been described in detail in chapter '18.0 Containers'.


# 18.2.2 Examples of panel use

One field of use for a panel arises in connection with the use of (at least) two RadioButtons to form groups of RadioButtons → Chapter 16.18 RadioButton.
A panel is also well suited to be used, for example, in an HBox as a dynamic spacer (Panel1.Expand = True):

Figure 18.2.2.1: Panel as a dynamic element
The StatusBar class by Raymond de Bruijne (http://gambas-club.de/viewtopic.php?f=4&t=2928) relies on individual panels for the construction of a StatusBar, where each panel can be formatted in a particular way depending on the display purpose:

Figure 18.2.2.2: Four panels in a StatusBar


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.3 SidePanel (gb.qt4)

The SidePanel control implements a container that can be hidden or resized. A SidePanel is displayed according to the Orientation property.

Figure 18.3.1: Sidepanel application area in the Gambas IDE.
The controls labelled (1) and (2) in the Gambas IDE are 2 SidePanels with different properties for SidePanel.Orientation. In the circles you see the handles for hiding or dragging the left sidepanel as well as its tooltip text 'Project'. However, you will only see the text if the SidePanel is also displayed. The display of the object properties and the hierarchy of the objects are also embedded in a SidePanel.


# 18.3.1 SidePanel properties

Selected properties of a SidePanel are listed and described in the following table:
Table 18.3.1.1: Selected properties of the SidePanel control.


# 18.3.2 Events SidePanel



# 18.3.3 Example

In the following example, the SidePanel is displayed on the left when the programme is started (with PictureBox) and can then be hidden or shown:

Figure 18.3.3.1: Sidepanel → Show

Figure 18.3.3.1: Sidepanel → Hide
A small project showing the use of a SidePanel can be found as an archive in the download section.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.4 ToolPanel (gb.form)

The ToolPanel control implements a toolbox with multiple vertically scrollable toolbar bars. The class can be created. To create a new ToolPanel:


```
Dim hToolPanel As ToolPanel
hToolPanel = New ToolPanel ( Parent As Container ) [ As "EventName" ]
```

The class behaves like a read-only array and returns an object representing one of the toolboxes.


```
Dim hToolPanel As ToolPanel
Dim hToolPanelContainer As _ToolPanelContainer
hToolPanelContainer = hToolPanel [ Index As Integer ]
```



# 18.4.1 Properties

The ToolPanel class has these properties, among others:
Table 18.4.1.1 : Properties of the class ToolPanel


# 18.4.2 Events

The ToolPanel class has only two relevant events:
Table 18.4.2.1 : Events of the ToolPanel class


# 18.4.3 Project

Presented is a small project where you can select one of three toolbars in a ToolPanel that provide different functionalities:

Figure 18.4.3.1: Selection: Colour

Figure 18.4.3.2: Selection: Date

Figure 18.4.3.3: Selection: File
For the ToolPanel, on the one hand you can define its basic properties in the IDE and on the other hand, after defining how many toolbars the ToolPanel should hold, you can also define the essential properties of the individual ToolBars.
The source code looks very clear because only the essential functionality of the individual toolbars needs to be specified (selection of colour, selection of date1 and date2 and selection of file):


```
' Gambas class filePublicSubForm_Open()FMain.Resizable=FalseColorChooser1.Value=&HCF3FFF
 
    FileChooser1.Root=User.HomeFileChooser1.Multi=FalseFileChooser1.Filter=["*.png;*.jp*;*.gif","Picture files","*.txt;*.xml;*.conf","Text files"]FileChooser1.FilterIndex=0'-- Display images with the extensions png, jp* and gif first'-- FileChooser1.FilterIndex = -1       '-- Display all files'-- FileChooser1.ShowFile = True        '-- Default-Value is 'True''-- FileChooser1.ShowDirectory = False  '-- Default-Value is 'False''-- FileChooser1.ShowButton = False     '-- Default-Value is 'False'FileChooser1.ShowPreview=True'-- Default-Value is 'False'EndPublicSubDateChooser1_Change()lblDifferenceInDays.Text=RunDateDiff(DateChooser1.Value, DateChooser2.Value)EndPublicSubDateChooser2_Change()lblDifferenceInDays.Text=RunDateDiff(DateChooser1.Value, DateChooser2.Value)EndPrivateSubRunDateDiff(hDate1AsDate, hDate2AsDate)AsIntegerReturnAbs(DateDiff(hDate1, hDate2, gb.Day))+1EndPublicSubColorChooser1_Change()lblColor.Text="&H"&Hex(ColorChooser1.Value)EndPublicSubFileChooser1_Change()lblFilename.Text=""IfFileChooser1.SelectedPathThenlblFilename.Text=FileChooser1.SelectedPathEndPublicSubFileChooser1_Activate()IfFileChooser1.Multi=FalseThenlblFilename.Text=FileChooser1.SelectedPath'-- Message.Info("Selected file:<hr>" & FileChooser1.SelectedPath)'-- Desktop.Open(FileChooser1.DirView.Current &/ FileChooser1.FileView.Selection[0])Desktop.Open(FileChooser1.SelectedPath)EndifEnd
```

A special feature when selecting a file is that after double-clicking on a file, the selected file is opened with the (standard) editor and its contents are displayed.
The complete source code is made available to you in a project archive in the download area.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.5 Expander

This component is a container whose surface can be animatedly expanded and collapsed.
Notice:To select the Expander container in the IDE, you must click on the inner (highlighted) part in the container or select theExpandercontainer in the hierarchy view.


# 18.5.1 Expander properties

You control the display of the contents of an expander component via the Expander.Hidden property. Other properties of an expander are described in the following table:
Table 18.5.1.1: Expander properties


# 18.5.2 Events Expander

The number of events of the Expander component is kept within narrow limits - there are only two:


# 18.5.3 Example Expander

The temperature measurement project presented uses theExpandercomponent. It takes up the configuration of the RS232 interface. By clicking on the identifier 'Configuration RS232 (USB adapter) interface' or on the symbolsor∨you can show or hide this configuration. By using the class gb.settings you determine whether the programme interface should be displayed minimised or maximised when the programme is started.

Figure 18.5.3.1:GUItemperature measurement with hidden configuration
The source code is given only in the passages that presents the use of theExpandercomponent. The complete project can be found in → 16.13 ComboBox.


```
[1]Publicv24SettingsAsNewSettings(User.Home&/"V24T"&/"v24T.conf")[2][3]PublicSubForm_Open()[4][5]FMain.Center[6]FMain.Resizable=False[7][8]FMain.Height=180[9]' expRX_TX.Hidden = True ' Option ohne gb.settings[10]expRX_TX.Animated=True[11]...[12]expRX_TX.Hidden=v24Settings["Expander/ExpanderHiddenStatus","TRUE"][13][14]End[15][16][17]PublicSubexpRX_TX_Hide()[18]FMain.Height=180[19]expRX_TX.Hidden=True[20]End[21][22]PublicSubexpRX_TX_Show()[23]FMain.Height=448[24]expRX_TX.Hidden=False[25]End[26][27]PublicSubForm_Close()[28]...[29]v24Settings["Expander/ExpanderHiddenStatus"]=expRX_TX.Hidden[30]...[31]End
```

When the programme is first started, it is displayed in minimised size → line 12 because the default value for the hidden status is True. Hiding and displaying the contents of the Expander component is always linked to a corresponding change in the size of the programme interface, as shown by the 2 procedures in lines 17 and 22. When the programme interface is closed → line 29, the current (hidden) status of the expander is saved in the configuration file v24T.conf and set as the start value for a further programme call.
Hint:The height of the form can also be adjusted automatically. For this,FMain.AutoResize = TrueandFMain.Arrangement = Arrange.Verticalare set in the source code of theGUI. It is only important that Form.Arrangement is set to an appropriate value! The assignments in lines [18] and [23] for the form height are then superfluous. TheHiddenproperty is always set to the correct value internally by the class.

Figure 18.5.3.2:GUItemperature measurement with unfolded expander


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.0 Control elements

Chapter 19 introduces you to selected components. First, the Settings class is presented, which you use to create and manage configuration files for your application. You can administer application profiles with a profile manager.
You can use the component gb.eval and the function Eval() of the same name to evaluate Gambas expressions at runtime.

Figure 19.0.1: Calculating values in a value table
Regular expressions are always a challenge, but you can successfully confront them with the methods of the class Regexp (gb.pcre) if you have developed and tested a regular expression adapted to the task. For example, this allows you to check email addresses or German postcodes quickly and reliably.
The gb.logging component implements a flexible system for logging Gambas applications. This component makes its functionality available via the two classes Formatter and Logger.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.1 Settings

For certain programmes it is desirable or even necessary to start the programme with tried and tested programme settings each time it is called. The settings mainly refer to
Gambas offers the possibility to store the configuration of a programme in so-called initialisation or configuration files *.conf and to read in and evaluate the contents of this text file at programme start, as an excerpt from a source code shows:


```
...PUBLICSUBSetConfigurationValues()cmbRS232PortName.Text=v24Settings["V24Konfiguration/Port-Name","/dev/ttyS0"]cmbSpeed.Text=v24Settings["V24Konfiguration/Geschwindigkeit","4800"]cmbParity.Text=v24Settings["V24Konfiguration/Parität","NONE"]cmbDataBits.Text=v24Settings["V24Konfiguration/AnzahlDatenbits","8"]cmbStopBits.Text=v24Settings["V24Konfiguration/AnzahlStopbits","1"]cmbFlow.Text=v24Settings["V24Konfiguration/Datenflusskontrolle","NONE"]END...PUBLICSUBForm_Close()IFRS232.Status=Net.ActiveTHENCLOSERS232
  GetConfigurationValues()v24Settings["Expander/ExpanderHiddenStatus"]=expRX_TX.Hidden' V24Settings.Save wird bei Form_Close automatisch ausgelöstEND
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.1.1 Settings - configuration files

The default for configuration files is defined byfreedesktop.orglike this: A configuration file <application-name>.<extension> is stored in the ~/.config/ directory. The extension of the configuration file is freely selectable. Recommended is 'conf'. Gambas3 adheres to this standard with theSettingsclass and with its own configuration files.
In the default setting of the Settings component used, the configuration file is a simple text file *.conf and can be edited subsequently with a text editor, for example to insert comments. This is possible because the path of a configuration file allows reading and writing by the logged-in user:


```
User.Home &/ ".config/gambas3" &/ Application.Name & ".conf"
```

The following notes for the content of a configuration file should be observed:


```
[Expander]
ExpanderHiddenStatus=False

[V24Konfiguration]
Port-Name="ttyUSB0"
Geschwindigkeit="9600"
Parität="NONE"
...
Datenflusskontrolle="NONE"
<LEERZEILE>
```

The configuration data in the configuration file is accessed at programme runtime using the section name/key combination or at programme startup if the key-value pair does not exist, as shown in the following excerpt from the source code for the Temperature Measurement project in the Form_Open() event:


```
Syntax:    Wert = Setting-Objektname["Sektionsbezeichner/Schlüsselname", optional "Vorgabewert"]

expRX_TX.Hidden = v24Settings["Expander/ExpanderHiddenStatus", TRUE]    	---> 	False
cmbSpeed.Text   = v24Settings["V24Konfiguration/Geschwindigkeit", "4800"]	---> 	9600
cmbParity.Text  = v24Settings["V24Konfiguration/Parität", "NONE"]		--->	NONE
```

In the following sections, projects are presented in which.
The following priorities are set for all the projects presented:
To manage the configuration of the application, you must include thegb.settingscomponent in your project.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# ﻿19.1.2  Beispiele – Methoden Write und Read

Die vorgestellten Projekte sind erprobt. Die Programme werden für einen Langzeitversuch zur Erfassung von Temperaturen in unterschiedlichen Höhen in einem Mikroklima genutzt. 
Die beiden Methoden Write und Read zum direkten Schreiben in eine Konfigurationsdatei sowie zum direkten Lesen werden am Beispiel eines Programmfensters zum Abschluss dieses Kapitels behandelt.


# 19.1.2.1  Beispiel 1 – Projekt Temperaturmessung

Das Projekt Temperaturmessung verfolgt die Idee, die analoge Größe Temperatur mit einem NTC-Temperatursensor zu erfassen und mit einem Analog-Digital-Wandler in einen digitalen Datenstrom  umzuwandeln, der über eine serielle RS232-Schnittstelle (V24-Schnittstelle) respektive über einen RS232-USB-Adapter eingelesen wird, um diesen Datenstrom dann auszuwerten und als Temperaturwert anzuzeigen:

Abbildung 19.1.2.1.1: Anzeige des Temperaturwertes
Die serielle Schnittstelle ist dabei auf die Übertragungsparameter einzustellen, die eine fehlerfreie Übertragung der Signale sichern. Während der Erprobung sollten verschiedene Einstellungen getestet werden, die im produktiven Einsatz der Platine als optimale Vorgabewerte bei jeder weiteren Messung einzulesen sind. Es ist deshalb günstig, über den ausgerollten Expander ► sofort Zugriff auf die Konfiguration der RS232-Schnittstelle zu haben:

Abbildung 19.1.2.1.2: Einstellung der Übertragungsparameter
Daher wird auch der Status der Komponente Expander in der Konfigurationsdatei erfasst. Die technischen Details zur Schnittstelle und zur Platine werden hier nicht weiter besprochen. Sie erfahren aber alles, wie man mit der Komponente Settings und Konfigurationsdateien arbeitet. Settings verfügt nur über wenige Eigenschaften und Methoden, von denen vorrangig folgende genutzt werden:
Tabelle: 19.1.2.1 Beschreibung ausgewählter Methoden
Wenn Sie den Standard-Pfad für die Konfigurationsdatei nutzen, wird die Konfigurationsdatei automatisch angelegt. Auch das Speichern der Konfigurationsdaten in der Konfigurationsdatei beim Beenden des Programms und das Öffnen der Konfigurationsdatei zum Einlesen der Konfigurationsdaten werden vom Programm übernommen. Es besteht die Möglichkeit, zur Laufzeit eines Programms die aktuellen Konfigurationsdaten zwischenzuspeichern oder den Inhalt einer Konfigurationsdatei neu einzulesen.
Tabelle: 19.1.2.2 Beschreibung der Eigenschaften
Der unten aufgeführte Inhalt (Auszug) der Konfigurationsdatei für das Projekt RS232T wurde vom Programm generiert. Entweder geschieht das Speichen beim Beenden des Programms oder während der Programmausführung (manuell oder in Abhängigkeit von bestimmten Programmzuständen) mit der Methode Settings.Save. Beachten Sie, dass die 2 Sektionen alphabetisch geordnet eingetragen werden – unabhängig von der Notation im Programm-Quelltext:


```
[Expander] 
ExpanderHiddenStatus=True 

[V24Konfiguration] 
Port-Name="/dev/ttyUSB0" 
Geschwindigkeit="4800" 
...
AnzahlStopbits="1" 
Datenflusskontrolle="NONE"
```

Anschließend werden wesentliche Teile des Quelltextes angegeben und anschließend erläutert, weil nur dann das Zusammenspiel zwischen den einzelnen Prozeduren und dem Einsatz der Konfigurationsdatei deutlich wird:


```
' Gambas class filePUBLICv24SettingsASSettingsPUBLICiTemperaturByteASBytePUBLICSUBForm_Open()FMain.CenterFMain.Border=1FMain.Height=166expRX_TX.Hidden=TRUEexpRX_TX.Animated=TRUEv24Settings=NEWSettingsSetConfigurationValues()expRX_TX.Hidden=v24Settings["Expander/ExpanderHiddenStatus",TRUE]...END' Form_OpenPUBLICSUBForm_Show()RS232ListeGenerierenEND' Form_Show...PUBLICSUBbtnKonfigurationNeuEinlesen_Click()v24Settings.ReloadSetConfigurationValues()END' KonfigurationNeuEinlesenPUBLICSUBbtnAktuelleKonfigurationSpeichern_Click()IFMessage.Question("Soll die aktuelle RS232-Konfiguration gespeichert werden?","Ja","Nein")=1THENGetConfigurationValues()v24Settings["Expander/ExpanderHiddenStatus"]=expRX_TX.HiddenexpRX_TX.Hidden=FALSEv24Settings.SaveELSERETURNENDIF' Message.Question("...?")END' AktuelleKonfigurationSpeichern?PUBLICSUBSetConfigurationValues()cmbRS232PortName.Text=v24Settings["V24Konfiguration/Port-Name","/dev/ttyS0"]cmbSpeed.Text=v24Settings["V24Konfiguration/Geschwindigkeit","4800"]cmbParity.Text=v24Settings["V24Konfiguration/Parität","NONE"]cmbDataBits.Text=v24Settings["V24Konfiguration/AnzahlDatenbits","8"]cmbStopBits.Text=v24Settings["V24Konfiguration/AnzahlStopbits","1"]cmbFlow.Text=v24Settings["V24Konfiguration/Datenflusskontrolle","NONE"]END' SetConfigurationValues()PUBLICSUBGetConfigurationValues()v24Settings["V24Konfiguration/Port-Name"]=cmbRS232PortName.Textv24Settings["V24Konfiguration/Geschwindigkeit"]=cmbSpeed.Textv24Settings["V24Konfiguration/Parität"]=cmbParity.Textv24Settings["V24Konfiguration/AnzahlDatenbits"]=cmbDataBits.Textv24Settings["V24Konfiguration/AnzahlStopbits"]=cmbStopBits.Textv24Settings["V24Konfiguration/Datenflusskontrolle"]=cmbFlow.TextEND' GetConfigurationValues()PUBLICSUBForm_Close()IFRS232.Status=Net.ActiveTHENCLOSERS232
  GetConfigurationValues()v24Settings["Expander/ExpanderHiddenStatus"]=expRX_TX.Hidden' V24Settings.Save wird bei Form_Close automatisch ausgelöstEND' Form_Close
```

Den vollständigen Quelltext zum erprobten Projekt RS232T finden Sie im Download-Bereich. Erläuterungen zu den technischen Details des Datentransfers über eine serielle Schnittstelle entdecken Sie dagegen im Kapitel 24.10.
Hinweise zum Quelltext
Es wurde festgelegt, für die Konfigurationsdateien den Standard-Pfad zu nutzen


```
v24Settings=NEWSettings
```

und es wird beim Programmstart eine neue Instanz der Klassegb.settingsangelegt. Die Abbildung 19.1.1.2 zeigt die Übertragungsparameter der V24-Schnittstelle, deren Werte durch die Angaben in der Konfigurationsdatei beim Programmstart bestimmt werden. Beim ersten Programmstart wird im Standardpfad nach der Konfigurationsdatei gesucht, die den Namen des Projektes trägt und die Extension 'conf' hat:


```
User.Home&/".config/gambas"&/RS232T&".conf"
```

Da diese Datei nicht vorhanden ist – also keine Schlüssel-Wert-Paare existieren – werden die notierten Vorgabewerte im Programm zugewiesen. Daher startet das Programm RS232T zum Beispiel mit den (vor-)eingestellten 8 Datenbits sowie mit minimiertem Expander:


```
SetConfigurationValues()expRX_TX.Hidden=v24Settings["Expander/ExpanderHiddenStatus",TRUE]
```

Die weiteren Vorgabewerte sind erprobt oder durch den AD-Wandler zum Teil vorgegeben. Sie können diese Werte im Rahmen der Gültigkeitsgrenzen für die Übertragungsparameter einer RS232-Schnittstelle nach folgender Syntax selbst festlegen:


```
Objektname.Eigenschaftswert = SettingObjektname["Sektionsname/SchlüsselName", optional "Vorgabewert"]
```

Das Programm liest diese Vorgabewerte beim ersten Programmstart oder bei fehlender Konfigurationsdatei automatisch aus und setzt die entsprechenden Werte der ausgewählten Eigenschaften direkt oder über den aktuellen Wert, der in der ComboBox angezeigt wird.
Bei der Arbeit mit dem Programm RS232T  können Sie die Werte zur Einstellung der Übertragungsparameter der verwendeten seriellen Schnittstelle so ändern und erproben, um zum Beispiel beim Datenaustausch zwischen Ihrem Computer und einem angeschlossenen Temperatursensor mit AnalogDigital-Wandler ein Optimum anzustreben. 
Beenden Sie das Programm, werden ausgewählte Werte ganz bestimmter Objekte oder Variablen in der Konfigurationsdatei automatisch gespeichert und stehen beim nächsten Programmstart als Vorgabewerte zur Verfügung:


```
PUBLICSUBForm_Close()IFRS232.Status=Net.ActiveTHENCLOSERS232
  GetConfigurationValues()v24Settings["Expander/ExpanderHiddenStatus"]=expRX_TX.Hidden' V24Settings.Save wird bei Form_Close automatisch ausgelöstEND' Form_Close
```

Wenn Sie zur Laufzeit des Programms RS232T verschiedene Einstellungen der Übertragungsparameter erproben wollen, dann können Sie zum Beispiel eine fehlerfreie Konfiguration der Parameter zwischenspeichern. Das Speichern erfolgt in diesem Fall nicht automatisch, sondern mit der Anweisung v24Settings.Save:


```
PUBLICSUBbtnAktuelleKonfigurationSpeichern_Click()IFMessage.Question("Soll die aktuelle RS232-Konfiguration gespeichert werden?","Ja","Nein")=1THENGetConfigurationValues()v24Settings["Expander/ExpanderHiddenStatus"]=expRX_TX.HiddenexpRX_TX.Hidden=FALSEv24Settings.SaveELSERETURNENDIF' Message.Question("...?")END' AktuelleKonfigurationSpeichern?
```

Tritt bei der weiteren Erprobung mit geänderten Übertragungsparametern ein Fehler auf oder eine Verschlechterung der Übertragungsqualität der V24-Schnittstelle, können Sie die in der Konfigurationsdatei zuletzt gespeicherten Werte einlesen, wenn Sie von denen annehmen können, das diese zu einer fehlerfreien Konfiguration der RS232-Schnittstelle gehören. Dabei werden die bisher genutzten Werte der Übertragungsparameter gelöscht und durch die eingelesenen Werte aus der Konfigurationsdatei – hier ohne Rückfrage – überschrieben:


```
PUBLICSUBbtnKonfigurationNeuEinlesen_Click()v24Settings.ReloadSetConfigurationValues()END' KonfigurationNeuEinlesen
```

Sie können aber auch ganz gezielt nur ausgewählte Konfigurationsdaten in einer Sektion überschreiben. Alle anderen gesetzten Werte in der Konfigurationsdatei werden dadurch nicht verändert:


```
PUBLICSUBbtnStandardEinstellungenLaden2_Click()' Nur für den RS232-Übertragungsparameter Geschwindigkeit den Wert setzenv24Settings["V24Konfiguration/Geschwindigkeit"]="9600"v24Settings.Savev24Settings.Reload' Standardwert zuweisencmbSpeed.Text=v24Settings["V24Konfiguration/Geschwindigkeit"]END' StandardEinstellungenLaden2
```

Die Möglichkeit wird im Programm RS232TS nicht genutzt.
Achtung:
Weisen Sie einem Schlüssel-Wert-Paar eine leere Zeichenkette oder den Wert NULL zu, dann wird dieses Paar in der entsprechenden Sektion gelöscht. Gibt es dann keine weiteren Schlüssel-Wert-Paare mehr in der Sektion, wird auch die Sektion gelöscht!


# 19.1.2.2  Beispiel 2 – Projekt Temperaturmessung TS

Immer dann, wenn Sie bestimmte Dateien im Programm nutzen oder Konfigurationsdateien zentral in einem Verzeichnis verwalten wollen, benötigen Sie für ein Programm die Konfigurationsdatei in einem bestimmten Verzeichnis. Für das zweite Projekt Temperaturmessung wird deshalb nicht der Standardpfad für die Konfigurationsdatei genutzt, sondern ein eigenes Verzeichnis im Home-Verzeichnis mit frei vergebenen Namen für das Verzeichnis und die Konfigurationsdatei.
Die Änderungen im Quelltext gegenüber Beispiel 1 sind minimal. Deshalb werden nur die Änderungen oder Ergänzungen angegeben. Das Verzeichnis bekommt den Namen V24TS. Die Konfigurationsdatei erhält den Dateinamen v24TS.conf und ist sichtbar. Sie müssen sich bei der Nutzung eines benutzerdefinierten Pfads selbst um das Anlegen des Ordners V24TS und der Konfigurationsdatei v24TS.conf kümmern.
Das Verzeichnis V24TS und die Konfigurationsdatei v24TS.conf werden nur dann angelegt, wenn diese nicht existieren und werden im Normalfall beim ersten Start des Programms angelegt. 
Quelltext:


```
' Gambas class filePUBLICv24SettingsASSettingsPUBLIChDateiASFilePUBLICiTemperaturByteASBytePUBLICSUBForm_Open()FMain.CenterFMain.Border=1FMain.Height=166expRX_TX.Hidden=TRUEexpRX_TX.Animated=TRUErbLED.ForeColor=Color.RedIFNOTExist(User.Home&/"V24TS")THENMKDIRUser.Home&/"V24TS"ENDIFIFNOTExist(User.Home&/"V24TS"&/"v24TS.conf")THENhDatei=OPEN(User.Home&/"V24TS"&/"v24TS.conf")FORCREATEhDatei.CloseENDIFv24Settings=NEWSettings(User.Home&/"V24TS"&/"v24TS.conf")SetConfigurationValues()expRX_TX.Hidden=v24Settings["Expander/ExpanderHiddenStatus","TRUE"]cmbRS232PortName.Background=Color.RGB(255,255,223)Timer1.Start' Alternative: Timer1.Enabled = TRUETimer1.Delay=100' Alle 100ms wird die Temperatur ausgelesen und angezeigtbtnOnOff.Text="V24 öffnen und Temperatur anzeigen."END' Form_Open
```

Das ist eine Alternative zum Anlegen der Konfigurationsdatei:


```
sSettingsPath=User.Home&/"V24TS/v24TS.conf"IFNOTExist(sSettingsPath)THENTRYFile.Save(sSettingsPath,"")IFERRORTHENMessage.Error("Die Datei "&File.Name(sSettingsPath)&" konnte nicht angelegt werden!")RETURNENDIF' ERRORENDIF' NOT Exist()?
```



# 19.1.2.3  Settings-Methoden Read und Write

Verwenden Sie den folgenden Code in den zwei angegebenen Prozeduren, können Sie auch für die Größe und Lage des Programmfensters geeignete Startwerte setzen oder diese beim Programmende mit den aktuellen Werten (automatisch) speichern:


```
PUBLICSUBForm_Open()...FMain.Top=v24Settings["Window/Top", FMain.Top]FMain.Left=v24Settings["Window/Left", FMain.Left]FMain.Height=v24Settings["Window/Height", FMain.Height]FMain.Width=v24Settings["Window/Width", FMain.Width]...End' Form_OpenPUBLICSUBForm_Close()...v24Settings["Window/Top"]=FMain.Topv24Settings["Window/Left"]=FMain.Leftv24Settings["Window/Height"]=FMain.Heightv24Settings["Window/Width"]=FMain.Width...End' Form_Close
```

Eine Besonderheit besteht darin, dass Sie explizit keine Vorgabewerte für die Fenstergröße eintragen müssen. Starten Sie das Programm zum ersten Mal, werden die zur Entwurfszeit festgelegten Fenstergrößen (FMain.Top, FMain.Left, FMain.Height, FMain.Width) als Vorgabewerte genutzt. Jedoch nur dann, wenn Sie über die Fenstereigenschaft FMain.Border = 2 (Resizable) eine Änderung der Fenstergröße zulassen. Sonst werden die Eigenschaften zur Fenstergröße aus der Konfigurationsdatei ignoriert!
Um die Koordinaten des Programmfensters zur Laufzeit in die Konfigurationsdatei einzufügen oder auszulesen und als Koordinaten des Programmfensters zu setzen, setzen Sie die beiden Methoden Write und Read ein:


```
PUBLICSUBForm_Verschieben_Click()mySettings.Write(ME,"Form")FMain.Move(100,100)WAIT2mySettings.Read(ME,"Form")END'  Form_Verschieben
```

Die Anweisung


```
mySettings.Write(ME,"Form")
```

fügt die aktuellen Koordinaten des Programmfensters direkt in die Konfigurationsdatei ein, wobei der Name der Sektion (Form) und der Schlüsselname (Geometry) automatisch festgelegt werden:


```
[Form] 
Geometry=[577,378,525,294]
```

Nach dem Verschieben des Fensters in die linke obere Bildschirmecke kehrt das Fenster nach 2 Sekunden an die alte Position zurück, wenn die gespeicherten Koordinaten ausgelesen und gesetzt werden:


```
mySettings.Read(ME,"Form")
```



# 19.1.2.3 Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.1.3 Profiles

If, for example, you want to back up a certain directory to different data carriers or different directories to a USB hard disk, it is advisable to use different profiles. For each of these cases, a special backup profile is necessary, which you can save in a configuration file. E-mail orFTPprogrammes also frequently use different accounts or profiles. It is often necessary to create or change new profiles or to delete unused profiles.
One solution could be
Hint:Do not try to edit a configuration file with a Settings object and with a serial stream (Open, …) at the same time. Yes, it is possible because Linux allows several processes to open a file at the same time, but it jeopardises the integrity of your data. This is because you can never know the order in which the read/write accesses are executed, because all these accesses are buffered.


```
' Man sollte nicht in Dateien stöbern und Inhalte ändern, die bereits von einem Objekt genutzt werden.hFile=OPEN(Application.Path&/"Profil/ftp.conf")FORINPUT' Profilnamen auslesenWHILENOTEof(hFile)LINEINPUT#hFile, sLineIFMid(sLine,1,3)="[P_"THENaProfilMatrix.Add(Mid(sLine,2,String.Len(sLine)-2))cmbFTPProfilName.Add(Mid(sLine,4,String.Len(sLine)-4))ENDIFWENDCLOSE#hFile
```



# 19.1.3 Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.2 TrayIcon - TrayIcons

Thegb.gui.trayiconcomponent allows you to display a tray icon in the taskbar. The following system tray protocols are supported:
The DBus system protocol should be standard, but unfortunately KDE and Ubuntu implementations are not compatible with each other! The component therefore examines at runtime which type of system tray is available on the system. The appropriate protocol is then selected automatically. The component gb.dbus is only loaded if the DBus protocol is also used.
While the TrayIcon class implements a tray icon, the TrayIcons class provides a virtual collection of all TrayIcon objects managed by an application.


# 19.2.1 Class TrayIcon

The class TrayIcon has these properties:
19.2.1.1.1 Properties
Table 19.2.1.1.1.1: Properties of the TrayIcon class


# 19.2.1.2.2 Properties

The class TrayIcon has only three methods:
Table 19.2.1.2.1: Methods of the class TrayIcon
Note:If you want to close the window of an application that uses a TrayIcon object, you must first use the TrayIcon.Hide () method!


# 19.2.1.3 Events

Only three events are triggered by the class TrayIcon:
Table 19.2.1.3.1: Events of the TrayIcon class
Notes on the Scroll (…) event
In chapter 13.6 Context menu - TrayIcon you will find a project that uses selected properties, methods and events of the class TrayIcon.
19.2.2 Class TrayIcons
This class implements a virtual collection of all TrayIcon objects managed by an application. This class behaves like a read-only class.


```
Dim hTrayIcon As TrayIcon
hTrayIcon = TrayIcons [ Index As Integer ]
```

All TrayIcon objects can be iterated with the keyword pair “For Each”:


```
Dim hTrayIcon As TrayIcon
For Each hTrayIcon In TrayIcons
...
Next
```

While the TrayIcons.Count property returns the number of TrayIcon objects managed by an application, the only method TrayIcons.DeleteAll () of the TrayIcons class deletes all TrayIcon objects.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.3.0 Class Stat

The Stat (gb) class provides you with all the information returned by the system about a particular file. It must be emphasised that a Stat object is unsuitable for making changes to file properties! The class cannot be created.


# 19.3.0.1 Properties

The Stat class has these properties:
Table 19.3.0.1.1 : Properties of the class Stat


# 19.3.0.2 File types

The type of a file can be described by one of the following constants:
Table 19.3.0.2.1 : File type constants of the Stat class


# 19.3.0.3 Class .Stat.Perm

The .Stat.Perm (gb) virtual class describes the file permissions for the selected file and can be used like a read-only array.
Table 19.3.0.3.1 : Properties of the .Stat.Perm class
In all three cases, the string contains the following characters:
if the respective right has been granted. In particular, no character is output for missing permissions. This differs from the output of commands like 'ls -l', where missing permissions are noted with a minus sign at their fixed position.


# 19.3.0.4 Project

First, a temporary file is generated in the presented project and a string is inserted as content. Then the file permissions are explicitly changed. Then a Stat object is generated and the file information of the temporary file is read out and displayed in the console of the IDE.
The source code is given in full:


```
' Gambas class filePublicsFilePathAsString=Temp(".datei")PublicSubForm_Open()DimsGroupAsStringFMain.CenterFMain.Resizable=FalseExec["id","-gn"]TosGroup' Gruppe des aktuellen Benutzers ermittelnsGroup=Trim$(sGroup)ShellSubst$("touch &1; echo 'TEST TEXT TEXT' > &1", sFilePath)WaitChown sFilePathToUser.NameChmod sFilePathTo"rwxrw-r--"Chgrp sFilePathTosGroupEndPublicSubbtnGetInformation_Click()DimFileInfoAsStatDimvValueAsVariantDimaTypesAsString[]DimcCollectionAsCollectionaTypes=["Normale Datei","Verzeichnis","Gerät","Pipe (FIFO)","Socket","Symbolischer Link"]FileInfo=Stat(sFilePath)cCollection=NewCollection' cCollection[Key As String] = Value As Variant → Zuerst der Schlüssel und dann der WertcCollection["Pfad = "]=FileInfo.PathcCollection["Datei-Typ = "]=aTypes[FileInfo.Type-1]cCollection["Rechte = "]=FileInfo.AuthcCollection["Datei-Modus = "]=FileInfo.ModecCollection["Benutzer = "]=FileInfo.UsercCollection["Gruppe = "]=FileInfo.GroupcCollection["Versteckt? = "]=FileInfo.HiddencCollection["Letzter Zugriff auf die Datei   = "]=FileInfo.LastAccesscCollection["Letzte Änderung Datei-Inhalt    = "]=FileInfo.LastModifiedcCollection["Letzte Änderung Datei-Attribute = "]=FileInfo.LastChangecCollection["Datei-Größe = "]=FileInfo.Size&" Byte"cCollection["Sticky-Bit gesetzt? = "]=FileInfo.StickyIfFileInfo.Link=NullThencCollection["Symbolischer Link ? = "]="Nein"ElsecCollection["Symbolischer Link ? = "]=FileInfo.LinkEndifcCollection["Benutzer-Rechte = "]=FileInfo.Perm.UsercCollection["Gruppen-Rechte  = "]=FileInfo.Perm.GroupcCollection["Andere-Rechte   = "]=FileInfo.Perm.OtherForEachvValueIncCollectionPrintcCollection.Key, vValueNextPrint"Pfad = ", sFilePath;"   Recht R+W  = ",Access(sFilePath, gb.ReadOrgb.Write)Print"Pfad = ", sFilePath;"   Recht R    = ",Access(sFilePath, gb.Read)Print"Pfad = ", sFilePath;"   Recht W    = ",Access(sFilePath, gb.Write)Print"Pfad = ", sFilePath;"   Recht X    = ",Access(sFilePath, gb.Exec)' gb.read ist Standard, wenn das optionale Mode-Argument fehltPrint"Pfad = ", sFilePath;"   Recht (R)  = ",Access(sFilePath)End
```

Output in the console of the IDE:


```
Pfad =         /tmp/gambas.1000/6251/.datei.tmp
Datei-Typ =    Normale Datei
Rechte =       rwxrw-r--
Datei-Modus =  500
Benutzer = 	hans
Gruppe = 	hans
Versteckt? = 	True
Letzter Zugriff auf die Datei   = 01.10.2015 14:32:10
Letzte Änderung Datei-Inhalt    = 01.10.2015 14:32:10
Letzte Änderung Datei-Attribute = 01.10.2015 14:32:10
Datei-Größe = 	15 Byte
Sticky-Bit gesetzt? = False
Symbolischer Link ? = Nein
Benutzer-Rechte = 	rwx
Gruppen-Rechte  = 	rw
Andere-Rechte   = 	r
Pfad = 	/tmp/gambas.1000/6251/.datei.tmp  Recht R+W  = 	True
Pfad = 	/tmp/gambas.1000/6251/.datei.tmp  Recht R    = 	True
Pfad = 	/tmp/gambas.1000/6251/.datei.tmp  Recht W    = 	True
Pfad = 	/tmp/gambas.1000/6251/.datei.tmp  Recht X    = 	True
Pfad = 	/tmp/gambas.1000/6251/.datei.tmp  Recht (R)  = 	True
```

An alternative to the use of the virtual class .Stat.Perm is the Access function, about which you can read information at →http://gambaswiki.org/wiki/lang/accessand which was also used selectively in the above project.
The three instructions CHGRP, CHMOD and CHOWN are available for changing file attributes → chapter 19.3.1.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.3.1 Instructions CHOWN, CHMOD and CHGRP

As of Gambas 3.1, three new instructions are available to change the user/owner, group or permissions of a file.


# 19.3.1.1 CHOWN

The CHOWN (change owner) instruction changes the owner/proprietor of a file or directory:


```
CHOWN Path TO User
```



# 19.3.1.2 CHGRP

The CHGRP (change group) instruction changes the group membership of a file or directory:


```
CHGRP Path TO Group
```



# 19.3.1.3 CHMOD

The CHMOD (change mode) instruction changes the permissions (mode) of a file or directory:


```
CHMOD Path TO Mode
```

Athttp://gambaswiki.org/wiki/cat/modeorhttps://wiki.ubuntuusers.co.uk/rightsyou can read about the mode syntax. In addition, any omitted or unknown character in the mode string is ignored. In this way, you can change selected values of file permissions.
Example:


```
CHMOD sFilePath To "rwxrw-r--"
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.4 Component gb.inotify

With the component gb.inotify by Tobias Boege you can access the linux-specific interface “inotify” in Gambas programs. Information about this interface can be found athttps://wiki.ubuntuusers.de/inotify. The interface allows you to intercept selected file system events. You can thus monitor a path of the file system behind which a file or directory may be located.
However, when using the component, please note the following:


# 19.4.1 Class Watch

The Watch class (gb.inotify) represents a file system object to be monitored. You can create the class. The class behaves like a static array whose values can only be read. Watching a directory isnotrecursive for its subdirectories. This means that you only get events from the directory itself and for its immediate entries. However, you can create a separate Watch object for each subdirectory of a base directory and even use the Create event to monitor subdirectories created at runtime.


# 19.4.2 Creating a Watch object

You can create Watch objects regularly using the New instruction. The signature of the constructor is as follows:


```
hWatch = New Watch ( Path As String [ , NoFollowLink As Boolean, Events As Integer ] ) As "EventName"
```

First, the path of the file system entry to be watched is specified. With the optional parameter NoFollowLink you can forbid following symbolic links when interpreting your path. By default, links are followed. The last optional argument Events is a bitmask of events to monitor. Use the constants of the Watch class for this. For example, if you want to monitor the create and delete events of a path sPath, create the Watch object like this:


```
hWatch = New Watch(sPath, False, Watch.Create + Watch.Delete) As „MyWatch”
```

If you do not specify the events mask, the Watch class automatically determines all events for which you have created event handlers under the specified event name. If you have entered


```
Private $hWatch As Watch

  Public Sub Form_Open()
    ...
    $hWatch = New Watch(sPath) As "MyWatch"
  End

  Public Sub MyWatch_Create()
    ...
  End

  Public Sub MyWatch_Delete()
    ...
  End
```

the Watch class recognises that you want to intercept Create and Delete events from MyWatch and sets these - and only these - events to receivable. For performance reasons, you should never specify more events in the Events mask than you need. You can later change the receivable events via the Events property of the Watch class. You use this property like an array of Boolean values and index them using the Watch constants:


```
$hWatch.Events[Watch.Create] = False  ' Create-Events sind nun nicht mehr empfangbar
  $hWatch.Events[Watch.Move] = True     ' Stattdessen interessiert nun das Move-Event
```

Note that the only job of Watch objects is to trigger events! If you forget to give a Watch object an event name, it cannot trigger events and is useless.


# 19.4.2.1 Static properties

The Watch class has four static properties that provide additional information for event handlers and should only be used in such. The static properties are used to store data from the kernel during event handler routines.
Table 19.4.2.1.1 : Static properties of the Watch class


# 19.4.2.2 Properties

Table 19.4.2.2.1 : Properties of the class Watch


# 19.4.2.3 Methods

The Watch class has only these two methods:
Table 19.4.2.3.1 : Methods of the Watch class


# 19.4.2.4 Events

The Watch class has these events:
Table 19.4.2.4.1 : Events of the class Watch
As you can see, the meaning and interpretation of an event depends on whether a file or directory is being watched.


# 19.4.3 Project

The project demonstrates the monitoring of selected temporary directories and a temporary file. The file and the directories are created at runtime and edited (open, modified, moved, deleted) in different ways.

Figure 19.4.3.1: Monitoring protocol
The special feature of this project by the author of the component gb.inotify is the triggering of events by an external script. It has to be realised via a task, because on the one hand the monitoring should be as close to real time as possible and on the other hand the task in the project is there to provide for events so that you automatically get to see something when you start the project (→ Task object → Chapter 20.6.0). If the script were executed synchronously, then all editing of the directories and the file would first take place and only later would all monitoring results be received. In the source text you can also see that a separate watch object is created for each new directory and inserted into a watch[ ] array. The corresponding entry in the $aSubDirs array of the type Watch[ ] is removed when the object to be watched has been deleted. If - without a task - the events were only received after the entire script has run through, the created subdirectory would already be deleted when the Gambas process receives its create event. It can therefore no longer be monitored and the process in particular does not receive the events (lying in the past) that have occurred below this subdirectory.
The processing of the directories and the file is done by a separate class → ExternalScript.class.
The source texts are presented in their entirety. The following is the source code in the fileExternalScript.class:


```
' Gambas class fileInheritsTaskPrivate$sFileAsStringPrivate$sDirAsStringPublicSub_new(sFileAsString, sDirAsString)$sFile=sFile
    $sDir=sDirEndPublicSubMain()' &1 ist eine Datei, &2 ist ein Verzeichnis, &3 ist eine Unterverzeichnis in &2ShellSubst$("touch &1;  sleep 1; chmod a+w &1; sleep 1;""touch &3;  sleep 1; cat &1; sleep 1;""echo 'test' > &1; sleep 2;""mkdir &2; sleep 1; mv &1 &2; sleep 1;""rm &4; sleep 1; rmdir &2; sleep 1", $sFile, $sDir,File.Dir($sFile), $sDir&/File.Name($sFile))WaitPrint"Fertig"Flush()Do' Darauf warten, dass der Hauptprozess den Task beendetWait1LoopEnd
```

Source codeFMain.class:


```
' Gambas class filePrivate$hTmpAsWatchPrivate$aSubdirsAsNewWatch[]Private$hScriptAsExternalScriptPublicSubForm_Open()DimsFileAsString=Temp$(), sDirAsString=Temp$()FMain.CenterFMain.Resizable=TrueTextArea1.ReadOnly=True$hTmp=NewWatch(File.Dir(sFile))As"Tmp"' Erzeugen eines Watch-Objektes' Das Skript muss ein Task sein, weil Sie ja die Events so nah wie möglich zu der Zeit empfangen' wollen, zu der sie ausgelöst werden. Wenn das Skript in diesem Prozess ausgeführt würde,' erhielten Sie die Events gesammelt, nachdem das komplette Skript durchgelaufen ist. So könnten' Sie zum Beispiel keine Ereignisse in den zur Laufzeit erstellten Unterverzeichnissen abfangen.$hScript=NewExternalScript(sFile, sDir)As"ExternalScript"Spinner1.Start()EndPublicSubExternalScript_Read(DataAsString)IfTrim$(Data)<>"Fertig"ThenReturn$hScript.Stop()' Stoppt den Task als Hintergrund-ProzessTextArea1.Insert(gb.NewLine&"*** Externes Skript beendet. ***")EndPublicSubTmp_Read()Note("Lesen")End' Tmp_Read()PublicSubTmp_Create()DimhSubdirAsWatchIfWatch.IsDirThen' Das Try steht hier, um eine 'race condition' abzufangen: Das Unterverzeichnis könnte erstellt und schon' wieder gelöscht worden sein, bevor dieser Event-Handler aufgerufen wurde. Das New Watch(..) könnte' fehlschlagen, weil Sie ein Create-Event bearbeiten, dessen Subjekt schon wieder gelöscht wurde.TryhSubdir=NewWatch(Last.Path&/Watch.Name)As"Subdir"IfNotErrorThenNote("Neues Unterverzeichnis")$aSubdirs.Add(hSubdir)EndifElseNote("Erstellen","initialer Modus "&Stat(Last.Path&/Watch.Name).Auth)EndifEndPublicSubTmp_Open()Note("Öffnen")EndPublicSubTmp_Close()Note("Schließen")EndPublicSubTmp_Write()Note("Schreiben")EndPublicSubTmp_Move()Note("Umbenennen")EndPublicSubTmp_MoveFrom()Note(Subst$("Umbenennen [ Quelle ] (Cookie &1)",Watch.Cookie))EndPublicSubSubdir_MoveTo()Note(Subst$("Umbenennen [ Ziel ] (Cookie &1)",Watch.Cookie))EndPublicSubTmp_Delete()Note("Löschen")EndPublicSubSubdir_Delete()Note(Subst$("Löschen &1Unterverzeichnis",IIf(Watch.Name,"in ","")))IfNotWatch.NameThen$aSubdirs.Remove($aSubdirs.Find(Last))EndPublicSubTmp_Stat()WithStat(Last.Path&/Watch.Name)Note("Datenabfrage",Subst$("Modus &1, letzter Zugriff &2", .Auth, .LastAccess))EndWithCatch' Last.Path &/ Watch.Name könnte nicht mehr existieren und Stat könnte deshalb fehlschlagen.EndPrivateSubNote(sWhatAsString, …)' Information: http://gambaswiki.org/wiki/comp/gb/paramDimsArgAsStringTextArea1.Insert(sWhat&"       "&Last.Path&/Watch.Name)ForEachsArgInParamTextArea1.Insert(" "&sArg)NextTextArea1.Insert(gb.NewLine)TextArea1.Pos=Len(TextArea1.Text)EndPublicSubbtnClose_Click()FMain.Close()EndPublicSubForm_Close()If$hScript.RunningThen$hScript.Stop$hTmp=Null$aSubdirs.Clear()Spinner1.Stop()Wait1End
```

All monitored events are displayed when triggered by the script → Figure 19.4.3.1 Monitoring log.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.5 Logging

Thegb.loggingcomponent implements a flexible system forlogging Gambas applications. This component provides its functionality through the two classesFormatterandLogger.


# 19.5.1 Class Formatter

The class Formatter (gb.logging) can be used like a function. This class formats a line to automatically replace the required logging data. You will find which format tags you can use in section 19.5.2.2.
In the Formatter class you cannot- until Gambas 3.5.3 - use these four 4 format tags:


```
$(callLocation); $(callFile); $(callLine) und $(callFunction)
```

Example:
The following statement in the source code determines on the one hand the log text and on the other hand the output format as well as the log level assigned to the log text (→ section 19.5.2.1 Level constants and 19.5.2.2 (Level property)):
It produces the following output in the Gambas IDE at runtime:


```
[18:59:04.227] - Test-Mitteilung - WARNING
```

You can insert the above statement (*) with your special protocol texts at different places in the source code. You can also use the following statement from the 'Error Management' section with the same effect:


```
Debug "[" & Format(Time(), "hh:nn:ss.uu") & "]" & " - Test-Mitteilung" & " - WARNUNG"
```

which writes the following output to the console of the IDE, which also contains information about the file, the event and the line in the source code:


```
FMain.btnDebug_Click.11: [18:59:04.227] - Test-Mitteilung - WARNUNG
```



# 19.5.2 Class Logger

TheLogger (gb.logging)class provides, among other things, basic mechanisms for sending log texts. You can create as many logger objects as you need, because the gb.logging component is excellent for managing multiple logs for different log levels, for example.
The Logger class has the following features introduced in the next section.


# 19.5.2.1 Constants

Table 19.5.2.1.1: Overview of the level constants of the class Logger


# 19.5.2.2 Properties

Table 19.5.2.2.1: Properties of the class Logger
The default* format of the Logger class is:


```
[$(now)] [$(levelname)] [$(callLocation)] $(message)
```

and only needs to be redefined by you (→ Table 19.5.2.1.1) if you want to set a different log text format.
Notes on the format:
A format string describes via the tags $(..)which informationatwhich positionis included in the protocol text:
Note the notation of the above tags in the format string (→ case-sensitive) !For thelevelproperty, insert either theconstantsor theirnumeric values, giving preference to the constants.You can also insert your own text or individual characters in the format string.


# 19.5.2.3 Method

The Logger class has only theLogger.isEnabledFor(..)method:
The function returnsTrueif, for example, the active Logger object 'MyLog' has been enabled for the log level specified by 'iLevel'.
To demonstrate the function, you can use this source code to check how much and which log levels are active for 'MyLog':


```
MyLog.Level=Logger.ErrorIfMyLog.isEnabledFor(Logger.Critical)ThenPrint"Critical-Level aktiv!"IfMyLog.isEnabledFor(Logger.Error)ThenPrint"Error-Level aktiv!"IfMyLog.isEnabledFor(Logger.Warning)ThenPrint"Warning-Level aktiv!"IfMyLog.isEnabledFor(Logger.Info)ThenPrint"Info-Level aktiv!"' Default: Logger.Info (=3)IfMyLog.isEnabledFor(Logger.Debug)ThenPrint"Debug-Level aktiv"
```

The console display shows the following two levels because with 'MyLog.Level = Logger.Error' only the log levels ≤ Logger.Error are active:


```
Critical-Level aktiv!
  Error-Level aktiv!
```



# 19.5.2.4 Logger object

You can create a logger object like this:


```
PublichLoggerAsLogger
  hLogger=Logger([iMinLevelAsInteger, sOutputAsString])
```

Examples:
(a) Logger object with the default level (=Logger.Info) to display the log texts in the console of the IDE.(b) Logger object with a self-defined level (0..4) for displaying the log texts in the console of the IDE.(c) Logger object with a self-defined level (0..4) and storage of the log texts in a log file in a directory in which the user also has write access.


```
(a)	hLogger As New Logger	' Logger-Level » Info
  (b)	hLogger As New Logger(2) 	' Logger-Level » Warning
  (c)  	hLogger As New Logger(Logger.Error, Lower(User.Home &/ Application.Name & ".log"))
```



# 19.5.2.5 Logging

For an object of the Logger class - for example named 'MyLog':


```
Sub MyLog ( sMessage As String [ , iLevel As Integer ] )
```

with the two parameters:
to generate a log text for the active logger object 'MyLog'.
With the help of the procedure MyLog(..) and the use of a Logger object with its constants, properties as well as the method isEnabledFor(..) with 'Function isEnabledFor ( iLevel As Integer ) As Boolean' a flexible log system for a Gambas programme can be realised.


# 19.5.3 Example

Just as with theFormatterclass, you can also use theLoggerclass to send log texts to the standard output (→ console) and display them there.
For the development and testing of Gambas programmes, it is quite advantageous to save the log texts in a log file (→ variant (c)).
Here is a source code excerpt according to variant ©:


```
[1]PublicMyLogAsLogger[2]PublicFilePathAsString=Lower(User.Home&/Application.Name&".log")[3]PublicbAppendModeAsBoolean=True' True → Log-Datei fortschreiben[4][5]PublicSubForm_Open()[6]FMain.Center[7]FMain.Resizable=False[8]…[9]' Minimales Log-Level, Log-Dateipfad und Modus festlegen[10]IfExist(FilePath)Then[11]IfbAppendMode=FalseThen[12]TryKillFilePath[13]Wait[14]MyLog=NewLogger(Logger.Error, FilePath)[15]Endif' bAppendMode = False ?[16]Endif' Exist(FilePath) ?[17]MyLog=NewLogger(Logger.Error, FilePath)[18][19]' Log-Format festlegen[20]MyLog.Format="$(message)"[21]' Log-Text ausgeben[22]IfbAppendMode=TrueAndExist(FilePath)ThenMyLog("", MyLog.Level)' Leerzeile einfügen[23][24]MyLog.Format="$(message)"[25]MyLog(Format(Now,"dddd - dd. mmmm yyyy"), MyLog.Level)[26][27]MyLog.Format="$(time)"&gb.Tab&"$(message)"&" mit Log-Level "&" ≤ "&" $(levelname)"[28]MyLog("LOG-NEUSTART", MyLog.Level)[29][30]MyLog.Format="$(message)"[31]MyLog("---------------------------------------------------", MyLog.Level)[32][33]' Log-Format für alle weiteren Protokoll-Texte festlegen[34]MyLog.Format="$(time)"&gb.Tab&"[$(levelname)] [$(callLocation)]"&" →  "&"$(message)"[35][36]End
```

Now you can log further log texts in the log file at the appropriate, often critical points in the source text with modified instructions:


```
MyLog("Eingabefehler Z1", Logger.Warning)   		  or
  MyLog("Eingabe-String = " & sInput, Logger.Error)   	  or
  MyLog("Division durch Null!", Logger.Critical)		  or

  MyLog.Level = Logger.Info
  MyLog("Änderung Log-Level auf " & MyLog.Level, MyLog.Level)
```

Here you can see a log file extract in 'Append' mode with different log levels:


```
Samstag - 18. Januar 2014
  15:21:50.803	LOG-NEUSTART mit Log-Level ≤ WARNING
  ---------------------------------------------------

  15:21:54.12	[CRITICAL] [FMain.IsComplex.339] →  Eingabe-String = 3-4i,,
  15:21:55.228	[WARNING] [FMain.btnAddieren_Click.139] →  Eingabefehler Z1 oder Z2
  15:21:57.9	[ERROR] [FMain.btnConvert_Click.96] →  Eingabefehler Z1
  15:21:59.719	[CRITICAL] [FMain.IsComplex.339] →  Eingabe-String = 3-4i,,

  Samstag - 18. Januar 2014
  15:41:07.429	LOG-NEUSTART mit Log-Level ≤ ERROR
  ---------------------------------------------------

  15:41:14.908	[ERROR] [FMain.btnConvert_Click.96] →  Eingabefehler Z1
  15:41:16.282	[CRITICAL] [FMain.IsComplex.339] →  Eingabe-String = 3-4i,
  15:41:17.684	[ERROR] [FMain.btnIsComplex_Click.122] →  Eingabefehler Z1
```

Notes:
You may want to limit the size of the log file if you want to continuously add to the log. An acceptable procedure is to delete the oldest log entry when a new one is added after a certain file size. Or, after a certain file size, you create an archive from the current log file and create a new log file.


# 19.5.4 Excursus

The Excursus section introduces you to two log variants, both of which have their own special aspects.


# 19.5.4.1 Variant 1

The following source code implements the specifications of variant 1 in a module 'MyLog' - but without storing it in a log file:


```
' Gambas module file - Autor: Caveat - gambas@caveat.demon.co.ukPRIVATEiDebugModeASIntegerPRIVATEiLogIndexASIntegerPRIVATEcLogLinesASCollectionPUBLICCONSTNO_DEBUGASInteger=0PUBLICCONSTDEBUG_LOG_ONLYASInteger=1PUBLICCONSTDEBUG_LOG_AND_PRINTASInteger=2PUBLICCONSTDEBUG_MESSAGE_LOG_AND_PRINTASInteger=3PublicSubSetDebugMode(iNewModeAsInteger)iDebugMode=iNewModeEndPublicSubLogMessage(sMessageAsString, bShowAsErrorAsBoolean)IfiDebugMode=NO_DEBUGThenReturnIfcLogLines=NullThencLogLines=NewCollectionEndif'-- cLogLines = NullcLogLines.Add(sMessage,Str(iLogIndex))InciLogIndexIfiDebugMode=DEBUG_LOG_AND_PRINTThenPrintsMessageElseIfiDebugMode=DEBUG_MESSAGE_LOG_AND_PRINTThenMessage(sMessage)PrintsMessageEndif' iDebugMode = DEBUG_LOG_AND_PRINTIfbShowAsErrorThenMessage.Error(sMessage)' Zusätzliche Anzeige – aber nur bei Fehlern!EndPublicSubDisplayLogLines()DimsLogLineAsStringIfcLogLines=NullThenReturnForEachsLogLineIncLogLinesPrintcLogLines.Key&". "&sLogLineNextEnd
```

You determine whether you want to see the log text only in the console or also as text in a separate message window with the procedureSetDebugMode(..)using the defined constants.
In the main programme, you call up protocol texts like this, for example:


```
MyLogger.SetDebugMode(1)' DEBUG_LOG_ONLY...DimhFileAsFileDimFilePathAsStringFilePath="/home/hans/Bilder"&/"gambas.png"TryhFile=OpenFilePathForReadIfErrorThenMyLogger.LogMessage("Datei-Pfad: "&FilePath,True)MyLogger.LogMessage("Fehler: "&Error.Text&" @ "&Error.Where,False)Endif
```

The output of the log content viaDisplayLogLines()shows for the above source text excerpt:


```
1. Datei-Pfad:/home/hans/Bilder/gambas.png2. Fehler: Unable to load image@Stock.LoadIcon.444
```



# 19.5.4.2 Variant 2

In variant 2, selected programme outputs - in this case temperature values - are read out at fixed time intervals and logged in a log file. This is done by the specified timer procedureMyTimer_Timer()from MyTimer. Each time the programme is restarted, you can decide whether the existing log file should be deleted or the log should be updated. Alternatively, you can also use a checkbox to specify this decision in the start procedure.
The source code is clear and is given in relevant excerpts:


```
PrivateMyTimerAsTimerPublicSubForm_Open()...MyTimer=NewTimerAs"MyTimer"MyTimer.Delay=1000*120' Intervall der Datenspeicherung (→ 2 Minuten)...End'-- Einbau in eine Start-Prozedur:...IfExist(Application.Path&/"rs232log.txt")ThenIfMessage.Question("Letztes Mess-Protokoll löschen?","Ja - löschen!","Nein!")=1ThenTryKillApplication.Path&/"rs232log.txt"WaitEndifEndifAddTextToFile("MESS-PROTOKOLL")AddTextToFile("DATUM:  "&Format(Now,"dd. mmmm yyyy"))AddTextToFile("---------------------------")MyTimer.Start...PublicSubMyTimer_Timer()IfRS232.Status=Net.ActiveThenAddTextToFile(">  "&Format(Now,"hh:nn:ss")&"  |  "&"T = "&Asc(sTemperatureValue)&" °C")Endif' RS232.Status = Net.Active ?EndPublicSubAddTextToFile(TextAsString)DimhFileAsFileDimFilePathAsStringFilePath=Application.Path&/"rs232log.txt"TryhFile=OpenFilePathForAppendIfErrorThenMessage.Error("Datei-Fehler")ReturnEndifPrint#hFile, TextClose#hFileEnd
```

Here is an extract from a log file:


```
MESS-PROTOKOLL
  DATUM:17. Januar2014--------------------------->09:47:56|T =22°C>09:49:56|T =24°C>09:51:56|T =26°C>09:53:56|T =28°C
```

Of course, you can also log RS232 interface parameters or error messages in the log file.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.6 Using regular expressions - component gb.pcre

The topic is very complex and therefore the following concept is to be implemented so that on the one hand you gain insight into the theory of using regular expressions in Gambas or are referred to further sources as well as receive guidance for practical action:

Figure 19.6.1: Using regular expressions for syntax checking.


# Download

Chapter and Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.6.1 Using wildcards in a console

Wildcards or joker characters such as * or ? denote a placeholder for other characters and you are probably familiar with these from working in a console.
In the following table, wildcards and their extensions are described and the placeholder properties are mentioned:
Table 19.6.1.1: Often used wildcards in a console


# 19.6.1.1 Example 1

Searches for all files in the current directory


```
hans@linux:~$ls-l[pP]*.???-rwxrwxrwx1hans hans467Dez2620:30parametertest.sh~-rw-------1hans hans0Okt2719:54perl.cgi-rw-------1hans hans225Mai112011pgausgabe.sql
```



# 19.6.1.2 Further examples



```
hans@linux:~$ls-l[m]*.*[~]-rwx--x--x1hans hans270Dez2914:41myName.script~-rw-------1hans hans3022Dez2916:00 mysql.gbs~
```



```
hans@linux:~$ls-l[kKmM]*.gb{s,w}-rw-------1hans hans1616Mai142012kontakt.gbw-rwx--x--x1hans hans2018Jan32012m.gbs-rw-------1hans hans1984Jan32012m.gbw-rwx--x--x1hans hans3022Dez2916:00 mysql.gbs
```

The console editor sed, through the use of regular expressions - in conjunction with the SHELL and EXEC instructions - offers extensive possibilities for conveniently working with text files and and their contents (strings). The following example is intended to demonstrate the power of the sed programme:


```
hans@linux:~$sed's/\bProgramm\b/Projekt/g'--in-place=.bak$HOME/a_sed.txt
```

What does this cryptic-looking line do? In the file a_sed.txt, the (isolated) word programme globally (/g) - i.e. in the entire text content - is to be replaced by the word project and the original file with the extension .bak is to be saved in the file with the file name originalfilename.bak.
If such a one-liner can inspire you, then this is the right motivation to deal (more intensively) with regular expressions and their use in Gambas projects.


# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.6.2 Regular Expression

If you translate “regular expression” with elegant panache into “regular expression”, then this, in my opinion, erroneous translation does not bring you forward, whereas you could already imagine something concrete under “(search) pattern built from rules”.
According tohttp://de.wikipedia.org/wiki/Regulärer_Ausdruck … “A regular expression (abbreviated RegExp or Regex) is … in computer science, a string of characters used to describe sets of strings using certain syntactic rules.” Good to know when it comes to checking character strings (strings) or searching for something in them or editing them.
If one extends the placeholder principle, then one can design patterns with which one can describe the structure of strings that fit a whole class of strings. These patterns are called “regular expressions”. A regular expression matches a string if the string is contained in the class of strings characterised by the regular expression. If a given string is contained in a class of strings described by the regular expression, then the regular expression is said to match the string or to have a match. The English match often used in the context of regular expressions obviously characterises exactly this state of affairs.
Regular expressions in Gambas can be used in conjunction with the LIKE operator forASCIIstrings. However, if you are testing against UTF-8 strings, you must use the gb.pcre component. Gambas uses regular expressions in the component 'gb.pcre' as Perl Compatible Regular Expressions (PCRE) and with the PCRE a program library for evaluating regular expressions.
According tohttp://de.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions, the name refers to the fact that the syntax of the expressions was borrowed from the Perl programming language.
See the linkhttp://gambasdoc.org/help/doc/pcre?v3for a reference to the syntax of patterns you can use in regular expressions.


# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.6.3 Excursus LIKE

The topic “Operator LIKE” from → Chapter 8.8 is taken up again here under theapplication aspect. It applies:


```
bResult = String [NOT] LIKE Muster
```

and the boolean variable bResult receives the value TRUE if the pattern string matches String. If NOT is used, then the test is inverted. The followingpatternscan be used:
Table 19.6.3.1: Pattern for LIKE


# Example 1

In a file open dialogue you can use your own file filter. A filter of the following type is often used for image files:
Dialog.Filter = [“*.png;*.jpg”, “Picture files”, “*.svg;*.wmf”, “Drawing files”].
However, with regular expressions you can set the filters in a much more sophisticated way:


```
Dialog.Title="Import a (table) text file!"Dialog.Filter=["tb*.txt","Text-Files"]'-- The file begins with 'tb'Dialog.Filter=["[0-9]*.txt","Text-Files"]'-- The file begins with a 'digit'Dialog.Filter=["tb[1-3]*.txt; ta[1-3]*.log","Text-Files"]
```

The last filter selects all files in the current directory that begin with the letter string 'tb', followed by a digit from the range 1-3, and then a sequence of arbitrary characters. The extension is either .txt or .log.
The following filter definition gives an error with Gambas 3.4.0 (FileView.CheckFilter.127: Bad regular expression:), because only one filter can be set at a time according to the definition:


```
Dialog.Filter=["tb[1-3]*.{txt,log}","Text-Files"]
```



# Example 2

For example, you filter page names like this:


```
FOREACHsLineINSplit(sCont,"\n")IFsLineLIKE"/wiki/"&CGI.Encode(Name2Wiki(TextBox2.Text))&"*"THENaUrls.Add(sLine)ENDIFNEXT
```

For a strong password, the requirement for at least one digit, one lowercase letter, one uppercase letter and one selected special character each could be checked with this function and the function value used for a differentiated error analysis:


```
PrivateFunctionCheckStrongPassword(sPasswordAsString)AsIntegerIfsPasswordNOTLIKE"*[a-z]*"ThenReturn1IfsPasswordNOTLIKE"*[A-Z]*"ThenReturn2IfsPasswordNOTLIKE"*[0-9]*"ThenReturn3IfsPasswordNOTLIKE"*[+#%]*"ThenReturn4'-- Set of characters {+ # %}IfLen(sPassword)<8ThenReturn5Return0'-- This password is a strong passwordEnd
```



# Example 3

Assuming that the variable sDevice has the current value 'dev/ttyUSB2', no element from the pattern set matches.


```
IfsDeviceLIKE"dev/ttyUS{B0,B1}"Then...
```



# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.6.4 Checking whether certain characters are present in a string

The following three procedures can be used to check whether at least one character from a given character set is present in a given character string. The procedures are used, for example, when checking passwords if a strong password is required.
In my opinion, a strong password can be defined like this:


```
PublicFunctionMatch(SubjectAsString, PatternAsString)AsBooleanDimrRegexAsRegexprRegex=NewRegexp(Subject, Pattern)IfrRegex.Offset=-1ThenReturnFalseElseReturnTrueEndif'-- rRegex.Offset = -1 → no match ?End
```

and used for the check:


```
PrivateFunctionCheckStrongPassword(sPasswordAsString)AsBooleanDimsSubject, sPatternAsStringsSubject=sPassword
    sPattern="(?=^.{8,}$)(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?![.\n])(?=.*[+#_@!?§$%*]).*$"IfMatch(sSubject, sPattern)=TrueThenReturnTrueElseReturnFalseEndifEnd
```

Similarly, it can be determined whether the optionally used prefix has been correctly specified when encoding a string according to the DES algorithm. The prefix is exactly two characters long and contains digits or small letters or capital letters or a special character from the set {./}:


```
PrivateFunctionCheckPrefix(sPrefixAsString)AsBooleanDimsSubject, sPatternAsString'-- sPrefix character set = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz./"sSubject=sPrefix
    sPattern="^([a-zA-Z0-9./]{2})$"' ** Test patternIfMatch(sSubject, sPattern)=TrueThenReturnTrueElseReturnFalseEndifEnd
```

The development of regular expressions is not a content of the chapter. Only tested patterns from own Gambas projects are included. The regular expression in ** is still simple - say those who have studied regular expressions intensively. Here comes the proof:


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.6.5 Checking the syntax of strings

Especially in forms, data entered as strings must be checked intensively so that only valid data can be processed further and incorrect entries can be requested again.


# 19.6.5.1 Checking the syntax of strings

Imagine that in a Gambas project you have to enter or check the postal code, the e-mail address, the date of birth and a monetary value in addition to the first and last name in a form. Based on what you have learned so far, you can already guess that you will probably not be able to avoid the use of regular expressions if you are thinking, for example, of checking a syntactically correct e-mail address. The spontaneous thought of using string functions for the check has been abandoned in view of the large number of different but syntactically correct e-mail addresses.
As the simplest case, therefore, you pick out the postcode. Nothing could be easier! The German postcode consists of exactly 5 digits and this can be quickly mapped onto the following regular expression:


```
Pattern = "^([0-9]){5}$"
```

A test program using the above Match(Subject As String, Pattern As String) function is quickly designed and the test seemed successful - until someone told you the following:
Would you have known? A remedy is a newly formulated regular expression:


```
"^((?:0[1-46-9]\\d{3})|(?:[1-357-9]\\d{4})|(?:[4][0-24-9]\\d{3})|(?:[6][013-9]\\d{3}))$"
```

You had certainly already thought of that … .


# 19.6.5.2 Project: Checking the syntax of strings

In this project you will find suggestions on how to check the syntax of selected strings with clearly defined semantics by using regular expressions. Keep in mind that the use of regular expressions can be a very effective approach. But only if the designed pattern describes the class to be checked very well and sufficiently error-free! The patterns used in the project have been tested intensively. This does not exclude that there are still use cases that are not covered correctly or for all applications.

Figure 19.6.5.2.1: Use of regular expressions (syntax check)
The complete project can be found in the download area. Therefore, you will discover here only an excerpt from the source code for checking the syntax of an ISBN 10 - an International Standard Book Number. Since 2007, only ISBN 13 are assigned. While one can check the syntax with a regular expression, the correct check digit must be calculatedconventionally, because this cannot be donewith a regular expression:


```
PublicSubbtnPruefungISBNNummer10_Click()sSubject=txtISBNNummer10.TextsPattern="^ISBN\\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$"' ISBN 10IftxtISBNNummer10.Text=""ThenMessage.Warning("Enter an ISBN (10)!")txtISBNNummer10.SetFocusReturnEndifIfMatch(sSubject, sPattern)=TrueThenSetLEDColor(pbISBN10,"green")bISBN_10=TruebtnISBN_PZ10.Enabled=TrueElseSetLEDColor(pbISBN10,"red")EndifEnd
```

Calculation of the check digit as the last character in an ISBN (10) is done according to a clearly defined algorithm:


```
PublicSubbtnISBN_PZ10_Click()DimiSumme, iPruefZiffer, iPruefZifferISBN, iCountAsIntegerDimsISBN, iPruefZifferStringISBNAsString' Data type String because of check digit 10=XsISBN=Replace(txtISBNNummer10.Text,"ISBN ","")sISBN=Replace(sISBN," ","")sISBN=Replace(sISBN,"-","")iSumme=0iPruefZifferStringISBN=Right(sISBN)IfUpper(iPruefZifferStringISBN)="X"TheniPruefZifferISBN=10ElseiPruefZifferISBN=Val(iPruefZifferStringISBN)EndifForiCount=1ToLen(sISBN)-1iSumme=isumme+iCount*Mid(sISBN, icount,1)NextiPruefZiffer=iSummeMod11IfiPruefZiffer<>iPruefZifferISBNThenMessage.Error("Fehler!"&Chr(10)&"The syntax of the ISBN number (10) is correct."&Chr(10)&"However, the check digit (ISBN_10) is wrong.")ElseMessage.Info("The check digit ISBN-10 number is correct.")btnISBN_PZ10.Enabled=FalseEndifEnd
```


Figure 19.6.5.2.2: Annotated calculation of the check digit of an ISBN (10)


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.6.6 Search and replace strings in a text

For searching and replacing strings in a given text, regular expressions on the one hand and methods for manipulating strings on the other hand were used in combination in a project. You can search for different - fixed - strings in the text that have a special meaning or enter your patterns yourself:

Figure 19.6.6.1: Searching and replacing strings in a text
It turns out that for complex texts, a pattern must be constructed for each class of strings so that it has at least one unique feature that distinguishes it from other classes. Otherwise, for example, you would not be able to distinguish the monetary value 12.44 € from 12.44 as a normal decimal number. Currently, you can only search for ISBN (10) formatted with hyphens according to ISO 2108.
The source code is given almost in its entirety, mainly to show you the interaction of regular expressions and methods for manipulating strings:


```
' Gambas class filePrivate$rExpressionAsRegexpPrivate$sPatternAsStringPublicSubForm_Open()$rExpression=NewRegexp...EndPublicSubbtnSearch_Click()IfNotcbxRegexpression.TextThenMessage.Error("Es ist KEIN Suchtext vorhanden!")cbxRegexpression.SetFocusReturnEndifTry$rExpression.Compile(SetPattern(cbxRegexpression.Text))' Fehler im Muster abfangen!IfErrorThenMessage.Error("FEHLER IM REGULÄREN AUSDRUCK!")ReturnEndiflbxSearch.List=Search(txaText.Text)EndPublicSubbtnReplace_Click()IfNotcbxRegexpression.TextThenMessage.Error("Es ist KEIN Suchtext vorhanden!")ReturncbxRegexpression.SetFocus()EndifIfNottxtReplace.TextThenIfMessage.Error("KEIN Text vorhanden!","Mit NICHTS ersetzen!","Abbrechen!")=1ThenTry$rExpression.Compile(SetPattern(cbxRegexpression.Text))IfErrorThenMessage.Error("FEHLER IM REGULÄREN AUSDRUCK!")ReturnEndiftxaText.Text=TextReplace(txaText.Text, txtReplace.Text)ElseReturncbxRegexpression.SetFocus()EndifEndifEndPrivateFunctionSearch(sTextAsString)AsString[]DimaSearchListAsNewString[]DimiStartAsInteger=1Try$rExpression.Exec(sText)' ---> Fehler abfangen!IfErrorThenMessage.Error("Es trat ein Fehler auf ...!")ReturnEndifWhile$rExpression.Offset<>-1aSearchList.Add($rExpression.Text)iStart+=$rExpression.Offset+Len($rExpression.Text)IfiStart>Len(sText)ThenBreak$rExpression.Exec(Mid$(sText, iStart))WendReturnaSearchListEndPrivateFunctionTextReplace(sTextAsString, sReplaceAsString)AsStringDimiStartAsInteger=1Try$rExpression.Exec(sText)' ---> Fehler abfangen!IfErrorThenMessage.Error("Es trat ein Fehler auf ...!")ReturnEndifWhile$rExpression.Offset<>-1iStart+=$rExpression.OffsetsText=Mid$(sText,1,iStart-1)&sReplace&Mid$(sText, iStart+Len($rExpression.Text))iStart+=Len(sReplace)IfiStart>Len(sText)ThenBreak$rExpression.Exec(Mid$(sText, iStart))WendReturnsTextEnd'-- Die Funktion SetPattern() ist nur notwendig, um den Mustern einen Hinweistext voranzustellen.PrivateFunctionSetPattern(sInputAsString)AsStringDimiPositionAsIntegeriPosition=InStr(sInput,"--->")IfiPosition=0Then$sPattern=sInputElse$sPattern=Replace(sInput,Left(sInput, iPosition+3),"")$sPattern=Trim($sPattern)EndifReturn$sPatternEnd
```

As a special feature, the two methods Regexp.Compile() and Regexp.Exec() are used in the project.


# 19.6.6.1 Method Regexp.Compile (gb.pcre)



```
Syntax:	Sub Compile ( Pattern As String [ , CompileOptions As Integer ] )
```

The Compile() method allows you to pre-compile a regular expression (pattern) for later execution by the Exec method. This is useful if you want to use a pattern often for a lot of text.


# 19.6.6.2 Regexp.Exec (gb.pcre) method



```
Syntax:	Sub Exec ( Subject As String [ , ExecOptions As Integer ] )
```

The Exec() method allows you to use a previously compiled regular expression. This is particularly useful if you want to check many different texts. You only need to compile a regular expression once and can then use Exec(..) repeatedly, which is expected to be faster.
The Compile(..) and Exec(..) methods are automatically executed when you specify a pattern and a text (subject) and call a (new) regexp object.
You can use a selection of the following constants as options in the two methods:


```
Anchored  BadMagic  BadOption  BadUTF8  BadUTF8Offset  Callout  Caseless  DollarEndOnly  DotAll
Extended  Extra  MatchLimit  MultiLine  NoAutoCapture  NoMatch  NoMemory  NoSubstring  NoUTF8Check
NotBOL  NotEOL  NotEmpty  Null  UTF8  Ungreedy  UnknownNode
```

Example: Regexp.Anchored → Constant Anchored As Integer = 16
If this constant is specified as an option, the pattern will be “anchored” to the first matching position in the subject. This effect can also be achieved by suitable constructs in the pattern itself.
In the next source code excerpt from a project for converting Gambas source code intoHTMLsource code, among other things, aURLis searched for in the Gambas source code and replaced by a suitable hyperlink if the result is positive:


```
PrivateSubparseLinks(sURLAsString)AsStringDimsRegexAsRegexpDimsPattern, sReplaceAsStringsPattern="(https?://([-\\w\\.]+)+(:\\d+)?(/([\\w/_\\.-]*(\\?\\S+)?)?)?)|(@[\\w]*|#[\\w]*)"sRegex=NewRegexp(sURL, sPattern)sReplace="<a href=\""&sRegex.Text&"\">"&sRegex.Text&"</a>"ReturnReplace(sURL, sRegex.Text, sReplace)EndPublicSubTest_Click()PrintparseLinks("http://www.gambas-buch.de")End
```

The result can be seen:


```
<ahref="http://www.gambas-buch.de">http://www.gambas-buch.de</a>
```



# Download

Chapter and Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.0 Selected classes

In chapter 20 you will get to know selected classes - from A for Align to C for Clipboard to W for Watcher. You will learn essentials about the properties, methods and events implemented for these classes. These classes are used in documented projects. There are explanations of the places in the source code where the properties and methods of the classes presented are used in procedures and functions. How you can react to certain events with event handling routines takes up a lot of space.

Figure 20.0.1: ClipBoard project


# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.1 Message

Messages in a programme assist programme developers in designing and testing, and users in using the programme successfully.




# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.1.1 Message class - MessageBox

Messages in a programme assist programme developers in designing and testing, and users in successfully using the programme. The class Message is suitable for displaying messages in a message box. The class is static and can be used like a function that has a maximum of 4 arguments. The first argument - the message text - is necessary, the other three are optional. The arguments are of type string and the function value is an integer number from the set {1,2,3}. The messages can be output as plain text or inHTMLformat. Depending on the type, a meaningful icon is displayed in the message box. The messages can also be divided into the two categories “static text of the message” and “dynamic text of the message” if the structural composition of the text of the message is used as a criterion. In the case of a dynamic message text, for example, the current values of programme variables or system messages are inserted into the message text. Since the message box has only a small standard width, you must format the text of the message in a suitable way to achieve the intended effect. You can resize the message box at programme runtime.
Gambas has 5 different message box types:
This is the syntax for the standard message box as an information message box and for the warning message box:


```
FUNCTION Info (Message AS String [, Button AS String ]) AS Integer
FUNCTION Warning (Message AS String [, Button1 AS String,Button2 AS String,Button3 AS String]) AS Integer
```


Figure 20.1.1.1: Info message box

Figure 20.1.1.2: Warning message box
The trigger for the display of a message box is either a special state of the programme that is evaluated internally or a reaction of the user (examples: Pressing a button or a mouse reaction or calling up a menu item). In any case, the display of a message box causes an interruption of the programme, because the call of the message box is modal. The programme is not continued until the user reacts to the message, whereby there are a maximum of three different ways to do this.
The answer to the following questions will help you decide whether to use a message box:
The following examples are sufficiently commented so that you can easily recognise special features and alternative solutions are also offered.


# 20.1.1.1 Example 1

The message here informs the user of a (successfully) completed programme action. He only has to click on the OK button to cancel the programme interruption.

Figure 20.1.1.1: Info message box


```
...
  Message.Info("Die Datei " & User.Home &/ "message.txt" & " wurde gespeichert")
  ...
```

Alternative:


```
...
  Message.Info("Die Datei " & User.Home &/ "message.txt" & " wurde gespeichert", "OK")
  ...
```



# 20.1.1.2 Example 2

The text of the message is of type Text/Plain and 2 buttons are used:

Figure 20.1.1.2.1: Info message box


```
PUBLICSUBbtnAktuelleKonfigurationSpeichern_Click()DIMiIndexMBQASIntegeriIndexMBQ=Message.Question("Soll die aktuelle Konfiguration der V24-Schnittstelle\gespeichert werden?","Ja","Nein")IFiIndexMBQ=1THENv24Settings["V24Konfiguration/Port-Name"]=cmbRS232PortName.Text...v24Settings["V24Konfiguration/Datenflusskontrolle"]=cmbFlow.Textv24Settings.SaveELSERETURNENDIFEND
```

Alternative:


```
PUBLICSUBbtnAktuelleKonfigurationSpeichern_Click()IFMessage.Question("Soll die aktuelle Konfiguration der V24-Schnittstelle\gespeichert werden?","Ja","Nein")=1THENv24Settings["V24Konfiguration/Port-Name"]=cmbRS232PortName.Text...v24Settings["V24Konfiguration/Datenflusskontrolle"]=cmbFlow.Textv24Settings.SaveELSERETURNENDIFEND
```

Calling the message box interrupts the programme. If the user has pressed the “Yes” button, then the current configuration of the V24 interface is saved and then the programme is continued. In the alternative case “No”, the programme will continue immediately. If you had used the following text:


```
IFMessage.Question("Soll die aktuelle Konfiguration der V24-Schnittstelle gespeichert werden?",\"Na klar...","Nö – jetzt nicht!")=1THEN
```

then this would have had no influence on the function value, which is only determined by the button pressed, because their order in the message box implies a ranking:


# 20.1.1.3 Example 3


Figure 20.1.1.3.1: Question message box.
In this case, either 1 or 2 or 3 is returned as the function value. You should evaluate the function value using the Select … Case control structure:


```
SELECTmessage.question("Soll die Datei message.txt gesichert werden?","Ja","Nein","Abbruch")CASE1File.Save(dateipfad&/message.txt, txaTextFeld.Text)CASE2TRYKILLdateipfad&/message.txtIFERRORTHENMessage.Error("Die Datei konnte nicht gelöscht werden!")RETURNENDIFCASE3RETURNENDSELECT
```



# 20.1.1.4 Example 4


Figure 20.1.1.4.1: Info Message Box (HTML).
The text of the message can be formatted in an appropriate way by choosing text of type text/html:


```
PUBLICSUBbtnInfo_Click()DIMtext, leerzeileASStringDIMiCountASIntegerFORiCount=1TO10*15leerzeile&="&nbsp;"NEXTtext="<center><h2><font color='red'>Example to make bar chart</h2></font></center>"text&="<center><p>This example has made by Tobias Boege - Markgraf-Albrecht-Gymnasium\Osterburg (Germany)<br>"text&="Mail: tobias@gambas-buch.de</center></p>"text&="<hr>"text&="<center><b>Web: http://www.gambas-buch.de</b></center>"text&="<hr>"text&=leerzeileMessage.Info(text,"&Close")' ---> Schließen mit [ALT]+[C]END
```

The special features of this message are the insertion of a line of protected spaces to enforce the required width of the box and the two horizontal lines as well as the marking of parts of the text with the attribute “bold” and the use of colours. Such a message is informative and stands out.


# 20.1.1.5 Example 5


Figure 20.1.1.5.1: Info Message Box (HTML)
You can call up this message from a menu, for example:


```
...DIMleerzeileASStringDIMiCountASIntegerFORiCount=1TO10*1leerzeile&="&nbsp;"NEXTMessage.Info(File.Load("help.htm")&leerzeile)...
```

or via the F1 key:


```
PUBLICSUBForm_KeyPress()DIMleerzeileASStringDIMiCountASIntegerFORiCount=1TO10*1leerzeile&="&nbsp;"NEXTIFKey.Code=Key.F1THENMessage.Info(File.Load("help.htm")&leerzeile)END
```

If you save the followingHTMLsource text in the file help.html in the project directory, you cannot change the text in theHTMLfile later because it has been compiled. The style instructions are anchored here as inlineCSSin theHTMLfile. The alternative of maintaining these style instructions in a separateCSSfile is certainly only worthwhile for larger projects.


```
<html><head><title>Hilfetext</title><metahttp-equiv="content-type"content="text/html; charset=UTF8"><styletype="text/css">html {background-color:#FFFFDF; color:#000000; font-family:Verdana,Helvetica,Arial,sans-serif; \
          font-size:12px;}
    H1 {font-size:12px;}<!-- Alternative: <link rel="stylesheet" type="text/css" href="help.css" /> --></style></head><body><h1><fontcolor='Blue'>Ich bin die kleine Hilfe ...</font></h1><hr><p><b>F1HilfeW</b>ist eine einfache Anwendung mit einer Programm-Hilfe im HTML-Format:</p><p>Die<b><fontcolor='Blue'>F1-Taste</font></b>ruft das Hilfefenster der Anwendung F1HilfeW auf.<br>Die<b><fontcolor='Blue'>Escape-Taste (ESC)</font></b>beendet das Hilfefenster.<br>Das<b><fontcolor='Blue'>Hilfefenster</font></b>kann in der Größe verändert werden.<br></p><hr><p>Das Programm (Version 0.0.20) wurde von Hans Lehmann 2012 entwickelt.<br/>Weitere Hilfe finden Sie unter www.gambas-buch.de.<br/>Anfragen bitte nur an hans@gambas-buch.de.</p></body></html>
```

Of course, it is also possible to go one size smaller in the text mark-up, as these two examples show:

Figure 20.1.1.5.2: Warning message box (HTML)


```
...Message.Warning("Die Datei <b>message.txt</b> ist gesperrt!","Die Datei entsperren","Abbruch")...
```


Figure 20.1.1.5.3: Warning message box (HTML)


```
...DIMtext, sASStringDIMiCountASIntegerFORiCount=1TO10*8' auch mal mit Werten < 8 probieren...s&="&nbsp;"NEXTtext=s&"<br />"text&="Das Verzeichnis <font color='red'>Home.User &/ Sicherung</font> existiert nicht!"Message.Warning(text,"&Ignorieren")...
```



# 20.1.1.6 Example 5

Messages are particularly informative if, for example, you catch an error in a programme at a certain point that is considered time-critical when it occurred and you could then refer to displayed error codes in the error message for error analysis or to information about the programme section or module that triggered an error. In addition, you can add your own texts to the messages. As a programme developer, you can certainly do something with the following error message. Especially if several developers are involved in the project:

Illustration 20.1.1.6.1: Error Message Box with Error Code and Hints
You are told that an error has occurred, you get the corresponding English error text for error code 43 and you also see the name of the procedure and the line number in the programme where an error occurred.
The source code - with the corresponding programme section for programme developers - is given in full:


```
PUBLICSUBbtnCreatingFile_Click()DIMhFileASStreamDIMsErrorTextASStringIFNOTExist(TextBox1.Text)THENhFile=OPENTextBox1.TextFORCREATE'-- Den Benutzer über den Erfolg der Operation informierenMessage.Info("Die Datei wurde angelegt.")CLOSE#hFileELSE'-- Wenn die Datei existiert, eine Fehlermeldung ausgebenMessage.Error("Datei existiert bereits.")ENDIFCATCHSELECTCASEError.CodeCASE43'---Access forbiddenCASE44'-- File name is too longCASE45'-- File or Directory does not existCASE46'-- File is a DirectoryCASE48'-- Write ErrorCASEELSE'-- NOOPENDSELECTMessage.Error("FehlerCode: "&Error.Code&Chr(10)&"FehlerText: "&Error.Text&Chr(10)&\"FehlerQuelle: "&Error.Where)END' btnCreatingFile_Click()
```

In the tested programme version, you will probably only use the following statement block:


```
...SELECTCASEError.CodeCASE43sErrorText="Sie besitzen nicht die Rechte,\num diese Datei anzulegen."CASE44sErrorText="Der Dateiname ist zu lang."CASE45sErrorText="Die Datei existiert nicht."CASE46sErrorText="Der Pfad führt zu einem Ordner."CASE48sErrorText="Fehler beim Schreiben in die Datei."CASEELSEsErrorText="Fehler?"ENDSELECTMessage.Error(sErrorText)...
```

The error message is intended for the programme user, has a self-written German text in the message box and clearly names the error:

Figure 20.1.1.6.2: Error message box with own text


# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.1.2 Custom message windows


Figure 20.1.2.1: Message window with 4 buttons
Such a message is not possible with a message box. For this case you will have to design, layout and test your own message form, where the focus will be on evaluating which of the 4 buttons had been pressed when you had assigned all 4 buttons to a group.


# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.1.3 Message and I18N

Special care in the use of messages is required for programmes for which you have provided translations into at least one other language. On the one hand, you must ensure that the texts in the messages are translated and, on the other hand, the intended design should be preserved. This is not easy, as you can see in the picture on the right:

You have to test the design for each of the target languages and make sure that you have the target languages installed on your system. Chapter 3.5 Multilingual programmes therefore introduces you to a programme that can do just that for the tests:

Figure 20.1.3.1: Test program I18N
In the project properties you have to indicate under the options whether the project contains translations and possibly select the default language. For the project translation, you will then find the entry Translate in the menu and in the toolbar the symbol Translate will appear as a small blue flag, while you can call up the project translation directly with [CTRL +T] (→ Chapter 3.5).
In the source text of your internationalised programmes, you must mark up the strings to be translated - but only for strings whose text is visible - by enclosing these strings in round brackets:


```
PUBLICSUBbtnFileSave_Click()'-- sDatei ist eine globale Variable: "filelist.txt"'-- Originale MessageBox für ein Programm in deutscher Sprache'-- Message.Question("Soll die Datei " & sDatei & " gespeichert werden?", "Ja", "Nein")Message.Question("<b>"&sDatei&"</b><br>"&("Datei speichern?"),("Ja"),("Nein"))END
```


Figure 20.1.3.2: Message window (original)
After translating all the strings in the project translation in the Gambas IDE, you will get the following messages in a MessageBox in the language you selected in the language test program, for example:

Figure 20.1.3.3: German - Figure 20.1.3.4: French - Figure 20.1.3.5: English
Reference:You do not have to mark the identifiers on the two buttons because they are automatically in the list of strings to be translated.


# 20.1.3 Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.2 Balloon

The classBalloon (gb.form)implements a display object for messages. This class displays a message and anoptionalicon in a coloured balloon.

Figure 20.2.1: Balloon with 'Information' icon and text section highlighted in colour.


# 20.2.1 Properties

The Balloon class has four properties:
Table 20.2.1.1 : Properties of the class `Balloon`


# 20.2.2 Methods

The Balloon class has 2 basic methods - one to display the balloon and one to hide the balloon. When displaying, 5 different icons can optionally be displayed with it to indicate the type of message (error, question, information, deletion and warning).
Table 20.2.2.1 : Methods of the class `Balloon`


# 20.2.3 Notes on the use of the Balloon class

For longer messages, the class Message provides six different variants → Chapter 20.1 Message.For detailed messages - for example, within the framework of a programme help - other display objects are available, the overview of which can be found in → Chapter 11.8 Programme help. There you will also find application notes and many examples.


# 20.2.4 Examples

The following two examples show typical use cases for balloons.
Example 1
Example 1 refers to Figure 20.2.1 for displaying a balloon with icon. The following source code snippet is typical for the use of a balloon:


```
[1]bbPublicSubbtnHilfe_Click()[2]DimsMitteilungAsString[3][4]Balloon.Font=Font["Ubuntu,12"][5]Balloon.Delay=10000[6][7]sMitteilung="Nach der Installation ist der MySQL-Server so konfiguriert, dass er nur vom "[8]sMitteilung&="localhost - also vom lokalen Rechner aus - erreichbar ist. Soll der Server "[9]sMitteilung&="über das Netzwerk ansprechbar sein, so kann man hier zum Beispiel mit "[10]sMitteilung&="<font color='red'>'bind-address = 192.168.0.100' </font>die interne "[11]sMitteilung&=" IP-Adresse des Servers eintragen. So ist der MySQL-Server auch von anderen"[12]sMitteilung&=" Arbeitsstationen aus dem LAN ansprechbar."[13][14]IfNotBalloon.VisibleThen[15]Balloon.Info(sMitteilung, btnHilfe, btnHilfe.W-5, btnHilfe.H-3)[16]Else[17]Balloon.Hide()[18]Endif[19]End
```

Notes:
Example 2

Place a balloon on the form - here tied to a small button next to a text box with a small i as an icon - todecentlydisplay a hint. The balloon with the hint text is displayed when you stand with the mouse over the button with the icon. The balloon disappears automatically after 3 seconds or exactly when you leave the button again with the mouse within the display time:


```
PublicSubbtnInformation_Enter()'-- Display balloonDimsMitteilungAsStringBalloon.Font=Font["Ubuntu,11"]Balloon.Delay=3000sMitteilung="Input in CAPITAL LETTERS required!"&gb.TabBalloon.Info(sMitteilung,Last)End
```



```
PublicSubbtnInformation_Leave()'-- Hide balloonBalloon.Hide()End
```



# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.3.0 Timer

The classTimer (gb)implements a Timer object. A Timer object is to be understood as a clock that triggers events with each clock pulse. The time between each clock pulse is determined by the value of theDelayproperty (clock pulse time in milliseconds).


# 20.3.0.1 Properties

The Timer class has only two properties:
Table 20.3.0.1.1 : Properties of the Timer class


# 20.3.0.2 Methods

The Timer class has three methods, the description of which can be found in the following table:
Table 20.3.0.2.1 : Methods of the class Timer


# 20.3.0.3 Event

There is exactly one event for the class Timer → Timer_Timer(). This event is triggered every time the cycle time specified via Timer.Delay has elapsed.
Note that the cycle time is at least Timer.Delay. There is generally no guarantee - depending on the hardware used and and the operating system and its configuration - that the event handler will be executed “close in time”.


# 20.3.0.4 Fields of Application for the Class Timer

The following is a compilation of selected fields of application for Timer objects from various demonstration projects in the online book:
This concept has proven successful when using a timer:


# 20.3.0.5 Timer function Timer()

The timer function Timer() - which is unrelated to the class Timer - specifies the number of seconds that have elapsed since the programme start. The function value is of the float data type. The function uses the system clock.
With the following source code excerpt


```
Dim fZeitdifferenz as Float

fZeitdifferenz = Timer
Print "Sekunden seit Programm-Start = ";;fZeitdifferenz;;" Sekunden"
```

… the number of seconds elapsed since the programme start is displayed in the console of the Gambas IDE:


```
Zeit seit Programm-Start =  17,8296689987183  Sekunden
```

The function can be used, for example, to measure runtime when comparing search or sort algorithms or for selected, time-intensive procedures.


# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.3.1 Timer projects 1

The examples presented are taken from self-developed and tested demonstration programmes from different chapters. Only the source code sections are given, with which the implementation of the above concept becomes visible. You will find the archives for the complete project in the download area.



# 20.3.1.1 Example 1 - Digital clock

Figure 20.3.1.1: Digital clock
Source code:


```
PrivatebTrennzeichenAsBooleanPublicSubForm_Open()FMain.CenterFMain.Text="Tempus fugit ..."...LCDTimer.Delay=1000'-- oder 500 (blinkender Doppelpunkt)LCDTimer.StartLCDTimer.TriggerEndPublicSubLCDTimer_Timer()bTrennzeichen=NotbTrennzeichen
  LCDLabel.Padding=8LCDLabel.Text=Format(Now,"hh"&If(bTrennzeichen,":","")&"nn"&If(bTrennzeichen,":","")&"ss")End
```



# 20.3.1.2 Example 2 - Analogue clock


Figure 20.3.1.2.1: Analogue clock
Source code:


```
PublicSubForm_Open()FMain.CenterFMain.Resizable=FalseZeitLabel.Text="Local-Time"Timer1.Delay=1000' 1000 Millisekunden = 1 SekundeTimer1.Start'-- Alternative syntax: Timer1.Enabled = TRUEEndPublicSubTimer1_Timer()' Taktgeber im SekundentaktDimsArcus, sArcus_S, sArcus_M, sArcus_H, x, yAsSingleDimiRadius, iCountAsIntegeriRadius=88sArcus_S=(90-6*Second(Now))*Pi/180sArcus_M=(90-6*Minute(Now))*Pi/180sArcus_H=(90-30*Hour(Now)-0.5*Minute(Now))*Pi/180ZeitLabel.Text=Format$(Now,"hh:nn:ss")Draw.Begin(dwTest)'-- Achtung: Ab GB 3.4 sollte `Paint` an Stelle von `Draw` verwendet werdenDraw.Translate(dwTest.W/2, dwTest.H/2)' Erst verschieben und dann skalieren!Draw.Scale(1,-1)Draw.Picture(Picture["Images/ziffernblatt.png"],-105,-105,210,210)'-- Sekundenzeigerx=iRadius*Cos(sArcus_S)y=iRadius*Sin(sArcus_S)Draw.Foreground=Color.RedDraw.Line(0,0, x, y)'-- Minutenzeigerx=iRadius*Cos(sArcus_M)y=iRadius*Sin(sArcus_M)Draw.Foreground=Color.GreenDraw.Line(0,0, x, y)'-- Stundenzeigerx=iRadius*Cos(sArcus_H)y=iRadius*Sin(sArcus_H)Draw.Foreground=Color.BlueDraw.LineWidth=2Draw.Line(0,0, x, y)Draw.End()End
```



# 20.3.1.3 Example 3 - Clock with binary display

Admittedly - the display is a bit unfamiliar; but has its charm when, after some practice, you can immediately grasp and announce the time of 14:09:24:

Figure 20.3.1.3.1: Binary display of the time
Source code


```
PublicpBitPanel[24]AsPanelPublicSubForm_Open()DimsAsIntegerDimzAsIntegerDimiAsInteger...Forz=1To4' 4 ZeilenFors=1To6' 6 Spalteni=s+6*z-7pBitPanel[i]=NewPanel(Me)As"PDigit"pBitPanel[i].Background=&HE2E2E2
          pBitPanel[i].Move(16+62*(s-1),16+62*(z-1),52,52)NextNextTimer1.Delay=1000Timer1.Start()Timer1.Trigger()EndPublicSubTimer1_Timer()DisplayTime(SetTimeMatrix())'-- Umfärben der 24 PaneleEnd...
```



# 20.3.1.4 Example 4 - Stopwatch

This stopwatch is designed to provide convenient end and split times for specific sequences. In addition to the start and stop buttons, there is also a pause button (the display is not updated) and a continue button that switches the display back on.

Figure 20.3.1.4.1: Stop clock
Source code:


```
' Gambas class filePrivatebTimeOutAsBoolean=FalsePrivatebPauseAsBoolean=FalsePrivateiSekundenAsInteger=0PrivateiMinutenAsInteger=0PublicSubForm_Open()FMain.Center()FMain.Resizable=FalseTimerDP.Delay=500TimerStoppUhr.Delay=1000'-- Test: TimerStoppUhr.Delay = 1 oder 10FMain.Text="Stop-Uhr: 0 "&String.Chr(&2266)&" Zeit "&String.Chr(&2266)&" 1 Stunde"SetModus(True,False,False,False)lcdAnzeigeSekunden.Value=0lcdAnzeigeMinuten.Value=0EndPublicSubbtnStart_Click()TimerStoppUhr.StartTimerDP.StartiSekunden=0iMinuten=0lcdAnzeigeSekunden.Value=0lcdAnzeigeMinuten.Value=0SetModus(False,True,False,True)FMain.Text="Stop-Uhr: 0 "&String.Chr(&2266)&" Zeit "&String.Chr(&2266)&" 1 Stunde"EndPublicSubbtnPause_Click()bPause=TrueSetModus(False,False,True,True)EndPublicSubbtnWeiter_Click()bPause=FalseSetModus(False,True,False,True)lcdAnzeigeSekunden.Value=iSekunden
  lcdAnzeigeMinuten.Value=iMinutenEndPublicSubbtnStop_Click()TimerStoppUhr.StopTimerDP.StopSetModus(True,False,False,False)labelDoppelpunkt.Visible=TruebPause=FalselcdAnzeigeSekunden.Value=iSekunden
  lcdAnzeigeMinuten.Value=iMinutenEndPublicSubTimerDP_Timer()labelDoppelpunkt.Visible=NotlabelDoppelpunkt.VisibleEndPublicSubTimerStoppUhr_Timer()IfbPause=FalseThenInciSekunden
     lcdAnzeigeSekunden.Value=iSekundenIf(iSekunden=60)TheniSekunden=0lcdAnzeigeSekunden.Value=0InciMinuten
        lcdAnzeigeMinuten.Value=iMinutenEndifElseInciSekundenIf(iSekunden=60)TheniSekunden=0InciMinutenEndifEndifIf(iSekunden=59)And(iMinuten=59)ThenbTimeOut=TrueEndifIfbTimeOut=TrueThenbtnStop_Click()lcdAnzeigeMinuten.Value=60lcdAnzeigeSekunden.Value=0FMain.Text="Eine Stunde ist erreicht ..."bTimeOut=FalseEndifEndPublicSubSetModus(iStartAsBoolean, iPauseAsBoolean, iWeiterAsBoolean, iStoppAsBoolean)btnStart.Enabled=iStart
     btnPause.Enabled=iPause
     btnWeiter.Enabled=iWeiter
     btnStop.Enabled=iStoppEndPublicSubForm_Close()IfTimerStoppUhr.EnabledThenTimerStoppUhr.Stop()IfTimerDP.EnabledThenTimerDP.Stop()End
```



# Download

Chapter & 4 Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.3.2 Timer projects 2



# 20.3.2.1 Example 5 - CountDown 1


Figure 20.3.2.1.1: Gifts together yet?
Source code:


```
PublicSubForm_Open()FMain.CenterFMain.Resizable=FalseCountDown.Delay=1000'-- Auslese-Takt für die aktuelle Zeit (kleiner oder gleich 1000ms)!CountDown.StartCountDown.TriggerMovieBox1.Playing=TruelblText2.Text&=" "&Format$(Now(),"yyyy")EndPublicSubCountDown_Timer()DimdCountDownAsDateDimdMonth, dWeek, dDay, dHour, dMinute, dSecondAsIntegerDimiRestZeitInSekunden, iZeitInSekunden, iTage, iStunden, iMinuten, iSekundenAsIntegerdCountDown=Date(Year(Now()),12,24,0,0,0,0)' Weihnachten; 24.12.IfDateDiff(Now, dCountDown, gb.Second)>0TheniZeitInSekunden=DateDiff(Now, dCountDown, gb.Second)iTage=Int(iZeitInSekunden/(24*60*60))lblTage.Text=Str(iTage)iRestZeitInSekunden=iZeitInSekunden-iTage*24*60*60iStunden=Int(iRestZeitInSekunden/(60*60))lblStunden.Text=Str(iStunden)iRestZeitInSekunden=iRestZeitInSekunden-(iStunden*60*60)iMinuten=Int(iRestZeitInSekunden/60)lblMinuten.Text=Str(iMinuten)iRestZeitInSekunden=iRestZeitInSekunden-(iMinuten*60)iSekunden=iRestZeitInSekunden
     lblSekunden.Text=Str(iSekunden)EndifEnd
```



# 20.3.2.2 Example 6 - CountDown 2


Figure 20.3.2.2.1: CountDown in the range from 1 to 99
The special feature of this project is that a self-developedTimeOut component with integrated timeris used. You can preset the CountDown counter in the interval from 1 to 99. In the range 1-9, the digits are displayed in an automatically adjusted size. You can set the clock frequency as well as various colour settings for areas, circles, lines or the text (digits), for example, in the properties window of the TimeOut component.
Source code:


```
PubliciCountAsIntegerPublicSubForm_Open()FCountDown.CenterFCountDown.Resizable=FalseTimer1.Delay=100Timer1.StartTimer1.Trigger'-- Eigenschaften der Komponente TimeOut festlegen:'-- Entweder über das Eigenschaften-Fenster oder im Quelltext'-- Ein TimeOut-Steuerelement ist bereits auf das Formular gezogen wordenTimeOut1.Delay=1000TimeOut1.Count=9EndPublicSubTimer1_Timer()IfTimeOut1.FinishedThenTimer1.StopWait1TimeOut1.DeleteWait1FCountDown.Close'-- Hauptprogramm starten ...EndifEnd
```

The timer Timer1 is only needed in the test programme to check in a 100ms interval whether the countdown counter is at zero.


# 20.3.2.3 Example 7 - CountDown 3


Figure 20.3.2.3.1: Time server
If a time server is not reachable within a given time and returns a timestamp, then the connection is aborted and the state is documented with TIMEOUT.
Source text:
Within the procedure 'Connect to time server' the TimeOut time is set and the TimeOut timer is started, which is stopped here after 5 seconds:


```
...IfTCPIP_Socket.Status>Net.InactiveThenbtnDisconnect.Enabled=TruelblStatus.Text="Verbindung zum Zeit-Server wird aufgebaut ..."TimeOut.Delay=5000'-- TimeOut = 5 SekundenTimeOut.StartEndifPublicSubTimeOut_Timer()TimeOut.StopIfTCPIP_Socket.Status<>Net.ConnectedOrlTimeResult=0ThenIfTCPIP_Socket.Status>0ThenClose#TCPIP_Socket
     Set_Interface(False)lblStatus.Text="T I M E O U T"EndifEnd
```



# 20.3.2.4 Example 8 - Alarm simulation


Figure 20.3.2.4.1: Simulation.
In this project, five timers and the Timer() function are used to simulate an experiment. The large LED shows the temperature state qualitatively (green, yellow, orange and red). The exact temperature is read out and displayed time-controlled.
If the temperature exceeds a certain value, the heating is switched off and the small LED flashes red to document the alarm status - even if the temperature has returned to the normal value and the heating is operating in interval mode (heating in oscillating mode). In this mode, the temperature changes only slightly with (25 ± 0.2)°C. This behaviour is also simulated with a timer and a random generator.
In the procedure pibAlarmFlash_Enter(), thetimer function Timer()is used to calculate the time difference from the start time of the measurement - determined with fStartTime = Timer() - how long the alarm has already existed. The time is displayed in aballoonwhen standing with the mouse over theblinkingalarm LED:

Figure 20.3.2.4.2: Alarm time display
Source code extract with selected procedures:


```
PublicfTemperaturAsFloat=20.0PublicfStartZeitAsFloatPublicSubForm_Open()FMain.CenterFMain.Resizable=FalseTimerAlarm.Delay=100TimerUp.Delay=100TimerDown.Delay=100TimerFlash.Delay=500TimerZufall.Delay=1000SetLEDColor("green")lblTemperatur.Text=Format(fTemperatur,"##.0 °C")btnStart.Text="Messung "&String.Chr(187)&" Starten"RandomizeEndPublicSubTimerZufall_Timer()DimfZufallsTemperaturAsFloatfZufallsTemperatur=Rnd(24.8,25.2)lblTemperatur.Text=Format(fZufallsTemperatur,"##.0 °C")EndPublicSubTimerAlarm_Timer()IffTemperatur<30ThenSetLEDColor("green")ElseIf(fTemperatur>=30AndfTemperatur<32)ThenSetLEDColor("yellow")ElseIf(fTemperatur>=33AndfTemperatur<34)ThenSetLEDColor("orange")ElseIffTemperatur>=34ThenSetLEDColor("red")'-- Die Heizung wird ausgeschaltet ...TimerUp.StopTimerDown.StartTimerFlash.StartTimerFlash.TriggerfStartZeit=Timer()EndifEndPublicSubpibAlarmFlash_Enter()DimfAlarmZeitAsFloatDimsMessageAsStringIfTimerFlash.Enabled=TrueThenfAlarmZeit=Round(Timer()-fStartZeit,0)sMessage="Alarm seit "&Str(fAlarmZeit)&" Sekunden! "Balloon.Info(sMessage,Last)EndifEnd
```



# 20.3.2.5 Example 9 - Timed measurement acquisition


Figure 20.3.2.5.1: Temperature display
After an analogue-to-digital converter, the digital temperature value is read in and displayed time-controlled via a serial USB-RS232 interface.
Relevant source code sections to demonstrate the concept for using the Timer class:


```
PUBLICSUBStart()'...GetValueTimer.Delay=100'-- Alle 100·ms wird die Temperatur ausgelesenGetValueTimer.Start()'-- Synonym für GetValueTimer.Enabled = TRUEGetValueTimer.Trigger()'-- Löst das Timer-Event() sofort aus'...ENDPUBLICSUBGetValueTimer_Timer()IFRS232.Status<>Net.ActiveTHENlblTemperaturAnzeige.Text="--- °C"rbLED.ForeColor=Color.RedELSElblTemperaturAnzeige.Text=iTemperaturByte&" °C"rbLED.ForeColor=Color.GreenENDIFEND
```



# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.3.3 Timer projects 3



# 20.3.3.1 Example 10 - Extended Timer

Example 10 assumes the following technical situation:
An application queries the frequency of an amateur radio receiver (RX) - here in the 20m band - at intervals of 100-ms via a serial interface. A separate transmitter (TX) is to be set to the current RX frequency according to the following approach:

Figure 20.3.3.1.1: Digital frequency display → RX and TX synchronised.
Source code excerpt from the above application (realisation Extended Timer):


```
PublicSubForm_Open()FMain.Center()FMain.Resizable=FalseDial1.MinValue=14000000Dial1.MaxValue=14355000Dial1.PageStep=1000Dial1.Step=100Dial1.Value=14325200Dial1.Wrap=TrueLCDLabel.Alignment=Align.CenterLCDLabel.Border=TrueLCDLabel.Background=&HC3DDFF&LCDLabel.Foreground=&H0000FF&SetLEDColor("green")syncTimer.Delay=1000EndPublicSubDial1_Change()LCDLabel.Text=Format(Dial1.Value,"00,000000")syncTimer.Stop()syncTimer.Start()SetLEDColor("red")EndPublicSubsyncTimer_Timer()syncTimer.Stop()SetLEDColor("green")EndPublicSubSetLEDColor(sLEDColorAsString)PictureBox1.Picture=Picture["LED/led_"&sLEDColor&".svg"]EndPublicSubForm_Close()IfsyncTimer.Enabled=TrueThensyncTimer.StopEnd
```



# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.4.0 Clipboard

The Clipboard class (gb.qt4) is static and can be used to manipulate the system's clipboard. The clipboard is a storage area for the simple exchange of data (text and images) between programmes. First, the data is copied or cut and stored in the clipboard. Then the data stored in the clipboard can be pasted into suitable Gambas components for text or images, thus realising the copying or moving of data. When the Gambas programme that uses the clipboard is terminated, the clipboard object is also destroyed and with it its contents. A remedy is to install a clipboard manager:


# 20.4.0.1 Constants

The Clipboard class uses 3 constants to indicate the type of content of the clipboard:
Table 20.4.0.1.1 : Constants of the Clipboard class


# 20.4.0.2 Properties

The Clipboard class has these properties:
Table 20.4.0.2.1 : Properties of the Clipboard class


# 20.4.0.3 Methods

The Clipboard class has three methods, the description of which can be found in the next table:
Table 20.4.0.3.1 : Methods of the Clipboard class


# 20.4.0.4 Mime types

Data copied from a programme to the clipboard usually exists there in several formats.
If you know the formats of your preferred (source) applications, then you can later already put the texts or images in a suitable format in the clipboard or paste them from it in the specified format into the (target) application that will further process this data.


# 20.4.0.5 Inserting data into the clipboard

There are several ways to put data on the clipboard or in the clipboard. What all data have in common is that under Gambas you can only paste text or images into the clipboard and from there into a (target) application. This does not apply to text or image files! You must first assign their content to a property of a usable Gambas object with the data type Picture or Image.
Example 1 - Copy a picture from a file to the clipboard (data type Image):


```
Clipboard.Copy(Image.Load("Pictures/fraktal_1.jpg"))
  Clipboard.Copy(Picture.Load("Pictures/fraktal_1.jpg").Image)
```

Example 2 - Putting a picture from a picture box on the clipboard:


```
If PictureBox1.Picture <> Null Then
     Clipboard.Copy(PictureBox1.Picture.Image)
  Endif
```

Example 3 - Display and save a desktop screenshot
The following procedure returns a screen copy that is immediately displayed in a PictureBox and then saved in a specified directory as a png graphic with the highest quality (→ 100 %):


```
[1]PublicSubbtnGetScreenShot_Click()[2]FMain.Hide()[3]Wait0.1'-- In practice, increase to 3 seconds![4]PictureBox1.Picture=Desktop.Screenshot()[5]PictureBox1.Picture.Save(User.Home&/"Bilder/current_screenshot.png",100)[6]FMain.Show()[7][8]'-- Alternative without direct display -> Insert save dialogue option[9]'-- FMain.Hide()[10]'-- Wait 0.05[11]'-- Desktop.Screenshot().Save(User.Home &/ "Bilder/current_screenshot.png", 100)[12]'-- FMain.Show()[13][14]End
```

Under KDE and Gnome, screenshots can be created by simply pressing the Print key. With the key combination Alt+Print key you place an image of the active window in the clipboard, the entire desktop in contrast with CTRL+Print key. If you use a special programme to take a screenshot, its programme options may override the above-mentioned effects of the keys or key combinations. These programmes include Shutter and KSnapshot - but also Gimp (File> Create> Screenshot).
The console programme 'Gnome-Screenshot' is interesting in connection with the instructions SHELL and EXEC:


```
gnome-screenshot -w -b -c --delay=2
  gnome-screenshot -i
```



```
-c, --clipboard                Sending a recording directly to the clipboard
-w, --window                   Record only one window instead of the whole screen
-b, --include-border           Include the window frame in the screenshot
-d, --delay=Sekunden           Take a screenshot only after the specified time [Time in seconds].
-i, --interactive              Set options interactively
```

Example 4 - Screenshot of the active top-level window.


```
SHELL"gnome-screenshot -c -w -b --delay=1"Wait
  PictureBox2.Picture = Clipboard.Paste().Picture
```

The screenshot of the top-level window is displayed in a PictureBox.


# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.4.1 Project 1 - Clipboard Text Demonstration Programme

The components TextArea and TextEdit as editors as well as the TextBox have a context menu (Undo, Redo, Cut, Copy, Paste, Delete, 'Select All') with which the exchange of text via the clipboard can be done safely - without having to use the Clipboard class.
The project presented demonstrates the use of the Clipboard class (gb.qt4) for texts. The inserted context menu for TextArea1 has three entries:
Please note:
You can select text in Textarea1 or in TextBox and then use their context menus to copy or cut the selected text or paste text - even from other applications - into Textarea2:

Figure 20.4.1.1: 'Clipboard Text' demonstration programme
For example, if you copy and paste text from web pages or from OpenLibreWriter or from the email client Thunderbird, the display of text formats reveals a surprising variety of MIME types.
The source code for the demonstration programme is given in full:


```
PrivatesTextAsStringPublicSubForm_Open()FMain.Resizable=FalseIfClipboard.Type<>Clipboard.NoneThen'-- Clipboard not empty?FMain.Caption="ClipBoard MIME-Type: "&Clipboard.Formats[0]Endif'  Clipboard.Type <> Clipboard.None ?'-- Mustertext:sText="Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming "sText&="id quod mazim placeratfacer possim assum. Lorem ipsum dolor sit amet, consectetuer "sText&="adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna "sText&="aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation "sText&="ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat."txaArea1.Text=sText
    txaArea1.Wrap=TruetxaArea2.Wrap=TrueEndPublicSubbtnShowFormats_Click()DimsElementAsStringtxaArea2.Clear()ForEachsElementInClipboard.FormatstxaArea2.Insert(sElement&gb.NewLine)NextEndPublicSubbtnReset_Click()Clipboard.Clear()txaArea2.Clear()txaArea1.Text=sText
    txaArea1.SetFocus()FMain.Caption="ClipBoard"EndPublicSubbtnTextArea2Clear_Click()txaArea2.ClearEndPublicSubbtnClose_Click()FMain.CloseEnd'-- Menu declaration ---------------------------------------------------------------------------------------PublicSubtxaArea1_Menu()DimmnuContextTextArea1AsMenuDimmnuMenuItemAsMenu'-- A new pop-up menu object is created for the textarea1.mnuContextTextArea1=NewMenu(FMain,False)'-- 1st entry in the screen pop menu of the component TextArea1mnuMenuItem=NewMenu(mnuContextTextArea1)As"mnuSelectAll"mnuMenuItem.Text="Highlight the entire text."mnuMenuItem.Picture=Stock["select"]'-- 2nd entry in the pop-up menumnuMenuItem=NewMenu(mnuContextTextArea1)As"mnuSelectedCopy"mnuMenuItem.Text="Copy selected text to the clipboard."mnuMenuItem.Picture=Stock["copy"]'-- 3rd entry in the pop-up menumnuMenuItem=NewMenu(mnuContextTextArea1)As"mnuSelectedCut"mnuMenuItem.Text="Cut selected text "&String.Chr(187)&" Clipboard."mnuMenuItem.Picture=Stock["cut"]'-- Assign screen pop menu for TextArea_1mnuContextTextArea1.PopupEnd'-- The 3 actions that are triggered are now programmed here,'-- if the corresponding screen pop menu item of TextArea1 was selected.'-- Screen pop menu item 1 - Component TextArea1PublicSubmnuSelectAll_Click()txaArea1.SelectAll()txaArea2.Clear()End'-- Screen pop menu item 2 - Component TextArea1PublicSubmnuSelectedCopy_Click()IftxaArea1.Selection.Text<>NullThentxaArea2.Clear()Clipboard.Copy(txaArea1.Selection.Text)'-- Alternative: TextArea1.Copy()FMain.Caption="ClipBoard MIME-Type: "&Clipboard.Formats[0]EndifEnd'-- Screen pop menu item 3 - Component TextArea1PublicSubmnuSelectedCut_Click()IftxaArea1.Selection.Text<>NullThentxaArea2.Clear()Clipboard.Copy(txaArea1.Selection.Text)FMain.Caption="ClipBoard MIME-Type: "&Clipboard.Formats[0]txaArea1.Cut()EndifEndPublicSubtxaArea2_Menu()DimmnuContextTextArea2AsMenuDimmnuP2TAsMenumnuContextTextArea2=NewMenu(FMain,False)mnuP2T=NewMenu(mnuContextTextArea2)As"mnuPasteToTextArea2"mnuP2T.Text="Insert text from ClipBoard..."mnuP2T.Picture=Stock["paste"]IfClipboard.Type=Clipboard.TextThenmnuContextTextArea2.Popup'-- Assign screen pop menu for TextArea_2FMain.Caption="ClipBoard MIME-Type: "&Clipboard.Formats[0]ElsemnuP2T.Enabled=FalsemnuContextTextArea2.Popup'-- Assign screen pop menu for TextArea_2EndifEndPublicSubmnuPasteToTextArea2_Click()txaArea2.Clear()'-- Can also be omitted...txaArea2.Insert(Clipboard.Paste("text/plain"))txaArea2.SetFocus()End
```



# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.4.2 Project 2 - Clipboard Images Demonstration Program

Project 2 demonstrates mainly the use of constants, properties and methods of the Clipboard class:

Figure 20.4.2.1: Clipboard class demonstration programme.
You can only be encouraged to experiment heavily with the program. This includes inserting screenshots you have taken yourself, for example:
For a first test, you should press the buttons in the givenorderand observe the displays in the two picture boxes and in the window title. You should then press button 6 at least 3 times.
The source text of project 2 is given in full. You should pay special attention to the functionDesktopGrab(iMode As Integer), which allows you to take screenshots of the desktop or the active top-level window - i.e. the programme window - and display them in a picture box. For the argumentiMode=0, a screenshot of the entire desktop is returned as a function value (data type Picture). For all other modesiMode> 0you get a screenshot of the programme window.
Complete source code for the demonstration programme 'Clipboard Pictures':


```
' Gambas class file' Es wird nur EIN Objekt im ClipBoard gespeichert.PublicSubForm_Open()FMain.Resizable=FalseIfClipboard.Type<>Clipboard.NoneThen'-- Clipboard not empty?FMain.Caption="ClipBoard MIME-Type: "&Clipboard.Formats[0]EndifEndPublicSubbtnShowPicture_Click()PictureBox1.Picture=Picture.Load("Pictures/fraktal_1.jpg")EndPublicSubbtnCopyPicture_Click()IfPictureBox1.Picture<>NullThenClipboard.Copy(PictureBox1.Picture.Image)FMain.Caption="ClipBoard MIME-Type: "&Clipboard.Formats[0]EndifEndPublicSubbtnPastePicture_Click()IfClipboard.Type=Clipboard.ImageThenPictureBox2.Picture=Clipboard.Paste().Picture'-- Note parenthesis → Function'-- PictureBox2.Picture = Clipboard.Paste("image/tiff").Picture '-- Option: Default MIME typeFMain.Caption="ClipBoard MIME-Type: "&Clipboard.Formats[0]EndiftxaFormats.Clear()EndPublicSubbtnScreenshotDesktop_Click()PictureBox2.Picture=DesktopGrab(0)'-- Screenshot from the desktopClipboard.Copy(PictureBox2.Picture.Image)FMain.Caption="ClipBoard - Screenshot MIME-Type: "&Clipboard.Formats[0]txaFormats.Clear()EndPublicSubbtnScreenshotTopLevelWindow_Click()PictureBox2.Picture=DesktopGrab(1)Clipboard.Copy(PictureBox2.Picture.Image)FMain.Caption="ClipBoard - Screenshot MIME-Type: "&Clipboard.Formats[0]txaFormats.Clear()EndPublicSubbtnShowFormats_Click()DimsElementAsStringtxaFormats.Clear()ForEachsElementInClipboard.FormatstxaFormats.Insert(sElement&gb.NewLine)NextEndPublicSubbtnClear1_Click()PictureBox1.Picture=NulltxaFormats.Clear()PictureBox1.Refresh()EndPublicSubbtnClear2_Click()PictureBox2.Picture=NulltxaFormats.Clear()PictureBox2.Refresh()EndPublicSubbtnClearClipboard_Click()Clipboard.Clear()FMain.Caption="ClipBoard"txaFormats.Clear()EndPublicFunctionDesktopGrab(iModusAsInteger)AsPictureDimDTWindowAsDesktopWindowDimmyDesktopPictureAsPictureDTWindow=NewDesktopWindow(Desktop.ActiveWindow)IfiModus=0ThenMe.Visible=FalseWait0.1myDesktopPicture=Desktop.Screenshot()Me.Visible=TrueReturnmyDesktopPictureElseReturnDesktop.Screenshot(DTWindow.X, DTWindow.Y, DTWindow.W, DTWindow.H)EndifEndPublicSubForm_Close()IfNot(Clipboard.Type=Clipboard.None)ThenClipboard.Clear()FMain.Close()End
```



# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.4.3 Project 3 - Demonstration Programme Print Screenshot

The third project shows you how to print a screenshot of the entire desktop in a very convenient way using thegb.report(report designer) component. The project is based on an idea byFabien Bodard(2012).

Figure 20.4.3.1: Demonstration programme 'Print screenshot'.

Figure 20.4.3.2: Report View → Print Preview
Before printing, you can select the printer and adjust the print options.
The source code for the print programme is surprisingly clear due to the use of thegb.reportcomponent:


```
PublicSubForm_Open()FMain.Resizable=FalseEndPublicSubbtnScreenshot2Printer_Click()DimhImageAsImageDimhReportAsNewReportDimhReportLabelAsNewReportLabel(hReport)DimhRepImgAsNewReportImage(hReport)hReport.Orientation=Printer.LandscapehReport.Padding=ReportPadding["2 cm"]hReport.Spacing="1 cm"hReport.Paper=Printer.A4hReportLabel.Text="Print screen copy"hReportLabel.Autoresize=TruehReportLabel.Alignment=Align.CenterhReportLabel.Font.Size=24FMain.Visible=FalseWait0.05hImage=Desktop.Screenshot().ImageFMain.Visible=TruehRepImg.Image=hImage
  hRepImg.Autoresize=TruehRepImg.Stretch=Report.ProportionalhRepImg.Expand=TruehReport.Preview()End
```



# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.5 Observer

The Observer (gb) class implements an object that can observe another object by intercepting its events.


# 20.5.1 Properties

The Observer class has these two properties - Object and Tag.


# 20.5.2 Generating an Observer Object

The following statement generates a new Observer for the specified object:


```
Dim hObserver As Observer
...
hObserver = New Observer ( ObjectA As Object [ , After As Boolean ] ) As EventName
```



# 20.5.3 Project 1

In project 1, a selected event is temporarily observed by a button. Outputs in the console of the Gambas IDE support the understanding of this observation:

Figure 20.5.3.1: Temporary observation of Button1.

Figure 20.5.3.2: Observation of Button1 has been switched off.


```
' Gambas class filePublichObserver1AsObserverPubliciCountAsInteger=1PublicSub_new()hObserver1=NewObserver(Button1,False)As"ObservedButton1"EndPublicSubForm_Open()FMain.Resizable=FalseMovieBox1.Border=Border.NoneMovieBox1.Alignment=Align.CenterMovieBox1.Playing=TrueEndPublicSubObservedButton1_Click()IfiCount<=3ThenPrint"Der Button wurde zum "&iCount&". Mal angeklickt. Das Click-Ereignis wird jedoch verworfen!"StopEventEndifIfiCount=4ThenhObserver1=NullMovieBox1.Playing=FalseFMain.Text="Ende der Beobachtung ..."EndifInciCountEndPublicSubButton1_Click()' OriginalPrint"Der Observer für Button1 wurde nach 3 Beobachtungszyklen abgeschaltet."EndPublicSubForm_Close()IfhObserver1ThenhObserver1=NullEndPublicSubButton2_Click()FMain.CloseEnd
```

These outputs result from testing project 1:


```
Der Button wurde zum 1. Mal angeklickt. Das Click-Ereignis wird jedoch verworfen!
  Der Button wurde zum 2. Mal angeklickt. Das Click-Ereignis wird jedoch verworfen!
  Der Button wurde zum 3. Mal angeklickt. Das Click-Ereignis wird jedoch verworfen!
  Der Observer für Button1 wurde nach 3 Beobachtungszyklen abgeschaltet.
```



# 20.5.4 Project 2

In contrast to project 1, in project 2 the observation of an object is created in such a way that the observer intercepts the Button1_Click event after it has been processed. In the generatedObservedButton1_Click()event, a random number is emitted that was generated in theButton1_Click eventand stored in thehObserver1.Tagproperty.
Source code:


```
' Gambas class filePublichObserver1AsObserverPublicSub_new()hObserver1=NewObserver(Button1,True)As"ObservedButton1"EndPublicSubForm_Open()FMain.CenterFMain.Resizable=FalseMovieBox1.Alignment=Align.CenterMovieBox1.Border=Border.NoneMovieBox1.Playing=TrueEndPublicSubObservedButton1_Click()DimsMessageAsStringsMessage="Vor 0.2 Sekunden wurde die folgende Zahl im beobachteten Button1_Click-Ereignis erzeugt: "PrintsMessage; hObserver1.TagEndPublicSubButton1_Click()DimfNumberAsFloatRandomizefNumber=Rnd(-2.0,2.01)hObserver1.Tag=Round(fNumber,-2)Wait0.2EndPublicSubbtnClose_Click()IfhObserver1ThenhObserver1=NullFMain.Close()End
```

These outputs show in the console of the Gambas IDE:


```
Vor 0.2 Sekunden wurde die folgende Zahl im beobachteten Button1_Click-Ereignis erzeugt: -0,87
  Vor 0.2 Sekunden wurde die folgende Zahl im beobachteten Button1_Click-Ereignis erzeugt: 1,18
  Vor 0.2 Sekunden wurde die folgende Zahl im beobachteten Button1_Click-Ereignis erzeugt: 0,33
```



# 20.5.5 Project 3

The following special features characterise the 3rd project:
The complete project can be found in the download area. Only the relevant source code is presented here, in which the above-mentioned special features can be easily read:


```
...PublicSub_new()SetAllObservers(ME)EndPrivateSubSetAllObservers(hContainerAsContainer)DimhObjectAsObjectDimhObserverAsObserverForEachhObjectInhContainer.ChildrenhObserver=NewObserver(hObject,False)As"ObservedAll"'-- Rekursiver AbstiegIfhObjectIsContainerThenSetAllObservers(hObject)NextEndPublicSubObservedAll_Enter()SelectLast.TagCase"PB"PrintObject.Type(Last);" : ";Last.Name;" ->> Höhe = ";Last.H;"px"Case"HBOX"PrintObject.Type(Last);" : ";Last.Name;" ->> Spacing = ";Last.SpacingCase"OI"PrintObject.Type(Last);" : ";Last.Name;" ->> Text = '";Last.Text;" '"Case"PRE"PrintObject.Type(Last);" : ";Last.Name;" ->> Aktiv? = ";Last.EnabledCase"NEXT"PrintObject.Type(Last);" : ";Last.Name;" ->> Tag-Eigenschaft = ";Last.TagCase"PS"PrintObject.Type(Last);" : ";Last.Name;" ->> Expand? = ";Last.ExpandCase"CLOSE"PrintObject.Type(Last);" : ";Last.Name;" ->> Font = ";Last.Font.ToString()Case"S"PrintObject.Type(Last);" : ";Last.Name;" ->> X = ";Last.X;"px"EndSelectEnd
```

These outputs show up, for example, in the console of the Gambas IDE when you move the mouse over the controls:


```
PictureBox : PictureBoxD ->> Höhe = 360px
  HBox : HBox1 ->> Spacing = True
  Button : btnOpenFileImage ->> Text = ' Bilder auswählen '
  Button : btnPrevious ->> Aktiv? = False
  Button : btnNext ->> Tag-Eigenschaft = NEXT
  Panel : panSpace ->> Expand? = True
  Button : btnClose ->> Font = Ubuntu,11
  Separator : Separator1 ->> X = 8px
```


Figure 20.5.5.1: Project 3 -GUI


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.6.0 Task

Imagine the following situation:
In a programme, time-intensive computations are executed as a subtask in a procedure P. This means that the interpreter is bound while P is being executed. During the time P is being executed, it does not enter the event loop, which can be regarded as the interpreter's rest mode. There it waits for external events, such as a click on a button. This means - while P is being executed - that theGUIof the process is frozen!
In order to still be able to react promptly to an event, there are two possibilities:
In Gambas, tasks are also used, for example in the gb.form component, to generate a file preview. The trick is this: while the file preview is being generated in a task, the main programme can still interact with the user. It is not in a time-consuming routine and the event loop in the main program runs normally.
A task represents a copy of the parent process (fork →http://de.wikipedia.org/wiki/Fork_%28Unix%29) and runs as an independent process with its own process number completely independently of the calling parent process. Passed variables, for example, can therefore be changed independently in the task without the parent (parent) process noticing anything. Of course, the same applies in the other direction.
In this chapter, in addition to theproperties,methodsandeventsof the class Task (gb), you will be introduced to projects that show their use.


# 20.6.0.1 Properties

The Task class has three properties:
Table 20.6.0.1.1 : Properties of the class Task


# 20.6.0.2 Methods

The Task class has only two methods:


# 20.6.0.3 Events

In the Task class, these three events are declared:
Table 20.6.0.3.1 : Events of the Class Task
The event Error(Data AS String) is only triggered if data was written to the standard error output in the background process, for example with the ERROR command!
Contrary to what the event Task_Kill() suggests, the event is not triggered when the task object is destroyed, but when the task process is terminated. Terminated here means:
It is important to emphasise the difference between Task as a background process - in which the Task code is executed - and Task object, which exists in the parent Gambas process. The Task object allows you to communicate with the Task as long as the Task exists. The Task object, however, 'survives' the end of the background process so that you can still read the function value of the Main() function (data type Variant) via the Task.Value property or other properties after it ends.


# 20.6.0.4 Task as background process in Gambas

To have a task processed in the background in a task you need to:
The question of whether a task is necessarily started as a background process when a task object is created can be answered like this:


# 20.6.0.5 Task Priority

You can change the priority of a background process via the property Application.Priority (data type Integer) → chapter 20.11 Class Application (gb). The default priority has the value 0.
To increase the priority of a background process (values -1 to -20), root rights are required, which you do not need to decrease the priority (values 1 to 19).


```
' Gambas class fileInheritsTaskPublicFunctionMain()AsVariantDimaTagesListeAsString[]Application.Priority=10'-- Process priority for the taskaTagesListe=Split("Sonntag,Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag",",")ReturnaTagesListe[WeekDay(Now())]End
```



# 20.6.0.6 Interactive Process Communication

Data transfer between a task as a background process and the parent (parent) process is only uni-directional - i.e. inonedirection - in the Task (gb) class:
(A) Programme → Task
In this direction, you can give the task one-time arguments as start values. To do this, you must define public variables in the task class - here MyTask.class - in order to assign suitable (start) values to them in the programme immediately after creating the task.
MyTask.class:


```
PubliciWaitTimeAsInteger'-- Start-Argument für die Wartezeit zwischen den drei Anzeigen
```

FMain.class:


```
PrivatehTaskAsMyTaskPublicSubbtnTaskStart_Click()IfhTask=NULLthenhTask=NewMyTaskAs"MyTask"' = Task-Klassen-NamehTask.iWaitTime=3' Wertzuweisung für globale Variable in der Klasse MyTask...End
```

You can see another approach to passing arguments here:
MyTask.class:


```
PublicSub_new({Matrix}AsMatrix, RowAsInteger)$hMatrix={Matrix}$iRow=RowEnd
```

FMain.class:


```
PublicSubMain()DimiRow, iColAsIntegerDimhDeterminanteAsTaskMinors
 
  ...ForiCol=0To$hMatrix.Width-1hDeterminante=NewTaskMinors($hMatrix, iRow)As"TaskMinors"hDeterminante.Tag=iRowInc$iTasks'-- Den (internen) Zähler für die gestarteten Tasks erhöhenNext...End
```

(B) Task → Programme
The type of data transfer is determined by whether a (function) value is only returned once from the task or whether data is permanently transferred from the task to the main process (clocked, random). If you need data from the running task, you must read this data sent to the standard outputs in the event Task_Read(Data As String) or in the event Task_Error(Data As String) via the PRINT or ERROR command in the Main() method. Note: In the second case, only data of the data type String is allowed.
In the projects presented you will find the different implementations of inter-process communication (IPC).
For a permanent data transmission Task → Programme of data with native data type, Tobias Boege has developed serialisation and deserialisation functions, which are presented in a special project.


# 20.6.0.7 Project 1

The task to be worked on in project 1 does not sound spectacular: With the start of the programme, an analogue clock is to be displayed and parallel to this, the day of the week is calculated and displayed from the current date via a task. Since you need the function value of the Main() function from the task - which is its only purpose in life - once, you can read out the property Task.Value after the background process has ended.
The source code for the Task class DayTask.class is given in full, while only relevant sections of the class FMain.class are presented:


```
' Gambas class fileInheritsTaskPublicFunctionMain()AsVariantDimaTagesListeAsString[]aTagesListe=Split("Sonntag,Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag",",")ReturnaTagesListe[WeekDay(Now())]'-- Return of the day of the weekEnd
```

In this class, the day of the week is calculated from the current date and returned as a function value from the Main method.
In the programme, a task is created in the procedure TaskRun():


```
' Gambas class filePrivate$hTaskAsDayTaskPublicSubForm_Open()...'-- Creating a Task: Task Object and Task ProcessTaskRun()EndPrivateSubTaskRun()'-- Create a new task object - Object name = Object event name: DayTaskIf$hTask=NullThen$hTask=NewDayTaskAs"DayTask"RepeatWait0.001Until$hTask<>NullEndPublicSubDayTask_Kill()DimDayOfWeekAsStringDimsErrorMessageAsString'-- Save process return value. Alternative: Last.ValueTryDayOfWeek=$hTask.ValueIfNotErrorThenlblDayOfWeek.Text=DayOfWeekElsesErrorMessage="Error!"&gb.NewLinesErrorMessage&=Error.Where&gb.NewLinesErrorMessage&=Error.TextMessage.Error(sErrorMessage)lblDayOfWeek.Text="Task error"EndifEnd...
```

The analogue clock is displayed and below it the weekday calculated once in the task for the current date - if no error occurred in the task:

Figure 20.6.0.7.1: Display of time and weekday
You can create an error quite easily by using a semicolon instead of the correct separator comma, for example:


```
aTagesListe = Split("Sonntag,Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag", ";")
```

The display changes in the lower part because in the procedure 'Public Sub DayTask_Kill()' the error is detected and documented:

Figure 20.6.0.7.2: Display of time and error message
You can see very clearly again in the last case that with the creation of the task after the fork into two independent processes, the clock runs completely independent of the task and its return value.


# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.6.1 Task-Project 2

Project 2 is based on the following task: calculating the adjoints of a (square) matrix via Laplace's evolution theorem.
This solution idea was developed: When calculating the adjoints of a matrix - as transpose of the co-factor matrix - a large number of sub-determinants (minors) must be calculated, which generally have nothing to do with each other. The task is broken down into n subtasks for calculating sub-determinants.
This proposal for implementation arose from the solution idea:


```
Public Function Main() As Variant
'-- Calculate array of sub-determinants...
    Return aFloatArray
End
```

The following specifications apply:
The source texts for the task class and the main programme are given in full. The above solution idea is implemented in them. First, the content of the task class is presented - stored in the file TaskMinors.class:


```
' Gambas class file'-- This class calculates the minors of the specified matrix when the specified row has been deleted.'-- The function value is an appropriately sized float array of the individual determinants.InheritsTaskPropertyTagAsVariantPrivate$hMatrixAsMatrixPrivate$vTagAsVariantPrivate$iRowAsIntegerPublicSub_new({Matrix}AsMatrix, RowAsInteger)$hMatrix={Matrix}$iRow=RowEnd' _new(..)PublicFunctionMain()AsVariantDimhMinorAsNewMatrix($hMatrix.Width-1, $hMatrix.Width-1)DimiRemCol, iSrcRow, iSrcCol, iDstRow, iDstColAsIntegerDimaFloatArrayAsNewFloat[]ForiRemCol=0TohMinor.Width'-- Untermatrix aufbaueniDstRow=0ForiSrcRow=0TohMinor.HeightIfiSrcRow=$iRowThenContinueiDstCol=0ForiSrcCol=0TohMinor.WidthIfiSrcCol=iRemColThenContinuehMinor[iDstRow, iDstCol]=$hMatrix[iSrcRow, iSrcCol]InciDstColNextInciDstRowNextaFloatArray.Add(hMinor.Det())NextReturnaFloatArray'-- The function value is of the data type float arrayEndPrivateFunctionTag_Read()AsVariantReturn$vTagEndPrivateSubTag_Write(ValueAsVariant)$vTag=ValueEnd
```

File MMain.module:


```
' Gambas module file' -- Dimension of a random square matrix (d > 1)ConstDimensionAsInteger=15'-- Maximum 30Private$hMatrixAsMatrixPrivate$hAdjugateAsMatrixPrivate$iTasksAsIntegerPublicSubMain()DimiRow, iColAsIntegerDimhDetAsTaskMinorsDimhOtherAsMatrix'-- Create matrix of the given dimension with random elements$hMatrix=RandomMatrix()Print"Matrix:";; $hMatrix.ToString()$hAdjugate=NewMatrix($hMatrix.Width, $hMatrix.Height)$iTasks=0ForiRow=0To$hMatrix.Height–1'-- k task are createdForiCol=0To$hMatrix.Width-1'-- Calculate all minors when deleting row iRowhDet=NewTaskMinors($hMatrix, iRow)As"TaskMinors"hDet.Tag=iRowInc$iTasks'-- Counts the started tasksNext'-- The tasks are started after their instantiation at the next call of the event loop. So that'-- not to start them all at once, let each individual task start via WAIT.WaitNext'-- Wait for the calculation of the adjoints (-->> Minor_Kill())While$iTasks'-- As long as calculations are still being made ...Wait0.001'-- ...wait 0.001 secondsWendPrint"Adjunkte adj(A):";; $hAdjugate.ToString()'-- Display adjunctsEndPublicSubTaskMinors_Kill()DimiRow, iColAsIntegerDimaDetAsFloat[]=Last.ValueiRow=Last.TagForiCol=0ToaDet.Max'-- The adjoints is the transpose of the co-factor matrix.$hAdjugate[iCol, iRow]=IIf(Even(iRow+iCol),1,-1)*aDet[iCol]NextDec$iTasks'-- Decrease the number of tasks by 1EndPublicFunctionRandomMatrix()AsMatrixDimhMatrixAsNewMatrix(Dimension, Dimension,False)DimiRow, iColAsIntegerForiRow=0TohMatrix.Height-2hMatrix[iRow,0]=Rnd(0, hMatrix.Height+1)ForiCol=1TohMatrix.Width-1hMatrix[iRow, iCol]=IIf(iRow=iCol, iRow+1, hMatrix.Height)NextNextForiCol=0TohMatrix.Width-1hMatrix[hMatrix.Height-1, iCol]=Rnd(0, hMatrix.Width+1)NextReturnhMatrix'-- Provide matrix with random elementsEnd
```

This was output to the IDE console for a calculation with dimension 3:
Matrix:


```
[[0.13973 | 3 | 3] ; [0.60071 | 2 | 3] ; [2.73226 | 0.28943 | 2.89609]]
```

Adjunkte adj(A):


```
[[4.92387 | -7.81996 | 3] ; [6.45708 | -7.79211 | 1.38293] ; [-5.29066 | 8.15636 | -1.52266]]
```

Note that with matrices of higher dimension (>10) rounding errors already have a very strong effect on the result. The identity adj(A) = det(A)∙A^(-1) provides a more precise calculation of the adjoints.


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.7 Classes Align and Arrange (gb.qt4)

You will use these two classes for the arrangement of components in a container or for the alignment of, for example, text in a text box or an image in a picture box.


# 20.7.1 Class Align

This static class provides constants and 6 methods that are used to specify the alignment of objects or text, provided they have the Alignment property. The Draw.Text method also uses the constants of the Align class.


# 20.7.1.1 Alignment of visible objects

To specify the alignment of visible objects, knowledge of the direction matrix is as necessary as the associated constants for the designated directions:
Table 20.7.1.1: Direction matrix - constants for the Alignment property.


# 20.7.1.2 Alignment of text

If you use the alignment of text, for example, with the editor TextEdit to specify the alignment of text, note the dependence on the writing direction of the language used:
Table 20.7.1.2.1: Alignment of text according to writing direction


# 20.7.1.3 Set and read the values of the Alignment property

All property values from the upper tables can be set or read out using the 6 methods IsBottom, IsCenter, IsLeft, IsMiddle, IsRight and IsTop, as shown in Example 1:


```
PublicSubbtnSetCenter_Click()IfNotAlign.IsCenter(PictureBox1.Alignment)ThenPictureBox1.Alignment=Align.CenterEndifEnd
```

Example 2
This is how you set the text alignment of a text box - analogously also of a MaskBox - and a textarea:


```
...TextBox1.Text="Ausrichtung"TextBox1.Alignment=Align.RightTextArea1.Alignment=Align.Normal...
```

If, on the other hand, you want to align the current paragraph or the selected text in the TextEdit editor, set the property TextEdit.Format.Alignment with the 4 alignments Normal, Left, Center and Right :


```
PublicSubbtnSetProperty_Click()TextEdit1.Format.Alignment=Align.CenterTextEdit1.Format.Color=Color.RedTextEdit1.Format.Background=Color.LightGrayTextEdit1.Format.Font=Font["FreeMono,14"]End
```



# 20.7.2 Class Arrange

This class is static. It provides constants that can be used to set the Arrange property of many components if they have the Arrange property. Only components that act as containers for other components such as Shape, Panel, Expander, DrawingArea1 or TabStrip have the Arrangement property. The arrangement of components must always be specified relative to the container.
Table 20.7.2.1: Constants for the Arrangement Property


# 20.7.2.1 Setting and Reading the Values of the Arrangement Property

You can use the values specified in Table 20.7.2.1 to arrange components in a container. When arranging components in a container, you can make further adjustments using the container properties Spacing and Padding:
Example 1
Three buttons are added to a Panel1. The following properties are set:
Figure 20.7.2.1.1: Design (Panel1 at design time).
Figure 20.7.2.1.2: Horizontal (Panel1. Arrangement = 1)
Figure 20.7.2.1.3: Row (Panel1. Arrangement = 3 (Row))
If you reduce another container with the three buttons instead of a panel - a window is very suitable - then you can easily see the effect of creating a new column. With the assignment Panel1. Arrangement = Arrange.Row you get the arrangement in Figure 20.7.1.3.
Example 2
An HSplit component is placed on the form FMain. With the instruction


```
FMain.Arrangement=Arrange.Fill
```

the HSplit component completely fills the space in the container form.


# Download

Chapter
download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.8 Class Stock

The Stock class allows you to access icons from the Gambas inventory in predefined image sizes in units of pixels. The square icon sizes are 16 (small), 22 (medium), 32 (large), 48 (huge), 64, 96 and 128. You can assign an icon - as small images with an icon - to the following components:


```
Button, ButtonBox, CheckBox, ColorButton, ColorChooser, ColumnView, ComboBox, Container, Control,
DateBox, DateChooser, Dial, DirChooser, DirView, DrawingArea, Editor, Embedder, Expander, FileChooser,
FileView, FontChooser, Form, Frame, GridView, HBox, HPanel, HSplit, IconPanel, IconView, LCDNumber,
Label, ListBox, ListContainer, ListView, MaskBox, MenuButton, MovieBox, Panel, PictureBox, ProgressBar,
RadioButton, ScrollArea, ScrollBar, ScrollView, Separator, SidePanel, Slider, SpinBox, TabPanel,
TabStrip, TableView, TextArea, TextBox, TextEdit, TextLabel, ToggleButton, ToolButton, ToolPanel,
TrayIcon, TreeView, UserContainer, UserControl, VBox, VPanel, VSplit, ValueBox, Window, Wizard,
_IconPanelContainer, _TabPanelContainer, _WizardContainer
```

The assignment is done either at development time in the IDE in the properties window or at runtime of the programme. Then you have to code the corresponding instructions.


# 20.8.1 Assigning an icon for a component in the IDE

After you have placed a component on the form, you can assign an icon to that component. If a component is selected, then you will see essential properties of the component in the Properties window. Look for the property Picture and not - as you would assume - for Icon. First click in the empty input box and then on the small three dots that appear. A picture selection dialogue opens. First select the stock tab, then the appropriate size for the icon and finally the icon. Close the dialogue with 'OK'.

Figure 20.8.1.1: Icon Selection Dialogue
In the properties window you will see the following entry:

Figure 20.8.1.2: Icon selection dialogue box


# 20.8.2 Determining icon names from the Gambas inventory

If you want to code the instructions to assign an icon to a component, then you need the name of the small image with an icon. You determine these names of the individual icons from the inventory of Gambas in a small project - including the display of the icons - with a few lines of code after you have positioned the IconView component on the form:


```
' Gambas class filePublicSubForm_Open()FMain.Height=272FMain.Width=664FMain.Center()FMain.Resizable=TrueFMain.Arrangement=Arrange.FillDisplayIcons()EndPrivateSubDisplayIcons()DimsIconKey, sIconNameAsStringIconView.Clear()ForEachsIconKeyInStock.Icons'-- Up to version GB 3.2 for the property Stock.Icons → Set Stock.ListsIconName="icon:/32/"&sIconKeyIconView.Add(sIconKey, sIconKey,Picture[sIconName])NextEnd
```

After starting the programme, you will see the icons and find out the corresponding name, which is not always obvious from the icon, as the picture with the exclamation mark shows:

Figure 20.8.2.1: IconView with icon from the Gambas inventory
Note: Under Ubuntu, the display of icons in components is switched off (default) on the grounds that they would only disturb the user. To see the icons, you have to execute the following command in a terminal, then the colourful world of icons - not only in menus - is back in order:
ALT+F2 —> terminal window:


```
gconftool --type=bool --set /desktop/gnome/interface/menus_have_icons 1
gconftool --type=bool --set /desktop/gnome/interface/buttons_have_icons 1
```



# 20.8.3 Assigning an icon for a component - project

After you know the names of the icons, you can also code the assignment of the small pictures with an icon in the source code of a project. This becomes necessary if, for example, you want to change the icons depending on certain programme states. You should have a look at the two examples in the help of Gambas athttp://gambasdoc.org/help/comp/gb.form/stock?v3under this aspect!
In the presented project SVN many pictures are used. On the one hand there are icons from the inventory of Gambas and on the other hand there is a larger image that was saved in a special project folder. Two components are already assigned icons at development time - here they are buttons. A description of this can be found in chapter 20.8.2. The assignments of the other images are coded. If a component has been deactivated, you will only see the icon in the unit colour grey. The icons all have the same size 16px. However, you can also use the constant small in the source code instead of the numerical value 16. The unit px is not used.

Figure 20.8.3.1: Form at development time
In the following excerpt, only the source code of the event-handling routine Form_Open() is shown because it contains all the relevant instructions - highlighted in yellow:


```
PublicSubForm_Open()FMain.CenterFMain.Resizable=FalsePictureBox1.Picture=Picture["IconLast/new-logo.png"]' Logo GB2btnUpdateStart.Picture=Picture["icon:/16/play"]btnReconfUpdate.Picture=Picture["icon:/16/revert"]btnConfigureUpdate.Picture=Picture["icon:/16/tools"]btnClose.Picture=Picture["icon:/small/quit"]' small = 16pxSVNSettings=NewSettingsiSVNLastRevision=SVNSettings["Revision/LastRevision",0]InstallSubversion()sSVNPfad=User.Home&/"gb3_trunk"IfNotExist(sSVNPfad)ThenTryMkdirsSVNPfadIfError=TrueThenMessage.Error("Fehler beim Anlegen des Ordners"&sSVNPfad)ReturnEndifEndifbtnReconfUpdate.Enabled=FalsebtnConfigureUpdate.Enabled=FalsebtnMakeUpdate.Enabled=FalsebtnMakeInstallUpdate.Enabled=FalseEnd
```

After installing the latest revision of Gambas, all buttons have been activated and all icons show their coloured side:

Figure 20.8.3.2: Form at runtime
If you do not find any icons with suitable symbols in the Gambas inventory, then you can


# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.9 Select

The Select (gb.qt4) class provides three constants (→ Table 20.9.1.1) for specifying the mode properties of many components. These components include:
ColumnView, DateBox, DateChooser, FileView, GridView, IconView, LCDNumber, ListBox, ListView, Stat, TableView, TreeViewand_TreeView.


# 20.9.1 Constants

Table 20.9.1.1: Constants of the Select Class


# 20.9.2 Project

In the project presented, two constants (Select.Single and Select.Multiple) are used to specify the file selection options in the FileView component:

Figure 20.9.2.1: Mode: Select.Single

Figure 20.9.2.2: Mode: Select.Multiple
Notes:
The source code is manageable and is therefore given in full:


```
' Gambas class filePrivatemyStatusbarAsStatusbarPublicSubForm_Open()FMain.Center()FMain.Resizable=FalseDirView1.Root=User.HometxbDirectory.Text=DirView1.CurrenttxbFile.Clear()Timer1.Delay=1000Timer1.Start()myStatusbar=NewStatusbar(Me)myStatusbar.Add(0.3,Format$(Now,"dddd, dd/mm/yyyy hh:nn:ss"))'-- 0.3 → 30% of the StatusBar widthmyStatusBar.SetBackground(0,&HEFFFDF)myStatusBar.SetForeground(0,&H000000)myStatusbar.SetToolTip(0,"Datum&Zeit")myStatusbar.SetAlignment(0, Align.Center)myStatusbar.Add(0.3,"Select-Mode:   Select.Single")'-- Start settingmyStatusBar.SetBackground(1,&HFFFFDF)myStatusbar.SetAlignment(1, Align.Center)' -- The field length is automatically set at the last field → enter 0myStatusbar.Add(0,"Program version = "&Application.Version)myStatusBar.SetBackground(2,&HEFFFDF)myStatusbar.SetAlignment(2, Align.Center)btnFileSelectMode.Picture=Picture["Symbols/multiple.png"]btnFileSelectMode.Value=FalseEndPublicSubTimer1_Timer()'-- Timer1_Timer() : Show current time in panel 0 of the StatusBarmyStatusbar.SetText(0,Format$(Now,"dddd, dd/mm/yyyy hh:nn:ss"))EndPublicSubDirView1_Select()FileView1.Dir=DirView1.CurrenttxbDirectory.Text=DirView1.CurrenttxbFile.Clear()FileView1.Mode=Select.MultiplelblFile.Text="File list: "txbFile.ClearEndPublicSubFileView1_Click()DimsElementAsStringtxbFile.CleartxbFile.Text="| "IfFileView1.Mode=Select.SingleThentxbFile.Text=DirView1.Current&/FileView1.CurrentElseForEachsElementInFileView1.Selection'-- FileView1.Selection = Array with the selected filestxbFile.Text&=sElement&" | "NextEndifEndPublicSubbtnFileSelectMode_Click()IfbtnFileSelectMode.Value=TrueThen'-- If True, then Select.Multiple is activebtnFileSelectMode.Picture=Picture["Symbols/single.png"]btnFileSelectMode.Tooltip="Switch to select mode 'Single'"FileView1.Mode=Select.MultiplelblFile.Text="File list: "txbFile.Clear()myStatusbar.SetText(1,"Select-Mode:   Select.Multiple")ElsebtnFileSelectMode.Picture=Picture["Symbols/multiple.png"]btnFileSelectMode.Tooltip="Switch to Select mode 'Multiple'"FileView1.Mode=Select.SinglelblFile.Text="File path: "IfFileView1.Selection.Count>0ThentxbFile.Text=DirView1.Current&/FileView1.Selection[0]EndifmyStatusbar.SetText(1,"Select-Mode:   Select.Single")EndifEndPublicSubbtnClose_Click()FMain.Close()End' btnClose_Click()PublicSubForm_Close()myStatusBar.Delete()End
```



# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.10 Watcher

This class provides a property and several events. It implements an object that can watch a passed component and raises some events when something happens to the watched object. Knowing what events are raised is useful when a component or container is moved, changed, displayed or hidden.
Minisini said on the subject of 'Watcher' that the Watcher class was developed well before the Observer (→ Chapter 20.18 Observer) and the latter class is therefore preferable. He emphasised that a Watcher object for a Form object would be nonsense because a Form already has Show(), Hide(), Move() and Resize() events because they are useful for windows, but not for buttons, for example. For example, a tray icon already has a Hide() and Show() event in the list of its properties and a Watcher object is therefore dispensable.


# 20.10.1 Property

The Watcher class has only one property. The propertyWatcher.Controlof type Control returns the name of the watched component withWatcher.Control.Name.


# 20.10.2 Events

The Watcher class has four events, the description of which can be found in the next table:
Table 20.10.2.1 : Events of the Watcher class


# 20.10.3 Project

The project shows the use of the four events and the property of the Watcher class and has more historical value, because for real projects you would resort to the Observer class.


```
' Gambas class filePrivatewWatcherObject1AsWatcherPrivateiBusyAsIntegerPrivatesControlNameAsStringPublicSubForm_Open()FMain.Center()FMain.Resizable=TruewWatcherObject1=NewWatcher(FMain)As"wWatcher"sControlName="'"&wWatcherObject1.Control.Name&"'"EndPublicSubwWatcher_Show()Message.Info("The main window "&sControlName&" is displayed!")StopEventEndPublicSubwWatcher_Hide()Message.Info("The main window "&sControlName&" has been hidden!"))StopEventEndPublicSubwWatcher_Resize()InciBusyIfiBusy=1ThenMessage.Info("The main window "&sControlName&" has changed its size!")DeciBusyStopEventEndPublicSubwWatcher_Move()InciBusyIfiBusy=1ThenMessage.Info("The main window "&sControlName&" has changed its position!")DeciBusyStopEventEndPublicSubbtnFormMove_Click()FMain.X=FMain.X+100EndPublicSubbtnFormResize_Click()FMain.H+=50FMain.W+=(1.333*50)EndPublicSubbtnFormMin_Click()IfFMain.VisibleThenFMain.Minimized=TrueEndPublicSubbtnFormMax_Click()FMain.Maximized=TrueEndPublicSubbtnClose_Click()FMain.CloseEnd
```


Figure 20.10.3.1: Project: Demonstration Watcher
Notes:
You can find the complete Project 'Watcher' in the download area.


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.11.0 Application

This Application (gb.gb) class provides information about the current process and the Gambas project running in that process.
The description of the propertyApplication.Argsunder application aspects can be found in chapter → 5.8.1.1 Class Args in connection with options and arguments in Gambas programmes.
The class Application (gb) supplements the possibilities to read system information, which you can access via properties of the class System (gb) or the class of the same nameApplication (gb.qt4).


# 20.11.0.1 Properties

The Application (gb) class has these (static) properties, among others:
Table 20.11.0.1.1 : Essential properties of the class gb.application


# 20.11.0.2 Property Application.Daemon

Set the Application.Daemon property to True to make the current process a daemon. To become a daemon:
Once you set the property to True, you can't undo that and set the property to False. The temporary directory - in Gambas each process has a working directory in /tmp/gambas.<UID>/<PID>/ - is renamed because the Process Identifier (PID) changes when it is split. Since a daemon works in the background and periodically, while a process that has aGUIshould remain in the foreground and work (user) interactively, the two approaches are mutually exclusive.


# 20.11.0.3 Special Event Handler

The global event handlers described in the following paragraphs must be defined as static methods in the startup class to be considered by the interpreter.
→ Application_Error()
This event handler is called when an error occurs in the Gambas program that was not handled by a CATCH, TRY or FINALLY statement. It can be of use if, for example, a programme needs to bring a used resource into a defined state or to rescue data because the programme crashes unexpectedly. An example would be the IDE, which uses this method to save all open files when it crashes to prevent data loss.
Application_Error() is an emergency routine. The interpreter calls Application_Error() just before it exits itself due to the error. As a general rule, you should never terminate the programme yourself in Application_Error(). This method belongs to the part in the interpreter that handles a programme crash and must be able to act as such. Only the most necessary measures are to be taken by the programmer and the method should absolutely return without ME.Close or QUIT. In the event that an error occurs in the method itself, Application_Error() is not called again - the programme is terminated. You cannot access information about the error in Application_Error().
→ Application_Read()
Data is read that was sent to the standard input. If this static method was defined in the project start class, then the standard input is observed by the interpreter. The method is called each time data has been entered via the standard input. You can read the data, evaluate it and react according to the value.


# 20.11.0.4 Project

The project shows the use of Application_Read() as a special event handler. The internet radio client only plays the author's favourite station - but it does so with flying colours. So much sound for so little source code is quite remarkable:


```
' Gambas module filePublicmPlayerAsNewMediaPlayerPublicSubMain()IfmPlayerThenmPlayer=NullStart()EndPublicSubStart()mPlayer=NewMediaPlayer
  mPlayer.URL="http://mp3channels.webradio.rockantenne.de/classic-perlen"mPlayer.Play()IfmPlayer.Audio.Mute=TrueThenmPlayer.Audio.Mute=FalseFadeIn()EndPublicSubApplication_Read()'-- In a module *without* the keyword STATICDimsStandardInputAsStringLineInput#File.In, sStandardInputSelectCasesStandardInputCase"q"FadeOut()mPlayer.PausePrint"Goodbye ... "QuitCase"p"mPlayer.PauseCase"r"mPlayer.PlayCase"m"mPlayer.Audio.Mute=NotmPlayer.Audio.MuteCase"+"IfmPlayer.Audio.Volume<9.4ThenmPlayer.Audio.Volume+=0.5EndifPrint"Volume = ";Round(mPlayer.Audio.Volume,-1)Case"-"IfmPlayer.Audio.Volume>0.6mPlayer.Audio.Volume-=0.5EndifPrint"Volume = ";Round(mPlayer.Audio.Volume,-1)EndSelectEndPublicSubFadeIn()DimfVolumeStartAsFloat=2.0mPlayer.Audio.Volume=0WhilemPlayer.Audio.Volume<fVolumeStart
    mPlayer.Audio.Volume+=0.05Print"*";Wait0.2WendPrintEndPublicSubFadeOut()WhilemPlayer.Audio.Volume>0.2mPlayer.Audio.Volume-=0.2Wait0.1WendEnd
```

You get the contrast programme on this station:


```
mPlayer.URL = "http://c22033l.i.core.cdn.streamfarm.net/22007mdrfigaro/live/3087mdr_figaro/live_de_128.mp3"
```

You start the client in the console alternatively like this:


```
hans@linux:~/Rock4Me$ gbr3 ./r4m.gambas
  hans@linux:~$ gbx3 $HOME/Rock4Me
```



# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# 20.11.1 Project Application

The project presented demonstrates the use of theApplication (gb)class and uses almost all of its properties - except forApplication.Daemonand the twospecial event handlers- in different contexts.

Figure 20.11.1.1:GUIfor the demonstration programme 'DApplication'.
There are no surprises in the source code:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]FMain.Center()[5]FMain.Resizable=False[6]FMain.Title="Use of the Application class (gb)"[7]Application.Priority=10[8]End[9][10]PublicSubbtnShowInformationsApplication_Click()[11]DimvValueAsVariant[12]DimcInformationsAsNewCollection[13][14]cInformations["PID = "]=Application.Id[15]cInformations["Start class = "]=Application.Startup.Name[16]cInformations["Titel = "]=Application.Title[17]cInformations["Project path = "]=Application.Path[18]cInformations["Directory = "]=Application.Dir[19]cInformations["Version = "]=Application.Version[20]cInformations["Priorityt [-20 (max) ... +19 (min)]  = "]=Application.Priority[21]cInformations["Number of arguments = "]=Application.Args.Count[22][23]txaOutput.Clear[24]txaOutput.Insert(gb.NewLine)[25]'-- Output information[26]ForEachvValueIncInformations[27]txaOutput.Insert(cInformations.Key&cInformations[cInformations.Key]&gb.NewLine)[28]Next[29][30]End[31][32]PublicSubbtnShowInformationsEnviroment_Click()[33]DimvEnvNameAsVariant[34]DimiAsInteger=1[35][36]txaOutput.Clear[37]txaOutput.Insert(gb.NewLine)[38]'-- Output of the environment variables[39]txaOutput.Insert("There are "&Application.Env.Count&" Environment variables.")[40]txaOutput.Insert(gb.NewLine&gb.NewLine)[41]ForEachvEnvNameInApplication.Env[42]txaOutput.Insert(Str(i)&": "&vEnvName&" = "&Application.Env[vEnvName]&gb.NewLine)[43]Inci[44]Next[45][46]End[47][48]PublicSubbtnEnvRead_Click()[49]DimsCurrentDesktopAsString[50][51]txaOutput.Clear()[52]txaOutput.Insert(gb.NewLine)[53]sCurrentDesktop=Application.Env["XDG_CURRENT_DESKTOP"][54]txaOutput.Insert("sCurrentDesktop = Application.Env[\"XDG_CURRENT_DESKTOP\"]")[55]txaOutput.Insert(gb.NewLine&gb.NewLine)[56]txaOutput.Insert("Current Desktop: "&sCurrentDesktop)[57][58]End[59][60]PublicSubbtnEnvWrite_Click()[61][62]Application.Env["GB_JIT"]="y"[63][64]txaOutput.Clear[65]txaOutput.Insert(gb.NewLine)[66]txaOutput.Insert("Die Umgebungsvariable\"GB_JIT\"wurde mit ")[67]txaOutput.Insert("Application.Env[\"GB_JIT\"] =\"y\""&" auf den Wert '")[68]txaOutput.Insert(Application.Env["GB_JIT"]&"' gesetzt!")[69][70]End
```

If you have set the environment variableGB_JIT(button at the bottom right) and then display the overview of environment variables again, you will find as the last entry in the list, for example: 40:GB_JIT = y.


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# 21.0 Process Management

This chapter introduces the Process class and the EXEC and SHELL instructions. These instructions are natively part of the Gambas vocabulary; however, they are not objects and have a syntax different from functions.
The Process class describes process management in Gambas in a narrower sense and is used to manage internal processes started by EXEC or SHELL.
Figure 21.0.1: Programme 'ping' - displaying the outputs
First, the most important properties and methods of the Process class are described and the close relationship between the Process and Stream classes is introduced. Then the syntax of the instructions EXEC and SHELL is introduced and explained. Subsequently, the use of the instructions EXEC and SHELL is described, whereby the similarities are discussed and the differences are highlighted.
Finally, several projects are presented in which the theoretical approaches presented for the SHELL and EXEC instructions are implemented:
Primarily, the use of the EXEC and SHELL instructions is for the development and testing of graphical user interfaces (GUI) for the external command-line controlled and interactive programs. But they are also very suitable for executing individual commands in the background.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# 21.1 Class Process

The Process class is used to manage processes that are started by the EXEC or SHELL instructions. When you call either instruction, the interpreter translates that into a call to a routine from a system library it is linked to. The interpreter starts a child process.
You cannotcreate an object from the Process class yourself, as is possible with other classes and the NEW instruction, for example. This can only be done by calling the EXEC and SHELL instructions. For example, you can start a process with an instruction like the following:


```
ProzessVariable = SHELL sCommand FOR READ WRITE AS "MyProcess"
```

in order to then intercept, evaluate and display the output of this process withMyProcess_ReadandMyProcess_Error, among other things, and to react to it because you started ityourself. Since the Process class is derived from the (base) Stream class, you can work with its input/output statements to read from the standard output or send data directly to the process. To read and evaluate the error output of the started process, you must use the Error event.
In addition to dynamic properties, the Process class also has static properties that are shared by all instances of the class. These are:
The dynamic properties of the Process class, specific to each object, are explained in the following table:
Table 21.1.1: Properties of the class Process
The State property indicates the state of a process. The Process class provides the following symbolic constants to reflect different process states:
Table 21.1.2: Process states - constants and numerical values
As methods for process control, the class provides you with only two usable ones:
Table 21.1.3: Methods of the class Process
A process knows the events:
Table 21.1.4: Events of the class Process


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# Table of Contents



# 21.2 Instructions SHELL and EXEC

The following sections present and explain the syntax for the two instructions SHELL and EXEC and provide comparative considerations for these instructions.


# 21.2.1 Syntax SHELL

There are two variants for the SHELL instruction - a version with many different options and a simple variant to start a process:


```
[ ProzessVariable = ] SHELL Command [WAIT] [FOR {{READ|INPUT}|{WRITE|OUTPUT}}] [AS PEventName]
```

Notes:
The following calls are correct:


```
SHELL "firefox www.gambas-buch.de"
SHELL "dmesg | grep ttyS | grep 00: > /tmp/schnittstellenliste.liste" WAIT
SHELL "dmesg | grep ttyUSB >> /tmp/schnittstellenliste.liste" WAIT

Private $hProcess As Process

aCommand = ["ping", "www.fewo-kellermann.de", "-c", "4"]
$hProcess = EXEC aCommand For Read As "myPingProcess"

aCommand = ["wget", "www.gambas-buch.de", "-O-", "--directory-prefix=" & User.Home]
$hProcess = EXEC aCommand For Read As "myProcess"

sCommand = "mysql -f -n -vvv -u root -pYourMySQLPassword4MySQLRoot"
$hProcess = SHELL sCommand For Input Output As "myProcess"
```

The 2nd syntax (quick syntax) is simple:


```
SHELL sCommand TO String-Variable#   sCommand ist ein String
```

The output of the process started in the background is stored in the (string) variable.
Attention: You have no control over the blocking executed process! If the process could not be started, then you can catch this error.


# 21.2.2 Syntax EXEC

There are also two variants for the EXEC instruction to start a process:


```
[ ProzessVariable = ] EXEC Command [WAIT] [FOR {{READ|INPUT}|{WRITE|OUTPUT}}] [AS PEventName]
```

The following calls are correct:


```
Private $hCommand As Process
$hCommand = Exec [...] For Read Write As "MyCommand"
```

Second variant of the EXEC instruction:


```
EXEC aCommand TO String-Variable#   aCommand ist ein String-Array
```

If you use the second syntax, the specified Exec command is executed and the interpreter waits for it to finish. Afterwards, the complete output of the process started in the background is written into the specified string variable. Also in this case, the following applies with all consequences: You have no control over the executed process!


# 21.2.3 Syntax extension - environment variables

You can set environment variables selected for the process to be started to new values by specifying the keyword WITH after the shell or Exec command Cmd, which is followed by an array of environment variable value pairs with Environment:


```
[Process=] EXEC Cmd WITH Environment …
[Process=] EXEC Cmd WITH Env_Array [WAIT] [FOR {{READ|INPUT}|{WRITE|OUTPUT}}] [AS PEventName]
```



```
[Process=] SHELL Cmd WITH Environment …
[Process=] SHELL Cmd WITH Env_Array [WAIT] [FOR {{READ|INPUT}|{WRITE|OUTPUT}}] [AS PEventName]
```

This call in a console :


```
hans@linux:~$LC_ALL=en_GB.utf8 gambas3
```

can be replicated in a Gambas program to use the SHELL instruction or the EXEC instruction to start Gambas 3 temporarily in the English version, for example:


```
PublicSubbtnStartGambas3EN_Click()SHELL"gambas3"With["LC_ALL=en_GB.utf8"]WaitEXEC["gambas3"]With["LC_ALL=de_DE.utf8"]Wait' Alternative: EXEC-InstruktionEnd
```



# 21.2.4 Comparative considerations of the SHELL and EXEC instructions

Whether you use the SHELL instruction or the EXEC instruction is determined primarily by the task at hand. First, differences between the SHELL and EXEC instructions are described and then similarities are highlighted. This will help you decide more confidently whether to use the SHELL instruction or the EXEC instruction to work successfully.


# 21.2.4.1 Differences SHELL - EXEC

There is a significant difference in the way the command passed (Command) is executed and in the type of command:
The advantages that are available in a shell speak for the use of the SHELL instruction:
Quoting
Starting with Gambas 3, you can use the Shell$(shell command string) function to implement a safe passing to the shell so that certain characters in the shell command string are not interpreted by the shell used - in Ubuntu this is '/bin/dash'. For EXEC, masking of selected characters is not necessary. Under the followingURLyou will find well-prepared information on quoting:http://wiki.ubuntuusers.de/Shell/Bash-Skripting-Guide_für_Anfänger .


# 21.2.4.2 Similarities SHELL - EXEC

The SHELL instruction and the EXEC instruction both start an external programme - a process is created. Essential properties, methods and events as well as selected constants of the class 'Process' have been described in chapter 21.1. In the following chapter 21.3, the use of the event handlers PEventName_Read(), PEventName_Kill() and PEventName_Error(..) are described first. In order to pass inputs to the process, corresponding procedures are presented for this purpose. These descriptions apply to the two instructions SHELL and EXEC in the same way.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# 21.3 Process Control - Process Data

You have already learned how to start a process with the SHELL or EXEC instructions. You also know the quick syntax for the two instructions, which opens a way to read data from the standard output channel of the process. Examples show the use of the quick syntax in the next chapter 21.3.1. In chapter 21.3.2, the use of the event handler
are described and procedures are presented with which you pass input to a process.
Chapters 21.3.3 to 21.3.6 present projects in which the approaches from chapter 21.3.2 are implemented.
The use of the two instructions SHELL and EXEC forms the perfect basis for developing graphical user interfaces (GUI) for interactive console programmes under Gambas.

Figure 21.3.1: The MySQL client 'mysql' - started as a process.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# 21.3.1 Using Quick-Syntax

The simplest way to read data from a process is to use the short form of the SHELL or EXEC instruction - called quick syntax:


```
SHELL sCommand TO(String-)Variable# sCommand ist ein StringEXEC  aCommand TO(String-)Variable# aCommand ist ein (String-)Array
```

If you use the quick syntax, the specified command Command is executed and the interpreter waits for it to finish! Afterwards, the complete output of the data is written into the specified (string) variable - as long as no process error (!) occurred.
Example 1:


```
PublicSubbtnExecuteInstruktion_Click()EXEC["pstree","-p"]TOTextArea.TextEnd
```

The complete output of the process tree is displayed in a TextArea. It could hardly be quicker and more elegant.
If the process could not be started - instead of pstree, for example, there is only pstre - then you receive the error message “Cannot run child process: cannot exec program …” in the IDE. You can catch such a (start) error in the programme like this:


```
PublicSubbtnExecuteInstruktion_Click()TextArea1.ClearTryExec["pstree","-p"]TOTextArea1.TextIfErrorThenMessage.Error("Error while executing the command!")ReturnEndifEnd
```

Example 2:
It is only to be checked from a Gambas programme whether the compilation of a certain Gambas project was successful or whether an error occurred during compilation:


```
PublicSubbtnExecuteInstruktion_Click()DimsOutputAsStringShell"gbc3 $HOME/color_select 2>/dev/null || echo $?"TOsOutputIfUpper(Left(sOutput,2))<>"OK"ThenMessage.Error("An error occurred during compilation!")ElseMessage.Info("The compilation was successful!")EndifEnd
```

As outputs you can expect the 'OK' from the standard output if the compilation was successful or a return value ≥ 1 in case of an error of the program 'gbc3' via the bash variable $? The standard error output was redirected into electronic nirvana in this example. If you only want to catch and display an error, dispense with the else branch.
Example 3 - Project
Example 3 presents a complete project for Quick-Syntax. The external programme is 'ping', with which you measure the signal runtimes for a certain server. Under 'man ping' or 'info ping' or 'ping -help' you will find interesting details about the console programme ping. TheURLis freely selectable. The number of pings has been fixed at 4 and cannot be changed. In the Gambas programme, the quick syntax for SHELL and EXEC has been used. An LED signals the programme status or that of the started process, in which you cannot intervene!
Figure 21.3.1.1:GUIfor the 'ping' programme
Source code:


```
' Gambas class filePrivatesProgrammNameAsString="ping"PublicSubForm_Open()FMain.CenterFMain.Resizable=FalseSetLEDColor("orange")EndPublicSubbtnPingOverShell_Click()DimsAusgabe, sCommandAsStringSetLEDColor("green")TextArea.ClearWaitFMain.Mouse=Mouse.WaitsCommand=sProgrammName&Chr(32)&TextBox1.Text&" -c 4"ShellsCommandToTextArea.TextFMain.Mouse=Mouse.DefaultSetLEDColor("orange")EndPublicSubbtnPingOverExec_Click()DimsAusgabeAsStringDimaCommandAsNewString[]SetLEDColor("green")TextArea.ClearWaitFMain.Mouse=Mouse.WaitaCommand=[sProgrammName, TextBox1.Text,"-c","4"]'-- Inline-ArrayExecaCommandTosAusgabeTextArea.Insert(gb.NewLine&sAusgabe)FMain.Mouse=Mouse.DefaultSetLEDColor("orange")EndPublicSubSetLEDColor(sLEDColorAsString)PictureBox1.Picture=Picture["LED/led_"&sLEDColor&".svg"]EndPublicSubbtnClose_Click()FMain.Close()End
```

Comments:
In the following example, on the other hand, the output is extensively processed to provide the content for a ComboBox in the main programme:


```
PUBLICSUBRS232ListeGenerieren()DIMiCountASIntegerDIMsZeile, sListeV24, sListeUSB, sASStringDIMaSchnittstellenMatrixASNEWString[]DIMaListeASNEWString[]cmbRS232PortName.Clear()'-- Delete ComboBox content'-- Ermittlung echter RS232-SchnittstellenSHELL"dmesg | grep ttyS | grep 00:"TOsListeV24IFLen(sListeV24)>0THENaSchnittstellenMatrix=Split(sListeV24," ")FOREACHsZeileINaSchnittstellenMatrixIFInStr(sZeile,"ttyS")THENcmbRS232PortName.Add("/dev/"&Trim$(sZeile))ENDIFNEXTENDIF'-- Determining the USB-RS232 adapter interfacesSHELL"dmesg | grep ttyUSB"TOsListeUSBIFLen(sListeUSB)>0THENaSchnittstellenMatrix=Split(sListeUSB,"\n")FOREACHsZeileINaSchnittstellenMatrixFORiCount=0TO7IFInStr(sZeile,"ttyUSB"&CInt(iCount))THENaListe.Add("ttyUSB"&CInt(iCount))ENDIFNEXTNEXTENDIFaListe.SortaListe=RemoveMultiple(aListe)FORiCount=0TOaListe.MaxPRINTaListe[iCount]cmbRS232PortName.Add("/dev/"&Trim$(aListe[iCount]))NEXT' iCountIFcmbRS232PortName.Count=0cmbRS232PortName.Background=Color.RGB(255,191,191)cmbRS232PortName.Add("No RS232 interface found!")ENDIFENDPUBLICFUNCTIONRemoveMultiple(aStringListeASString[])ASString[]DIMiCountASIntegerDIMiIndexASIntegerDIMsElementASStringiIndex=0WHILEiIndex<aStringListe.CountiCount=0sElement=aStringListe[iIndex]WHILEaStringListe.Find(sElement)<>-1INCiCount
      aStringListe.Remove(aStringListe.Find(sElement))WENDIFiCountMOD2=1THENaStringListe.Add(sElement, iIndex)INCiIndexENDIFWENDRETURNaStringListeEND
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# 21.3.2 Manual-Reader - Using Quick-Syntax

The following project provides a way to quickly and easily read and display data from a process. You can use either of the SHELL or EXEC instructions alternatively. The output is immediately displayed in a TextArea:


```
' Gambas class filePublicSubForm_Open()FMain.Center()FMain.Resizable=FalseEndPublicSubTextBox1_Activate()Exec["man", TextBox1.Text]ToTextArea1.Text'-- Shell "man" & " " & TextBox1.Text To TextArea1.Text '-- Alternative to EXECTextArea1.Pos=1End
```


Figure 21.3.2.1:GUIfor the 'man' programme
I'm sure you can now think of more ways to use quick syntax in your Gambas programs too!


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# Table of Contents



# 21.3.3 Project - Process Control and Process Data

In the following chapters 21.3.3 to 21.3.6 you will be presented with projects in which you will learn how to successfully use the SHELL and EXEC instructions primarily in interactive console programmes.
You will have noticed that up to now no other possibilities have been presented for reading process data or permanently transferring inputs to an active process:
Events exist to signal you that data is available, but you can neither read this data directly nor send data to the process.These tasks are taken over by a Stream object, which was already presented in Chapter 15.2, since the Process class inherits from the Stream class.Therefore, you can treat a Process object like a Stream and use its input and output functions, such as Write, Print or Read.
The use of the event handler
are described and procedures are presented with which you pass input to a process and write input (data or commands) to the standard input of a process, respectively. The core of the procedures presented will be these statements:


```
Print   #ProzessVariable   Eingabe_String   or
Write   #ProzessVariable   Eingabe_String.
```



# 21.3.3.1 Process Data Project - 'Basic Calculator'

This project is about developing the basis for a graphical user interface (GUI) for the interactive console programme 'bc'.

Figure 21.3.3.1.1: DraftGUIfor the programme 'bc' - Basic Calculator
There is at least one good reason to take a closer look at the programme 'bc':


```
hans@linux:~$echo$((22/(7+4)))2hans@linux:~$echo$((22/(7+3)))2hans@linux:~$echo"scale=15; 0.77*2+e(3.44)"|bc-ilscale=15;0.77*2+e(3.44)32.726958168309462hans@linux:~$
```

In contrast to the integer arithmetic of a console, with the programme 'bc' you can, among other things, calculate with floating point numbers, use selected mathematical functions and also store and use self-defined constants and functions.
The programme Basic Calculator is a suitable candidate for demonstrating the use of the instructions SHELL and EXEC, because it can be shown how to
The source text is displayed in full and commented on in selected sections (A) to (F):


```
' Gambas class filePrivate$hProcessAsProcessPrivatesProgrammNameAsString="bc"PrivatesStartParameterAsString="-i -l"PublicSubForm_Open()FMain.Center()FMain.Resizable=FalsetxaOutput.Clear()btnProcessKill.Enabled=FalsetxbEingabe.ReadOnly=TrueSetLEDColor("orange")End
```

(A)
The external programme is started by the instruction SHELL …. The process thus started is assigned to the process variable $hProcess and the event name is freely defined on myBCProcess.


```
PublicSubBCProcessStart()DimsCommandAsStringtxaOutput.SetFocus()txaOutput.Clear()txaOutput.Foreground=Color.Black$hProcess=NullsCommand=sProgrammName&" "&sStartParameter
  $hProcess=ShellsCommandForReadWriteAs"myBCProcess"FMain.Text="BC - Basic Calculator : PID = "&$hProcess.IdbtnBCProcessStart.Enabled=FalsebtnProcessKill.Enabled=TruetxbEingabe.ReadOnly=FalseSetLEDColor("green")End
```

(B)
Data can be read from the process in the event handler myBCProcess_Read():


```
PublicSubmyBCProcess_Read()DimsPufferAsStringtxaOutput.Insert(gb.NewLine)sPuffer=""Read#$hProcess, sPuffer,Lof($hProcess)txaOutput.Insert(sPuffer)End
```

The following alternatives are possible for 'Read #$hProcess, sPuffer, Lof($hProcess)':
Alternative 1:


```
Read #$hProcess, sPuffer, -256
```

Alternative 2:


```
While Not Eof($hProcess)
  Read #$hProcess, sPuffer, Lof($hProcess)
Wend
```

Alternative 3:


```
Read #Last, sPuffer, Lof(Last)
```

The following instruction isnotan alternative, although it is often quoted, because it does not fully read all incoming data on the standard output of the process:


```
Line Input #Last, sPuffer
Line Input #$hProcess, sPuffer
```

The instruction LINE INPUT should only be used with caution in processes. LINE INPUT returns output of the process in units of “lines”, i.e. received data remains invisible to the Gambas programme until the line is terminated. But not every programme terminates important data with a NewLine character and therefore this information cannot be read out in the Gambas programme. For example, the shell sends a command prompt to signal that it is ready to receive a new command. This prompt is usually not terminated by a NewLine, which is why the programme - if it uses LINE INPUT - cannot read this prompt. The implied readiness of the shell to continue is lost.
(C)
The event Process_Error(…) has a special feature: You do not read directly from the standard error output of the process, but get the data already in the parameter of the event handler with Process_Error(sErrorMessage As String), if data are present at the standard error output of the process. Whether you output the error message unfiltered or still provide an error handling routine to influence the programme flow depending on the displayed error is certainly determined by the task to be solved:


```
PublicSubmyBCProcess_Error(sFehlerAsString)txaOutput.CleartxaOutput.Insert(gb.NewLine)txaOutput.Insert("PROCESS FAILURE!"&gb.NewLine)txaOutput.Insert(gb.NewLine)txaOutput.Insert(sFehler)End
```

(D)
If user inputs are to be passed to the process, then you must realise this in a separate procedure. The programme 'bc' as a console programme expects arithmetic expressions and special commands in a line on the standard input of the started process. These inputs are provided in the main programme via an input box:


```
PublicSubtxbEingabe_Activate()IftxbEingabe.Text=""ThenReturntxbEingabe.Text=Trim(txbEingabe.Text)WriteToMyBCProcess(txbEingabe.Text)txbEingabe.ClearEnd
```

You must take care in a separate procedure to write the inputs for the external program 'bc' into the standard input of the started process. Since you can treat a Process object like a stream, use its output functions Print or Write after checking whether a Process object exists and whether the process is active:


```
PublicSubWriteToMyBCProcess(sInputAsString)If$hProcessThenIf$hProcess.State=$hProcess.RunningThenPrint#$hProcess, sInputEndifEndifEnd
```

(E)
If you enter the command 'quit', then the external programme Basic Calculator is terminated in a regular manner and the process object is destroyed after the process was previously terminated. The triggered event Kill activates the event handler myBCProcess_Kill(), which gives you the opportunity to react to it appropriately:


```
PublicSubmyBCProcess_Kill()txaOutput.Insert(gb.NewLine)txaOutput.Foreground=Color.RedtxaOutput.Insert("Rückgabewert von '"&sProgrammName&"' = "&$hProcess.Value&Chr(10)SelectCase$hProcess.StateCase0txaOutput.Insert("Prozess (PID= "&$hProcess.Id&") normal beendet."&gb.NewLine)Case1txaOutput.Insert("Prozess (PID= "&$hProcess.Id&") gestoppt!"&gb.NewLine)Case2txaOutput.Insert("Prozess (PID= "&$hProcess.Id&") beendet! (SIGKILL)"&gb.NewLine)EndSelectSetLEDColor("red")btnProcessKill.Enabled=FalsebtnBCProcessStart.Enabled=TrueEnd
```

You get the following output in the presented project:


```
Return value from programme 'bc' = 0
The process with the PID = 7411 was terminated normally.
```

(F)
If you close the main programme, then you should first kill the started process with the method ProcessVariableName.Kill:


```
PublicSubbtnProcessKill_Click()txaOutput.Clear()If$hProcessThen$hProcess.Kill()FMain.Text="BC - Basic Calculator"End
```

Also in this case you will get an output generated in the event handler myBCProcess_Kill():


```
Return value from programme 'bc' = 9
The process with the PID = 7458 was terminated! (SIGKILL]
```

The rest of the source code does not contain any special features:


```
PublicSubbtnClose_Click()FMain.CloseEnd' btnClose_Click()PublicSubbtnTextAreaClear_Click()txaOutput.ClearEndPublicSubbtnBCProcessStart_Click()BCProcessStart()EndPublicSubtxaOutput_Change()txaOutput.Pos=Len(txaOutput.Text)' ---> Sprung in die letzte ZeileEndPublicSubSetLEDColor(sLEDColorAsString)PictureBox1.Picture=Picture["LED/led_"&sLEDColor&".svg"]EndPublicSubForm_Close()If$hProcessThentxaOutput.SetFocustxaOutput.Clear$hProcess.KillEndif' $hProcess ?End
```

Hint:
It does not necessarily mean an error if data is output on the standard error output, i.e. the Error() event of a process is called. The programme “strace”, for example, takes all its output on stderr so that it can be distinguished from the output of the called programme by redirecting the streams. If one is only interested in the output of strace, then one can ignore everything else (>/dev/null or 2>strace.log).


# 21.3.3.2 Digression - Basic Calculator

Before you set off to develop your version from the presented approach to aGUIfor the console program 'bc', a look at the BC help files with 'man bc' or 'info bc' will help.
This lists interesting sources to learn about the features and use of the Basic Calculator program:


# download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# 21.3.4 Project - 'Ping'

The project 'ping_p' supplements the explanations in chapter 21.3.1 for example 3. While the quick syntax of the instructions SHELL and EXEC was used in the mentioned example project, now the started process is observed and data is read and displayed both from the standard output and from the standard error output of the process. Data is not passed to the process because the 'ping' programme is not an interactive programme. The active process can be terminated. This is also shown in the project.
Figure 21.3.4.1:GUIdesign for the programme 'ping' - programme terminated.
In Figure 21.3.4.1 you can see the complete data from the standard output of the process after the regular termination of the external console program 'ping' after exactly 7 pings and an inserted notification. As long as the started process is active, the incoming response data is output asynchronously one after the other:
Figure 21.3.4.2:GUIdesign for the programme 'ping' - programme at runtime
Process error outputs are detected in the presented project with the minimum set parameters already at the start of the process and output formatted in an error message:
URL:www.gambas-buch.deCount:  -4


```
PROCESS ERROR!
ping: bad number of packets to transmit.

Return value from program 'ping' = 2
The process with the PID = 3423 was terminated normally.
```

URL: www.gambas+buch.deCount: 4


```
PROCESS ERROR!
ping: unknown host www.gambas+buch.de

Return value from program 'ping' =  2
The process with the PID = 3970 was terminated normally.
```

If one terminates the started process with the method $hPing.Kill() - triggered by a click on the button with the label K - then the event Kill is recognised and handled, formatted and displayed in the event handler myPingProcess_Kill():


```
Return value from program 'ping' =  9
The process with the PID = 3984 was terminated! (SIGKILL)
```

Source code of the relevant procedures:


```
PublicSubbtnProcessKill_Click()If$hPingThen$hPing.Kill()' Alternative über System-Aufruf:' If $hPing Then Shell "kill -s 9 " & $hPing.Id' Endif ' $hPing existiert ?txaOutput.Foreground=Color.RedtxaOutput.ClearEnd' btnProcessKill_Click()PublicSubmyPingProcess_Kill()txaOutput.Insert(gb.NewLine)txaOutput.Insert("Rückgabewert '"&sProgrammName&"' =  "&$hPing.Value&gb.NewLine)SelectCase$hPing.StateCase0txaOutput.Insert("Prozess (PID = "&$hPing.Id&" ) wurde normal beendet."&gb.NewLine)Case1txaOutput.Insert("Prozess (PID = "&$hPing.Id&" ) wurde gestoppt!"&gb.NewLine)Case2txaOutput.Insert("Prozess (PID = "&$hPing.Id&" ) beendet! (SIGKILL)"&gb.NewLine)EndSelect' $hProcess.StateSetLEDColor("red")FMain.Text="PROGRAMM PING"btnProcessKill.Enabled=FalsebtnPingProcessStart.Enabled=TrueEnd' hPing_Kill()
```

The full source code can be found in the download section of the Gambas project.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# 21.3.5 Project - Console Client 'mysql'

This project also addresses the issues of 'process control' and 'process data' in the context of using the SHELL and EXEC instructions. The basis for aGUIfor the interactive console client 'mysql' is presented.
Figure 21.3.5.1: BasicGUIfor the console program 'mysql'.
You can extend the project in many ways to create yourGUIfor the console client 'mysql', based on the tasks to be processed as well as your own ideas. The following extensions would be conceivable:
In this project you can use not only the console client 'mysql', but also the console clients 'sqlite3' for SQLite3 or 'psql' for Postgres databases, if you have these clients installed.
Figure 21.3.5.2: BasicGUIfor the console programme 'sqlite3'.
In the following sections, the console client 'mysql' is used:
Figure 21.3.5.3:GUIafter starting the client 'mysql'.
After starting the external programme 'mysql' you will see the name of the external DB client and the PID of the started process as well as the welcome text of the database client in the output component. After that you work as in a normal console - with the difference that you can now edit all outputs with the Gambas programme under the above-mentioned aspects of programme extensions:
Figure 21.3.5.4: Display of a query - client 'mysql'.
Some special features characterise the presented project:

As is usual with all components, the HistoryBox was also given an icon by the authors, which you can see in the IDE in the Properties window under 'Form'. The icon must be inserted in the project directory in an invisible folder .hidden/control as an image of the type 'png' so that it can be seen in the IDE in the virtual folder 'Project'.
Figure 21.3.5.5: The DB client has been terminated
There are some programmes - like the DB clients presented - that permanently redirect their error output to the standard output. Thus, this procedure is omitted for these programmes:


```
PublicSubmyProcess_Error(sFehlerAsString)' ...End
```

The source code is given in full:


```
' Gambas class filePrivate$hProcessAsProcess'-- Private sDBClientName As String = "sqlite3"'-- Private sStartParameter As String = ""PrivatesDBClientNameAsString="mysql"PrivatesStartParameterAsString="-f -n -vvv -u root -pYourMySQLPassword4SQLRoot"PublicSubForm_Open()FMain.Center()FMain.Resizable=TrueFMain.Arrangement=Arrange.VerticaltxaOutput.Expand=TruetxaOutput.Clear()HBoxSpacing.Height=8HBox.Spacing=TrueHBox.Height=24pDynamicPanel.Expand=TruetxbHistoryEingabe.Foreground=Color.GraytxbHistoryEingabe.Alignment=Align.CentertxbHistoryEingabe.Text="*** Enter SQL statement and activate with ENTER key ***"txbHistoryEingabe.ReadOnly=TruetxbHistoryEingabe.History=NewHistory(50)SetLEDColor("orange")EndPublicSubbtnProcessStart_Click()ProcessStart()FMain.Text="Database client "&Upper(sDBClientName)&"   :   PID = "&$hProcess.IdtxbHistoryEingabe.Alignment=Align.NormalEndPublicSubbtnTextAreaClear_Click()txaOutput.Clear()txbHistoryEingabe.SetFocusEndPublicSubbtnClose_Click()FMain.Close()End'*******************************************************************************************PublicSubProcessStart()DimsCommandAsStringtxbHistoryEingabe.Foreground=Color.BlacktxbHistoryEingabe.Clear()txaOutput.Clear()sCommand=sDBClientName&Chr(32)&sStartParameter
  $hProcess=ShellsCommandForInputOutputAs"myProcess"txaOutput.Insert(gb.NewLine)txbHistoryEingabe.ReadOnly=FalsetxbHistoryEingabe.SetFocus()btnProcessStart.Enabled=FalseSetLEDColor("green")EndPublicSubmyProcess_Read()DimsPufferAsStringtxaOutput.Insert(gb.NewLine)sPuffer=""Read#$hProcess, sPuffer,Lof($hProcess)SelectsDBClientNameCase"mysql"sPuffer=Replace(sPuffer,"mysql>","System-User: "&User.Name&" # >"&gb.NewLine)Case"sqlite3"sPuffer=Replace(sPuffer,"sqlite>", gb.NewLine&"System-User: "&User.Name&" # >"&gb.NewLine)EndSelecttxaOutput.Insert(sPuffer&gb.NewLine)End'-- Public Sub myProcess_Error(sFehler As String)'--   This procedure can be omitted, since error outputs are redirected internally to the standard output both in the MySQL client'--   as well as the SQLite3 client are redirected internally to the standard output!'-- EndPublicSubmyProcess_Kill()txaOutput.Insert(gb.NewLine)txaOutput.Foreground=Color.RedtxaOutput.Insert("Rückgabewert vom Programm '"&sDBClientName&"' =  "&$hProcess.Value&gb.NewLine)SelectCase$hProcess.StateCase0txaOutput.Insert("Prozess (PID = "&$hProcess.Id&") wurde normal beendet."&gb.NewLine)Case1txaOutput.Insert("Prozess (PID = "&$hProcess.Id&") wurde gestoppt!"&gb.NewLine)Case2txaOutput.Insert("Prozess (PID = "&$hProcess.Id&") wurde beendet!"&gb.NewLine)EndSelectSetLEDColor("red")EndPublicSubWriteToMyProcess(sInputAsString)If$hProcessThenIf$hProcess.State=$hProcess.RunningThenPrint#$hProcess, sInputEndifEndifEndPublicSubtxbHistoryEingabe_Activate()IftxbHistoryEingabe.Text=""ThenReturn' -- txbHistoryEingabe.Text = Trim(txbHistoryEingabe.Text)  ---> This is done by the History Box itselfWriteToMyProcess(txbHistoryEingabe.Text)'-- txbHistoryEingabe.Clear   ---> This is done by the History Box itselfEndPublicSubtxaOutput_Change()txaOutput.Pos=Len(txaOutput.Text)' ---> Jump to the last lineEndPublicSubSetLEDColor(sLEDColorAsString)PictureBox1.Picture=Picture["LED/led_"&sLEDColor&".svg"]EndPublicSubForm_Close()If$hProcessThentxaOutput.SetFocustxaOutput.CleartxaOutput.Insert(gb.NewLine)$hProcess.Kill()Wait2EndifEnd
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Process Management



# Chapters



# 21.3.6 Project - GUI for the console program GnuPlot

A graphical user interface (GUI) for the excellent console program 'gnuplot' in the context of using the SHELL and EXEC instructions is presented.
Figure 21.3.6.1:GUIfor the console programme 'gnuplot'.
The project is fully developed and oriented towards solving the task of how to develop and code a graphical user interface for a (console) program in Gambas.
The following requirements are implemented:
If the console programme 'gnuplot' is installed, then after a click on the button 'Start GNUPLOT' a process is started and the start script is processed. This results in this graphical representation for the start example:
Figure 21.3.6.2: Console programme 'gnuplot' in a separate window
You can then write and save your own GnuPlot scripts or edit and modify saved scripts. Also have a look at the supplied collection of GnuPlot scripts in the GnuPlot project to get ideas for your own GnuPlot graphics.Interesting is the solution of the subtask to install the console program 'gnuplot', which is not one of the standard programs of every Linux distribution. The basic idea of the solution is to start a programme that tests whether the programme 'gnuplot' is installed. If the test is positive, the start programme is terminated and the graphical user interface (GUI) starts immediately. In the other case, it offers to install the missing programme 'gnuplot':
Illustration 21.3.6.3: Option: Installation of 'gnuplot'
If you decide to install 'gnuplot', you still have to enter the required password and the installation will be started:
Figure 21.3.6.4: Installation of 'gnuplot'.
After successful installation, theGUI→ Figure 21.3.6.1 opens and you can work. The source code for the start programme is given in full and then briefly commented:


```
[1]' Gambas class file[2][3]PrivatesProgrammNameAsString[4][5]PublicSubForm_Open()[6]DimsTextAsString[7][8]FStart.Center[9]FStart.Resizable=False[10]FStart.Caption="+ + + +   ATTENTION!   + + + +"[11][12]' sPaketName = Lower("gnuplot") ' Option[13]sProgrammName=Lower("gnuplot")[14][15]IfCheckProgram(sProgrammName)=TrueThen[16]Start()[17]Else[18]sText="<center>The application '"&Application.Name&"' requires the program '"&\[19]sProgrammName&"',<br>"[20]sText&="um Kurven und Flächen abzubilden!<br><br>"[21]sText&="<font color='red'>"[22]sText&="The application '"&sProgrammName&"' is <u>not</u> installed."[23]sText&="</font></center>"[24]txlHinweis.Text=sText[25]Endif[26][27]End[28][29]PublicSubbtnInstall_Click()[30]DimsShellCommand, sMessageAsString[31][32]IfGetTerminalList().Count>0Then[33]sShellCommand="echo 'Installation "&sProgrammName&" ';"[34]sShellCommand&="echo '---------------------------';"[35]sShellCommand&="sudo apt-get install "&sProgrammName[36]GoToTerminal(GetTerminalList()[0], sShellCommand)[37]Start()[38]Else[39]sMessage="No terminal programme was found!<br>"[40]sMessage&="The mapping of curves and surfaces is not possible!<br><br>"[41]sMessage&="The program "&Application.Name&" will be terminated!"[42]Message.Warning(sMessage)[43]FStart.Close()[44]Endif[45]End[46][47]PublicSubbtnCancel_Click()[48]DimsMessageAsString[49][50]sMessage="<font color='red'>"[51]sMessage&="The Application '"&Application.Name&"' will be terminated!"[52]sMessage&="</font></center>"[53]Message.Warning(sMessage)[54]FStart.Close()[55]End[56]'*************************************************************************************[57]PublicSubStart()[58]FStart.Delete()'-- Start program[59]FMain.Show()'-- GUI[60]End[61][62]PrivateFunctionGetTerminalList()AsString[][63]DimhWhichAsProcess[64]DimaCurrentTerminalList, aTerminalsAsString[][65]DimsTerminalAsString[66][67]aCurrentTerminalList=NewString[][68]'                Ubuntu            Kubuntu    Xubuntu           Lubuntu       XSystem[69]aTerminals=["gnome-terminal","konsole","xfce4-terminal","lxterminal","xterm"][70]ForEachsTerminalInaTerminals[71]hWhich=Exec["which", sTerminal]WaitForRead[72]IfhWhich.Value=0Then' Terminal-Programm gefunden[73]aCurrentTerminalList.Add(sTerminal)[74]Endif[75]Next[76][77]ReturnaCurrentTerminalList[78][79]End[80][81]PrivateFunctionCheckProgram(sProgramAsString)AsBoolean[82]DimhWhichAsProcess[83][84]sProgrammName=Lower(sProgram)[85]hWhich=Exec["which", sProgrammName]WaitForRead[86]IfhWhich.Value=0ThenReturnTrue'-- 0 = The specified program is installed[87][88]End[89][90]PublicSubGoToTerminal(sTerminalAsString, sCommandLineAsString)[91]DimsShellCommandAsString[92][93]sShellCommand="echo; sudo -k; "'-- The password input is forced![94]sShellCommand&=sCommandLine[95]sShellCommand&="; echo; echo 'Continue with ENTER or CTRL+C !'; read dummy"[96]File.Save("/tmp/command.sh", sShellCommand)[97]Exec["chmod","+x","/tmp/command.sh"][98][99]SelectCaseLower(sTerminal)[100]Case"gnome-terminal"[101]ShellsTerminal&" --geometry 77x12+100+100 -t 'ROOT-TERMINAL' -e "&"'/tmp/command.sh'"Wait[102]Case"konsole"[103]ShellsTerminal&" --geometry 75x10+100+100 -t 'ROOT-TERMINAL' -e "&"'/tmp/command.sh'"Wait[104]Case"xfce4-terminal"[105]ShellsTerminal&" --geometry 75x10+100+100 -T 'ROOT-TERMINAL' -e "&"'/tmp/command.sh'"Wait[106]Case"lxterminal"[107]ShellsTerminal&" --geometry 75x10+100+100 -T 'ROOT-TERMINAL' -e "&"'/tmp/command.sh'"Wait[108]Case"xterm"[109]ShellsTerminal&" -bg blue -fg white -cr gray -b 15 -bc -u8 -geometry 75x11+100+100\[110]           -title 'ROOT-TERMINAL' -e "&"'/tmp/command.sh'"Wait[111]EndSelect' sTerminal[112][113]End
```

Comments:
Note:
TheGUI- like all the example programmes in this chapter 21 - starts a process that is accessed read and write. This becomes clear in the following source code excerpt. A special feature characterises the process hGnuPlot started here, as all data output by the process (data or error messages) can only be read via channel 2:


```
PublichGnuPlotAsProcess'-- hGnuPlot is a process variable (for the SHELL command, among others)...PrivateSubGnuPlotStart()GnuPlotStop
  hGnuPlot=Shell"gnuplot"ForReadWriteAs"hGnuPlot"IfNotIsNull(hGnuPlot)ThenIfhGnuPlot.State=hGnuPlot.RunningThenPrint#hGnuPlot, txaPlotCode.TextbtnGnuPlotStop.Enabled=TruebtnRedrawGraph.Enabled=TruebtnOpenScriptFile.Enabled=TrueEndifEndifEndPrivateSubGnuPlotStop()IfNotIsNull(hGnuPlot)ThenIfhGnuPlot.State=hGnuPlot.RunningThenPrint#hGnuPlot,"q"' q = quitbtnGnuPlotStop.Enabled=FalsebtnRedrawGraph.Enabled=FalseEndifEndif'-- Alternative: System-Aufruf:'-- IF NOT IsNull(hGnuPlot) THEN'--    IF hGnuPlot.State = 1 THEN SHELL "kill -s 9 " & hGnuPlot.Id'-- ENDIFEndPublicSubhGnuplot_Error(sError_OR_ResultAsString)txaPlotCode.Height=160txaErrorAndFit.Background=Color.RGB(255,223,223)txaErrorAndFit.Visible=TruetxaErrorAndFit.SetFocus' Channel 2 is used for *all* GnuPlot outputs!IfInStr(sError_OR_Result,"Iteration 0")<>0ThensError_OR_Result=gb.NewLine&"|====   RESULTATE   ==========================================|"&sError_OR_Result
     btnResultSave.Visible=TrueEndiftxaErrorAndFit.Text&=sError_OR_Result'-- Alternative:  txaErrorAndFit.Insert(sError_OR_Result)Error.Clear()EndPublicSubhGnuplot_Read()'-- *No* data arrives here at gnuplot.'-- Only via channel 2 (standard error output) *all* output comes from GnuPlot!End
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Databases



# Chapters



# 22.0 Databases

Gambas supports access to various databases (DB) and database servers such as MySQL and PostgreSQL as well as the SQLite-C library. Access via ODBC also exists.
The installation and configuration of the database servers for PostgreSQL and MySQL are described in two digressions. This includes a description of working on the console with a DB client using the structured query language for databases (SQL). For your work as a programmer, this means a mediating role in the interaction between DB administrator and DB user.
Establishing a connection between DB client and DB server is part of the chapter. With the Create, Edit and Find methods, with which a DB-Result object can be created, Gambas offers everything necessary to communicate with a database and thus abstracts the differences between the individual SQL dialects. This allows you to communicate with the database regardless of the database type. The Exec method, with which you can send SQL statements directly to the database server, is also described.
Accessing a database and the DB tables is easy because Gambas provides a series of controls for a DB client, which you arrange in a form. You will find the database controls in the 'Data' section of the toolbox. With the DataBrowser - within the DataSoures control - you can browse within a database table. The element also allows you to add and delete data records. For this purpose, it provides a toolbar with buttons for navigating in the data records, creating and deleting as well as saving data records. The DataView element displays selected DB data in tabular form, while DataControl provides an element for reading and writing the content of a field in a table:

Figure 22.0.1: Database controls
Databases are generally intended for data storage in multi-user environments and for mass data. You must always test whether you can write high-performance applications for mass data with the bound DB controls.
The topic of 'data modelling' in connection with normalisation is only dealt with as an example in the DB projects presented; the same applies to 'referential integrity'. Concepts for database design are not covered in this chapter.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.0 Multimedia


Figure 23.0.1: Image display in a PictureBox


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.0 Network and communication

Chapter 24 gives you an overview of the possibilities of Gambas to connect to the outside world via interfaces in the programs. The main load is the Socket class, because it can be used to implement clients that can offer all traditional services on the network. In this chapter you will gain an insight into the RFCs on which these services are based and learn in selected projects how to develop web clients and test them in the local network.
Figure 24.0.1:DNSclient (resolver)
Even if only a few computers still have a real serial RS232 interface (V24), this interface is often used in technology. Some of the projects presented use the V24 interface for measurement and control tasks via an RS232 USB adapter. The parallel (Centronics) interface and the D-Bus are also included in some sections. The installation and configuration of a web server is described in detail in an excursion so that you can test the presented projects - including the CGI section - locally on your computer. You can display geographical maps using the gb.map component. Among other things, you will learn how to convert texts in MarkDown syntax toHTMLand how to develop and maintain your own wiki. You generate Web pages using CGI and the WebPage class. By using the WebView component, you can display Web pages comfortably in your own programs.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.1.0 Network Components

You should read the pages athttp://gambaswiki.org/wiki/doc/networkcarefully. They contain a lot of information for the use of the different components and their classes as well as the source codes for some servers and clients.
If you want to test clients that connect to a server on the Internet, it makes sense to test whether the clients can access the Internet. In your projects you can use the following well-commented procedure CheckNetwork() for a test:


```
[1]PublicSubCheckNetwork()[2]DimsResponseAsString[3]DimsIPAddressAsString[4]DimsErrTextAsString[5][6]'Check connection to router by trying to obtain the IP address of the gateway[7]'Test der Verbindung mit dem Router durch Ermittlung der Gateway IP-Adresse[8]Shell("ip route show | grep 'default via' | grep -oE '"&Chr$(40)&"[[:digit:]]{1,3}"&Chr$(92)&"."&Chr$(41)&"{3}[[:digit:]]{1,3}'")TosIPAddress[9]IfsIPAddress=""Then[10]'Get a brief status of all available network interfaces[11]'Hole den Status (Überblick) aller Netzwerk-Schnittstellen[12]Shell("nmcli device status")TosResponse[13]sErrText=("<pre><font face='Noto Sans' size='3'>No connection to lokal router! Please check the router and network connections:")[14]sErrText&="<pre><font face='Monospace' size='2'>"&sResponse[15]sErrText&=("<pre><font face='Noto Sans' size='3'>The application will be terminated.")[16]Message.Error(sErrText)[17]Quit[18]Else[19]'Additional check for VMs, which may have provided a gateway address although they have no connection to the router. This is done by trying to connect to the Web-Interface of the router.[20]'Zusätzliche Prüfung für VMs, die u.U. eine Gateway-Adresse geliefert haben, obwohl keine Verbindung zum Router besteht! Das wird durch den Versuch eines Verbindungsaufbaus mit dem Web-Interface des Routers geleistet.[21]Shell("wget -q --spider "&"http://"&Left$(sIPAddress,Len(sIPAddress)-1)&" ; echo $?")TosResponse[22]IfLeft$(sResponse,1)<>"0"Then[23]'Get a brief status of all available network interfaces[24]'Hole den Grob-Status aller Netzwerk-Schnittstellen[25]Shell("nmcli device status")TosResponse[26]sErrText=("<pre><font face='Noto Sans' size='3'>No connection to lokal router! Please check the router and network connections:")[27]sErrText&="<pre><font face='Monospace' size='2'>"&sResponse[28]sErrText&=("<pre><font face='Noto Sans' size='3'>The application will be terminated.")[29]Message.Error(sErrText)[30]Quit[31]Endif[32]Endif[33][34]'Check availability of Internet by testing the availability of the Google home page.[35]'Verfügbarkeit des Internets testen durch einen Verbindungsaufbau mit der Google-Homepage.[36]IfExist("/usr/bin/curl")Then[37]'Check whether curl is installed. If yes - use it.[38]'Testen, ob curl installiert ist. Wenn ja – nutzen Sie das Programm.[39]Shell("curl ifconfig.me")TosResponse[40]'If the Internet was connected, sResponse will contain the external (WAN) IP address.[41]'Wenn das Internet verbunden war, enthält sResponse die externe WAN-IP-Adresse.[42]'Das ist die IP-Adresse, die vom Provider zugewiesen wurde.[43]Print"External WAN IP address: "; sResponse[44]IfLen(sResponse)<=7Then[45]Message.Error(("No connection to the Internet!<hr>The application will be terminated."))[46]Quit[47]Endif[48]Else[49]'Use this alternative method if curl is not installed[50]Shell("wget -q --spider google.com ; echo $?")TosResponse[51]IfLeft$(sResponse,1)<>"0"Then[52]Message.Error(("No connection to the Internet!<hr>The application will be terminated."))[53]Quit[54]Endif[55]Endif[56][57]End
```



# 24.1.0.1 Component gb.net

The gb.net component allows you to implement network clients and network servers in Gambas. It also allows you to manage the serial port (RS232/V24).  The component contains the following classes:


# 24.1.0.2 Component gb.net.curl

The gb.net.curl component implements high-level network protocol management based on the curl library. The component enables the retrieval of http and ftp files - possibly other files - over a network. The component contains the following classes:


# 24.1.0.3 Component gb.mime

The gb.mime component allows you to parse a string and convert it to a MIME message and vice versa. The component is based on the gmime library. The component contains the following classes:


# 24.1.0.4 Component gb.net.pop3 and gb.net.smtp



# 24.1.0.5 Component gb.web

The component gb.web allows you to develop a web application - based on a CGI script. The component contains the following classes:


# 24.1.0.6 Component gb.markdown

The gb.markdown component allows you to convert the Gambas markdown syntax toHTML. This conversion can be customised by using properties and methods of the Markdown class. The component contains the following classes:


# 24.1.0.7 Component gb.map

The classes of the gb.map component make it possible to display map tiles from various sources in multiple layers. The component contains the following classes:


# 24.1.0.8 Component gb.map

With the help of the component gb.dbus you use the D-Bus interface of your computer. The component contains the following classes:
Hint:
You should note that the gb.web.form component - introduced in Gambas 3.9 - is considered deprecated. For new projects, use the adequate component gb.web.gui (3.15).


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.1.1 Socket (gb.net)

From the perspective of a Gambas application, a socket is an access point to the network and encapsulates the details of network communication. The methods of the Socket class provide both the functions for establishing connections and for communication between at least two network participants. TCP, UDP and local (Unix sockets) connections are implemented.
Note: A separate chapter is dedicated to Unix sockets in '24.1.4 UnixSocket'.
This class performs its work asynchronously. Programs are not stopped when connecting, sending or receiving data. This class is derived from the class Stream, so you can use its standard methods to send and receive data and to close the socket.
To create a new socket:


```
Dim hSocket As Socket
hSocket = New Socket() As "EventName"
```



# 24.1.1.1 Properties

The Socket class has these properties:
Table 24.1.1.1 : Properties of the class Socket
Notes on selected values (→ Chapter 24.1.6 Net constants) of the Socket.Status property:


# 24.1.1.2 Methods

The Socket class provides the following methods:
Table 24.1.1.2.1 : Methods of the Socket class.
Notes:


# 24.1.1.3 Events

The Socket class has these events:
Table 24.1.1.3.1 : Events of the class Socket
Notice:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.1.2.0 Class ServerSocket (gb.net)

The ServerSocket (gb.net) class is used to enable server-side waiting for incoming connections and their establishment. It is not intended for the actual communication. The class can be used for both the TCP and Unix protocols. Note: Unix sockets have their own chapter in '24.1.4 UnixSocket'.
The class performs its work asynchronously so that your programme is not stopped by the internal work of the server object.
This is how you create a new Internet server socket:


```
Dim hServerSocket As ServerSocket
hServerSocket = New ServerSocket ( [ Port As Integer, MaxConn As Integer ] )  As "EventName"
```

Alternative:


```
Dim hServerSocket As ServerSocket

hServerSocket = New ServerSocket As "EventName"
hServerSocket.Type = Net.Internet
hServerSocket.Port = iPort
hServerSocket.Listen(10) ' Der Server baut maximal 10 TCP/IP-Verbindungen auf
```

To create a new Unix server socket:


```
Dim hServerSocket As ServerSocket
hServerSocket = New ServerSocket ( [ Path As String, MaxConn As Integer ] )  As "EventName"
```

Alternative:


```
Dim hServerSocket As ServerSocket

hServerSocket = New ServerSocket As "EventName"
hServerSocket.Type = Net.Unix
hServerSocket.Path = sPath
hServerSocket.Listen(10) ' Der Server baut maximal 10 Verbindungen auf
```



# 24.1.2.0.1 Accept() method

This class is designed to present a server that accepts or rejects requested connections. All the rest of the work, such as sending data or receiving data, is done by a socket that is created and started by the server, one per connection server ↔ client.
Use the following control structure to inspect all sockets created with the Accept() method:


```
Dim hServerSocket As ServerSocket
Dim hConnetionSocket As Socket

For Each hConnetionSocket In hServerSocket
  ...
Next
```



# 24.1.2.0.2 Properties

The ServerSocket class has these properties:
Table 24.1.2.0.1 : Properties of the ServerSocket class.
Notes:


```
IfsBuf="start-massive-transfer"ThenbtnPause.Enabled=FalsePrint"Doing massive transfer."MyServerSocket.Pause()'-- Prevent this priority connection from keeping the others waiting too long'-- Verhindern Sie, dass diese Prioritätsverbindung die anderen zu lange warten lässtMyServerSocket.Timeout=10*1000ElseIfsBuf="end-massive-transfer"ThenPrint"Massive transfer done."MyServerSocket.Timeout=0'-- Retain btnPause control of Pause/Resume state'-- btnPause-Steuerung des Pause/Fortsetzungs-Status beibehaltenIfNotWaitingThenMyServerSocket.Resume()btnPause.Enabled=TrueEndif
```



# 24.1.2.0.3 Methods

The ServerSocket class has the following methods:
Table 24.1.2.0.2 : Methods of the ServerSocket class.
Notes:


# 24.1.2.0.4 Events

The ServerSocket class has only these two events:
Table 24.1.2.0.3 : Events of the ServerSocket class.
Notes:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.1.3.0 Class UDPSocket (gb.net)

The UDPSocket (gb.net) class allows Gambas programmes to communicate via UDP sockets. The class inherits from the Stream class, so you can use standard stream methods to read, write and close the socket.


# 24.1.3.0.1 Notes on the UDP protocol

In contrast to the TCP protocol, the UDP protocol (User Datagram Protocol) works connectionless. This means that there is no network connection with controlled data flow between two programmes with UDP sockets. Therefore, you will not find the two methods Listen() and Accept() with UDP sockets. There is also no confirmation whether the data - so-called datagrams - have arrived at the communication partner. Only datagrams are sent or received. This is not the only reason why the UDP protocol is considered an insecure protocol.
Good to know:
The last listed points are implemented in the following source code fragments for a UDP server and a UDP client:
UDP server:


```
PublicUDPServerSocketAsUDPSocket'-- Es wird ein UDP-Socket erzeugt ▶ SERVERUDPServerSocket=NewUDPSocketAs"UDPServerSocket"IfUDPServerSocket.Status<=Net.InactiveThenUDPServerSocket.Port=Val(txbPort.Text)UDPServerSocket.Bind()EndifPublicSubUDPServerSocket_Read()DimsBuffer, sQuoteAsStringRead#UDPServerSocket, sBuffer,Lof(UDPServerSocket)'-- Run Service: Ausgabe eines zufälligen Zitates → Methode GetQuote(…)sQuote=GetQuote(sBuffer)'-- Ziel-Adressierung: Host und Port'-- Über die Eigenschaften UDPServerSocket.SourceHost und UDPServerSocket.SourcePort findet man heraus,'-- woher das Datagramm kam – wer der Absender war. Damit sind die Ziel-Informationen zum Senden komplett.UDPServerSocket.TargetHost=UDPServerSocket.SourceHostUDPServerSocket.TargetPort=UDPServerSocket.SourcePort'-- Das Zitat wird als Datagramm an das adressierte Ziel gesendetWrite#UDPServerSocket,Trim(sQuote),Len(Trim(sQuote))End
```

UDP client:


```
PublicUDPClientSocketAsUDPSocket'-- Es wird ein UDP-Socket erzeugt ▶ CLIENTUDPClientSocket=NewUDPSocketAs"UDPClientSocket"IfUDPClientSocket.Status<=Net.InactiveThenUDPClientSocket.Port=0' Standard-Port für einen UDP-ClientUDPClientSocket.Bind()EndifPublicSubSendDatagram()'-- Ziel-Adressierung: Host und PortUDPClientSocket.TargetHost=txbHost.TextUDPClientSocket.TargetPort=txbPort.TextIncApplication.Busy'-- Ein Datagramm wird an das adressierte Ziel gesendetWrite#UDPClientSocket, txbRequest.Text,Len(txbRequest.Text)DecApplication.BusyEnd
```



# 24.1.3.0.2 Properties

The UDPSocket class has these properties:
Table 24.1.3.0.1 : Properties of the UDPSocket class.
Notes:


# 24.1.3.0.3 Methods

The UDPSocket class has the following methods:
Table 24.1.3.0.2 : Methods of the UDPSocket class.
Notes:


# 24.1.3.0.4 Events

The UDPSocket class only has these two events:
Table 24.1.3.0.3 : Events of the class UDPSocket
Note on the Error() event: Knowing selected error constants can help you identify the reason for errors that occur:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.1.4 DNSClient

The class DNSClient (gb.net) implements a simpleDNSclient (resolver) for determining the host name to a given IP address (reverse lookup) and for determining the IP address to a given host name (forward lookup). Host names are said to be resolved into IP addresses and vice versa. TheDNSclient directs the queries to aDNSserver that is either entered in the TCP/IP settings for your system or can be requested via DHCP.
TheDNSclient can work in asynchronous or synchronous mode. You can set the mode via the 'Async' property. In synchronous mode, the programme will not react to events during the resolution of host names and IP addresses. The default is synchronous mode.
For an interesting overview ofDNS(Domain Name System), see the websitehttp://de.wikipedia.org/wiki/Domain_Name_System.


# 24.1.4.1 Properties

The DNSClient class has these properties:
Table 24.1.4.1.1 : Properties of the DNSClient class


# 24.1.4.2 Methods

The DNSClient class has these three methods:
Table 24.1.4.2.1 : Methods of the class DNSClient


# 24.1.4.3 Event

The DNSClient class has only the Finished property. This event is triggered when an (asynchronous) resolution request has finished. Within the event handling routine, you can read the values stored in the HostIP and HostName properties and process them further in your programme.


# 24.1.4.4 Project

TheDNSclient from the Gambas sample collection has been adapted to use all properties, methods and the 'Finished' event. You can find the adapted project as project source archive in the download area. The next pictures should give you an impression of working with theDNSclient:
Figure 24.1.4.4.1: Programme interface
Figure 24.1.4.4.2: Resolution Host Name → IP Address
Figure 24.1.4.4.3: Resolution IP address → host name
Figure 24.1.4.4.4: Resolution host name → IP address
Figure 24.1.4.4.5: Failed to resolve gambas-book.net.
Figure 24.1.4.4.6: Failed to resolve IP address 46.30.56.205
Comments:


# 24.1.4.5 Excursus

For the use of the EXEC and SHELL instructions, you can successfully use the presented commands to determine the host name to a given IP address or the IP address to a given host name:


```
hans@linux:~$ nslookup gambas-buch.de
Server:		127.0.0.1
Address:	127.0.0.1#53
Non-authoritative answer:
Name:	gambas-buch.de
Address: 109.237.140.40

hans@linux:~$ nslookup 109.237.140.40
Server:		127.0.0.1
Address:	127.0.0.1#53
Non-authoritative answer:
40.140.237.109.in-addr.arpa	name = alfa3035.alfahosting-server.de.

hans@linux:~$ resolveip -s gambas-buch.de
109.237.140.40
hans@linux:~$ dig +short gambas-buch.de
109.237.140.40

hans@linux:~$ host gambas-buch.de
gambas-buch.de has address 109.237.140.40

hans@linux:~$ ping -a -c 1 gambas-buch.de
PING gambas-buch.de (109.237.140.40) 56(84) bytes of data.
64 bytes from alfa3035.alfahosting-server.de (109.237.140.40): icmp_req=1 ttl=58 time=59.3 ms
```

Often it is of interest which IP address has been assigned to you by the provider. In this case, you will reach your goal with one of the four instructions:


```
hans@linux:~$ curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+"
hans@linux:~$ wget -qO - http://cfaj.freeshell.org/ipaddr.cgi
hans@linux:~$ curl "http://www.networksecuritytoolkit.org/nst/cgi-bin/ip.cgi"
hans@linux:~$ wget -qO - www.meineip.de 2>&1 | grep 'title="Meine IP:' | sed -e 's/.*"ip">//' -e 's/<.p>.*//'
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.1.5.0 SerialPort class

The SerialPort class (gb.net) was developed to enable communication via a serial interface (usually an RS-232 interface). This class inherits from the stream class, so you can use standard streams to send and receive data and close the port. You can create the class.


```
DimhSerialPortAsSerialPorthSerialPort=NewSerialPort()As"RS232"'<-- Event name
```



# 24.1.5.0.1 Constants

Table 24.1.5.0.1: Constants of the class SerialPort
The applicable constants from the Net class (gb.net) also apply. For example, the status property is set to Net.Active after successfully opening the serial port via SerialPort.Open().


# 24.1.5.0.2 Properties

The SerialPort class has these properties:
Table 24.1.5.0.2: Properties of the class SerialPort


# 24.1.5.0.3 Methods

The class has these seven methods:
Table 24.1.5.0.3: Methods of the class SerialPort


# 24.1.5.0.4 Events

The SerialPort class has these events:
Table 24.1.5.0.4: Events of the class SerialPort
With this source code, a temperature value from a temperature sensor (DAC) is read out, interpolated and displayed every 500ms via a serial interface USB-RS232 adapter:


```
' Gambas class filePublichRS232AsSerialPortPublicsTemperatureDigitAsStringPublicTTimerAsTimerPublicSubForm_Open()FMain.CenterFMain.Resizable=FalsehRS232=NewSerialPortAs"hRS232"TTimer=NewTimerAs"TTimer"TTimer.Delay=500' The temperature is read out every 500msSetLEDColor(pboxStatus,"red")StartMeasurement()EndPublicSubStartMeasurement()hRS232.PortName="/dev/ttyUSB0"hRS232.Speed=4800hRS232.DataBits=SerialPort.Bits8hRS232.StopBits=SerialPort.Bits1hRS232.Parity=SerialPort.NonehRS232.FlowControl=SerialPort.NoneTryhRS232.Open(3)IfErrorThenMessage.Error(("Error when opening the V24-RS232-USB adapter interface!"))SetLEDColor(pboxStatus,"red")ElseIfhRS232.Status=Net.ActiveThenTTimer.Start()PrinthRS232.DTRPrinthRS232.DSRPrinthRS232.BlockingPrinthRS232.CTSPrinthRS232.RTSEndifEndifEndPublicSubhRS232_Read()Read#hRS232, sTemperatureDigit,Lof(hRS232)EndPublicSubTTimer_Timer()IfhRS232.Status<>Net.ActiveOrIfAsc(sTemperatureDigit)=0ThenlblTemperaturAnzeige.Text="--- °C"ElselblTemperaturAnzeige.Text=Str(Interpolation(Asc(sTemperatureDigit)))&" °C"TextBox1.Text=Asc(sTemperatureDigit)pboxStatus.SetFocus()SetLEDColor(pboxStatus,"green")EndifEndPrivateFunctionInterpolation(iArgumentAsInteger)AsFloatDimfX0, fX1, fY0, fY1, fAsFloat' Experimentally determined data pointsfX0=22fY0=22.3fX1=30fY1=34.5' Interpolationf=((fY1-fY0)/(fX1-fX0))*(iArgument-fX0)+fY0ReturnRound(f,-1)EndPrivateSubSetLEDColor(picBoxAsPictureBox, sLEDColorAsString)picBox.Picture=Picture["LED/led_"&sLEDColor&".svg"]EndPublicSubForm_Close()IfhRS232.Status=Net.ActiveThenhRS232.Close()FMain.Close()EndifEnd
```


Figure 24.1.5.0.1: Temperature display


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.1.6 Constants of the Net class (gb.net)

The following chapter introduces the (static) method Format(…) and selected constants of the class Net of the component gb.net.
In general, the following applies to the constants (data type Integer):


# 24.1.6.1 Method Format(...)

The class has only the (static) function


```
Format ( IPString As String [ , Format As Integer, LeadZero As Boolean ] ) As String
```

You use it to format a string that represents an IP address. The following applies to the two optional parameters:
For 'Format', currently (20 August 2020) a 0 or the constant `Net.IPv4` must be set.If 'LeadZero' is True, then all 4 octets are padded with zeros in the so-called `Dotted Decimal Notation`:


```
Print Net.Format("168.55.212.1", Net.IPv4, True)
168.055.212.001
```



# 24.1.6.2 Constants

The static class defines constants used by the classes of the gb.net component. Most constants are linked to the status property.
Table 24.1.6.2.1 : Constants of the class Net (gb.net)


# 24.1.6.3 Examples

You can detect an error by checking whether, for example, the status property for a created socket is negative:


```
PublichSocketAsSockethSocket=NewSocketAsEVENTNAMEIfhSocket.Status<0Then...IfhSocket.Status=Net.CannotWriteThen...
```

You must only call the Connect() method if you are sure that the socket status returns a negative value or 0:


```
PublichSocketAsSockethSocket=NewSocketAsEVENTNAMEIfhSocket.Status<=0ThenhSocket.Connect("/var/run/mysqld/mysqld.sock", Net.Local)Endif
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.2.0 Network 2

In the next chapters, you will be introduced to the following classes from the gb.net.curl component:
Gambas projects for all classes supplement the description of the properties, methods and events as well as constants of the individual classes.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.2.1 Class Curl

The Curl (gb.net.curl) class is theparentclass of the DNSClient, FTPClient and HTTPClient classes. You cannot create Curl objects directly. For this reason, only the properties, methods and events of the three classes DNSClient, FTPClient and HTTPClient, which use the class Curl (gb.net.curl), are explicitly described.
The base class Curl uses the library 'libcurl'.

At the link:https://curl.haxx.se/libcurl/c/libcurl-errors.htmlyou will find detailed information about the error codes, which are also referenced in the Gambas documentation for the DNSClient.Status, FTPClient.Status and HTTPClient.Status property.
Notes:
The websitehttps://wiki.ubuntuusers.de/cURL/describes in detail the curl programme, which also uses the 'libcurl' library.
For example, use the following command to upload a file under privileged rights to the 'basis' folder on yourFTPserver:


```
curl -T /home/user/path/to/file -u ftp_username:ftp_password ftp://www.yourdomain.com/basis/
```

On the other hand, the source code archive of the stable Gambas version 3.15.1 is stored in a flash in the home directory on your hard disk:
Figure 24.2.1.1: CLI programme 'curl'.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.2.2 DNSClient

The class DNSClient (gb.net) implements a simpleDNSclient (resolver) for determining the host name to a given IP address (reverse lookup) and for determining the IP address to a given host name (forward lookup). It is said that host names are resolved into IP addresses and vice versa. TheDNSclient directs the queries to aDNSserver that is either entered in the TCP/IP settings for your system or can be requested via DHCP.
TheDNSclient can work in asynchronous or synchronous mode. You can set the mode via the 'Async' property. In synchronous mode, the programme will not react to events during the resolution of host names and IP addresses. The default is synchronous mode.
For an interesting overview ofDNS(Domain Name System), see the websitehttp://de.wikipedia.org/wiki/Domain_Name_System.


# 24.2.2.1 Properties

The DNSClient class has these properties:
Table 24.2.2.1.1 : Properties of the DNSClient class


# 24.2.2.2 Methods

The DNSClient class has these three methods:
Table 24.2.2.1 : Methods of the class DNSClient


# 24.2.2.3 Event

The DNSClient class has only the Finished property. This event is triggered when an (asynchronous) resolution request has finished. Within the event handling routine, you can read the values stored in the HostIP and HostName properties and process them further in your programme.


# 24.2.2.4 Project


TheDNSclient from the Gambas sample collection has been adapted to use all properties, methods and the 'Finished' event. You can find the adapted project as project source archive in the download area. The next pictures should give you an impression of working with theDNSclient:
Figure 24.2.2.4.1: Programme interface
Figure 24.2.2.4.2: Resolution Host Name → IP Address
Figure 24.2.2.4.3: Resolution IP address → host name
Figure 24.2.2.4.4: Resolution host name → IP address
Figure 24.2.2.4.5: Failed to resolve gambas-book.net.
Figure 24.2.2.4.6: Failed to resolve IP address 46.30.56.205
Comments:


# 24.2.2.5 Excursus

For the use of the EXEC and SHELL instructions, you can successfully use the presented commands to determine the host name to a given IP address or the IP address to a given host name:


```
hans@linux:~$ nslookup gambas-buch.de
Server:		127.0.0.1
Address:	127.0.0.1#53
Non-authoritative answer:
Name:	gambas-buch.de
Address: 109.237.140.40

hans@linux:~$ nslookup 109.237.140.40
Server:		127.0.0.1
Address:	127.0.0.1#53
Non-authoritative answer:
40.140.237.109.in-addr.arpa	name = alfa3035.alfahosting-server.de.

hans@linux:~$ resolveip -s gambas-buch.de
109.237.140.40
hans@linux:~$ dig +short gambas-buch.de
109.237.140.40

hans@linux:~$ host gambas-buch.de
gambas-buch.de has address 109.237.140.40

hans@linux:~$ ping -a -c 1 gambas-buch.de
PING gambas-buch.de (109.237.140.40) 56(84) bytes of data.
64 bytes from alfa3035.alfahosting-server.de (109.237.140.40): icmp_req=1 ttl=58 time=59.3 ms
```

Often it is of interest which IP address has been assigned to you by the provider. In this case, you will reach your goal with one of the four instructions:


```
hans@linux:~$ curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+"
hans@linux:~$ wget -qO - http://cfaj.freeshell.org/ipaddr.cgi
hans@linux:~$ curl "http://www.networksecuritytoolkit.org/nst/cgi-bin/ip.cgi"
$ wget -qO - www.meineip.de 2>&1 | grep 'title="Meine IP:' | sed -e 's/.*"ip">//' -e 's/<.p>.*//'
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.2.3.0 Class FTPClient (gb.net.curl)

Note:FTPor “File Transfer Protocol” is an insecure protocol for transferring files between two systems and should only be used in limited circumstances or on networks you trust.
The class provides anFTPclient that allows you to download files from anFTPserver, upload files to anFTPserver and sendFTPcommands to anFTPserver. The class is based on the (base) class Curl in gb.net.curl.
To create a newFTPclient:


```
Dim hFTPClient As FTPClient
hFTPClient = New FTPClient() As hFTPClient ' Event-Name
```



# 24.2.3.0.1 Properties

The FTPClient class has these properties:
Table 24.2.3.0.1 : Properties of the FTPClient class
Example of Lines property:


```
Dim hFile As File
Dim sLine As String

hFile = Open "/var/log/syslog"
For Each sLine In hFile.Lines
  If InStr(sLine, "[drm]") Then Print sLine
Next
```

Status property values that can only be read:


```
Net.Inactive        (0)	Der FTP-Client ist inaktiv.
Net.ReceivingData   (4)	Der FTP-Client empfängt Daten aus dem Netzwerk.
Net.Connecting      (6)	Der FTP-Client verbindet sich mit dem FTP-Server.
```

If an error occurred, then the status value is negative. The status value is actually -1000 minus the libcurl error code. Most of these error codes have a corresponding constant in the Net class. To know exactly what an error code means, you need to look at the libcurl error code list athttps://curl.se/libcurl/c/libcurl-errors.htmlor at the Gambas Club athttps://www.gambas-club.de/viewtopic.php?f=3&t=5580&p=13190&hilit=Curl+error#p13190.
FTPClient has two ways to work depending on the Async property. If Async has the value TRUE, then the programme stops until the requested operation is completed. This guarantees that the desired result is completed before the programme continues. However, you will not receive any information while the process is running. If the property has the value FALSE, the programme requests theFTPoperation from the server and continues. In this case, you can access the status of the process.
For programme development, it is advantageous to set the debug property to True. Then you will always see the complete connection log in the console of the IDE - as in the following example:


```
*   Trying 109.xyz.140.40:21...
* TCP_NODELAY set
* Connected to gambas-buch.de (109.xyz.140.40) port 21 (#0)
< 220 FTP Server ready.
> USER ftp_username
< 331 Password required for ftp_username
> PASS ftp_password
< 230 Zugriff gewaehrt fuer ftp_username
> PWD
< 257 "/" is the current directory
* Entry path is '/'
> CWD base
* ftp_perform ends with SECONDARY: 0
< 250 CWD command successful
> CWD dwiki
< 250 CWD command successful
> CWD data
< 250 CWD command successful
> CWD k3
< 250 CWD command successful
> CWD k3.1
< 250 CWD command successful
> EPSV
* Connect data stream passively
< 229 Entering Extended Passive Mode (|||65089|)
*   Trying 109.xyz.140.40:65089...
* TCP_NODELAY set
* Connecting to 109.xyz.140.40 (109.xyz.140.40) port 65089
* Connected to gambas-buch.de (109.xyz.140.40) port 21 (#0)
> TYPE I
< 200 Type set to I
> STOR start.txt
< 150 Opening BINARY mode data connection for start.txt
* We are completely uploaded and fine
* Remembering we are in dir "base/dwiki/data/k3/k3.1/"
< 226 Transfer complete
* Connection #0 to host gambas-buch.de left intact
```



# 24.2.3.0.2 Methods

The FTPClient class has the following methods:
Table 24.2.3.0.2 : Methods of the FTPClient class


# 24.2.3.0.3 Events

The FTPClient class has 6 events:
Table 24.2.3.0.3 : Events of the FTPClient class


# 24.2.3.0.4 Examples

Example 1: Put() method (upload).
The following source code excerpt is from a program for inserting individual pages in DokuWiki format into the Gambas book on gambas-buch.de:


```
PublichFTPClientAsFtpClientPublicSubForm_Open()MAdditional.CheckNetwork()hFTPClient=NewFtpClientAs"hFTPClient"hFTPClient.User="ftp123"hFTPClient.Password="pass456"...EndPublicSubbtnFileUpLoad_Click()DimbFTPClientStatusAsBoolean=FalseFileUpload()RepeatWait0.001lblFTPStatus.Text="FTP-Status = "&hFTPClient.StatusUntilbFTPClientStatus=bConnectedEndPublicSubhFTPClient_Connect()lblFTPStatus.Text="FTP status: Connection to FTP server established!"bConnected=TrueEndPublicSubhFTPClient_Finished()ProgressBar1.Value=1btnFileUpLoad.Picture=Picture["leds/led_green_16x16.png"]lblFTPStatus.Text="FTP status: Transfer complete"IfbConnected=TrueThenhFTPClient.Close()EndPublicSubhFTPClient_Progress()'-- (Relative) Display of the uploaded bytes in relation to the size of the transferred file.IfhFTPClient.TotalUploaded>0ThenProgressBar1.Value=hFTPClient.Uploaded/hFTPclient.TotalUploadedEndifEndPublicSubhFTPClient_Error()Message.Error("<b><font color='DarkRed'>FTP:  ERROR</b></font><hr>"&hFTPClient.ErrorText)EndPrivateSubFileUpload()hFTPClient.URL=txbTargetURL.Text'-- The Argument in the Put(sArg) method is the path of the file to be uploaded *on the local PC*'-- Upload the selected DokuWiki source text file:hFTPClient.Put(txbSourcePath.Text)End
```

Figure 24.2.3.0.1: The upload of a file was successful.
Note:The names of the LocalSource file and the target file do not necessarily have to be the same! This applies to the upload as well as to the download!
Errors during the upload of individual pages are intercepted and displayed by the programme:
Figure 24.2.3.0.2: Upload errors
Example 2: Get() method (download)
This example was chosen because it presents a special feature. Normally, you specify as an argument to the Get() method a complete path for the file on theFTPserver to be downloaded from theFTPserver to a selected directory on theFTPclient system. However, if you specify a complete path for a directory on theFTPserver - which must end with / - then the contents of that directory will be returned:
Figure 24.2.3.0.3: Contents of a selected directory on theFTPserver.
The source code for reading the contents of a selected directory on theFTPserver is pleasantly short and is therefore given in full. You can test the project yourself, as theFTPaccount data for the publicFTPserver are also given:


```
' Gambas class filePublichFTPClientAsFtpClientPublicSubForm_Open()FMain.Caption="FTP-Server: Directory List"hFTPClient=NewFtpClientAs"hFTPClient"hFTPClient.User="anonymous"'-- Required: `anonymous`hFTPClient.Password="wer@ist.da"'-- Required: An arbitrary, but syntactically correct email addresshFTPClient.Debug=TrueEndPublicSubhFTPClient_Error()txaOutput.Insert("FTP-Error-Text => "&hFTPClient.ErrorText&gb.NewLine)txaOutput.Insert("FTP Status: "&hFTPClient.Status&gb.NewLine)EndPublicSubbtnGetList_Click()DimaListAsString[]DimiCountAsIntegeraList=GetList("ftp.uni-erlangen.de/pub/")'-- aList = GetList("ftp.uni-erlangen.de/pub/ubuntu/")txaOutput.Clear()ForiCount=0ToaList.MaxIfiCount<aList.MaxThentxaOutput.Insert(aList[iCount]&gb.NewLine)ElsetxaOutput.Insert(aList[iCount])EndifNextEndPrivateFunctionGetList(argURLAsString)AsString[]DimsTempFileNameAsString=Temp()DimaListAsString[]hFTPClient.URL=argURL
    hFTPClient.Async=FalsehFTPClient.Timeout=3hFTPClient.Get(sTempFileName)aList=Split(File.Load(sTempFileName), gb.NewLine)ReturnaListEnd
```

The main load is borne by the function GetList(argURL). A temporary file is used as the (download) file, as its content is of interest, which is stored in the return value of the function.
Example 3: Exec() method
In practical work, the Exec() method has proved useful for creating and deleting a directory on theFTPserver, among other things:


```
Inc Application.Busy
    hFTPClient.Async = False
    hFTPClient.Exec(["MKD " & "BaseDirectoryPath/DirectoryName_Create"])
  Dec Application.Busy
```



```
Inc Application.Busy
    hFTPClient.Async = False
    hFTPClient.Exec(["RMD " & "BaseDirectoryPath/DirectoryName_Delete"])
  Dec Application.Busy
```

The following source code section provides an overview of allFTPcommands implemented on theFTPserver. Take into account that the output is only displayed in the console of the IDE if the debug property has the value True:


```
hFTPClient=NewFtpClientAs"hFTPClient"hFTPClient.User="ftp123"hFTPClient.Password="pass345"hFTPClient.URL="gambas-buch.de"hFTPClient.Async=FalsehFTPClient.Timeout=3hFTPClient.Debug=TruehFTPClient.Exec(["HELP"])
```

This is the output for theFTPserver (vsFTPd) used by the author:


```
> HELP
* ftp_perform ends with SECONDARY: 0
< 214-The following commands are recognized (* =>'s unimplemented):
<  CWD     XCWD    CDUP    XCUP    SMNT*   QUIT    PORT    PASV
<  EPRT    EPSV    ALLO*   RNFR    RNTO    DELE    MDTM    RMD
<  XRMD    MKD     XMKD    PWD     XPWD    SIZE    SYST    HELP
<  NOOP    FEAT    OPTS    HOST    CLNT    AUTH    CCC*    CONF*
<  ENC*    MIC*    PBSZ    PROT    TYPE    STRU    MODE    RETR
<  STOR    STOU    APPE    REST    ABOR    USER    PASS    ACCT*
<  REIN*   LIST    NLST    STAT    SITE    MLSD    MLST
```

Delete a single file on theFTPserver like this:


```
IncApplication.BusyhFTPClient.Async=FalsehFTPClient.Exec(["DELE "&"BaseDirectoryPath/FileName"])DecApplication.BusyIfhFTPClient.ErrorTextThenMessage.Error("ERROR:<br>"&hFTPClient.ErrorText)Endif
```



# 24.2.3.0.5 FTP Accounts

It is a good idea to provide the requiredFTPaccount data for anFTPprogramme either through a single dialogue or through anFTPaccount manager with several dialogues. Suggestions for suitable dialogues or for account managers can already be found in the Gambas book:


```
https://gambas-buch.de/doku.php?id=k12:k12.4:k12.4.4:k12.4.4.1:start
https://gambas-buch.de/doku.php?id=k24:k24.3:k24.3.4:start
```

Figure 24.2.3.0.4: Account dialogue for anFTPserver
If you use multipleFTPservers, then anFTPaccount manager will be the right choice:
Figure 24.2.3.0.5:FTPaccount manager


# 24.2.3.0.6 Digression: Using the command line tool Curl with FTP, SFTP and FTPS

A short introduction to the use of Curl, reduced to the essentials, can be found on this website (as of 24.01.2022):


```
http://www.mukeshkumar.net/articles/curl/how-to-use-curl-command-line-tool-with-ftp-and-sftp
```



# 24.2.3.0.7 Project FTP Client

In the next chapter, you will be introduced to a project for anFTPClient based on the class FTPClient.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.2.4.0 Class HTTPClient

This class provides an HTTP client that sends requests to an HTTP server and receives its response.
To create a new HTTP client:


```
Dim hHTTPClient As HTTPClient
hHTTPClient = New HTTPClient() As "hHTTPClient"  ' → Ereignisname (optional)
```



# 24.2.4.0.1 Selected Properties

The HTTPClient class has these properties:
Table 24.2.4.0.1 : Properties of the HTTPClient class


# 24.2.4.0.2 Methods

The HTTPClient class has the static method DownLoad(…):


```
Static Function Download ( URL As String [ , Headers As String[] ] ) As String

- URL ist die Adresse
- Headers ist ein optionales String-Array der verwendeten Header
```

The HTTPClient class has these selected methods:
Table 24.2.4.0.2 : Methods of the HTTPClient class
Notes *  * Post ( ContentType As String, Data As String [ , Headers As String[], TargetFile As String ] ):


# 24.2.4.0.3 Events

The HTTPClient class has these events:
Table 24.2.4.0.3 : Events of the HTTPClient class


# 24.2.4.0.4 Example - HTTP Client

In the example, the Get() method is used without parameters. Therefore, the data received from the HTTP server is stored in memory. This data is accessed with standard stream methods. The website data is manageably small and is displayed in a text box:
Figure 24.2.4.0.1: Output of the external IP address.
This is the complete source code:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4][5]MAdditional.CheckNetwork()[6]FMain.Caption=("Current external IP address")[7][8]'-- Note the text on this web page: https://ipecho.net/developers.html[9]lblIPAdress.Text=HTTPGetIP("https://ipecho.net/plain")[10][11]End[12][13]PublicFunctionHTTPGetIP(argURLAsString)AsString[14][15]DimhHTTPClientAsHttpClient[16]DimsResultAsString[17][18]hHTTPClient=NewHttpClient[19]hHTTPClient.URL=argURL[20]hHTTPClient.Async=False[21]hHTTPClient.TimeOut=10[22][23]hHTTPClient.Get()[24][25]IfLof(hHTTPClient)ThensResult=Read#hHTTPClient,Lof(hHTTPClient)[26][27]ReturnsResult[28][29]End
```

Comment:
The project uses the module MAdditional, which contains this procedure, among others:


```
PublicSubCheckNetwork()DimsResponse, sCommandAsStringDimsIPAddressAsString'-- With Desktop.NetworkAvailable (gb.desktop) you can determine whether a network connection exists.IfNotDesktop.NetworkAvailableThenMessage.Error(("No network available!<hr>The application will be terminated."))QuitEndif'-- Check connection to local router by trying to obtain the IP address of the gatewaysCommand="route -n | grep ^0.0.0.0 | awk '{print $2}'"ShellsCommandTosIPAddressIfNotsIPAddressThenMessage.Error(("No connection to lokal router!<hr>The application will be terminated."))QuitEndifsCommand="ping -c 1 8.8.8.8"ShellsCommandTosResponseIfNotInStr(sResponse,"8.8.8.8 ping")ThenMessage.Error(("No connection to the Internet!<hr>The application will be terminated."))QuitEndifEnd
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.3.0 Component gb.mime

Athttps://de.wikipedia.org/wiki/Multipurpose_Internet_Mail_Extensionsyou will find this short description for MIME: “The Multipurpose Internet Mail Extensions (MIME) are extensions to the Internet standardRFC822 (replaced byRFC5322 since 2008), which defines the data format of e-mails. …).”
The gb.mime component by Benoît Minisini is based on the GMime library and has these three classes:
The properties and methods of the three classes of the component gb.mime are used
Notes:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.3.1 Class Mime

The class Mime (gb.mime) provides you with seven constants and two methods.
The methods are necessary because, according toRFC5322, you may only use characters from the 7-bitASCIIcharacter set for a text e-mail. For all other contents, such as images - in anHTMLe-mail or in the attachment - you must, according toRFC2046 toRFC2048, specify the coding method used for the characters of a MimeMessage part of the type MimePart in (special) header fields of an e-mail as MimeMessage. This is where the Multipurpose Internet Mail Extensions (MIME) come into play as an extension of the data format for e-mails.
With the two methods
you can use
Use the second parameter 'Encoding' to specify the encoding method to be used → Table 24.3.1.1.


# 24.3.1.1 Constants

The Mime class has these seven constants for specifying the method by which text is encoded or decoded:
Table 24.3.1.1 : Constants of the class Mime
Information on theQuotedPrintableandUUEncodeencodings can be found here:


# 24.3.1.2 Methods

The Mime class has only two methods:
Table 24.3.1.2.1 : Methods of the class Mime
Notes:


# 24.3.1.3 Example text encoding

This is the original text:


```
Hallo,

das Kapitel 24.3.1 Mime (gb.mime) ist abgeschlossen und wurde heute veröffentlicht.

Mit flottem Gruß

Hans
```

and here you will find the encodings of the above text in Base64, QuotedPrintable and UUEncode one after the other:
Base64


```
SGFsbG8sCgpkYXMgS2FwaXRlbCAyNC4zLjEgTWltZSAoZ2IubWltZSkgaXN0IGFiZ2VzY2hsb3Nz
ZW4gdW5kIHd1cmRlIGhldXRlIHZlcsO2ZmZlbnRsaWNodC4KCk1pdCBmbG90dGVtIEdydcOfCgpI
YW5z
```

QuotedPrintable


```
Hallo,

das Kapitel 24.3.1 Mime (gb.mime) ist abgeschlossen und wurde heute ver=C3=
=B6ffentlicht.

Mit flottem Gru=C3=9F

Hans
```

UUEncode


```
M2&%L;&\L"@ID87,@2V%P:71E;"`R-"XS+C$@36EM92`H9V(N;6EM92D@:7-T
M(&%B9V5S8VAL;W-S96X@=6YD('=U<F1E(&AE=71E('9E<L.V9F9E;G1L:6-H
```

Figure 24.3.1.3.1: Programme interface coding.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.3.2 Class MimePart

The class MimePart of the component gb.mime represents a part in the text body of a MimeMessage → chapter 24.3.3 Class MimeMessage. A blank line formally separates the header of an email from the body. You can create this class.


# 24.3.2.1 Properties

The MimePart class has the following properties:
Table 24.3.2.1.1 : Properties of the class MimePart
Example: source code excerpts of an email of type MimeMessage.


```
[1]...[2]Return-path:<xxxx.xx@freenet.de>[3]...[4]To: xxxx.xx@freenet.de[5]From: YYYY<yyy.zzz@freenet.de>[6]Subject: Bild-Datei[7]Message-ID:<56828856.4070805@freenet.de>[8]Date: Tue,29Dec201514:19:18+0100[9]...[10]MIME-Version:1.0[11]Content-Type: multipart/mixed; boundary="000100040309080505050507"[12]...[13]<LEERZEILE TRENNT HEADER UND BODY>[14]Thisisa multi-partmessageinMIMEformat.[15]--000100040309080505050507[16]Content-Type: multipart/alternative; boundary="030406090702040408090509"[17][18]--030406090702040408090509[19]Content-Type: text/plain; charset=utf-8;format=flowed[20]Content-Transfer-Encoding: 7bit[21][22]Hallo Hans,[23]im Anhang die angeforderte Bild-Datei'8.png'.[24]Mit freundlichem Gruss[25]Honsek[26][27]--030406090702040408090509[28]Content-Type: text/html; charset=utf-8[29]Content-Transfer-Encoding: 7bit[30][31]<html>[32]<head>[33]<meta http-equiv="content-type"content="text/html; charset=utf-8">[34]</head>[35]<body text="#000000"bgcolor="#FFFFFF">[36]<fontsize="+1">Hallo Hans,<br>[37]im Anhang die angeforderte Bild-Datei'8.png'.<br>[38]Mit freundlichem Gruss<br>[39]Honsek<br>[40]</font>[41]</body>[42]</html>[43][44]--030406090702040408090509--[45][46]--000100040309080505050507[47]Content-Type:image/png; name="8.png"[48]Content-Transfer-Encoding: base64[49]Content-Disposition: attachment; filename="8.png"[50][51]iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAAAO0lEQVQYlX2PyQ0AMAjDnKr7[52]r5x+egvIEyxwZDBFOoASxJoAEWUB0J6Zhedi5QFSh/0lkDnAd/pWK2sORyMOEhaL7BAAAAAA[53]SUVORK5CYII=[54][55]--000100040309080505050507--
```



```
Struktur:

+ multipart/mixed
|
+-+ multipart/alternative  2
| |
| +-- text/plain  0
| |
| +-- text/html  0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ANHANG 1 :  8.png attachment image/png
```

Figure 24.3.2.1.1: Representation of the structure of the above MimeMessage.
A parser outputs the structure of a MimeMessage. All parts of the MimeMessage and their hierarchy are represented symbolically.
Comment:


# 24.3.2.2 Methods

The MimePart class has only two methods:
Table 24.3.2.2.1 : Methods of the class MimePart
A description of the use of the two methods can be found in a project in chapter 24.4.3.


# 24.3.3 Example Structure Parser

The presented parser creates a view on the structure of a MimeMessage. The header and the individual parts in the body of a MimeMessage are examined:
Figure 24.3.3.1: Illustration 2 of the structure of another MimeMessage
The source code for the parser is given in full:


```
[1]' Gambas class file[2][3]Private$iLevelAsInteger[4]Private$iFlagAsInteger[5]Private$sBodyTypeAsString[6]Private$iAttachmentCountAsInteger[7][8]PublicSubForm_Open()[9]FMain.Center[10]FMain.Utility=True[11]btnGetStructureMimeMessage.Enabled=False[12]End' Form_Open()[13][14]PublicSubbtnClose_Click()[15]FMain.Close[16]End' btnClose_Click()[17][18]PublicSubbtnGetStructureMimeMessage_Click()[19]DimhMimeMessageAsNewMimeMessage[20]DimsMessageAsString[21][22]hMimeMessage=NewMimeMessage(txaMonitor.Text)[23][24]$sBodyType=Scan(hMimeMessage.Part.Headers["Content-Type"],"*;*")[0][25][26]sMessage=("S T R U C T U R E  M I M E - M E S S A G E")[27]txaMonitor.Insert(sMessage&gb.NewLine)[28]txaMonitor.Insert(String$(String.Len(sMessage),"-")&gb.NewLine)[29]txaMonitor.Insert(gb.NewLine)[30][31]' Parser[32]txaMonitor.Insert("+ "&$sBodyType&gb.NewLine)[33]ParsePart(hMimeMessage.Body,True)[34]ParsePart(hMimeMessage.Part,False)[35][36]btnGetStructureMimeMessage.Enabled=False[37][38]End' btnGetStructureMimeMessage_Click()[39][40]PublicSubParsePart(hPartAsMimePart, IsBodyAsBoolean)[41]DimhChildAsMimePart[42]DimsMessageAsString[43][44]IfIsBody=TrueThen[45]txaMonitor.Insert(String$($iLevel,"| ")&"| "&gb.NewLine)[46]txaMonitor.Insert(String$($iLevel,"| ")&"+-"&If(hPart.Count,"+ ","- "))[47]sMessage=hPart.ContentType&" "&hPart.FileName[48]sMessage&=" "&hPart.Count&gb.NewLine[49]txaMonitor.Insert(sMessage)[50]Else[51]IfhPart.Disposition="attachment"AndStr(hPart.Count)=0Then[52]If$iFlag=0Then[53]txaMonitor.Insert("|"&gb.NewLine)[54]Inc$iFlag[55]Endif[56]sMessage=("+ Attachment ")&Str($iAttachmentCount+1)&": "&" "&hPart.FileName[57]sMessage&=" "&hPart.Disposition&" "&hPart.ContentType&gb.NewLine[58]txaMonitor.Insert(sMessage)[59]Inc$iAttachmentCount[60]Endif[61]Endif' IsBody ?[62][63]Inc$iLevel[64]ForEachhChildInhPart[65]ParsePart(hChild, IsBody)' Recursive call![66]Next[67]Dec$iLevel[68][69]txaMonitor.Pos=txaMonitor.Length[70][71]End' ParsePart(...)[72][73]PublicSubOpenMimeMessageFile_Click()[74]btnGetStructureMimeMessage.Enabled=False[75]Dialog.Title=("Select a MimeMessage-File ...")[76]Dialog.Filter=["*.txt",("Text files"),"*",("All files")][77]Dialog.ShowHidden=False[78]Dialog.Path=Application.Path&/"InBox"[79]IfDialog.Openfile(False)ThenReturn' False: 'Multiselect' ist ausgeschaltet[80][81]txaMonitor.Clear[82]txaMonitor.Text=File.Load(Dialog.Path)[83][84]btnGetStructureMimeMessage.Enabled=True[85]$iLevel=0[86]$iFlag=0[87]$iAttachmentCount=0[88][89]Catch[90]Message.Info(Error.Text)[91]btnGetStructureMimeMessage.Enabled=True[92][93]End' OpenMimeMessageFile_Click()
```

Comment:
Minisini wrote in this context:Other than that, a MIME message is a recursive structure. Normally mail clients hide that by rendering the message content linearly. So you have to parse the parts recursively ….
For your own structure analyses, you need the source texts of e-mails.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.3.3 Class MimeMessage

The class MimeMessage (gb.mime) is always used together with the classes Mime and MimePart
The class can be created. A new EMail of the type MimeMessage is created like this:


```
Dim hMimeMessage As MimeMessage
hMimeMessage = New MimeMessage ( [ Contents As String ] )
```



# 24.3.3.1 Properties

The MimeMessage class has these properties, which are described in the following table.
Table 24.3.3.1.1 : Properties of the MimeMessage class.
Comment:
Example 1 - Setting the content of header fields
Use this source code snippet to set the value of a header field with the identifier 'FieldName':


```
Dim hMimeMessage As MimeMessage
Dim sString As String
hMimeMessage.Headers [ FieldName As String ] = sString
```

Example 2 - Reading the contents of header fields
To return the value of a header line (header field) with the identifier 'FieldName':


```
Dim hMimeMessage As MimeMessage
Dim sString As String
sString = hMimeMessage.Headers [ FieldName As String ]
```



# 24.3.3.2 Methods

The MimeMessage class has only one method. The ToString function assembles an email from its header and body parts:


```
Function ToString ( ) As String
```



# 24.3.3.3 Project

The following source code snippet allows you to read and display not only the contents of selected header fields but also body sub-header fields in an EMail source code. You will also receive information about the email attachments, if they exist. The information is preceded by an overview of the structure of the examined EMail:


```
PublicSubbtnShowMimeMessageDetails_Click()DimhMimeMessageAsNewMimeMessageDimhMimePart, hMimePart2AsMimePartDimsMessage, sEncodingAsStringDimkAsInteger=1hMimeMessage=NewMimeMessage(txaMonitor.Text)$sBodyType=Scan(hMimeMessage.Part.Headers["Content-Type"],"*;*")[0]sMessage=("D E T A I L S  M I M E - M E S S A G E")txaMonitor.Insert(sMessage&gb.NewLine)txaMonitor.Insert(String$(String.Len(sMessage),"-")&gb.NewLine)txaMonitor.Insert(gb.NewLine)' Parse mimemessage ...txaMonitor.Insert("+ "&$sBodyType&gb.NewLine)ParsePart(hMimeMessage.Body,True)ParsePart(hMimeMessage.Part,False)' Show details ...txaMonitor.Insert(String$(80,"-")&gb.NewLine)txaMonitor.Insert(gb.NewLine)txaMonitor.Insert("CONTENT-TYPE EMAIL = "&Scan(hMimeMessage.Headers["Content-Type"],"*;*")[0]&gb.NewLine)txaMonitor.Insert("DATE = "&hMimeMessage.Headers["Date"]&gb.NewLine)txaMonitor.Insert("FROM = "&hMimeMessage.Sender&gb.NewLine)txaMonitor.Insert("RETURN-PATH = "&hMimeMessage.Headers["Return-Path"]&gb.NewLine)txaMonitor.Insert("SUBJECT = "&hMimeMessage.Subject&gb.NewLine)txaMonitor.Insert("TO = "&hMimeMessage.To&gb.NewLine)IfhMimeMessage.CcThentxaMonitor.Insert("CC = "&hMimeMessage.Cc&gb.NewLine)Endif' txaMonitor.Insert("BCC = "; hMimeMessage.Bcc  ' Blind means hidden ...txaMonitor.Insert("MESSAGE-ID = "&hMimeMessage.Id&gb.NewLine)txaMonitor.Insert("MIME-VERSION = "&hMimeMessage.Headers["MIME-Version"]&gb.NewLine)hMimePart=NewMimePart
  hMimePart=hMimeMessage.ParthMimePart2=NewMimePart
  hMimePart2=hMimeMessage.PartIfScan(hMimeMessage.Headers["Content-Type"],"*;*")[0]Like"*/mixed"Then' : Attachment number >= 1txaMonitor.Insert(gb.NewLine)sMessage=("D E T A I L S  F O R  A T T A C H M E N T")txaMonitor.Insert(sMessage&gb.NewLine)txaMonitor.Insert(String$(String.Len(sMessage),"-")&gb.NewLine)txaMonitor.Insert(gb.NewLine)EndifForEachhMimePart2InhMimePartIfhMimePart2.Disposition="attachment"ThentxaMonitor.Insert(("Attachment ")&Str(k)&":"&gb.NewLine)Inck
       txaMonitor.Insert("Disposition = "&hMimePart2.Disposition&gb.NewLine)SelectCasehMimePart2.ContentEncodingCase0sEncoding="Default"Case1sEncoding="7Bit"Case2sEncoding="8Bit"Case3sEncoding="Binary"Case4sEncoding="Base64"Case5sEncoding="QuotedPrintable"Case6sEncoding="UUEncode"EndSelecttxaMonitor.Insert("ContentEncoding = "&sEncoding&gb.NewLine)txaMonitor.Insert("ContentType = "&hMimePart2.ContentType&gb.NewLine)txaMonitor.Insert("FileName = "&hMimePart2.FileName&gb.NewLine)txaMonitor.Insert(gb.NewLine)EndifNextbtnShowMimeMessageDetails.Enabled=FalseEnd' btnShowMimeMessageDetails_Click()
```

Figure 24.3.3.1: Display of selected details in an EMail


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.3.4 Manager for EMail Accounts

This chapter introduces you to the programme EMail account manager, which you can use in the two client projects SMTP client and POP3 client, which are introduced in the following two chapters 24.4.0 and 24.5.0, among others. A common configuration file accounts.conf can be accessed synchronously from both clients.
Figure 24.3.4.1:GUI: Email account manager
Notes:
The EMail account manager project is made available to you in the download area.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.4.0 Component gb.net.smtp

The component enables you to send e-mails using the SMTP protocol. Supported are, among other things, email attachments and optional connection security via SSL or TLS, provided the 'openssl' programme is installed on your system. This componentgb.net.smtpis present in all Gambas3 versions since version 3.6 and was written entirely inGambas.


# 24.4.0.1 Properties

The SmtpClient class has the following properties:
Table 24.4.0.1.1 : Properties of the SmtpClient class
The constants of the SmtpClient class associated with the Encrypt property are:


# 24.4.0.2 Methods

The SmtpClient class has only three methods:
Table 24.4.0.2.1 : Methods of the class SmtpClient
The static methodFormatDate ( Date As Date ) As Stringformats a date according to the syntax ofRFC822:SmtpClient.FormatDate(Now)→ Mon, 01 Feb 2016 18:12:36 GMT .


# 24.4.0.3 Authentication via CRAM-MD5

If an SMTP server allows authentication via the CRAM-MD5 (Challenge Response Authentication Mechanism, Message Digest 5) method in addition to the AUTH PLAIN and AUTH LOGIN methods, then the SMTP username is sent in plain text in the SSL tunnel to identify the user, but the SMTP password is transmitted in encrypted form:
Console:


```
[1] hans@linux:~$ openssl s_client -quiet -connect mx.freenet.de:465
[2] ...
[3] 220 mx8.freenet.de ESMTP Exim 4.85 Tue, 02 Feb 2016 07:53:59 +0100
[4] EHLO linux
[5] 250-mx8.freenet.de Hello p4fca44f0.dip0.t-ipconnect.de [79.202.68.240]
[6] 250-SIZE 209715200
[7] 250-8BITMIME
[8] 250-ETRN
[9] 250-PIPELINING
[10] 250-AUTH LOGIN PLAIN CRAM-MD5
[11] 250 HELP
[12] AUTH CRAM-MD5
[13] 334 PDE4OTYuNjk3MTcwOTUyQHBvc3RvZmZpY2UucmVzdG9uLm1jaS5uZXQ+
[14] dGltIGI5MTNhNjAyYzdlZGE3YTQ5NWI0ZTZlNzMzNGQzODkw
[15] 235 Authentication succeeded
[16] QUIT
[17] 221 mx8.freenet.de closing connection
[18] hans@linux:~$
```

You can use the following function to calculate the response to be sent in line 14. The SMTP user name, the corresponding SMTP user password and the 'task' set by the server are passed as parameters:


```
[1] Public Function CRAMMD5(sUsername As String, sPassword As String, sChallenge64 As String) As String
[2]
[3]   Dim sChallenge, sCommand, sDigestHex, sResponse As String
[4]
[5]   sChallenge = UnBase64(sChallenge64)
[6]
[7]   sCommand = "openssl md5 -hmac " & Shell$(sPassword) & " << EOF\n" & sChallenge
[8]   Shell sCommand To sDigestHex
[9]
[10]   sDigestHex = Split(Trim(sDigestHex), "=")[1]
[11]   sResponse = Base64(sUsername & sDigestHex)
[12]
[13]   Return sResponse
[14]
[15] End ' Function CRAMMD5(...)
```

Notes:


# 24.4.0.4 Excursus SMTP

The following excursus summarises essential, selected aspects on the subject of SMTP:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.4.1 SMTP client

The SMTP-Client project provides you with a fully-fledged SMTP client. Almost all properties and methods of the class SmtpClient as well as the most important constants of the Net class are used. To manage e-mail accounts, you can call up a manager (→ Chapter 24.3.4) in the menu.
Figure 24.4.1.1:GUISMTP client
The complete project is provided in the download area. We will therefore not present the source code. The introduction to working with the SMTP client and the manager for e-mail accounts is more comprehensive. Numerous illustrations support the description.


# 24.4.1.1 Starting the programme

When the programme is started for the first time, a hidden directory is created in the user's home directory where the configuration file is saved. The SMTP client as well as the manager access this configuration file. You will be informed that no e-mail account exists yet:
Figure 24.4.1.1: Message


# 24.4.1.2 Working with the Manager for EMail Accounts - Basic Data

Then a dialogue window of the Manager for EMail Accounts is started. You can enter the basic data for the e-mail account:
Figure 24.4.1.2.1: Dialogue for basic data
OK' saves the data entered in the form in the newly created configuration file in the existing hidden directory. The name is optional. It is the name that the reader of an email reads in the line containing the email address of the sender of the email. When the window is closed, the manager starts.


# 24.4.1.3 Working with the manager for email accounts

Figure 24.4.1.3.1: Account manager
With the manager you can


# 24.4.1.4 Working with the Manager for EMail Accounts - SMTP Data

In order to work with the SMTP client, further (SMTP) details are required in addition to the basic data. A click on the SMTP entry for the edited account in the treeview opens another dialogue window:
Figure 24.4.1.4.1: SMTP dialogue box
Some default values are already selected - all others have to be entered according to the specifications of your provider. Attention: For Freenet and T-Online the user name is the complete e-mail address. Press 'OK' to close the dialogue and return to the manager:
Figure 24.4.1.4.2: Account Manager
You could now close the manager and thus start the SMTP client for the first time.
However, it is recommended that you also complete the account data with the POP3 details so that they are also available to a POP3 client later:
Figure 24.4.1.4.3: POP3 Dialogue
You can only select the authentication option 'Password encrypted (APOP)' in the figure on the right if you are sure that the POP3 server also offers this method of authentication - for example, the POP3 server of Freenet.
With 'OK' this dialogue is also closed and you return to the manager:
Figure 24.4.1.4.4: Account Manager
The details of the first account are now complete and 2 more accounts are added here:
Figure 24.4.1.4.5: Account manager with 3 email accounts.
You can fold or unfold the display in the TreeView with the two buttons below the account overview if you have more than one account.


# 24.4.1.5 SMTP Client

Closing the manager opens the SMTP client with the currently edited email account. Therefore, the sender email address is already entered:
Figure 24.4.1.5.1: SMTP client
Now you can make all relevant entries and optionally add attachments. You can delete individual attachments via the context menu in the list. You can enter several e-mail addresses (To:, Copy (CC): or Blind Copy (BCC):) as a list - with a comma as separator.
Before sending, the mandatory entries are checked:
When you send the email, the email is transferred to the SMTP server (MTA) for forwarding.
A progress symbol in front of the button 'Send EMail' informs about the sending process.
If no error occurred, you will receive a success message:
Figure 24.4.1.5.2: Success!


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.4.2 SMTP Project 2

In this chapter you will be introduced to an SMTP client whose special feature is that you do not send an EMail directly but with the standard EMail programme of your system. Your advantage: You set the connection security and the required authentication method for the used e-mail account in the standard e-mail programme of the system.
The project uses the SendMail(…) method of the Desktop class of the component of the same name, which was already described in → Chapter 15.1.1.


# 24.4.2.1 Project - SMTP client

Use the Desktop.SendMail(..) method to prepare an email and pass it to the system's default email client:


```
SendMail(TO As String[][,CC As String[], BCC As String[], Subject As String, Body As String, Attachment As String])
```

The specification of an (active) e-mail address (TO) is mandatory. All other arguments are optional. It is sufficient if you provide the necessary and optional parameters internally in your Gambas programme or enter the data with a form:
Figure 24.4.2.1.1:GUI: SMTP client
After sending the email, the data is transferred to the system's standard email client. The following notes refer to the email client Thunderbird:
I think this is because the console programme xdg-email is used internally to send an email to the preferred email client. In the xdg-email programme, a fine distinction is made between several addresses for TO and one address each for CC and BCC.


```
xdg-email [--utf8] [--cc address] [--bcc address] [--subject text] [--body text ] [--attach file]
          [ mailto-uri | address(es) ]
```

Figure 24.4.2.1.2: Standard e-mail programme in the system with the transferred data


# 24.4.2.2 Project source code

The source code appears to be very extensive - but this is deceptive because extensive checks on the captured arguments for the Desktop.SendMail(…) method are intended to ensure that only valid data is passed:


```
' Gambas class filePrivatesEMailAnhangPfadAsStringPublicSubForm_Open()SetFormPropertysEnd' Form_Open()PublicSubbtnAddAttachment_Click()' Es wird nur ein Anhang akzeptiert, denn der Parameter Attachment in SendMail(...) ist vom Typ String!IflboxAttachments.Count=1ThenlboxAttachments.Remove(0)EndifDialog.Title="EMail-Anhang-Auswahl-Dialog"Dialog.Path=User.HomeIfDialog.OpenFile()ThenReturnHSplit1.Layout=[75,25]sEMailAnhangPfad=Dialog.PathlboxAttachments.Add(" "&File.Name(sEMailAnhangPfad))lboxAttachments.Index=lboxAttachments.Count-1End' btnAddAttachment_Click()PublicSubbtnEMailToDesktopClient_Click()DimsToList, sCCList, sBCCList, sSubject, sEMailBodyAsStringDimsAttachment, sMessage, sEMPattern, sElementAsStringDimaSendTo1, aSendCC1, aSendBCC1AsNewString[]DimaSendTo, aSendCC, aSendBCCAsNewString[]sEMPattern="^[\\w-]+(?:\\.[\\w-]+)*@(?:[\\w-]+\\.)+[a-zA-Z]{2,7}$"' Muster zur Syntax-Prüfung' sEMPattern = "^[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,7}$"' ----------------------------------------------------------------------' EMail-Adressen der Empfänger festlegen (mindestens eine EMail-Adresse )aSendTo1=NewString[]IftxbTo.TextThensToList=Replace(txbTo.Text,Chr(32),"")IfInStr(sToList,",")ThenaSendTo1=Split(sToList,",")ElseaSendTo1.Add(sToList)Endif' InStr(sToList, ",") ?ElseMessage.Warning("Die EMail hat keinen Empfänger!")txbTo.SetFocusReturnEndif' txbTo.Text ?aSendTo=NewString[]ForEachsElementInaSendTo1IfsElement Match sEMPatternThenaSendTo.Add(sElement)ElsesMessage=Message.Warning("Mindestens eine Empfänger-EMail-Adresse ist nicht korrekt!")txbTo.SetFocusReturnEndifNext' ----------------------------------------------------------------------------' Option: Zusätzliche EMail-Adressen der Empfänger festlegen - CC (CarbonCopy)aSendCC1=NewString[]IftxbCC.TextThensCCList=Replace(txbCC.Text,Chr(32),"")IfInStr(sCCList,",")ThenaSendCC1.Add(Split(sCCList,",")[0])' Nur die erste Adresse wird übernommenElseaSendCC1.Add(sCCList)Endif' InStr(sCCList, ",") ?aSendCC=NewString[]ForEachsElementInaSendCC1IfsElement Match sEMPatternThenaSendCC.Add(sElement)ElsesMessage="Mindestens eine CC-Empfänger-EMail-Adresse<br>(CarbonCopy) ist nicht korrekt!"Message.Warning(sMessage)txbCC.SetFocusReturnEndifNextEndif' txbCC.Text ?' ----------------------------------------------------------------------------------------------' Option: Zusätzliche, versteckte EMail-Adressen der Empfänger festlegen - BCC (BlindCarbonCopy)aSendBCC1=NewString[]IftxbBCC.TextThensBCCList=Replace(txbBCC.Text,Chr(32),"")IfInStr(sBCCList,",")ThenaSendBCC1.Add(Split(sBCCList,",")[0])' Nur die erste Adresse wird übernommenElseaSendBCC1.Add(sBCCList)Endif' InStr(sBCCList, ",")ForEachsElementInaSendBCC1IfsElement Match sEMPatternThenaSendBCC.Add(sElement)ElsesMessage="Mindestens eine BCC-Empfänger-EMail-Adresse<br>(BlindCarbonCopy) ist nicht korrekt!"Message.Warning(sMessage)txbBCC.SetFocusReturnEndifNextEndif' txbBCC.Text ?' --------------------------------------------------------------------IftxbSubject.TextThensSubject=txbSubject.TextElseMessage.Warning("Die EMail hat keinen Betreff!")txbSubject.SetFocusReturnEndif' txtSubject.Text ?' --------------------------------------------------------------------IftxaMailBody.TextThensEMailBody=txaMailBody.TextElseMessage.Warning("Die EMail enthält keine Nachricht!")txaMailBody.SetFocusReturnEndif' txaMailBody ?' ---------------------------------sAttachment=sEMailAnhangPfad' ---------------------------------TryDesktop.SendMail(aSendTo, aSendCC, aSendBCC, sSubject, sEMailBody, sAttachment)IfErrorThensMessage="Fehler bei der Übergabe der EMail"sMessage&=gb.NewLine&"an das Desktop-Standard-EMail-Programm!"sMessage&=gb.NewLine&"Fehler-Text: "&Error.TextMessage.Error(sMessage)EndifEnd' btnEMailToClient_Click()PrivateSubSetFormPropertys()FMain.CenterFMain.Arrangement=Arrange.VerticalFMain.Expand=FalseFMain.Margin=TrueFMain.Spacing=TrueFMain.Utility=True' Container HSplitHSplit1.Layout=[100,0]' Man sieht nach dem Programmstart die Box für die Anhänge zunächst nicht' Container VBox links im Container HSplitvboxLeft.Margin=True' Fester Abstand zwischen VBox-Rand und den 4 inneren HBoxenvboxLeft.Spacing=True' Fester Abstand zwischen den 4 inneren HBoxenhboxTo.Spacing=True' Fester Abstand zwischen TextLabel und TextBox in der HBox (Empfänger)txlTo.W=168' Feste Breite des TextLabels → Gilt für alle 4 TextLabeltxlTo.Alignment=Align.Right' Text-Ausrichtung auf dem TextLabel ist "rechts"txbTo.Expand=True' Die Weite der Textbox passt sich dynamisch an die Container-Weite anhboxCC.Spacing=TruetxlCC.W=168txlCC.Alignment=Align.RighttxbCC.Expand=TruehboxBCC.Spacing=TruetxlBCC.W=168txlBCC.Alignment=Align.RighttxbBCC.Expand=TruehboxSubject.Spacing=TruelblSubject.W=168lblSubject.Alignment=Align.RighttxbSubject.Expand=True' Container rechts im Container HSplit' panAttachment ist ein Panel mit spezifischen Eigenschaftswerten (ohne Rand, Anordnung vertikal)panAttachment.Border=Border.None' Panel ohne RandpanAttachment.Arrangement=Arrange.Vertical' Vertikale Anordnung der 2 inneren HBoxenpanAttachment.Margin=True' Fester Abstand zwischenPanel und den zwei inneren HBoxenpanAttachment.Spacing=True' Fester (vertikaler) Abstand zwischen den zwei inneren HBoxenlblAttachment.Alignment=Align.TopLeft' Textanzeige in der linken, oberen EckehboxLIstBox.Expand=True' Maximale AusdehnunglboxAttachments.Expand=True' Maximale AusdehnunglboxAttachments.ScrollBar=Scroll.VerticallboxAttachments.Mode=Select.Single' Steuerelement TextAreaMailBody.Expand=True' Füllt automatisch die Fläche, die HSplit und HBox (unten) frei lassen' Container HBox untenhboxBottom.Height=24hboxBottom.Margin=FalsehboxBottom.Spacing=TruepanSpace.Expand=True' Schiebt die 2 Button an den linken bzw. an den rechten Rand des ContainersbtnEMailToDesktopClient.Text="  EMail an das Desktop-Standard-EMail-Programm schicken"txbTo.CleartxbCC.CleartxbBCC.CleartxbSubject.CleartxaMailBody.CleartxaMailBody.Wrap=TrueEnd' SetFormPropertys
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.4.3 SMTP Project 3

The described SMTP client extends in a straightforward way the project for long-term measurement of temperatures in → Chapter 13.6 TrayIcon. In this real experiment, temperatures are measured and logged and are to be sent as an email via SMTP in this project. An elaborateGUIcan be dispensed with because the programme for long-term measurement is sent to the system menu bar. There, only a tray icon reminds the user that the programme is working in the background.
The basic idea for the project is,
Figure 24.4.3.1: Excerpt from the display in the email client Thunderbird
Here is the source code that implements the above idea in simulated form with randomly generated measurement data. An adaptation to real projects should not be a problem:


```
' Gambas class filePublichSMTPClientAsSMTPClientPublicSubForm_Open()FMain.CenterFMain.Resizable=FalseTimerSend.Delay=5000' 5 Sekunden für TestsTimerSend.StartRMkDir(Application.Path&/"Logs")End' Form_Open()PublicSubTimerSend_Timer()DimsText, sBasisPath, sArchivPath, sLogPathAsStringDimCpAsNewCompressRandomizesText=gb.NewLine&"Protokoll zum Langzeit-Versuch LongTerm_TU"&gb.NewLinesText&=String$(46,"-")&gb.NewLine&gb.NewLinesText&="Datum: "&Format(Now,"dd.mm.yyyy")&"  Zeit: "&Format(Now,"hh:nn:ss")&" Uhr"sText&=gb.NewLine&"Mess-Station: Fuchsbau (52.7904° | 11.7533°)"sText&=gb.NewLine&gb.NewLine&String$(44,"-")&gb.NewLinesText&="Temperatur = "&Str(Rand(16,23))&" °C"&gb.NewLinesText&="Luftdruck  = "&Str(Rand(977,1023))&" hPa"&gb.NewLinesText&=String$(44,"-")&gb.NewLine&gb.NewLine&gb.NewLinesText&="Die Protokoll-Datei liegt im Anhang!"sBasisPath=Application.Path&/"Logs"&/Format(Now,"dd.mm.yyyy-hh:nn:ss")&"_log.txt"sLogPath=sBasisPathFile.Save(sLogPath, sText)WaitsArchivPath=sBasisPath&".gz"Cp.Type="zlib"Cp.File(sLogPath, sArchivPath,9)' KompressionWaitSendProtocol(sText, sArchivPath)KillsLogPathEnd' TimerSend_Timer()PublicSubSendProtocol(EMailTextAsString, ArchivPathAsString)DimsMessageAsStringIfhSMTPClientThenhSMTPClient=NullhSMTPClient=NewSMTPClient' hSMTPClient.Debug = True ' Nur für Testzwecke einschalten' SMTP-ServerhSMTPClient.Host="smtp.server.net"' <<--- ERSETZEN' Port:hSMTPClient.Port=465' <<--- PRÜFEN UND ERSETZEN' VerbindungssicherheithSMTPClient.Encrypt=Net.SSL' <<--- PRÜFEN UND ERSETZEN' EMail-Absender: Konto-Daten (Username und Passwort)hSMTPClient.User="userXY"' <<--- ERSETZENhSMTPClient.Password="passwordXY"' <<--- ERSETZEN' EMail-Absender: EMail-AdressehSMTPClient.From="Vorname Nachname <xyz@smtp.server.net>"' <<--- ERSETZEN' Liste der EMail-EmpfängerhSMTPClient.To.Add("abc@freenet.de")' <<--- ERSETZEN' hSMTPClient.To.Add("to2@freenet.de") ' <<--- ERSETZEN' Option: Liste zusätzlicher EMail-Empfänger (CC = CarbonCopy)' hSMTPClient.Cc.Add("echo@tu-berlin.de") ' <<--- ERSETZEN ODER LÖSCHEN' Option: Liste zusätzlicher, versteckter EMail-Empfänger (BCC = BlindCarbonCopy)' hSMTPClient.Bcc.Add("echo@tu-berlin.de") ' <<--- ERSETZEN ODER LÖSCHEN' Inhalt der Betreff-ZeilehSMTPClient.Subject="Protokoll vom "&Format(Now,"dd.mm.yyyy hh:nn:ss")' EMail-Text (Mime-Typ: text/plain;charset=utf-8)hSMTPClient.Body=EMailText' Option: EMail-Anhänge' Syntax: hSMTP.Add(Datei-Pfad, [ Mime-Typ, anzuzeigender Datei-Name ])hSMTPClient.Add(File.Load(ArchivPath),"application/gzip",Format(Now,"dd.mm.yyyy-hh:nn:ss")&"_log.txt.gz")TryhSMTPClient.SendIfErrorThensMessage="Fehler beim Senden der EMail!"sMessage&=gb.NewLinesMessage&=Format(Now,"dd.mm.yyyy hh:nn:ss")&" Uhr"File.Save(Application.Path&/"Logs"&/"error.log", sMessage)EndifEnd' SendProtocol()PublicSubMkFile(sFilePathAsString)DimhFileAsFileIfNotExist(sFilePath)ThenhFile=OpensFilePathForCreateClose#hFileEndifEnd' MkFile(...)PublicSubRMkDir(sDirectoryAsString)IfNotsDirectoryOrIfExist(sDirectory)ThenReturnRMkDir(File.Dir(sDirectory))MkdirsDirectoryEnd' RMkDir(...)PublicSubForm_Close()TimerSend.StopIfhSMTPClientThenhSMTPClient=NullEnd' Form_Close()PublicSubbtnClose_Click()FMain.CloseEnd' btnClose_Click()
```

Notes:  * You have to adapt the value for the time interval to your needs. For a daily report, the value for the TimerSend.Delay property is 24 * 60 * 60 * 1000 ms.
Here you can see the contents of the error.log file in the event of an (initiated) error:


```
Fehler beim Senden der EMail!
30.01.2016 14:56:59 Uhr
```

Attention:The project does not use the original component gb.net.smtp, but a version corrected by the author and now error-free in the project folder. The component gb.net.smtp should therefore not be activated in the project settings! The error-free version is also available from the Gambas sources as of Gambas 3.8.3.


# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.5.0 Component gb.net.pop3

The POP3Client component (gb.net.pop3) provides you with everything you need via its properties and methods in order to be able to use the online mode
Note:
The component doesnot provide you with a parserfor the content of a downloaded email to display the content of an email - including its attachments!


# 24.5.0.1 Properties

The POP3Client class has these properties:
Table 24.5.0.1.1 : Properties of the class Pop3Client
Excerpt of the output in the console of the Gambas IDE for the value Pop3Client.Debug = True:


```
gb.net.pop3: Connecting to 195.004.092.211
gb.net.pop3: Authenticating...
gb.net.pop3: Sending: USER meinUsername ' Bei FREENET gilt: Username = komplette EMail-Adresse
gb.net.pop3: +OK user ok
gb.net.pop3: Sending: PASS *****************
gb.net.pop3: +OK 4 messages (23445 octets).
gb.net.pop3: OK
```



# 24.5.0.2 Methods

The POP3Client class has these methods:
Table 24.5.0.2.1 : Methods of the class POP3Client
You can create the class. Here is an example:


```
Public hPop3Client As Pop3Client
hPop3Client = New Pop3Client()
```

To manage the individual emails online, you need a so-called message instance:


```
Public hPop3Client As New Pop3Client
Dim hPop3ClientMessage As _Pop3Client_Message
hPop3ClientMessage = hPop3Client [ Index As Integer ]
```

With the following instructions you go through the mailbox online. A message object for each of the individual messages of the type MimeMessage is returned.


```
Public hPop3Client As New Pop3Client
Dim hPop3ClientMessage As _Pop3Client_Message

For Each hPop3ClientMessage In hPop3Client
  ...
Next
```

If you want to find out more about the POP3 protocol, you should at least follow these links:
Actuate the author's experience: Only if you know the basics sufficiently well how the POP3 protocol works, you will be able to use the implemented properties and methods of the class POP3Client successfully. Before you work with the class POP3Client → Chapter 24.5.3 in your POP3 projects, you should therefore read the following two chapters on the practical implementation of the POP3 protocol and reproduce the examples on the console with the data of your own e-mail account.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.5.1 POP3 Console 1

Only a few POP3 servers currently allow an unencrypted connection between a POP3 client and a POP3 server. The easiest way for such a case is to establish a TCP connection to a POP3 server via the client service of the 'telnet' programme:


```
[1] hans@linux:~$ telnet gbbuch.de 110
[2] Trying 109.237.140.40...
[3] Connected to gbbuch.de.
[4] Escape character is '^]'.
[5] +OK AlfaHosting GmbH – ready.
[6] USER meinUSERNAME
[7] +OK
[8] PASS meinPASSWORT
[9] +OK Logged in.
[10] LIST
[11] +OK 2 messages:
[12] 1 2593
[13] 2 2833
[14] .
[15] QUIT
[16] +OK Logging out.
[17] Connection closed by foreign host.
[18] hans@linux:~$
```

Comment:
Here →https://de.wikipedia.org/wiki/Telnetyou get a short description of the console programme telnet.
The following example impressively demonstrates the reactions of a POP3 server requesting an encrypted connection between POP3 client and POP3 server - which can be considered standard for some years now:


```
hans@linux:~$ telnet mx.freenet.de 110
Trying 2001:748:100:40::8:111...
Connected to mx.freenet.de.
Escape character is '^]'.
+OK <8386.1448878562@mx.freenet.de>
USER meinUSERNAME
+OK user ok
PASS meinPASSWORT
-ERR permission denied
Connection closed by foreign host.
hans@linux:~$
```

In the next chapter you will learn how to establish and use an encrypted TCP/IP connection between a POP3 client and a POP3 server in the Linux console.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.5.2 POP3 Console 2

An encrypted TCP connection to a POP3 server works reliably if you use the SSL client 'openssl', for example. You must use port 995 as the port number for POP3 via SSL.


# 24.5.2.1 Example



```
[1] hans@linux:~$ openssl s_client -quiet -connect mx.freenet.de:995
[2] depth=2 C = DE, O = Deutsche Telekom AG, OU = T-TeleSec Trust Center, CN = Deutsche Telekom Root CA 2
[3] verify error:num=19:self signed certificate in certificate chain verify return:0
[4] +OK <500.1448880155@mx.freenet.de>
[5] USER POP3USERNAME
[6] +OK user ok
[7] PASS POP3PASSWORT
[8] +OK 2 messages (5377 octets).
[9] LIST
[10] +OK
[11] 1 2572
[12] 2 2805
[13] .
[14] RETR 1
[15] +OK 2572 octets
[16] [ KOPFZEILEN – HEADER ]
[17]
[18] This is a MIME multipart/mixed message.
[19]
[20] --|1B031C1B1A9321EF01|
[21] Content-Type: text/plain;charset=UTF-8
[22] Content-Disposition: inline
[23] Content-Transfer-Encoding: quoted-printable
[24] Content-Length: 72
[25]
[26] Hallo!
[27] =
[28]
[29] Im Anhang liegt die Datei acht.png
[30] =
[31]
[32] Mit freundlichem Gru=C3=9F
[33] =
[34]
[35] Hans
[36]
[37] --|1B031C1B1A9321EF01|
[38] Content-Type: image/png; name="acht.png"
[39] Content-Disposition: attachment
[40] Content-Transfer-Encoding: base64
[41] Content-Length: 116
[42]
[43] iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAAAO0lEQVQYlX2PyQ0AMAjDnKr7
[44] r5x+egvIEyxwZDBFOoASxJoAEWUB0J6Zhedi5QFSh/0lkDnAd/pWK2sORyMOEhaL7BAAAAAA
[45] SUVORK5CYII=
[46]
[47] --|1B031C1B1A9321EF01|--
[48]
[49] .
[50] NOOP
[51] +OK
[52] QUIT
[53] +OK
[54] hans@linux:~$
```

Comment:
This is quickly done to the console:


```
echo iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAAAO0lEQVQYlX2PyQ0AMAjDnKr7r5x+egvIEyxwZDBFOoASxJoAE \
WUB0J6Zhedi5QFSh/0lkDnAd/pWK2sORyMOEhaL7BAAAAAASUVORK5CYII= | base64 --decode > acht.png
```

You will then see the image in your home directory:
Figure 24.5.2.1.1: Tiny 8×8 pixel image


# 24.5.2.2 Authentication via APOP

If a POP3 server offers authentication via Authenticated Post Office Protocol (APOP), the POP3 user name is sent in plain text in the SSL tunnel, but the POP3 password is transmitted in encrypted form and this is what matters from a security point of view when authenticating to the POP3 server.
Authentication via APOP is based on the challenge-response method, which, according to a post onhttps://de.wikipedia.org/wiki/Challenge-Response-Authentifizierung, can be considered “a secure authentication method of a subscriber based on knowledge”.


```
[1] hans@linux:~$ openssl s_client -quiet -connect mx.freenet.de:995
[2] depth=2 C = DE, O = Deutsche Telekom AG, OU = T-TeleSec Trust Center, CN = Deutsche Telekom Root CA 2
[3] verify error:num=19:self signed certificate in certificate chain
[4] verify return:0
[5] +OK <31534.1448457450@mx.freenet.de>
[6] APOP User-Name Has-Wert
[7] +OK 3 messages (1147469 octets).
[8] LIST
[9] +OK
[10] 1 382310
[11] 2 382307
[12] 3 382852
[13] .
[14] QUIT
[15] +OK
[16] hans@linux:~$
```

Notes:
If a POP3 server responds with a welcome message (line 5) after the connection is established, following the syntax '+OK <process-id.timestamp@hostname>', then you can be sure that the POP3 server also allows authentication via APOP.The POP3 server also transmits the request31534.1448457450@mx.freenet.dein the APOP welcome message after the +OK and a space.From this server request, the client must calculate a hash value as part of the response, including the POP3 user password. Later, the response is sent - without transmitting the password itself in it!The calculation of the hash value as part of the response is done, for example, in a (further) console with this instruction:


```
hans@linux:~$echo-n"<31534.1448457450@mx.freenet.de>POP3-PASSWORD"|openssl md5
```

Subsequently, the complete response from 'User-Name<space>Hash-Value' can be sent to the POP3 server (line 6) after the APOP command:


```
APOP User-Name Hash-Wert
```

If the authentication was successful, then the POP3 server (line 7) sends the number of emails in the mailbox and their total size in bytes after the +OK.
If the authentication fails, then you receive this reply from the POP3 server:


```
-ERRpremission denied
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.5.3 POP3 parser

For the POP3 client in chapter 24.5.4, the component gb.net.pop3client by Sebastian Kulesz is used. In my opinion, the advantage of the component is that all POP3 commands are encapsulated in methods according toRFC1939. Since the Pop3Client class includes, among other things, the Exec(…) method, you can also execute all POP3 commands directly. As an extension of the component, the authentication procedure APOP was implemented by the book author Hans Lehmann. The procedure ensures that the POP3 password is transmitted in encrypted form from the POP3 client to the POP3 server. A description of the APOP authentication procedure can be found in → Chapter 24.5.3. The implementation was done in such a way that the system automatically switches to the APOP procedure if the POP3 client detects that the POP3 server also offers APOP as an authentication procedure. If you switch the 'Debug' property to True in the POP3 client trial, you can follow the complete communication between POP3 client and POP3 server:


```
gb.net.pop3: Connecting to mx.freenet.de
gb.net.pop3: Connecting to Port 995
gb.net.pop3: Encryption: Net.SSL
gb.net.pop3: Change to APOP
gb.net.pop3: Authenticating...
gb.net.pop3: Sending: APOP wer@ist.da 1eeddd29088529659e3bc76e84c4d44c
gb.net.pop3: +OK 2 messages (66766 octets).
gb.net.pop3: APOP Authentification OK
gb.net.pop3: Refreshing inbox cache
gb.net.pop3: Sending: STAT
gb.net.pop3: +OK 2 66766
gb.net.pop3: Sending: UIDL
gb.net.pop3: +OK...
gb.net.pop3: Sending: UIDL
gb.net.pop3: +OK...
gb.net.pop3: Creating new message instance for 0
gb.net.pop3: Sending: RETR 1
gb.net.pop3: +OK 1879 octets...
gb.net.pop3: Creating new message instance for 1
gb.net.pop3: Sending: RETR 2
gb.net.pop3: +OK 64887 octets...
gb.net.pop3: Sending: QUIT
gb.net.pop3: +OK
gb.net.pop3: Disconnecting...
```

For the settings of the created POP3 client object, the POP3 client uses the specifications that have been stored in a configuration file via the manager for e-mail accounts → Chapter 24.3.4 'Manager for e-mail accounts'. If there is no configuration file when the programme is started for the first time, the manager starts automatically. These six settings must be assigned suitable values for POP3:
and are required in the following procedures:


```
PublicSubGeneratePOP3Client(_DebugAsBoolean)IfhPOP3Client<>NullThenIfhPOP3Client.Status=Net.ConnectedThenIfhPOP3Client.Close()=FalseThenhPOP3Client=NullEndifElsehPOP3Client=NullEndifEndifhPOP3Client=NewPop3Client
  hPOP3Client.Host=acSettings[sCurAccount&"/POP3Server"]hPOP3Client.Port=CInt(acSettings[sCurAccount&"/POP3Port"])IfUpper(acSettings[sCurAccount&"/POP3Encryption"])="NET.SSL"ThenhPOP3Client.Encrypt=1IfUpper(acSettings[sCurAccount&"/POP3Encryption"])="NET.NONE"ThenhPOP3Client.Encrypt=0IfacSettings[sCurAccount&/"POP3Authentication"]=("Password normal")Then\hPOP3Client.Authent=Net.AuthBasic' 0IfacSettings[sCurAccount&/"POP3Authentication"]=("Password encrypted (APOP)")Then\hPOP3Client.Authent=Net.AuthAPOP' 3hPOP3Client.User=acSettings[sCurAccount&"/POP3UserName"]hPOP3Client.Password=M3.E4(acSettings[sCurAccount&"/POP3UserPassword"])' Decrypted passwordhPOP3Client.Debug=_DebugEnd' GeneratePOP3Client(...)PublicFunctionConnectToPOP3Server()AsStringTryhPOP3Client.Open()IfNotErrorThenReturn"NoError"End' ConnectToServer()
```

If there is a connection from the POP3 client to the POP3 server:
You can also delete individual e-mails in the mailbox on the POP3 server by marking the e-mail as the e-mail to be deleted via the number of the e-mail. You can undo this marking for all affected e-mails by using the Reset() method. The marked e-mails are only actually deleted when you terminate the TCP-IP connection.
With this information, you are able to either selectively download a specific e-mail from the mailbox on the POP3 server to a local mailbox on your home PC for a specific e-mail account or to do this for all e-mails. The POP3 client always triggers the download for all e-mails in the mailbox - but only if an e-mail is not yet in the local mailbox. In the account settings, you can also specify that all e-mails should be deleted from the POP3 server after they have been downloaded to the mailbox.
The following paragraph describes how the download of all emails present in the selected mailbox on the POP3 server has been implemented. Saving an email in the local mailbox to a specific email account is done by saving the email source text in a file. The file name for the source text is generated from the unique ID of each email.
The complete source text for the procedure is given, which is then commented on.
Source text for downloading and storing emails:


```
[1]PublicSubRetrieveEMails()[2][3]Dimi, iCount, iIndexAsInteger[4]DimsFileName, sBaseName, sMessage, sMailBoxDir, sMimeMessageText, sSavePath, sUniqueIDText, sHashAsString[5]DimdMMDateAsDate[6]DimiUIDAsInteger[7]DimaValue, aElementAsNewVariant[][8]DimaDownloadListAsNewVariant[][][9]DimaBaseNameListAsNewString[][10]DimhMimeMessageHeadersAsMimeMessage[11][12]IfNotMMMP.SystemOnline()ThenReturn[13][14]sMailBoxDir=sBaseDir&/sCurAccount[15][16]'----------------------------------------------------------------------------[17]GeneratePOP3Client(True)' True for debugging for tests[18]'----------------------------------------------------------------------------[19][20]IfConnectToPOP3Server()="NoError"Then[21]sMessage=("Connected to ")&acSettings[sCurAccount&"/POP3Server"][22]lblStatus.Text=sMessage[23]Else[24]sMessage=("Error connecting to the POP3 server!")[25]lblStatus.Text=sMessage[26]Return[27]Endif[28]Wait0.2[29][30]IfhPOP3Client.Count>0Then[31]ForEachsFileNameInDir(sMailBoxDir,"*.*", gb.File)' Lokales Postfach[32]aBaseNameList.Add(Scan(sFileName,"*.*.*")[1])[33]Next[34][35]Fori=0TohPOP3Client.Count-1[36]' Muster ListUniqueID: 4 000008394ef05e55[37]sUniqueIDText=Scan(hPOP3Client.ListUniqueID()[i],"* *")[1][38]sHash=Split(Base64(Digest["MD5"].Hash(sUniqueIDText)),"=")[0][39]sHash=Replace(sHash,"+","A")[40]sHash=Replace(sHash,"/","B")[41][42]sBaseName=sHash[43][44]' Wenn eine EMail auf dem POP3-Server noch NICHT lokal gespeichert wurde, dann wird ihre[45]' EMail-Nummer (UID-Zahl) auf dem Server und ihr konvertierter UID-Text als sBaseName = sHash[46]' als Basis-Dateiname in die Download-Liste eingetragen.[47]IfNotaBaseNameList.Exist(sBaseName)Then[48]aValue=NewVariant[][49]iUID=CInt(Scan(hPOP3Client.ListUniqueID()[i],"* *")[0])[50]aValue.Add(iUID)' EMail-Nummer[51]aValue.Add(sBaseName&".txt")' Dateiname als konvertierter UID-Text[52]aDownloadList.Add(aValue)[53]Endif[54]Next[55]Endif[56][57]IfaDownloadList.Count=0[58]lblStatus.Text=("You have no new messages!")[59]Wait0.5[60]lblStatus.Text=""[61]IfConnected()ThenDisconnectFromPOP3Server()[62]Return[63]Else[64]lblStatus.Text=Subst$(("You have &1 new &2."), aDownloadList.Count,\[65]IIf(aDownloadList.Count=1,("message"),("messages")))[66]Wait0.3[67]Endif[68][69]lblStatus.Text=""[70]iCount=0[71]wevBody.Url=Application.Path&/"download.html"[72][73]ForEachaElementInaDownloadList[74]InciCount[75]lblStatus.Text=("Download ")&Str$(iCount)&(" of ")&Str$(aDownloadList.Count)[76]iIndex=aElement[0][77][78]' -------------------------------------------------------------------------------------[79]' Download einer EMail (EMail-Quelltext vom Typ MimeMessageText)[80]sMimeMessageText=hPOP3Client[iIndex-1].Text[81]Wait[82]' -------------------------------------------------------------------------------------[83][84]hMimeMessageHeaders=NewMimeMessage(MMMP.GetMMHeaderText(sMimeMessageText))[85][86]dMMDate=MMMP.ReadDate(hMimeMessageHeaders.Headers["Received"])[87]sSavePath=sMailBoxDir&/Format(dMMDate,"yyyy-mm-dd-hh-nn-ss")&"."&aElement[1][88]File.Save(sSavePath, sMimeMessageText)[89]Wait[90]' -------------------------------------------------------------------------------------------------[91]' Löschen der EMail *auf dem Server* nach dem Download, wenn das Löschen der EMails vorgesehen ist![92]IfbDeleteMailAllowed=TrueThenhPOP3Client.Remove(iIndex-1)[93][94]UpdateListHeaders(sBaseDir&/sCurAccount)[95]' Anzeige einer Übersicht der lokal gespeicherten EMails[96]' (Anhang-Symbol(optional), Betreff, Absender, Datum und Größe)[97]ShowMailHeaders(aListHeaders)[98][99]Next' EMail[100][101]IfaListHeaders.Count>0Then[102]IfDir(sBaseDir&/sCurAccount,"*.txt", gb.File).Count>0Then[103]ShowMailData()' Anzeige der EMail im internen Browser (WebView)[104]Endif[105]Endif[106][107]lblStatus.Text=("Download completed!")[108]Wait0.3[109][110]'------------------------------------------------[111]IfConnected()ThenDisconnectFromPOP3Server()[112]DestroyPOP3Client()[113]'------------------------------------------------[114][115]End' RetrieveEMails()
```

Comment:
After the successful download, the e-mails are in the local mailbox. Whenever e-mails are mentioned in the following paragraphs, the e-mail source text of the type MimeMessage is always meant, for the processing of which the classes of the component gb.mime are used → Chapter 24.3.0 Component gb.mime.
The algorithms necessary for displaying the emails are based on the knowledge and understanding of how emails are structured internally. For this reason, a parser was first developed that determines the structure for a given email source text of the type MimeMessage and saves it as anHTMLfile and falls back on the parser in → Chapter 24.3.2 Class MimePart. It is noticeable that this structure has a (recursive) nested character, which is also reflected in the project source code (recursive loop) of the structure parser for emails:


```
':::::  MIMEMESSAGE-STRUKTUR GENERIEREN UND ALS HTML-DATEI SPEICHERN  :::::::::::::::::::::::::::::::::::' Funktion:        Structure(...)' Parameter:       MimeMessageText Typ: String' Funktionswert:   Datei-Pfad zur Struktur-Datei Typ: StringPublicFunctionStructure(MimeMessageTextAsString)AsStringDimsHTMLDataAsString$sMM=NewMimeMessage(MimeMessageText)sHTMLData="<!DOCTYPE html>"&gb.NewLinesHTMLData&="<html lang=\"de\">"&gb.NewLinesHTMLData&=" <head>"&gb.NewLinesHTMLData&="  <meta charset=\"utf-8\">"&gb.NewLinesHTMLData&="  <style>"&gb.NewLinesHTMLData&="    body{font-family:Arial,Verdana;color:darkgreen;font-size:16px;}"&gb.NewLinesHTMLData&="  </style>"&gb.NewLinesHTMLData&=" </head>"&gb.NewLinesHTMLData&=" <body>"&gb.NewLinesHTMLData&=Replace(GetMimeMessageStructure($sMM.Part), gb.NewLine,"<br>\n")sHTMLData&=" </body>"&gb.NewLinesHTMLData&="</html>"' Struktur-Datei temporär speichernFile.Save($sBasePath&/_STRUCTURFILENAME, sHTMLData)If$bDebugThen_PrintDebug(("Show EMail-Structure"))Return$sBasePath&/_STRUCTURFILENAMEEnd' Structure(...)' Funktion:        GetMimeMessageStructure(...)' Parameter:       Part Typ: MimePart' Funktionswert:   Text der Struktur-Datei Typ: StringPrivateFunctionGetMimeMessageStructure(PartAsMimePart)AsStringDimsBodyTypeAsStringIf$bDebugThen_PrintDebug(("Create EMail-Structure"))IfNotPartThenError.Raise("MimePart not set")sBodyType=Scan(Part.Headers["Content-Type"],"*;*")[0]$sStructure=""$sStructureH=("STRUCTURE MIME-MESSAGE")$sStructureH&=gb.NewLine$sStructureH&=String$(String.Len($sStructureH),"-")&gb.NewLine$sStructureH&=gb.NewLine$sStructureH&="+ "&sBodyType&gb.NewLine$sStructureB=""ParseStructureBody($sMM.Body)' Parse Structure: Body$sStructureA=""$iAttachmentCount=0$iFlag=0ParseStructureAttachments(Part)' Parse Structure: Attachments$sStructure=$sStructureH&$sStructureB&$sStructureAReturn$sStructureEnd' GetMimeMessageStructure(...)' Prozedur:       ParseStructureBody(...)' Parameter:      Part Typ: MimePart' Aktion:         Parsen der Struktur des MimeMessage-Bodys.'                 Das Ergebnis wird in der Variablen $sStructureB gespeichertPrivateSubParseStructureBody(PartAsMimePart)DimhChildAsMimePartDimsLineAsStringsLine&=String$($iLevel,"| ")&"| "&gb.NewLinesLine&=String$($iLevel,"| ")&"+-"&If(Part.Count,"+ ","- ")sLine&=Part.ContentType&" "&IIf(Part.FileName, Part.FileName&" ","")&Part.Count&gb.NewLine$sStructureB&=sLineInc$iLevelForEachhChildInPart
        ParseStructureBody(hChild)' Recursive loopNextDec$iLevelEnd' ParseStructureBody(...)' Prozedur:       ParseStructureAttachments(Part As MimePart)' Parameter:      Part Typ: MimePart' Aktion:         Parsen der Struktur des MM-Anhangs.'                 Das Ergebnis wird in der (globalen) Variablen $sStructureA gespeichertPrivateSubParseStructureAttachments(PartAsMimePart)DimhChildAsMimePartDimsLineAsStringIfPart.Disposition="attachment"AndStr(Part.Count)=0ThenIf$iFlag=0ThensLine&="|"&gb.NewLineInc$iFlagEndifsLine&=("+ Attachment ")&Str($iAttachmentCount+1)&": "&" "&Part.ContentTypesLine&=" "&Part.FileName&gb.NewLineInc$iAttachmentCount
     $sStructureA&=sLineEndifInc$iLevelForEachhChildInPart
        ParseStructureAttachments(hChild)' Recursive loopNextDec$iLevelEnd' ParseStructureAttachments(..)':::::  ENDE MIMEMESSAGE-STRUKTUR GENERIEREN UND ALS HTML-DATEI  SPEICHERN ::::::::::::::::::::::::::::::
```

As a result, you receive the following display of the structure of an email in the browser from the parser for the email source text passed as an argument:


```
STRUKTUR MIME-MESSAGE
----------------------

+ multipart/mixed
|
+-+ multipart/alternative 2
| |
| +-- text/plain 0
| |
| +-+ multipart/related 3
| | |
| | +-- text/html 0
| | |
| | +-- image/png bild1.png 0
| | |
| | +-- image/png bild2.png 0
|
+ Anhang 1: text/plain body.txt
+ Anhang 2: image/png chart.png
```

Interpretation:
The next step is to use the methods of the class 'MimeMessageParser' to isolate the individual parts of an email for display according to their recursive structure, decode them and store them temporarily in a suitable way. The parts are isolated separately for body and attachment. If one uses the classes of the component gb.mime, then one does not need to worry about the decoding of an image, for example, which is base64-encoded in the email source text. The decoding takes over the data property for each part automatically, so that you only have to turn to the storage of the decoded parts. The text parts of a message are stored in anHTMLfile. Multimedia objects such as pictures or videos are saved in individual files and the file path is inserted as a link in theHTMLfile. The path to theHTMLfile is then saved in a variable and passed to theURLproperty of a WebView as a value. The attachments (optional) are decoded and temporarily stored under their original file name in a special directory. For each attachment, a button is generated whose tag property contains the path to the attachment. You can view the content of an attachment (if it is of a suitable type) or save the attachment in the dialogue.
This is how the display of an e-mail (format text/plain) with 2 attachments appears in the browser after the e-mail source text has been parsed:
Figure 24.5.3.1:GUIPOP3 client
The source code for the most important procedures of the MimeMessageParser is only complicated at first glance. In my opinion, this is mainly due to the sections in which recursions determine the programme flow (→ recursive loop):


```
':::::  BEGINN BODY PARSEN  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::' Funktion:        MessageBody(...)' Parameter:       MimeMessageText Typ: String' Funktionswert:   Datei-Pfad zum Text-Teil - Typ: StringPublicFunctionMessageBody(MimeMessageTextAsString)AsString$cInlineCID.Clear$bIsText=False$bIsHTML=FalseMMMP.DeleteTempFiles($sBasePath&/$sInlineDir)MMMP.DeleteTempFiles($sBasePath)$sMM=NewMimeMessage(MimeMessageText)ParseBody($sMM.Body)If$cInlineCID.Count>0ThenReplaceCID()EndifIf$bIsHtmlOr($bIsHtmlAnd$bIsText)ThenReturn$sBasePath&/_HTMLFILENAMEEndifIf$bIsTextThenReturn$sBasePath&/_TEXTFILENAMEEndifEnd' Prozedur:	ReplaceCID() - CID steht für Content-ID' Parameter:	-' Aktion:	In der HTML-Datei wird jede CID durch den Pfad zur Inline-Datei ersetztPrivateSubReplaceCID()DimsHTMLTextAsStringDimvElementAsVariantsHTMLText=File.Load($sBasePath&/_HTMLFILENAME)ForEachvElementIn$cInlineCID
    sHTMLText=Replace(sHTMLText,"cid:"&$cInlineCID.Key, $cInlineCID[$cInlineCID.Key])Next' Speichern der geänderten HTML-DateiFile.Save($sBasePath&/_HTMLFILENAME, sHTMLText)End' Prozedur:        ParseBody()' Parameter:       Part Typ: MimePart' Parsen des MimeMessage-Bodys (Inline-Dateien, Nachricht)' Die in einer HTML-Nachricht liegenden multimedialen Objekte (image, audio, video, application)' werden in der Variablen '$cInlineCID' (Typ: Collection) mit dem originalen Datei-Namen gespeichert.' Die Pfade zu den Objekten werden in der Variablen $cInlineCID (Typ: Collection) gespeichert.' Eine Nachricht kann eine Text-Nachricht oder eine HTML-Nachricht oder beides sein.' Jede Nachricht wird in einer Datei mit den Datei-Namen "html.part.html" oder "text.part.html"' im Basis-Verzeichnis temporär gespeichertPrivateSubParseBody(PartAsMimePart)DimhChildAsMimePartDimsTextDataAsStringIfPart.DataThenIfPart.Disposition="inline"And(Part.ContentTypeLike"image/*"OrPart.ContentTypeLike"audio/*"OrPart.ContentTypeLike"application/*"OrPart.ContentTypeLike"video/*")ThenFile.Save($sBasePath&/$sInlineDir&/Part.FileName, Part.Data)$cInlineCID[Part.ContentId]=$sBasePath&/$sInlineDir&/Part.FileNameEndifIfPart.ContentType="text/html"Then$bIsHtml=TrueFile.Save($sBasePath&/_HTMLFILENAME, Part.Data)EndifIfPart.ContentType="text/plain"ThensTextData="<!DOCTYPE html>"&gb.NewLinesTEXTData&="<html lang=\"de\">"&gb.NewLinesTextData&=" <head>"&gb.NewLinesTextData&="  <meta charset=\"utf-8\">"&gb.NewLinesTextData&="  <style>"&gb.NewLinesTextData&="    body{font-family:Verdana,sans-serif;color:darkred;font-size:16px;}"&gb.NewLinesTextData&="  </style>"&gb.NewLinesTextData&=" </head>"&gb.NewLinesTextData&=" <body>"&gb.NewLinesTextData&=Replace(Part.Data, gb.NewLine,"<br>\n")sTextData&=" </body>"&gb.NewLinesTextData&="</html>"$bIsText=TrueFile.Save($sBasePath&/_TEXTFILENAME, sTextData)EndifEndif' Part.Data ?ForEachhChildInPart
    ParseBody(hChild)' Recursive loopNextEnd':::::  ENDE BODY PARSEN  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::':::::  ANHÄNGE TEMPORÄR SPEICHERN (DATEI)  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::' Funktion:        Attachments(...)' Parameter:       MimeMessageText Typ: String' Funktionswert:   Array mit den Datei-Pfaden zu den Anhängen - Typ: String-ArrayPublicFunctionAttachments(MimeMessageTextAsString)AsString[]$aAttachmentPaths.Clear$sMM=NewMimeMessage(MimeMessageText)ParseA($sMM.Part)' Funktionswert: String-Array mit den Pfaden zu den AnhängenReturn$aAttachmentPathsEnd' ParseAttachments(..)' Prozedur:       ParseA(...)' Parameter:      Part Typ: MimePart' Aktion:         Parsen des MM-Anhangs.'                 Jeder Anhang wird in einer Datei mit dem originalen Datei-Namen des Anhangs gespeichert'                 Das Array $aAttachmentPaths wird mit den Datei-Pfaden zu den Anhängen gefülltPrivateSubParseA(PartAsMimePart)DimhChildAsMimePartIfPart.Disposition="attachment"AndPart.Count=0Then' Anhang (temporär) in einer Datei mit dem Namen der Original-Datei speichernFile.Save($sBasePath&/$sAttachmentsDir&/Part.FileName, Part.Data)' Aktuellen Datei-Pfad zum String-Array hinzufügen$aAttachmentPaths.Add($sBasePath&/$sAttachmentsDir&/Part.FileName)EndifForEachhChildInPart
    ParseA(hChild)' Recursive loopNextEnd' ParseA(..)':::::  ENDE ANHÄNGE TEMPORÄR  SPEICHERN ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
```

Attention: Replacing the CID (content id) in the procedure ReplaceCID() only works safely if multimedia objects have been included via a CID.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.5.4 POP3 client

The project provides you with a POP3 client as a direct supplement to the SMTP client. The project uses properties and methods of the Pop3Client class (→ Chapter 24.4.1) as well as constants of the Net class and a self-developed parser for texts of the MimeMessage type (MMParser class). To manage email accounts, you can call up a manager (→ Chapter 24.3.4) in the menu.
Figure 24.5.4.1:GUIPOP3 client
The complete POP3 client project is provided in the download section.


# 24.5.4.1 Programme start

When the programme is started for the first time, a hidden directory is created in the user's home directory where a configuration file is saved by the integrated account manager or the POP3 client accesses the configuration file already created during work with the SMTP client. The POP3 client, the SMTP client and also the manager for e-mail accounts use the same configuration file.
Work with the manager for email accounts (basic data, SMTP and POP3 data) is omitted at this point and reference is made to chapters → 24.4.1.2 to 24.4.1.4.
The menu has the following structure:
Figures 24.5.4.1.1: POP3 Client Menu


# 24.5.4.2 Notes

If you have selected an e-mail account, an overview of all e-mails already stored in the account's mailbox and the contents of the first e-mail are displayed in the browser, provided at least one e-mail is available. The overview is sorted by date.
For e-mails in text format, the message text is displayed in dark red:
Figure 24.5.4.2.1:GUIPOP3 client - text message
The text of e-mails in text format is converted toHTML. This has the advantage of being able to display all emails in the browser.


```
IfPart.ContentType="text/plain"ThensTextData="<!DOCTYPE html>"&gb.NewLinesTEXTData&="<html lang=\"de\">"&gb.NewLinesTextData&=" <head>"&gb.NewLinesTextData&="  <meta charset=\"utf-8\">"&gb.NewLinesTextData&="  <style>"&gb.NewLinesTextData&="    body{font-family:\"Ubuntu mono\",Arial,Verdana,sans-serif;color:darkred; /
                     font-size:16px;}"&gb.NewLinesTextData&="  </style>"&gb.NewLinesTextData&=" </head>"&gb.NewLinesTextData&=" <body>"&gb.NewLinesTextData&=Replace(Part.Data, gb.NewLine,"<br>\n")sTextData&=" </body>"&gb.NewLinesTextData&="</html>"$bIsText=TrueFile.Save($sBasePath&/_TEXTFILENAME, sTextData)Endif
```

For emails inHTMLformat, the layout as well as the design are specified by the email itself:
Figure 24.5.4.2.2:GUIPOP3 client -HTMLmessage
The computer iconsandin the status bar indicate whether the system is connected to the internet or not. The check only takes place at the start of the programme.
You can view the structure of each e-mail via the menu item 'Display e-mail structure'. This becomes important if you want to partially change or extend the POP3 client project. The structure of the displayed e-mail is shown in green in the browser:


```
STRUKTUR MIME-MESSAGE
----------------------

+ multipart/mixed
|
+-+ multipart/alternative 2
| |
| +-- text/plain 0
| |
| +-+ multipart/related 3
| | |
| | +-- text/html 0
| | |
| | +-- image/png bild1.png 0
| | |
| | +-- image/png bild2.png 0
|
+ Anhang 1: text/plain body.txt
+ Anhang 2: image/png chart.png
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.6.0 Component gb.web

The web component gb.web allows you to develop a web application based on a CGI script using the following classes:
They primarily use
To develop and test CGI web applications with the gb.web component, you need an HTTP server on your system, because web applications run on an HTTP server!


# 24.6.0.1 Excursus 1

The development of web applications with the components gb.web or also gb.web.gui only really makes sense if, on the system
so that you can actively work with Gambas generated web pages or the Gambas CGI scripts in the form of WebPages!
The Gambas Wiki and the Gambas Bugtracker are such web applications that are written in Gambas and run on a server that meets the above conditions. For most users, therefore, the only option is to test and run the developed web applications on a local server.
Notes:
Initial situation:
(a) Change to the project folder of the WebPage:


```
hans@mint20:~/Schreibtisch$ cd wpi
hans@mint20:~/Schreibtisch/wpi$ GB_HTTPD_PORT=8080 gbx3
```

Result: Output of theHTMLsource code in the console.
(b) Change to the project folder of the WebPage and activate the embedded web server:


```
hans@mint20:~/Schreibtisch/wpi$ GB_HTTPD_PORT=8080 gbx3 --httpd  ' Alternative -H
```

This is the output in the console:


```
gb.httpd: bind 0.0.0.0 - Address already in use.
```

After calling it in the author's browser withhttp://localhost:8080or localhost:8080 or 127.0.0.1:8080 or, for example, withhttp://192.168.2.106:8080, you will see the web page display in full epic width. You can cancel the interpreter with CTRL+C.
After copying the executable file wpi.gambas and the required files css/style.css and images/favicon.png into the web directory ~/public_html, the web page is displayed via the local web server Lighttpd with:


```
http://localhost/~hans/cgi-bin/wpi.gambas
```

Figure 24.6.0.1.1: Display in the web browser (Lighttpd)


# 24.6.0.2 Digression 2

You can use the three domainsexample.comorexample.orgorexample.netas sample domain names in your examples (→RFC2606). Only these three reserved domains currently administered by the Internet Assigned Numbers Authority (IANA) can be used in your samples without any problems. You can find details on this topic on Daniel Rehbein's website athttp://www.daniel-rehbein.de/rfc2606.html(→ as of 23.11.2020).


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.6.1 Class CGI

The CGI (gb.web) class contains methods for accessing environment variables that you can use in your CGI projects.


# 24.6.1.1 Methods

The CGI class has only these four methods:
Table 24.6.1.1 : Methods of the CGI class.
Notes:


# 24.6.1.2 Examples



```
Print CGI.Encode("http://www.gambas-buch.de/dw/doku.php?id=k18:start")
Print CGI.Decode("http%3A%2F%2Fwww.gambas-buch.de%2Fdw%2Fdoku.php%3Fid%3Dk18%3Astart")
Print CGI.FormatDate(Now)
Print CGI.Error("Das ging schief...!")
```

Outputs in the console of the Gambas IDE:


```
http%3A%2F%2Fwww.gambas-buch.de%2Fdw%2Fdoku.php%3Fid%3Dk18%3Astart
http://www.gambas-buch.de/dw/doku.php?id=k18:start

Sat, 19 Jul 2014 18:36:13 GMT

<h1>Error in CGI script</h1><pre>Das ging schief...!</pre>
```



# 24.6.1.3 Reading and setting environment variables

However, you can also use the CGI class like an array to read ( CGI[..] ) or set ( CGI[..] = … ) the value of environment variables - as shown in the following examples:
For an overview of CGI environment variables, see the link:


```
http://de.selfhtml.org/servercgi/cgi/umgebungsvariablen.htm
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.6.2.0 Class Webpage (gb.web)

The chapter picks up on basic theories from chapter '24.6.10 Developing web applications with Gambas' and supplements them with the description of several web projects based on the Webpage class.
Among other things, the Webpage class implements anHTMLpage. A webpage always consists of two parts:
Among other things, the class has the static method Main(). This method allows you to use any web page as the start class. The Main() method uses the Render() method to output the completeHTMLof the generated web page.
Using the gb.web component only really makes sense if the Internet web server has
so that you can run your web pages there based on the Webpage class!
Most users therefore only have two options for testing the developed web applications:
The author's intranet consists of three computers (desktop PC A and two laptops B and C). All computers have fixed IP addresses despite DHCP. A Lighttpd web server is installed on both PC A and PC B. The web server on PC B acts as a web server for the intranet.
The use of the Gambas programming language and the JavaScript scripting language allows you to dynamically insert or change content on a web page using a special syntax. You can useCSSto design a website in a variety of ways, which you can see here:

Figure 24.6.2.0.1: Output of an SQLite database report in a web page
An SQLite database report is inserted into the webpage 'IncDBReport.webpage', for example, using a Gambas function that is defined in the Gambas class 'DBReport.class'.
A timer is realised via a JavaScript script, with which the current time is periodically displayed in the footer of all web pages:

Figure 24.6.2.0.2: Display of the current time (footer) with a JavaScript timer
The web pages are delivered from the web server to computer B and displayed in the web browser on computer A.


# 24.6.2.0.1 Properties

The Webpage class only has two properties:


# 24.6.2.0.2 Methods

In addition to the static Main() method mentioned above, the Webpage class has two further methods:
The Gambas compiler uses the Render() method to generateHTMLsource code from a webpage file wp_name.webpage and from the class wp_name.class linked to it.


# 24.6.2.0.3 Webpage - Syntax

The Webpage class uses a special syntax - which is based on ASP (Active Server Pages) - to insert Gambas source code into a webpage *.webpage.
Table 24.6.2.0.1 : Web page syntax


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.6.3 Class Application

The Application (gb.web) class provides information about a CGI application.


# 24.6.3.1 Properties

The Application class has six properties:
Table 24.6.3.1.1 : Properties of the Application class.
Notes:
You can also determine the value of theApplication.Requestproperty using CGI environment variables like this:


```
"http://" & CGI["HTTP_HOST"] &/ CGI["PATH_INFO"] &/ CGI["SCRIPT_NAME"] & "?" & CGI["QUERY_STRING"]
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.7.0 MarkDown


The question of what MarkDown is is most clearly answered athttp://de.wikipedia.org/wiki/Markdown:
Markdown is a simplified markup language designed by John Gruber and Aaron Swartz. One of the goals of Markdown is that the original form should be easily readable without further conversion. Therefore, mainly markup types that are common in plain text and e-mails were used as markup elements. Other markup languages with similar readability goals - such as reStructuredText or Textile - also had an influence on the syntax. Markdown conversion software converts text into valid andW3C-compliant XHTML…. Markdown uses mainly punctuation marks to mark up text, and in some cases allows several equivalent methods. Characters that are usually understood as format commands can be masked (skipped) with a backslash. For example, an asterisk symbol (“asterisk”, “*”) at the beginning of a line is interpreted as a bullet; if you really want an asterisk, preface it with a backslash: “\*”. Authors can use XHTML block elements for more complex mark-ups if necessary. These elements are transferred to the target document by the conversion software without any changes. This makes it possible to format areas of the document in ordinary XHTML.
The MarkDown component (gb.markdown) provides the (basic) functionality to generate anHTMLfile from a text file in MarkDown syntax via the two classes MarkDown and MarkDownLink. The main field of application for the MarkDown component is the generation ofHTMLpages for the documentation of components, classes and projects of the Gambas programming language. The wiki of the Gambas developer pages is a collection ofHTMLpages generated via MarkDown texts →http://gambaswiki.org/wiki.
The following list of links will take you to interesting websites, each of which addresses the topic of MarkDown in a special way:
On the one hand, the syntax of the Gambas MarkDown variant largely follows the original by John Gruber. On the other hand, special syntax elements are added that result from the above-mentioned purpose. A great advantage is the possibility to add your own syntax elements. You can find out how this can be done, for example, in chapter → 24.7.1 Projects in the presented project 2.
In the DownLoad section you will find a reference list of the Gambas MarkDown syntax.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.7.1 Projects

Texts in MarkDown syntax can be written quickly and read well, because Gambas-MarkDown comes with everything you need to generate (simple) web pages, among other things.


# 24.7.1.1 Project 1 Wiki

In the Gambas examples you will find the project SmallWiki, in which the classes MarkDownLink and MarkDown are used. It follows the approach of the new Gambas Wiki, which you probably already know under the addresshttp://gambaswiki.org/wiki.
Try out the project at your leisure and have a look at the source texts - especially if you want to use a comfortable help system for your (larger) projects yourself, which can be called up in any web browser.
Figure 24.7.1.1: Calling the wiki (server: internal web server HTTPD on port 8080)
Figure 24.7.1.1.2: Entering the administrator account data and confirming with OK
You create a new page in your wiki by entering the namespace and the name of the new (web page without extension!) in the address line. The wiki software recognises that the requested web page does not exist and gives you the further procedure in an error message:
Figure 24.7.1.1.3: Creating a new, empty page with 'Create'.
You can then edit the new, empty web page and design it with text in MarkDown syntax. Do not forget to save the edited web page. Afterwards you should edit the start page and insert a link to the new page there:
Figure 24.7.1.1.4: Editing the start page and inserting a link
After saving, you will see the link in the home page.
Figure 24.7.1.1.5: Modified start page with link to excursion page


# 24.7.1.2 Project 2 - Generate a web page from a MarkDown file

Project 2 shows you how to generate individual web pages whose basis is a file in MarkDown syntax. All necessary files are edited and saved directly in the project. When the programme is started for the first time, image files,CSSfiles and other multimedia objects are exported to a folder whose name you can freely specify. Changes in the style sheet file md_style.css used are transferred to a newly generated web page.
A special feature is the inner linking via anchors and links. While you can formulate a link to a link target (anchor) with MarkDown syntax like this:


```
Hier finden Sie Informationen zur [Konstanten 'Syntax'](#Syntax).
```

you must insert the appropriate anchor yourself inHTMLin the MarkDown text:


```
<a id="Syntax"></a>
```

At any point in the MarkDown text, you can cause a jump to the top of the page like this - without specifying a special anchor:


```
<a href="#top">Zum Seitenanfang...</a>
```

You can also place a link on a matching image:


```
<img src="./images/home.png"><a class="mylink" href="#top">&nbsp;&nbsp;HOME</a>
```

To implement a display like this:
Figure 24.7.1.2.1: Representation for @{since 3.x} in the web page
you need to extend the gb.markdown component. This can be done very easily by writing your own class myMarkDown.class, which inherits the existing class MarkDown with the first line 'Inherits Markdown'. In the function Command(…) you determine how a line with @{since 3.6} is converted into validHTML:


```
' Gambas class fileInheritsMarkdownPublicFunctionCommand(sCommandAsString)AsString[]DimaArgAsString[]aArg=Split(sCommand," ",Chr$(34))sCommand=aArg[0]IfsCommand="since"ThenReturn["<div class=\"since\">"&("Since")&"&nbsp;"&Html(aArg[1])&"</div>"]EndifEnd' Command(...)
```

To generate a web page and save it in the specified folder, start the main programme, whose interface is very spartan:
Figure 24.7.1.2.2: Starting the programme
Inserting a table in MarkDown syntax into a MarkDown file is a particular challenge. This task is performed by a separate form in Project 2 → Figure 24.7.1.2.4.
Figure 24.7.1.2.3: Tables in the website
Figure 24.7.1.2.4: Table conversion
With 'Apply' the table definition in MarkDown syntax with matching table description is taken over into the clipboard and can be immediately transferred from there into the MarkDown file md_syntax.md to be edited.


# 24.7.1.3 Using the generated web pages

You can view the wiki in the first project immediately from within the programme because internally a web server (HTTPD) takes over the delivery of theHTMLpages → Figure 24.7.1.1.1 and then the display takes place in the standard browser.
With these commands in the (system) console, you can push the wiki display via the Gambas executable file SmallWiki36.gambas:


```
hans@linux:~/Projekte/SmallWiki$ GB_HTTPD_PORT=8080 gbx3 -H
gb.httpd: bind 0.0.0.0 - Address already in use
```

Then call up the WebPage in the web browser like this:


```
http:localhost:8080 oder localhost:8080
```

and you will also see the wiki as in Figure 24.7.1.1.1. Exit the interpreter CTRL+C.
Project 2 will certainly then be used to generate a web page as help for a Gambas programme. You can then insert the web page into the project of your choice and call it from the programme at runtime. Whether you display the web page internally in the programme, for example in a WebView, or with


```
Desktop.Open("file:///" & sHTMLDateiDirectory &/ fHTMLFileName)
```

externally in the standard browser, depends entirely on your ideas.
To give the pages their own style, you can adapt theCSSfile according to your wishes. When doing so, only work with a few colours for selected elements.
Hint:
In the download area → chapter 24.7.0 you will find a reference list for the Gambas MarkDown syntax. This syntax overview uses only one notation for some marks - even if there are alternatives. The best solution is to print it out for reference. However, you will notice yourself how quickly new (help) texts can be written in MarkDown syntax.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.7.2 MarkDown

The classMarkDown, as an “abstract class”, is purely a base class and defines an interface. It exists only so that Gambas programmers can inherit from it in their own classes → Chapter 24.7.1 Projects (Project 2) to write their particular variant of (Gambas) Markdown.
For example, one can write new special commands in theCommand() methodthat do not exist in standard Markdown. In the Gambas Wiki, which runs on gambaswiki.org, new commands have also been implemented (in WikiMarkdown.Command()). For example, the information and warning boxes you see in the wiki or the red “Since 3.x” box are such special commands. The complete project can be found in the Gambas source files at /app/src/gambas-wiki if you have installed Gambas from the project sources.The Link() method gets a link of type MarkdownLink (→ Chapter 27.4.3 MarkDownLink) and converts it from MarkDown syntax to a correctHTMLpath specification. In the Gambas example project 'SmallWiki', exactly this is implemented in a separate class in the class file WikiMarkdown.class:


```
' Gambas class fileInheritsMarkdownPublicSubLink(hLinkAsMarkdownLink)DimsPathAsStringIfhLink.LinkBegins"/"ThensPath=Mid$(hLink.Link,2)ElseIfhLink.LinkBegins"./"ThensPath=Request.Path&/Mid$(hLink.Link,3)ElseReturnEndifIfNothLink.TextThenIfMain.IsImage(sPath)ThenhLink.Html="<img src=\""&Application.Root&/sPath&"?show\"/>"ReturnEndifhLink.Text=Main.GetPageTitle(sPath)EndifhLink.Link=Application.Root&/sPathEnd' Link(hLink As MarkdownLink)
```

In the following source code you can see the basic implementation of the Markdown class:


```
' Gambas class fileExportCreatePublicRootAsStringPublicLineAsIntegerPublicCurrentAsStringPublicSubToHTML(MarkdownAsString)AsStringReturnMarkup.Convert(Markdown,Me)EndPublicSubLink((sLink)AsMarkdownLink)' Link vom Typ MarkDownLink' NOOPEndPublicSubCommand((sCommand)AsString)AsString[]' NOOPEndPublicSubEnter((sClass)AsString)AsString[]' NOOPEndPublicSubLeave((sClass)AsString)AsString[]' NOOPEndPublicSubEnableCode(EnabledAsBoolean)IfEnabledThenIncMarkup.EnableCodeElseDecMarkup.EnableCodeEndifEndPublicSubCheckURL(URLAsString,(Markup)AsString)AsStringReturnURLEnd
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.7.3 MarkdownLink

The class MarkDownLink provides a data structure - but without its own properties and methods. It represents a set of several (class-)global variables. These variables serve the MarkDown class specifically for the MarkDown.Link() method to pass one argument instead of six.
Here you can see the full source code of the MarkDownLink class:


```
' Gambas class fileExportPublicLinkAsStringPublicTextAsStringPublicTitleAsStringPublicHtmlAsStringPublicQueryAsStringPublicBlankAsBoolean
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.8.0 Map component

The Map component (gb.map) allows you to display map tiles from various sources. It is based on two main classes - Map and MapView - which interact and use other classes.
If you want to use free geographical maps in a Gambas project, then the gb.map component is a good choice, even though its status is currently (as of October 2014) still stated as experimental. However, the results achieved are good.
Figure 24.8.0.1: Map for the Hanseatic city of Osterburg in Saxony/Anhalt.
Before you get started, you should inform yourself comprehensively about the goals of the OpenStreetMap project, the use of the maps and the licence conditions. The information on the following pages on the Internet is helpful:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.8.1 Projects

The free map material from openstreetmap.org (OSM) is used for the two projects presented. In a displayed map - shown in a MapView - you can zoom the map section in 18 steps with the mouse wheel and move the displayed map area with a permanent click on the map.


# 24.8.1.1 Prerequisites

There are three prerequisites for displaying a map:


# 24.8.1.2 Project GeoMap1

The presented project implements a viewer for maps from OSM.
Figure 24.8.1.2.1: GeoMap1 - Hanseatic City Osterburg in Saxony/Anhalt
The source code for the project is given in full:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]FMain.Center[5]FMain.Caption="GeoMap - Daten von OpenStreetMap"[6]btnHelp.Value=True[7]ShowMap()[8]End' Form_Open()[9][10]PublicSubShowMap()[11]DimiZoomAsInteger[12]DimfLatitude, fLongitudeAsFloat[13]DimsCacheName, sTileName, sTilePatternAsString[14]DimcArgumentsAsNewCollection[15][16]' Initialisierung[17]iZoom=13[18]sTileName="OpenStreetMap"[19]sTilePattern="85.30.190.241/{z}/{x}/{y}.png"[20]cArguments=Null[21]sCacheName=Null[22]fLatitude=52.7905' °Breite Osterburg[23]fLongitude=11.7531' °Länge Osterburg[24][25]MapView1.Map.AddTile(sTileName, sTilePattern, cArguments, sCacheName)[26]MapView1.Map[sTileName].Copyright=" © OpenStreetMap"[27]MapView1.Map[sTileName].Visible=True' optional; Standard-Einstellung ist TRUE[28]MapView1.Map.AddShape("P1")[29]MapView1.Map!P1.AddPoint("Osterburg", MapPoint(fLatitude, fLongitude))[30]MapView1.Map.Center=MapPoint(fLatitude, fLongitude)[31]' MapView1.Map.Center = MapView1.Map!P1!Osterburg.Points ' Alternative[32]MapView1.Map.Zoom=iZoom[33]MapView1.AllowEffect=True[34]End' ShowMap()[35][36]PublicSubbtnHelp_Click()[37]ShowHelp()[38]End' btnHelp_Click()[39][40]PublicSubShowHelp()[41]DimsMessageAsString[42][43]sMessage="<hr><b>Hinweise zum Einsatz der Komponente Map</b><hr>"[44]sMessage&="» Verschieben der Karte mit gedrückter linker Maustaste<br>"[45]sMessage&="» Zoomen mit dem Maus-Rad<br>"[46]sMessage&="» Zoomen mit dem Schieberegler<hr>"[47]sMessage&="» Die Tastenkombination ALT+B beendet das Programm<hr>"[48]sMessage&="▪ Entwickler der Komponente <i>gb.map</i>  ist Fabien Bodard"[49]sMessage&="<br>▪ EMail: gambix@users.sourceforge.net<hr>"[50]Message.Info(sMessage)[51]End' ShowHelp()[52][53]PublicSubbtnClose_Click()[54]FMain.Close[55]End' btnClose_Click()
```

Notes:
Help is displayed when the programme is started:
Figure 24.8.1.2.2: Programme Help


# 24.8.1.3 GeoMap2 project

The second project is an adaptation of the MapView programme example by Fabien Bodard - the developer of the Map component - from the Gambas sample collection.
In addition to displaying a map, you can switch on a magnifying glass function with the CTRL key:
Figure 24.8.1.3.1: GeoMap2 with magnifying glass
The archives for both projects are in the download directory.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.8.2 Geo

The Geo (gb.map) class provides tools for editing map projections and formatting geographic data.


# 24.8.2.1 Methods

The Geo class has these methods:
Table 24.8.2.1.1 : Methods of the class Geo


# 24.8.3 Map

The Map class contains the routines to draw the maps. After initialisation you have the possibility to change the map section as well as the zoom factor. Here is an example of how to initialise and display a map:


```
PublicSubShowMap()DimiZoomAsIntegerDimfLatitude, fLongitudeAsFloatDimsCacheName, sTileName, sTilePatternAsStringDimcArgumentsAsNewCollection' InitialisierungiZoom=13sTileName="OpenStreetMap"sTilePattern="85.30.190.241/{z}/{x}/{y}.png"cArguments=NullsCacheName=NullfLatitude=52.7905' °Breite OsterburgfLongitude=11.7531' °Länge OsterburgMapView1.Map.AddTile(sTileName, sTilePattern, cArguments, sCacheName)MapView1.Map[sTileName].Copyright=" © OpenStreetMap"MapView1.Map[sTileName].Visible=True' optional; Standard-Einstellung ist TRUEMapView1.Map.AddShape("P1")MapView1.Map!P1.AddPoint("Osterburg", MapPoint(fLatitude, fLongitude))MapView1.Map.Center=MapPoint(fLatitude, fLongitude)' MapView1.Map.Center = MapView1.Map!P1!Osterburg.Points ' Alternative Zentrierung auf die Marke P1MapView1.Map.Zoom=iZoom
  MapView1.AllowEffect=TrueEnd' ShowMap()
```


With these two lines from the source code excerpt above, you insert a prominent marker into the displayed map:


```
MapView1.Map.AddShape("P1")
MapView1.Map!P1.AddPoint("Osterburg", MapPoint(fLatitude, fLongitude))
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.8.3 MapPoint

The MapPoint class defines geographic points (longitude, latitude) and methods to work with geographic points in the 'World Geodetic System 1984' (WGS84 or EPSG:4326).
If you have never worked with geographic coordinates before, a look at these web pages will help:


# 24.8.3.1 Geographical Coordinates

The following initial values have been successfully tested in the Gambas projects:


# 24.8.3.2 Properties

The MapPoint class has these properties:
Table 24.8.3.2.1 : Properties of the class MapPoint
The MapPoint(Latitude As Float, Longitude As Float) As MapPoint function initialises a map object with a geographic starting point (latitude°, longitude°):


```
Dim myMapPoint As MapPoint = MapPoint(52.78631, 11.73872) ' Ort Osterburg
```

24.8.3.3 MethodsThe MapPoint class has the following three methods:
Table 24.8.3.3.1 : Methods of the class MapPoint


# 24.8.3.4 Example

The example refers to the calculations of the distance and the starting bearing for the two cities Osterburg and Berlin:


```
DimmpOsterburg, mpBerlinAsMapPoint
 
mpOsterburg=NewMapPoint(52.78631,11.73872)mpBerlin=NewMapPoint(52.516250,13.378870)Print"Geografische Breite 'Osterburg' = "; mpOsterburg.Lat;"°"Print"Geografische Länge 'Osterburg' = "; mpOsterburg.Lon;"°"Print"Entfernung Osterburg-Berlin = ";Round(Distance(mpOsterburg, mpBerlin)/1000,-3);" km"Print"Start-Peilung = ";Round(Bearing(mpOsterburg, mpBerlin),-3);"°"
```

Output in thee console of the IDE:


```
Geografische Breite 'Osterburg' = 52,78631°
Geografische Länge 'Osterburg' = 11,73872°
Entfernung Osterburg-Berlin = 114,994 km
Start-Peilung = 104,532°
```

Figure 24.8.3.4.1: Distance Osterburg - Berlin (as the crow flies)
The console programgeodalso gives very good results, as it - like the component gb.map - uses the modelWGS84-Ellipsoidfor calculation. It is quickly installed:


```
hans@linux:~$sudoapt-get installproj-bin
```

and with the following call and the geographical coordinates to be entered afterwards for two places (Osterburg and Berlin (Mitte)) it delivers adequate results (indication of the distance in kilometres) like the MapPoint.Distance method:


```
hans@linux:~$geod +ellps=WGS84 +units=km-I52.7863111.7387252.51625013.378870104d29'46.077"	-74d11'59.931"	114.994
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.8.4 Alternatives

There are at least three alternatives to using the Map component:
1. calling the standard browser from a Gambas programme, passing it the openstreetmap.org page with the desired map (latitude and longitude, zoom) as theURL:


```
Public Sub btnShowMap_Click()
  Desktop.Open("http://www.openstreetmap.org/?lat=52.78979&amp;lon=11.75280&amp;zoom=15&amp")
End ' btnShowMap_Click()
```

2. you use the WebView component in a separate Gambas form, to which you pass the page from openstreetmap.org with the desired map (latitude, longitude, zoom) as theURL:
Figure 24.8.4.1: OSM map (Hanseatic city of Osterburg in Saxony/Anhalt)
Yes - this is the full source code:


```
' Gambas class filePublicSubForm_Open()FMain.CenterWebView1.Url="http://www.openstreetmap.org/?lat=52.78979&amp;lon=11.75280&amp;zoom=14&amp"End' Form_Open()PublicSubbtnClose_Click()FMain.CloseEnd' btnClose_Click()
```

If you only need map tiles, for example to assemble them into a map and use them further, you can work on the console with the programme wget. However, do not forget to provide the imported image in png format with an appropriate copyright notice in a text field!
Figure 24.8.4.2: Map tile as 256×256-pixel graphic with inserted copyright text


```
hans@linux:~$wgethttp://85.30.190.241/13/4363/2676.png-P$HOME/OSM-Karten--2013-05-0109:40:41--  http://85.30.190.241/13/4363/2676.png
Verbindungsaufbau zu 85.30.190.241:80... verbunden.
HTTP-Anforderung gesendet, warte auf Antwort...200OK
Länge:26533(26K)[image/png]In »»/home/hans/OSM-Karten/2676.png«« speichern.100%[======================================>]26.533--.-K/sin0,1s2013-05-01 09:40:42(267KB/s)- »»/home/hans/OSM-Karten/2676.png«« gespeichert[26533/26533]hans@linux:~$
```

The syntax for theURLin the wget command:


```
http://a.tile.openstreetmap.org/ZOOM/xTILE/yTILE.png
http://85.30.190.241/ZOOM/X-TILE/Y-TILE.png
```

necessarily requires the calculation of the map tile coordinatesxTileandyTilefrom the latitude, longitude values and the specification of the desired zoom factor. The following source code can be used for the calculation:


```
PublicFunctionLatLonZoom2xyTile(fLatitudeDegAsFloat,fLongitudeDegAsFloat,iZoomAsInteger)AsInteger[]DimnAsIntegerDimfXTile, fYTile, fLatitudeRad, fSecansAsFloatDimaMatrixAsNewString[]fLatitudeRad=Rad(fLatitudeDeg)fSecans=1/Cos(fLatitudeRad)n=2^iZoom
  aMatrix.Add(Str(iZoom))fXTile=n*((fLongitudeDeg+180)/360)aMatrix.Add(Int(fXTile))fYTile=n*(1-(Log(Tan(fLatitudeRad)+fSecans)/Pi))/2' Log() in Gambas -> ln() mit Basis = eaMatrix.Add(Int(fYTile))ReturnaMatrixEnd' LatLonZoom2xyTile(...) As Integer[]PublicSubbtnBerechnungKachelKoordinaten_Click()DimiXTile, iYTile, iZoomAsIntegerDimfLatitude, fLongitudeAsFloatDimsTileServerAsStringDimaMatrixAsNewString[]DimaTileServerAsString[]=["a","b","c"]RandomizesTileServer=aTileServer[CInt(Rnd(0,3))]' Realität: Server-Auswahl im Content Delivery Network (CDN). Wird eine Anfrage an das CDN gesendet,' dann wählt das Request-Routing-System einen geeigneten Replica-Server aus.iZoom=13fLatitude=52.78979' Breite  52,78979°fLongitude=11.75280' Länge   11,75280°aMatrix=LatLonZoom2xyTile(fLatitude, fLongitude, iZoom)Print"Ort = Osterburg"Print"Geografische Breite = "&fLatitude&"°"Print"Geografische Länge = "&fLongitude&"°"PrintPrint"Kachel-Server = "&sTileServerPrint"Zoom = "&aMatrix[0]Print"xTile = "&aMatrix[1]Print"yTile = "&aMatrix[2]Print"-------------------------------------------------------------'"Print"Zoom = "&izoomPrint"xTile = "&Geo.MapPointToTile(MapPoint(fLatitude, fLongitude), iZoom).X' 4363Print"yTile = "&Geo.MapPointToTile(MapPoint(fLatitude, fLongitude), iZoom).Y' 2676End' btnBerechnungKachelKoordinaten_Click()
```

A much snappier way is to use the Geo.MapPointToTile(..) method of the Map.Geo class directly in the last two lines, which internally uses the calculations in the LatLonZoom2xyTile(..) function.
Here follows a script to insert a copyright text into a tile image:


```
#!/bin/bash## Quelle1: http://wiki.ubuntuusers.de/ImageMagick# Quelle2: http://pecita.eu/police-en.php# Wasserzeichentext in alle Bilder aus diesen Verzeichnis einfuegen# Der Wasserzeichentext wird unten links ins Bild eingesetzt# Sie koennen folgende Parameter anpassen:Textabstandvonlinks=10Textabstandvonunten=20Schriftgroesse=30Schriftart="Pecita.otf"Schriftfarbe="red"# Moegliche Farben koennen aufgelistet werden mit dem Befehl: convert -list colorWasserzeichentext="© OpenStreetMap"# Programmbeginnecho"Textabstand von links:$Textabstandvonlinks"echo"Textabstand von unten:$Textabstandvonunten"echo"Schriftgoesse:$Schriftgroesse"echo"Schriftart:$Schriftart"echo"Schriftfarbe:$Schriftfarbe"echo"Wasserzeichentext:$Wasserzeichentext"echo" "ls-1*png|whilereadfile;do{horizontal=`identify-verbose$file|grepGeometry:|awk{'print $2'}|cut-d"x"-f1`vertikal=`identify-verbose$file|grepGeometry:|awk{'print $2'}|cut-d"x"-f2`X=$TextabstandvonlinksY=$(($vertikal-$Textabstandvonunten))convert-font$Schriftart-pointsize$Schriftgroesse-fill$Schriftfarbe-draw"text$X,\$Y'$Wasserzeichentext'""$file""`basename c_"$file"`";echo"Bearbeite Datei$file"}doneecho"Wasserzeichen erfolgreich eingearbeitet."echoecho"Konsole schließen mit Enter!"readdummy;exit# Programmende
```



# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.9.0 D-Bus

This introduction to D-Bus subsumes parts from various literature sources to provide initial answers to the questions “What is D-Bus?” and “What can D-Bus do?”.
D-Bus or Desktop-Bus is a framework of Inter-Process-Communication (IPC) and part of the freedesktop project (https://www.freedesktop.org/wiki/). IPC allows processes to exchange data in the form of messages. These messages are sent and received on a message channel. This channel is called D-Bus. D-Bus offers at least two buses for communication between processes. One is the global system bus and another is the session bus, to which each desktop of a logged-in user within his desktop session is automatically connected when one of his applications registers on the D-Bus bus.
After a computer with a Linux operating system is switched on, programmes that connect to the system bus and register there are also started. If a user has registered on the desktop, then other programmes start and register on the session bus. What all programmes registered on the D-bus have in common is that they either offer a certain message service or use offered message services. A programme that can register on the system bus or on the session bus should be marked as dbus-enabled.
Example:If you click on the network symbol in the task bar in Mint 18.3, a small menu window opens in which you can switch theLANor WLAN off or on. After switching off, the service with the ID :1.21 - behind which is the D-Bus service org.gnome.networkmanager_applet - sends the signal 'NewIcon', among other things. The service org.gnome.freedesktop.Notifications receives it and evaluates the signal. The first reaction is to change the network icon in the taskbar. Then the service sends a message called 'Notify' to the D-Bus. The content of the message is a notification and is displayed in a window on the desktop:
Figure 24.9.0.1: Message on the desktop
Now you may be wondering
1. answerThe answer is simple: To monitor the data traffic on the system bus or on the session bus, you can use the console program 'dbus-monitor' like the author and others.
With the following commands you can read out a list of the applications registered on the system bus and on the session bus in a console. The list contains the D-bus names and the unique connection IDs assigned to them, which are always preceded by a colon. The programme qdbus is used:


```
$ qdbus --session | grep -v ":"
  org.gnome.SessionManager
  org.gtk.Private.UDisks2VolumeMonitor
  ...
  org.PulseAudio1
  org.freedesktop.DBus
```



```
$ qdbus --system | grep ":"
...
:1.44
:1.5
:1.21
```

You can also use the Gambas programme 'DBusView' and get this overview of all programmes currently registered on the D-Bus:
Figure 24.9.0.2: Registered programmes on the D-Bus
2. answerYou need to know that each programme registered on the D-Bus provides a description of the service offered in an XML file. There are several ways to view the contents of the XML file. If you already know the D-Bus name of the application - for example via the program 'DBusView' - then one way is to call the method 'Introspect' of the standard interface 'org.freedesktop.DBus.Introspectable'. This call is called Introspection. Since introspection is of central importance when working with the services on the D-bus, it is described in a separate chapter 24.9.0.2. To find out about all the programmes and their services on the system bus or on the session bus, the programme 'd-feet' is the first choice, the use of which is described in detail in chapter 24.9.0.2.3.
3. responseYes - the component gb.dbus provides you with several classes to use services on the D-bus or to provide services or intercept or send signals with your own d-bus capable Gambas programs.
In the following chapters these classes are described with their properties, methods and events. In addition, numerous projects are presented to give you ideas for your own d-bus-capable programmes.
Overview of the chapters
The following list of links will take you to interesting websites that deal with the topic of D-Bus in a special way:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# 24.9.1 DBusObject

The (static) class DBusObject (gb.dbus) is the parent class for all objects that you can export to the D-Bus.


# 24.9.1.1 Example

Any method you define in a Gambas D-Bus object inherits from the DBusObject class as shown in the source code of TService.class:


```
' Gambas class file

Inherits DBusObject
Create Static

Public Function GetTemperature(Trigger As String) As RValue
…
End
```

The source code in FMain.class, for example, declares a (Gambas) D-Bus object of type TService and registers it on the Session D-Bus. If the server is terminated, then the D-Bus object is unregistered from the D-Bus, which made the TService object available for use by all d-bus-enabled applications.


```
' Gambas class file

Public hDBusObject As TService

Public Sub Form_Open()

  FMain.Resizable = False
  FMain.Caption = ("The data server is activated")
  DBus.Unique = True
  hDBusObject = New TService

  Try DBus.Session.Register(hDBusObject, "/TService")
  If Error Then
     Message.Error("An instance of " & Application.Name & " already exists.")
     FMain.Close()
  Endif

End

Public Sub Form_Close()

  If DBus.IsRegistered(hDBusObject) Then DBus.Session.Unregister(hDBusObject)
  FMain.Close()

End
```

Two commented server projects can be found in chapters 24.9.8.1 Project1 and 24.9.8.2 Project2.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.9.2 DBus

The DBus (gb.dbus) class manages an application's connection to the session bus or the system bus and inherits from the _DBus virtual class.


# 24.9.2.1 Properties

The DBus class has the following six properties:
Table 24.9.2.1.1 : Properties of the DBus class
Notes on the DBus.Unique property:
In case you set the DBus.Unique property to True.


```
sDBusApplicationName  = org.gambas.projektname
```

However, for the alternative case DBus.Unique = False (which is the default value), it becomes.


```
sDBusApplicationName  = org.gambas.projektname-PID  ' PID = Process Identification Number
```

Since it is not necessarily known what the current value of DBus.Unique is for a D-Bus server to be used, for example, you can use the following function in the source code for a D-Bus client to determine the correct name of the server on the D-Bus:


```
PrivateFunctionGetDBusApplicationName(GBAppNameAsString)AsStringDimaListAsString[]DimsElementAsStringaList=DBus.Session.Applications.Sort(gb.Natural)ForEachsElementInaListIfsElement Begins"org.gambas."&GBApp.NameThenReturnsElementEndifNextEnd
```



# 24.9.2.2 Methods

The DBus class has four methods, which are specified and described in the following table:
Table 24.9.2.2.1 : Methods of the DBus class.
Notes:
To determine whether a particular application is currently registered on the D-Bus, you can use the following source code when customising the application name:


```
If DBus.Session.Applications.Exist($sDBusName) Then
```

If necessary, you can unregister the objects exported by your Gambas program from the D-Bus again:


```
Public Sub Form_Close()

  If DBus.IsRegistered($hDBusObject) Then DBus.Session.Unregister($hDBusObject)
  FMain.Close()

End
```

The answer to the question 'What is exported to the D-Bus?' depends on whether you use the optional argument Interfaces As String[] in the register method or not.
Register without interfaces:
As soon as you export at least one object, your application will be registered on the D-Bus under the name org.gambas.<applicationname>. For <application name> you can always use the Application.Name property.
All methods and properties whose name starts with an interface name specified in the interface argument - where the dots are replaced by underscores and followed by an additional underscore - are exported under this interface.
Registration with at least one interface:
In chapters 24.9.8.1 and 24.9.8.2 you will find two (server) projects that export objects to the D-Bus.


# 24.9.2.3 Constants

The following four constants of the DBus class each represent a message type that can take one of the following integer values:


# 24.9.2.4 Example - DBus[ ]

An object representing an application connected to the D-Bus is returned with DBus[…], because the class DBus is static and behaves like a (read-only) array:


```
Dim hDBusApplication As DBusApplication
hDBusApplication = DBus [ Application As String ]
```

The default value for the Application argument prefix is “session://”.
Examples:


```
Dim hDBusApplication As DBusApplication

Dim hConnection As DBusConnection
hConnection = DBus.System
hDBusApplication = DBus["system://org.freedesktop.ConsoleKit"]
```



```
Dim hDBusApplication As DBusApplication

hDBusApplication = DBus["session://org.Cinnamon.LookingGlass"] oder
hDBusApplication = DBus["org.Cinnamon.LookingGlass"] Standard-Parameter 'session:\\' intern gesetzt
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.9.3 DBusApplication

The class DBusApplication (gb.dbus) represents an application that is registered on the D-Bus. You can create this class. It behaves like Array, which you can only read.


# 24.9.3.1 Properties

The DBusApplication class has the following properties:
Table 24.9.3.1.1 : Properties of the class DBusApplication


# 24.9.3.2 Methods

The DBusApplication class has these three methods:
Table 24.9.3.2.1 : Methods of the class DBusApplication


# 24.9.3.3 Example 1 - New DBusApplication

Use New DBusApplication(parameter list) to create a DBusApplication object:


```
Dim hDBusApplication As DBusApplication

  hDBusApplication = New DBusApplication ( Connection As DBusConnection, ApplicationName As String )
```

The object created represents an application connected to the session bus or the system bus. For the two parameters:
In the same way, you can alternatively use DBus[ ApplicationName ] as an array.


# 24.9.3.4 Example 2 - DBusApplication[ ]

The DBusApplication class behaves like a read-only array. The following two source texts make use of this fact - the first only formally:


```
Dim hDBusApplication As DBusApplication
  Dim hDBusProxy As DBusProxy

  hDBusProxy = hDBusApplication [ ObjectPath As String [ , Interface As String ] ]
```

Returned with hDBusProxy is a proxy to an (existing) D-Bus object specified in the first parameter.
If the argument for the optional parameter Interface is not given, you have access to every method and all properties of the (exported) object. Otherwise, you only have access to methods and properties of the specified interface - as in the following example:


```
DimhDBusApplicationAsDBusApplicationDimhDBusProxyAsDBusProxyDimsDBusName, sDBusObjectPath, sDBusInterfaceAsStringDimhConnectionAsDBusConnection
 
  hConnection=DBus.SessionsDBusName="org.freedesktop.Notifications"sDBusObjectPath="/org/freedesktop/Notifications"sDBusInterface="org.freedesktop.Notifications"hDBusApplication=NewDBusApplication(hConnection, sDBusName)hDBusProxy=NewDBusProxy(hDBusApplication, sDBusObjectPath, sDBusInterface)
```

In terms of good data encapsulation, creating an interface on the side of the application that exports the object to the D-Bus is always advantageous.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.9.4 DBusConnection

The class DBusConnection (gb.dbus) represents a connection of a d-bus-enabled application to the system D-bus or to the session D-bus. You cannot create objects of the class because the connection always refers to an alreadyexistingconnection.


# 24.9.4.1 Properties

The DBusConnection class has only one usable property:
Table 24.9.4.1.1 : Properties of the class DBusConnection


# 24.9.4.2 Methods

The DBusConnection class has these two methods:
Table 24.9.4.2.1 : Methods of the class DBusConnection


# 24.9.4.3 Examples

Since the DBusConnection class represents a connection of a d-bus-enabled application to the system D-bus or to the session D-bus, it is always used in conjunction with the DBusApplication class - as in the following example:


```
Dim hDBusApplication As DBusApplication
  Dim hConnection As DBusConnection
  Dim sDBusName As String

  sDBusName = "org.freedesktop.NetworkManager"
  hConnection = DBus.System
  hDBusApplication = New DBusApplication(hConnection, sDBusName)
```

The following source code uses the Applications property to display the applications registered on the System D bus:


```
PrivateSubGetDBusSsystemApplications2()DimiAsIntegerDimaSessionListAsString[]DimhConnectionAsDBusConnection
 
  hConnection=DBus.SystemaSessionList=hConnection.Applications.Sort(gb.Descent)Fori=0ToaSessionList.MaxPrintaSessionList[i]NextEnd
```

In the console of the Gambas IDE, all registered applications on the system D-bus are output sorted. Here you can only see a small section:


```
org.freedesktop.thermald
org.freedesktop.systemd1
org.freedesktop.login1
org.freedesktop.UPower
org.freedesktop.UDisks2
org.freedesktop.RealtimeKit1
org.freedesktop.PolicyKit1
org.freedesktop.NetworkManager.dnsmasq
org.freedesktop.NetworkManager
org.freedesktop.ModemManager1
...
:1.9
:1.84
...
:1.20
:1.16
:1.1
:1.0
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.9.5.0 DBusObserver

The DBusObserver (gb.dbus) class allows you to intercept and evaluate any message sent over the D-Bus.The class DBusObserver has two properties, two methods and one event.


# 24.9.5.0.1 Properties

The DBusObserver class has these two properties:
Table 24.9.5.0.1 : Properties of the class DBusObserver


# 24.9.5.0.2 Properties of class .DBusObserver.Message

The virtual class .DbusObserver.Message, which cannot be created, represents a message received from the DBusObserver object. It has the following properties, which can only be read out and are to be understood as meta data except for 'Arguments':
Table 24.9.5.0.2 : Properties of the virtual class .DBusObserver.Message


# 24.9.5.0.3 Methods

The DBusObserver class has only these two methods:
Table 24.9.5.0.3 : Methods of the class DBusObserver


# 24.9.5.0.4 Event

The DBusObserver class has only the Message() event. This event is triggered when the DBus-Observer receives a message from a specific object. The received message is stored in the Message property of type .DBusObserver.Message.
You can create this class. You should use this class if you need additional information - such as the meta-data mentioned above - about the observed messages. Otherwise use the class DBusSignal.


# 24.9.5.0.5 Create DBusObserver

The following example shows you how to formally create a new DBus-Observer using New DBusObserver( parameterlist ):


```
Dim hDBusObserver As DBusObserver

hDBusObserver = New DBusObserver ( Connection As DBusConnection, Type As Integer
[ , Object As String, Member As String, Interface As String, Destination As String ] ) As "ObserverEventName"
```

The above source code creates a new D-Bus observer to intercept messages on the specified DBus. For the parameters:
To create a new observer to intercept signals from the object whose object path is specified as /org/gtk/Private/RemoteVolumeMonitor:


```
Dim hDBusObserver As DBusObserver

hDBusObserver = New DBusObserver(DBus.Session, DBus.Signal, "/org/gtk/Private/RemoteVolumeMonitor",
"VolumeAdded", "org.gtk.Private.RemoteVolumeMonitor", "*") As "hDBusObserver"
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.9.6.0 DBusSignal

The DBusSignal (gb.dbus) class allows any message of type Signal sent on the D-Bus by an application registered on the D-Bus to be received. The class can be created. The class DBusSignal has only one property and one event.


# 24.9.6.0.1 Property

The boolean property Enabled of the DBusSignal class is True if the signal observer is turned on. The default value is True. You can also set and read the value.


# 24.9.6.0.2 Event

The Signal ( Signal As String, Arguments As Variant[ ] ) event is triggered when the DBus Signal object receives a D-Bus signal from a selected transmitter. The following applies to the two parameters:
Signal is the DBusSignal name, which is also called Member.Arguments is a Variant array with all signal arguments.


# 24.9.6.0.3 New DBusSignal(...)

To create a new DBus signal object:


```
Dim hDBusSignal As DBusSignal

hDBusSignal = New DBusSignal ( Connection As DBusConnection, Interface As String [ , Every As Boolean ] )  As "SignalEventName"
```



# 24.9.6.0.4 Intercept D-Bus signal

The following example intercepts the D-Bus signal with the signal name 'StateChanged' sent by the D-Bus object “/org/freedesktop/NetworkManager” on the system D-Bus when the status (on/off) of the network changes.


```
PublichDBusSignalNMAsDBusSignalPrivate$iNetworkStateAsIntegerPrivate$cDBusAsDBusConnectionPrivate$sInterfaceAsStringPublicSubForm_Open()…
  $cDBus=DBus.System$sInterface="org.freedesktop.NetworkManager"hDBusSignalNM=NewDBusSignal($cDBus, $sInterface,True)As"ObservedNMSignal"…End
```

The signature of the signal is “i” - an integer value is sent. If the signal is intercepted with the signal name given above, then read its value from the variant array of arguments and store it in a variable, for example:


```
PublicSubObservedNMSignal_Signal(SignalAsString, ArgumentsAsVariant[])IfSignal="StateChanged"Then$iNetworkState=Arguments[0]' The array has exactly one element!EndifEnd
```

The signal observer is always switched off before the programme window is closed:


```
PublicSubbtnClose_Click()IfhDBusSignalNMThenhDBusSignalNM.Enabled=FalseFMain.Close()End
```



# 24.9.6.0.5 Send D-Bus signal

In revision #7146, the ability to also send D-Bus signals was added to the gb.dbus component.
Here's how it works:
To send a D-Bus signal on a specific D-Bus, use one of the two methods: DBus.Session.Raise(…) or DBus.System.Raise(…).
The DBus Raise(…) method takes 3 arguments:
You do not have to define a signal signature because it is not used directly. However, it makes sense to do it anyway. This way you can ensure for yourself that the (pseudo) signal signature and the signal arguments match! Good to know: The data types of the individual signal arguments in the above array are automatically converted to D-Bus data types.
Before you can send a D-Bus signal, you must define it in a separate class file.
Signal definition
The preparation of a signal to be sent in the MyProject application is done, for example, in the class file MySignal.class. You can define the name of the class file and the signal name - State in the following example - yourself:


```
' Gambas class file (MySignal.class)InheritsDBusObjectCreateStatic'' Signatur: "s"'' This signal has exactly 1 argument 'Flag' of the data type stringEventorg_gambas_MyProject_MySignal_State(FlagAsString)End
```

As you can see, the signal 'State' has exactly one argument with the data type string and thus follows the signature “s”.
Send signal
The source code for the file FMain.class of the project MyProject is given completely. The most important passages are highlighted in colour:


```
' Gambas class filePrivatehDBusObjectAsMySignalPrivatehDBusSignalAsDBusSignalPublicSubForm_Open()hDBusObject=NewMySignal
 
  FMain.Resizable=FalseFMain.Caption=("Waiting for a D-Bus signal ...")DBus.Unique=TrueDBus.Session.Register(hDBusObject,"/MySignal")hDBusSignal=NewDBusSignal(DBus.Session,Null,True)SendSignal("on")EndPrivateSubSendSignal(sStateAsString)DimsSignalNameAsStringDimaArgumentsAsNewVariant[]sSignalName="org.gambas.MyProject.MySignal.State"aArguments=[sState]DBus.Raise(hDBusObject, sSignalName, aArguments)EndPublicSubForm_Close()SendSignal("off")IfhDBusSignalThenhDBusSignal.Enabled=FalseIfDBus.IsRegistered(hDBusObject)ThenDBus.Session.Unregister(hDBusObject)FMain.Close()End<code>Damit Sie das Projekt erfolgreich erproben können, wird auch der Quelltext für den Signal-Empfänger präsentiert:<code gambas>' Gambas class filePrivate$hDBusSignalAsDBusSignalPublicSubForm_Open()FMain.Resizable=FalseFMain.Caption=("Waiting for a D-Bus signal ...")$hDBusSignal=NewDBusSignal(DBus.Session,Null,True)As"ObservedSignal"SetLEDColor(picStatus,"red")txaReport.Insert(gb.NewLine)EndPublicSubObservedSignal_Signal(SignalAsString, ArgumentsAsVariant[])IfLower(Signal)="state"AndIfArguments[0]="on"ThentxaReport.Insert("   "&("The data server is online!")&gb.NewLine)SetLEDColor(picStatus,"green")SendSound("on.wav")ElseIfLower(Signal)="state"AndIfArguments[0]="off"ThentxaReport.Insert("   "&("The data server is down!")&gb.NewLine)SetLEDColor(picStatus,"red")SendSound("off.wav")EndifEnd'' Sends a sound<br>'' Sound: Name of the sound file in the project folder 'sounds'.<br>'' Play back audio files on a PulseAudio sound server - the player is 'paplay'PublicSubSendSound(SoundFileNameAsString)IfSystem.Exist("paplay")ThenShell"paplay "&Application.Path&/"sounds"&/SoundFileNameEndifEndPrivateSubSetLEDColor(picBoxAsPictureBox, sLEDColorAsString)picBox.Picture=Picture["LED/led_"&sLEDColor&".svg"]EndPublicSubForm_Close()If$hDBusSignalThen$hDBusSignal.Enabled=FalseFMain.Close()End
```

The server always sends the D-Bus signal 'State' when starting and closing the programme window, which signals its status via the signal argument with the values 'on' or 'off'. The client waiting for the signal can react in an appropriate way to the transmitted status.
Figure 24.9.6.0.1: The server is offline
Figure 24.9.6.0.2: The server is online
Figure 24.9.6.0.3: The server is offline
Tip:
If you need more information about what meta-data the intercepted signal has besides the actual content, use the DBusObserver class with success.
In the projects for the class DBusSignal in the following three chapters you will learn how to intercept signals, how to evaluate their contents and how to send signals.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.9.7 DBusProxy

The class DBusProxy (gb.dbus) implements a proxy for a D-Bus object that has already been registered on the D-Bus by a d-bus-enabled application. This class can be created and has only the Children property.
If you call a method or read a property or set it, this only applies to the proxy object - but not to the original. Note that the names of the methods or properties are case-sensitive!


# 24.9.7.1 New DBusProxy (gb.dbus)

For example, use the following source code to create a proxy for the existing DBus object with the absolute path: “/org/freedesktop/NetworkManager”. The Children property returns the names of all current object children in a string array. You get the absolute path of a child by concatenating the absolute path of the current object with the child name. The following applies:


```
Dim i As Integer
  Dim hDBusApplication As DBusApplication
  Dim hConnection As DBusConnection
  Dim hDBusProxy As DBusProxy
  Dim sDBusName, sDBusObjectPath, sDBusInterface As String
  Dim aChildren As New String[]

  sDBusName = "org.freedesktop.NetworkManager"
  hConnection = DBus.System
  hDBusApplication = New DBusApplication(hConnection, sDBusName)

  sDBusObjectPath = "/org/freedesktop/NetworkManager"
  sDBusInterface = "org.freedesktop.NetworkManager"
  hDBusProxy = New DBusProxy(hDBusApplication, sDBusObjectPath, sDBusInterface)

  aChildren = hDBusProxy.Children

  txaReport.Insert(gb.NewLine)
  For i = 0 To aChildren.Max
    txaReport.Insert(sDBusObjectPath &/ aChildren[i] & gb.NewLine)
  Next
```

This output is generated with the penultimate line:
Figure 24.9.7.1.1: Output
The project DBusNMChildren can be found as project archive in the download area.
Note:Alternatively, use DBus[Application][ObjectPath] as the active proxy, because DBus[Application][ObjectPath] also creates a D-Bus proxy.
If the argument for the optional parameter Interface is not specified, you have access to every method and all properties of the (exported) object. Otherwise, you only have access to methods and properties of the specified interface.


# 24.9.7.2 Examples

The following proxy examples are taken from the Gambas documentation and consistently use the syntax DBus[Application][ObjectPath]:


```
' The lock() method call locks the screen.DBus["org.kde.krunner"]["/ScreenSaver"].lock()' A method call is used to check whether compositing is active.IfDBus["org.kde.kwin"]["/KWin"].compositingActive()ThenPrint"Compositing is active!"' Get a password from KDE walletDimsLocalWalletAsString=DBus["org.kde.kwalletd"]["/modules/kwalletd"].localWallet()DimsWalletIdAsString=DBus["org.kde.kwalletd"]["/modules/kwalletd"].open(sLocalWallet,Application.Title)DimsPasswordAsString=DBus["org.kde.kwalletd"]["/modules/kwalletd"].readPassword(Application.Name, sWalletId,"login",Application.Title)' Sets the geometry property of the KMail window.DBus["org.kde.kmail"]["/kmail/kmail_mainwindow_1"].geometry=[0,24,1024,768]
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Network and communication



# Chapters



# Table of Contents



# 24.9.8.0 DBusVariant - DBusValues

The DBusVariant (gb.dbus) class allows a D-Bus variant value to be defined for a given D-Bus signature. The class DBusValues (gb.dbus) inherits from DBusVariant and provides you with a list of several D-Bus values. The two classes each have only the property DBusValues.Value and one constant each.
The reason for having two classes is that this is the only way to make a distinction between, for example, two methods, one of which returns an array of three values of type Variant and the other of which returns three values, each of which is of type Variant. In both cases, however, there are exactly three D-Bus values!
Therefore, for a signature such as “(ia{sv}av)” you will use the class DBusVariant and for a signature such as “u(ia{sv}av)” you will use the class DBusValues.


# 24.9.8.0.1 DBusVariant

The DBusVariant (gb.dbus) class allows you to define a D-Bus Variant value with a given D-Bus signature. For example, in the gb.dbus.trayicon component, the definition of a specific signature is done in the _DBusMenuItem.class. The class DBusVariant is used because an array of values is returned:


```
' Gambas class fileExportInheritsDBusVariantPublicConstSignatureAsString="(ia{sv}av)"
```



# 24.9.8.0.2 DBusValues

Good to know: The DBusValues (gb.dbus) class inherits from DBusVariant and provides you with a list of multiple D-Bus values.
The DBusValues class is used, for example, in the _DBusMenuLayout.class of the gb.dbus.trayicon component:


```
' Gambas class fileExportInheritsDBusValuesPublicConstSignatureAsString="u(ia{sv}av)"
```

Note:Use the table athttp://gambaswiki.org/wiki/doc/dbus#t10to learn how Gambas data types are converted to D-Bus data types and vice versa.
In the following 2 chapters with 4 Gambas projects you will learn how to define D-Bus objects for a data server, how to export to the D-Bus and how to use the offered services with a d-bus capable client. In the methods used, complex data types are also used as return values.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# 2D-Graphic



# Chapters



# 25.0 2D-Graphics

This chapter describes the two components
with their classes and tried-and-tested projects.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# 2D-Graphic



# Chapters



# 25.1.0 Cairo component

The componentCairo (gb.cairo)is a 2D graphics library with support for multiple output media: images, PDF files, Postscript or SVG files. Cairo is designed to produce consistent output on all of the above output media while taking advantage of display hardware acceleration where available. The CairoAPIprovides operations similar to those for drawing from/to Postscript and PDF. Operations in Cairo include drawing and filling lines and areas, drawing third-degree Bézier curves, transforming and arranging images, and text rendering with anti-aliasing. All drawing operations can be transformed for each affine transformation such as scaling, translation, rotation or shearing via a matrix. In Cairo, drawing isvector-based. The Cairo component of Gambas adopts this method.
There are fundamentaldifferencesin the use of the methods between the Cairo component and the Paint class, for example in the surfaces on which drawing takes place or in the preparation of the brushes for drawing, even if the interfaces are very similar. With the methods of the Cairo class of the Cairo component of the same name (gb.cairo), drawing is mainly carried out with instruction sequences according to a fixed construction plan, because - similar to Paint - it is not freehand drawing.

Figure 25.1.0.1: Circles and ellipses - drawn with methods of the Cairo class of the Cairo component
The main properties of the Cairo class are presented first and then its methods are described. Finally, the examples and projects presented and their description complete the practice-orientated approach to this topic. The presentation of properties and methods of other classes of the component complete the descriptions.
The Cairo component (gb.cairo) has the classes


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# 2D-Graphic



# Chapters



# 25.2.0 Clipper component

Thegb.clippercomponent implements clipping procedures in six classes based on theClipper library.
Table 25.2.0.1 : Classes of the Clipper component
Themethodsof the classes of thegb.clippercomponent can be used to perform operations on polygons. These operations include:

Figure 25.2.0.1: Example: Intersection of two polygons PolyRed and PolyBlue
Conclusion
You cannot draw with the classes of the gb.clipper component, but you can calculate and link objects with the methods of the six classes, which you can then draw. To do this, you use thePaint.Polygon()method (gb.qt4) and thePolygon[iIndex] syntax(gb.clipper) to save all the points of a polygon in an array. This allows you to use the classes of the gb.clipper component as the basis for drawing programmes.
The component can be useful for mathematical applications in geometry - if you work specifically with polygons.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# 2D-Graphic



# Chapters



# Table of Contents



# ﻿25.3.0 Image


Abbildung 25.3.0: Farbbild


# 25.3.0.1 HSV-Farbraum

Der HSV-Farbraum ist ein Farbraum, bei dem man die Farbe mit Hilfe des Farbtons (hue), der Farbsättigung (saturation) und des Hellwerts (value) definiert. Für die Beschreibung der Farbe – genauer dem Farbort – in diesem Farbraum werden folgende Parameter benutzt:


# 25.3.0.2 RGB-Farbraum

Es gibt nicht nur einen RotGrünBlau-Farbraum oder RGB-Farbraum (Farbwürfel), sondern theoretisch sehr viele. Allen gemeinsam ist die Komposition einer Farbe durch die additive Mischung von Farbanteilen der drei Grundfarben rot, grün und blau. Diese Anteile sind in Gambas jeweils als Ganzzahlwerte im Intervall 0 bis 255 für die 3 Farbanteile codiert.


# 25.3.0.3 Alphakanal für Transparenz

Im Alpha-Kanal werden zusätzlich zu den Farbinformationen auch Transparenz-Informationen gespeichert. Der Alphakanal umfasst bei Gambas 256 Stufen. Dem Wert Alpha=255 entspricht „vollständig transparent“ oder „unsichtbar“ – im Gegensatz zur normalen Farb-Codierung. Alpha=0 dagegen entspricht „nicht transparent“.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# 2D-Graphic



# Chapters



# Table of Contents



# ﻿25.3.1 Klassen Color

Diese statische KlasseColor (gb.qt4)hat Eigenschaften, welche die System-Farben zurückgeben. Beachten Sie, dass in Gambas neben der Klasse Color (gb.qt4) auch eine KlasseColor (gb.image)existiert. Diese statische Klasse Color (gb.image) definiert Konstanten vordefinierter Farben und enthält einige nützliche Methoden, um mit Farben umzugehen. Es ist so, dass in Color (gb.image) die angesprochenen Farb-Konstanten und die nützlichen Methoden sind und in Color (gb.qt4) die Systemfarben. Die Klasse Color (gb.image) enthält Konstanten und Methoden, die nicht von bestimmten Bibliotheken abhängen. Die Konstanten liegen im RGB-Format vor. Die Methoden nutzen von Minisini geschriebene oder adaptierte Algorithmen. Die Systemfarben hingegen sind an das aktuelle System gebunden und werden vom aktuellen Toolkit bereitgestellt. Die Klasse Color (gb.qt4) muss also in der gb.qt4-Komponente enthalten sein, um auf diese Farbkonstanten zugreifen zu können.


# 25.3.1.1 Klasse Color (gb.qt4) – Eigenschaften

Es werden diese (statischen) Eigenschaften in der folgenden Tabelle beschrieben →Background, ButtonBackground,  ButtonForeground, Foreground, LightBackground, LightForeground, SelectedBackground, SelectedForeground, TextBackground, TextForeground, TooltipBackgroundundTooltipForeground:
Tabelle 25.3.1.1.1: Farbkonstanten Klasse Color (gb.qt4)


# 25.3.1.2 Klasse Color (gb.image) – Konstanten

Diese Klasse Color (gb.image) ist statisch und definiert diese Farb-Konstanten:
Tabelle 25.3.1: Farbkonstanten


# 25.3.1.3 Klasse Color (gb.image) – Methoden

Die zahlreichen Methoden der Klasse Color (gb.image) ermöglichen dem Benutzer eine qualifizierte Arbeit mit Farben in Gambas.
Tabelle 25.3.1.3.1: Methoden der Klasse Color (gb.image)


# 25.3.1.4 Beispiele für den Einsatz von Methoden der Klasse Color (gb.image)

Es werden in den ausgewählten Beispielen die Originalfarben und die geänderten Farben in zwei ColorButton oder drei ColorChooser angezeigt sowie der verwendete Quelltext angegeben.
Beispiel 1 – Color.Darker(..)



```
PublicSubbtnDarker_Click()DimiSourceColor, iResultColorAsIntegeriSourceColor=ColorButton1.ColoriResultColor=Color.Darker(iSourceColor)ColorButton2.Color=iResultColor' ColorButton2.Color = Color.Darker(ColorButton1.Color) ' KurzversionEnd' btnDarker_Click()
```

Beispiel 2 – Color.Lighter(..)



```
PublicSubbtnLighter_Click()ColorButton2.Color=Color.Lighter(ColorButton1.Color)End' btnLighter_Click()
```

Beispiel 3 – Color.Desaturate(..)



```
PublicSubbtnDesaturate_Click()ColorButton2.Color=Color.Desaturate(ColorButton1.Color)End' btnDesaturate_Click()
```

Beispiel 4 – Color.Distance(..)



```
PublicSubbtnDistance_Click()DimiColor1, iColor2AsIntegerDimfDistanceAsFloatiColor1=ColorButton1.ColoriColor2=ColorButton2.ColorfDistance=Color.Distance(iColor1, iColor2)PrintfDistanceEnd' btnDistance_Click()
```

Mit den beiden Farben Rot (Color.RGB(255,0,0)) und Grün (Color.HSV(120,255,255)) ergibt sich ein Distance-Wert von 0,70710678118655. Ist das nicht schön! Der Autor jedenfalls ist begeistert – kann aber mit diesem Wert nichts anfangen.
Beispiel 5 – Color.Merge(..)



```
PublicSubbtnMerge_Click()DimiColor1, iColor2, iResultColorAsIntegerDimfWeightAsFloat' Weight is the relative weight of the first color, between 0 and 1.iColor1=ColorButton1.ColorfWeight=0.3iColor2=ColorButton2.ColoriResultColor=Color.Merge(iColor1, iColor2, fWeight)' iResultColor = Color.Merge(iColor1, iColor2) ' ---> fWeight = 0.5 (Default)ColorButton3.Color=iResultColorEnd' btnMerge_Click()
```

Beispiel 6 – Color.Gradient(..)



```
PublicSubbtnGradient_Click()DimiColor1, iColor2, iResultColorAsIntegerDimfWeightAsFloatiColor1=ColorButton1.ColoriColor2=ColorButton2.Color' fWeight = 0.0 ' Sonderfall 1' fWeight = 1.0 ' Sonderfall 2fWeight=0.4iResultColor=Color.Gradient(iColor1, iColor2, fWeight)' iResultColor = Color.Gradient(iColor1, iColor2) ' ---> fWeight = 0.5 (Default)ColorButton3.Color=iResultColorEnd' btnGradient_Click()
```

Beispiel 7 – Color.Blend(..)



```
PublicSubbtnBlend_Click()DimiSourceColor, iDestinationColor, iResultColorAsIntegeriSourceColor=ColorButton1.ColoriSourceColor=Color.SetAlpha(iSourceColor,190)ColorChooser1.SelectedColor=iSourceColor
 
  iDestinationColor=ColorButton2.ColoriDestinationColor=Color.SetAlpha(iDestinationColor,90)ColorChooser2.SelectedColor=iDestinationColor
 
  iResultColor=Color.Blend(iSourceColor, iDestinationColor)PrintColor.GetAlpha(iResultColor)' Alternative: Print Color[iResultColor].AlphaColorChooser3.SelectedColor=iResultColorEnd' btnBlend_Click()
```



# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# 2D-Graphic



# Chapters



# Table of Contents



# ﻿25.3.2   Klasse ColorInfo

Die Klasse ColorInfo (gb.image) präsentiert u.a. detaillierte Informationen zu einer Farbe. Die Klasse verfügt über die EigenschaftenAlpha, Color, Red, Green, Blue, Hue, Saturation undValue, die Sie auslesen oder setzen können. Der Datentyp für alle Eigenschaften ist Integer.


# 25.3.2.1   Eigenschaften

In der folgenden Tabelle werden die o.a. Eigenschaften der Klasse beschrieben:
Tabelle 25.3.2.1.1 : Eigenschaften Klasse ColorInfo (gb.image)


# 25.3.2.2   Beispiele

Sie bekommen für eine beliebige FarbeiColormit


```
Color[iColor]
```

ein ColorInfo-Objekt, von welchem Sie einerseits die RGB- und HSV-Informationen des verwendeten Farbraums sowie den Wert für den Alpha-Kanal auslesen können oder andererseits die RGB- und HSV-Farbanteile setzen. 
Anschließend müssen Sie die geänderte Farbe aus den Farb-Anteilen generieren, wobei die nicht geänderten Farb-Anteile entweder mitColor[iColor].GreenundColor[iColor].Blueoder mithColorInfo.GreenundhColorInfo.Blueausgelesen und übernommen werden:


```
PublicSubbtnColorChange_Click()DimiColorAsIntegerDimhColorInfoAsColorInfo
 
  iColor=CChooser1.SelectedColor' Synonym für CChooser1.SelectedColor ist CChooser1.ValuehColorInfo=Color[iColor]' Ein ColorInfo-Objekt wird zurückgegeben' Print Color[iColor].Red ' Rot-Farbanteil auslesen mit dem []-Operator' Print hColorInfo.Red ' Rot-Farbanteil auslesen (Alternative)hColorInfo.Red=180' Rot-Farbanteil ändernhColorInfo.Alpha=140' Alpha-Wert ändern' Print hColorInfo.Red ' Aktuellen Rot-Farbanteil auslesen' Print hColorInfo.Alpha ' Aktuellen Alpha-Wert auslesenCChooser1.Value=Color.RGB(hColorInfo.Red, Color[iColor].Green, hColorInfo.Blue, hColorInfo.Alpha)' Gute Alternative:' CChooser1.Value = hColorInfo.ColorEnd' btnColorChange_Click()
```

Hinweis:Die komplexen MethodenSetRGB(..)undSetHSV(..)der KlasseColor (gb.image)– mit deren Hilfe Sie den RGB(A)-Farbanteil oder HSV(A)-Farbanteil für jede Farbe einzeln(!) ändern –  sind schneller und deshalb vorzuziehen:


```
PublicSubbtnSetRGB_Click()DimiColorAsIntegeriColor=CChooser1.SelectedColorCChooser1.SelectedColor=Color.SetRGB(iColor,180, Color[iColor].Green, Color[iColor].Blue,140)End' btnSetRGB_Click()
```



# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Keyboard and mouse



# Chapters



# Table of Contents



# 14.1.2 Special keys - constants

Some articles in the Internet illustrate the surprises you have to deal with in connection with keyboards and their construction, the assignments of the keys under different operating systems as well as the different designations on the keys:


# 14.1.2.1 Keyboard constants

In addition to the keyboard constants described in chapter 14.1.1, Gambas also has constants for special keys:


```
Escape BackTab Help Menu ScrollLock SysReq
```

Key. Escape - synonym for Key. Esc.  * Key. BackTab - A tab is undone and can be emulated with the Shift+Tab key combination.


# 14.1.2.2.2 Super key


The super key is the so-called Windows key between the Ctrl key and the Alt key. The key code is 133 and the symbol is 'Super_L'. Under Ubuntu and Unity you can call up the dashboard directly by pressing the Super key.


# 14.1.2.3 Program xev

Start the xev program in a console. It gives you detailed information about a pressed key:


```
KeyPress event, serial 33, synthetic NO, window 0x3600001,
    root 0xbc, subw 0x3600002, time 4714461, (45,34), root:(161,563),
    state 0x10, keycode 133 (keysym 0xffeb, Super_L), same_screen YES,
    XLookupString gives 0 bytes:
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False
```

A variant of xev with a filter:


```
hans@linux:~$xev|grep-A2--line-buffered'^KeyRelease'|sed-n'/keycode /s/^.*keycode \([0-9]*\).* (.*, \(.*\)).*$/\1 \2/p'
```



```
50 Shift_L
37 Control_L
64 Alt_L
108 ISO_Level3_Shift
105 Control_R
62 Shift_R
36 Return
104 KP_Enter
20 ssharp
```

Under the link:https://wiki.archlinux.org/index.php/Extra_Keyboard_Keys, from which the filter example for xev was taken, can be found withshowkey/ another keyboard analysis program, which you have to call in a login console.
Certain media keys, the' FN' key or the touch pad are not (yet) referred to in this chapter.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# 15.1.1 Method SendMail - Class Desktop (gb. desktop)

You can use the SendMail(..) method to format an e-mail that cannot be sent directly, but with the standard e-mail program of your system:


```
SendMail ( TO As String[] [ , CC As String[], BCC As String[], Subject As String, Body As String, Attachment As String ] )
```

It is quite sufficient if you provide the necessary and optional parameters in your program or have the data entered in a form.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# Table of Contents



# 15.1.2 Method SendKeys - Class Desktop (gb. desktop)

To generate a single keystroke or a combination of keys and send them to the window with the focus, you can use theSendKeys(..)method.
Syntax:


```
Static Sub SendKeys ( Keys As String )
```

Keys is a list of keys that are sent one after the other. The (formal) names of the keys are listed in the X11 header file /usr/include/X11/keysymdef.h. For example, you can use this command in a console to determine selected key names on the keypad:


```
hans@linux:~$ cat /usr/include/X11/keysymdef.h | grep 'KP_E' 
#define XK_KP_Enter                      0xff8d  /* Enter */ 
#define XK_KP_End                        0xff9c 
#define XK_KP_Equal                      0xffbd  /* Equals */ 
hans@linux:~$
```

To extract a key name, remove the XK_ prefix from the constants in the /usr/include/X11/keysymdef.h file. The key labeled[1/End] in the numeric keypad has the key name KP_End - but only if the numeric keypad has been deactivated with the NumLock key - otherwise the digit 1 becomes effective.
Unfortunately, you do not see that the key names are case-sensitive and not always consistent. For example,' Return' starts with a large R, but the space bar with the key name' space' starts with a small s. In the file /usr/include/X11/keysymdef.h you will find the name XK_KP_Space, while the key analysis programxevdescribes the pressed space bar as 'space':


```
KeyRelease event, serial 33, synthetic NO, window 0x3400001, 
    root 0xbc, subw 0x3400002, time 15995041, (33,37), root:(149,566), 
    state 0x0, keycode 65 (keysym 0x20, space), same_screen YES, 
    XLookupString gives 1 bytes: (20) " " 
    XFilterEvent returns: False
```

The icing on the cake is a remark from Minisini about the changes in keyboard shortcuts:“X11 found it great to change the meaning of individual keys recently. Previously capital letters were used, now they use a mixture of upper and lower case letters. Very funny.”
For this reason only Desktop.SendKeys (“{[Control_L]c}”) withsmallc is working correctly!
Consider the differences in the names of the individual keys, as they differ from each other.


# 15.1.2.1 Modifier

For example, to reach the question mark or backslash on a German keyboard in the alpha-numeric block, you have to switch to the 2nd or 3rd assignment of the german ß-key. The switch or modifier for the 2nd level is the Shift key and with the AltGr key (alternative graphic character set; key name: ISO_Level3_Shift) you get to the 3rd level and reach the backslash (→ \). The second assignment of the print key can usually be reached with the modifier Alt key, for example.


# 15.1.2.2 Generate keystroke

The syntax is quite simple, but some remarks are still needed:
Examples:


```
Desktop.SendKeys("A") «  Desktop.SendKeys("{[Shift_L]a}") « Desktop.SendKeys("{[Shift_R]a}")
Desktop.SendKeys("\n") «  Desktop.SendKeys("[Return]")
Desktop.SendKeys("{[Control_L]c}")
Desktop.SendKeys("Gambas Almost Means BASic")
Desktop.SendKeys(TextArea.Text)
Desktop.SendKeys("{[Control_L]}{[Alt_L]}{[Print]}") ' Screenshot
Desktop.SendKeys("{[Alt_L]}{[Print]}")  ' Screenshot of the active window
Desktop.SendKeys("[NumLock]")
Desktop.SendKeys("[F1]")
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# 15.1.3 Property ScreenSaver - Class Desktop (gb. desktop)

Behind the propertyScreensaveris the class _Desktop_ScreenSaver (gb.desktop). The class enables you to manage the power management and screen saver of the monitor. This virtual class has one Enabled property and 5 methods (Activate, Lock, Reset, Resume and Suspend).
By calling the Resume (Window AS Window) method, the screen saver function and the power management of the monitor are reactivated after they have been exposed. The window passed as a parameter must be the same as it was when you called the Suspend method (Window AS Window) before.
After callingDesktop.ScreenSaver.Suspend(FMain.Window)in a project source code, this message appears in the IDE console:


```
lockfile: Forcing lock on "/tmp/xdg-screensaver-hans--0.0.lock"
```

with the contents of the lock file /tmp/xdg-screensaver-hans–0.0:


```
52428803:7751
```

In one project, both the enabled property and the 5 methods (Activate, Lock, Reset, Resume and Suspend) were used to test their effect.

Figure 15.1.3.1: 'ScreenSaver' project
This is followed by the complete source code, the most important passages of which are commented:


```
[1]' Gambas class file[2][3]PublicSubForm_Open()[4]DimbFlagAsBoolean[5][6]FMain.Center[7]FMain.Resizable=False[8]Desktop.ScreenSaver.Suspend(FMain.Window)[9][10]' bFlag = Desktop.ScreenSaver.Enabled[11]' If bFlag = True Then[12]'    Message.Info("Desktop screen saver switched on.")[13]' Else[14]'    Message.Info("Desktop screen saver switched off.")[15]' Endif ' If bFlag = True ?[16][17]End' Form_Open()[18][19]PublicSubbtnDSSActivate_Click()[20]Desktop.ScreenSaver.Activate()[21]End' btnDSSActivate_Click()[22][23]PublicSubbtnDSSLock_Click()[24]Desktop.ScreenSaver.Lock()[25]End' btnDSSLock_Click()[26][27]PublicSubbtnDSSTest_Click()[28]Desktop.ScreenSaver.Resume(FMain.Window)[29]Desktop.ScreenSaver.Activate()[30]timerDSSWait.Delay=1000*3[31]timerDSSWait.Start[32]End' btnDSSTest_Click()[33][34]PublicSubtimerDSSWait_Timer()[35]Desktop.ScreenSaver.Reset()[36]Desktop.ScreenSaver.Suspend(FMain.Window)[37]timerDSSWait.Stop[38]End' timerWait_Timer()[39][40]PublicSubbtnEnde_Click()[41]Desktop.ScreenSaver.Resume(FMain.Window)[42]Wait0.05[43]FMain.Close[44]End' btnEnde_Click()[45][46]PublicSubForm_Close()[47]btnEnde_Click()[48]End' Form_Close()
```

Comment:


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# 15.1.4 Method Desktop. OpenTerminal (gb. desktop)

When you call this method from a Gambas program, a terminal is started that corresponds to the active desktop:


```
KDE   → konsole
Gnome → gnome-terminal
LXDE  →	lxterminal
Xfce  → xfce4-terminal
```



```
Static Sub OpenTerminal ( [ Dir As String ] )
```

You can optionally specify a start directory as a parameter. If you do not specify this, the home directory is automatically selected as the start directory:

Figure 15.1.4.1: Start Gnome terminal with the start directory ~/DBT
When specifying the source code like the following, make sure that the start directory isoptional/:


```
PublicSubOpenTerminal(OptionalsDirectoryAsString)Desktop.OpenTerminal(sDirectory)End' OpenTerminal(..)PublicSubbtnOpenTerminal_Click()OpenTerminal(User.Home&/"DBT")End' btnOpenTerminal_Click()
```

After closing the terminal, continue working in the Gambas program.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# 15.1.5 Method Desktop.Open() - Class Desktop (gb. desktop)

Using this method enables you to open either a file or aURLin your preferred application:


```
Static Sub Open ( URL As String [ , Wait As Boolean ] )
```

This method supports URLs for the protocols: file, ftp, http and https. The specification of 'file://' is optional. It is not recommended to use the method as root!
When a file is hosted, the file opens in the preferred application for files of this type:


```
[1] Public Sub btnDesktopOpenFile_Click()
[2] 
[3]   Desktop.Open("file://" & User.Home &/ "apache_start.sh")  ' Editor gedit
[4] 
[5] ' Desktop.Open("file://" & User.Home &/ "Buchprojekt/Kapitel14/k14.23_MausRad.odt") ' → OpenLibre
[6] ' Desktop.Open(User.Home &/ "WebSite/CC/c.php")  ' → BlueFish (PHP-Counter) o.k.
[7] 
[8] End ' btnDesktopOpenFile_Click()
```

On the other hand, if aURLis provided for the protocols ftp, http or https, theURLis opened in the user's preferred Web browser.
Example 1


```
[1] Public Sub btnDesktopOpenURL1_Click()
[2]   
[3]   Desktop.Open("https://alfahosting.de/kunden/index.php/Benutzer:Login") ' o.k.
[4] 
[5] ' Desktop.Open("http://gambas-buch.de")               ' o.k.
[6] ' Desktop.Open("http://www.gambas-buch.de")           ' o.k.
[7] ' Desktop.Open("http://127.0.0.1/~hans/dw/doku.php")  ' lokale URI o.k.
[8]  
[9] End
```

Example 2


```
[1] Public Sub btnDesktopOpenURL2_Click()
[2]   Desktop.Open("ftp://ftp.fh-hannover.de/pub/dos/tcpip")
[3] End ' btnDesktopOpenURL2_Click()
```

The protocol must be explicitly specified, otherwise an error message will appear in the console of the IDE - as with the following two (faulty) calls:


```
(A)	Desktop.Open("gambas-buch.de")\\ 
(B)	Desktop.Open("www.gambas-buch.de")
```

The error message in the console of the IDE for calling (A) - in case (B) it looks similar - is understandable. Since no allowed protocol (ftp, http or https) has been specified, the type 'file' is obviously assumed automatically:


```
gvfs-open: file:///home/hans/gambas-buch.de: Error opening the location: 
Error when retrieving the information for file "/home/hans/gambas-buch.de": File or directory not found
```

In practice, you do not see this error message. Since the error is intercepted internally, nothing else happens - in the true sense of the word.
The following call in a console obviously shows the error for case (B):


```
hans@linux:~$ gbx3 /home/hans/DesktopOpen
gvfs-open: file:///home/hans/www.gambas-buch.de: Error opening the location: 
Error when retrieving the information for file "/home/hans/gambas-buch.de": File or directory not found
hans@linux:~$
```



# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# Table of Contents



# 15.2 Class DesktopFile (gb. desktop)

This class is still under development. You can use this class to create and edit the so-called “desktop entries” as desktop configuration files (application/x-desktop) later on. These configuration files describe, for example, how a program is started or how a program appears in a menu. Some distributions have menu editors, others - like Lubuntu - do not have them. Obviously, the DesktopFile class has therefore been included in the gb. desktop component.
However, you can already get the exact specification of files for desktop entries under the link:http://standards.freedesktop.org/desktop-entry-spec/latest/in the current version because Gambas follows this specification.


# 15.2.1 Format of a configuration file

A desktop configuration file consists of the following elements:


# 15.2.2 Example of a configuration file:



```
#
# Starter für die IDE von Gambas 3
# Pfad: ~/.local/share/applications/gambas341.desktop
#
[Desktop Entry]
# Erforderliche Einträge
Type=Application
Name=Gambas 3.4.1
Exec=/usr/bin/gambas3
# Optionale Einträge
Icon=/home/hans/gb341/app/src/gambas3/img/logo/logo-64.png
Categories=Development
Comment=Start der GAMBAS-IDE
Version=3.4.1
Terminal=false
```

You can write the above lines with an editor of your choice and save the file in the user directory:


```
~/.local/share/applications/gambas341.desktop
```

to save them. No root privileges are required. However, if the desktop configuration file is to besystem-wide, it must be saved in the following directory with root privileges:


```
/usr/share/applications/gambas341.desktop
```

After saving you will see the sub-menu 'Gambas 341' in the' Software development' section of the applications menu.
If you also want the starter to be visible on your desktop, you also need to copy the desktop configuration file to the ~/Workspace directory under Ubuntu 12.04. The configuration file must be copied to the directory ~/Workspace under Ubuntu 12.04 as well. You should change the name in the properties of the configuration file to a short form like 'GB3.4.1' and make the file executable under Ubuntu!
It remains to be seen when this class is released for use.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# 15.3 Class DesktopMime (gb. desktop)

This class allows you to process the data in the filemimeapps. list(MIME database) as defined by the freedesktop standard. The mime type is used to start an application that matches the type. After the file below, for example, the program bluefish is started for a text file with the extension .csv.
This is - for example under Ubuntu 12.04 - the content of the file ~/.local/share/applications/mimeapps.list:


```
[Default Applications]
x-scheme-handler/mailto=thunderbird.desktop

[Added Associations]
x-scheme-handler/mailto=thunderbird.desktop;
application/x-java=gedit.desktop;bluefish.desktop;
application/x-trash=gedit.desktop;
text/csv=bluefish.desktop;
text/plain=bluefish.desktop;libreoffice-writer.desktop;
application/octet-stream=libreoffice-writer.desktop;ghex.desktop;gedit.desktop;bluefish.desktop;
image/jpeg=ghex.desktop;bluefish.desktop;
application/x-gambas3=gedit.desktop;
```

In close connection with this is obviously the fileusr/share/applications/mimeinfo.cache, which issystem-widewhile the filemimeapps.listis used only for a certain system user.
This class is still under development. It is currently not known when this class can be used.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# Table of Contents



# 15.4 Class DesktopWindow (gb. desktop)

The class DesktopWindow (gb. desktop) represents a top-level window. You can create objects of the class in this way:


```
Dim hDesktopWindow As DesktopWindow
hDesktopWindow = New DesktopWindow(Window As Integer)
```

However, it is recommended that you do not create DesktopWindow objects directly, but rather access a top-level window using the Desktop. Windows property. Two examples should prove this:


```
PrivateFunctionDesktop_FindWindow(sPatternAsString)AsDesktopWindow[]DimdtWindowAsDesktopWindowDimdtWListAsNewDesktopWindow[]Desktop.Windows.Refresh()' Desktop.Windows presents a list of all top-level windows as a virtual object.ForEachdtWindowInDesktop.WindowsIfdtWindow.NameLikesPatternThendtWList.Add(dtWindow)Endif'  dtWindow.Name Like sPattern ?Next' dtWindowReturndtWListEnd' Function Desktop_FindWindow(..)
```



```
PublicSubbtnExample_Click()DimdtWindowAsDesktopWindowDesktop.Windows.Refresh()ForEachdtWindowInDesktop.WindowsIfdtWindow.SkipTaskbar=FalseThenPrint"Window.Name =\""&dtWindow.Name&"\", X = "&dtWindow.X&" , Y = "&dtWindow.YEndif' dtWindow.SkipTaskbar = FalseNext' dtWindowEnd' btnExample_Click()
```

The last section of the source code, for example, provides the following output in the console (IDE):


```
Window.Name ="Gambas Documentation - Desktop.Windows[] (gb.desktop) - Mozilla Firefox", X =0, Y =24Window.Name ="19.7.4.odt - LibreOffice Writer", X =0, Y =24Window.Name ="19.7_Desktop", X =0, Y =24Window.Name ="k19:start [GAMBAS-BUCH 3.5.1] - Mozilla Firefox", X =0, Y =24Window.Name ="propertytest 0.0.15 - Gambas 3", X =0, Y =24Window.Name ="PropertyTest", X =304, Y =213
```



# 15.4.1 Properties

Selected properties and methods of the class are listed and described in the following two tables:
tablelayout
Table 15.4.1.1: Overview of selected properties of the DesktopWindow class


# 15.4.2 Methods

tablelayout
Table 15.4.2.1: Selected methods of the DesktopWindow class
For more information on the DesktopWindow class (gb. desktop), see chapter 15, which demonstrates the practical interaction of the two classes in a project in addition to the description of the DesktopWatcher class.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# Table of Contents



# 15.6 Class Desktop (gb.qt4)

The class Desktop (gb.qt4) has only a few properties as well as a method and a constant. You can use them to get information about the screen and desktop.
This class must always be viewed in conjunction with the Desktop class of the Desktop component and the Screens and Screen classes.


# 15.6.1 Properties

All properties and their description can be found in the following table:
Table 15.6.1.1: Overview of desktop class properties (gb. qt4)
Following the suggestion in the Gambas documentation, you can use the following procedure to read the properties of the desktop and display them in a MessageBox:


```
PublicSubbtnGetDesktopInformation_Click()DimsMessage, sLabelAsStringsMessage="<hr><b>Desktop-Eigenschaften</b><hr>"sMessage&="Nutzbare Desktop-Höhe = "&Desktop.Height&" Pixel"sMessage&="<br>Nutzbare Desktop-Breite = "&Desktop.Width&" Pixel"sMessage&="<br>Desktop-Top = "&Desktop.YsMessage&="<br>Desktop-Left = "&Desktop.X&"<hr>"sMessage&="Zeichensatz = "&Desktop.CharsetsLabel=IIf(Desktop.HasSystemTray=False," Nein"," Ja.")sMessage&="<br>SystemTray = "&sLabel' Desktop.HasSystemTraysMessage&="<br>Skalierungsfaktor = "&Desktop.ScalesMessage&="<br>Auflösung = "&Desktop.Resolution&" DPI <hr>"Message.Info(sMessage)End' btnGetDesktopInformation_Click()
```


Figure 15.6.1.1: Display Properties Desktop


# 15.6.2 Constant Desktop Charset

The constant Desktop.Charset specifies the character set used by the graphical user interface to display text. The QT and GTK+ components use the UTF-8 character set. You must be careful, because the underlying operating system could use a different font!


# 15.6.3 Desktop method ScreenShot (screenshot)

The specified method not only returns a screen copy of the complete desktop as an object of type Picture, but also allows you to copy a selected part of it as an option:


```
Static Function Screenshot ([ X As Integer, Y As Integer, Width As Integer, Height As Integer ]) As Picture
```

This procedure returns a screen copy that is immediately displayed in a PictureBox and then saves the current screen dump in a specific directory as png-graphic with highest quality (→ 100).


```
[1]PublicSubbtnGetScreenShot_Click()[2]FMain.Hide[3]Wait0.1' In der Praxis bis auf 3 Sekunden erhöhen![4]PictureBox1.Picture=Desktop.Screenshot()[5]PictureBox1.Picture.Save(User.Home&/"current_screenshot.png",100)[6]FMain.Show[7][8]' Alternative ohne direkte Anzeige - Option Speichern-Dialog[9]' FMain.Hide[10]' Wait 0.05[11]' Desktop.Screenshot().Save(User.Home &/ "current_screenshot.png", 100)[12]' FMain.Show[13][14]End' btnGetScreenShot_Click()
```

With an additional Save dialog you can save several screen copies comfortably.
If you do not use the display, you will be able to save the screen copy immediately in the specified image path and in the required quality using the save procedure Desktop. screenshot. save (Path, Quality).

Figure 15.6.3.1: Desktop Project: Display Screen Copy (Xubuntu in a VM)


# 15.6.4 Extensions

You can also determine the names of the virtual desktops if you have wmctrl installed on your system. With the order:


```
hans@linux:~$wmctrl-d
```

you get the following output with the option -d, where the current desktop is marked with an asterisk and the name of the desktop is at the end of the line:


```
0  - DG: 1680x1050  VP: N/A  WA: 0,24 1680x1002  WEB 
1  - DG: 1680x1050  VP: N/A  WA: 0,24 1680x1002  EXPLORER 
2  * DG: 1680x1050  VP: 0,0  WA: 0,24 1680x1002  GAMBAS 
3  - DG: 1680x1050  VP: N/A  WA: 0,24 1680x1002  TERMINAL
```

For a Gambas procedure that does the same thing, use the Shell or Exec instruction (→ chapter 21.3.1 Use Quick-Syntax) and some strings and arrays to determine and display the desktop identifiers from the returned string stored in the variable sList:


```
PublicSubbtnGetDesktopName_Click()DimsElement, sListe, sMessageAsStringDimaMatrix, aZeileAsNewString[]Shell"wmctrl -d"TosListeIfsListeThenaMatrix=Split(sListe,"\n")sMessage="<hr><b>Desktop-Bezeichner</b><hr>"ForEachsElementInaMatrixIfsElementThenaZeile=Split(sElement," ")sMessage&="<br>"&aZeile[aZeile.Count-1]EndifNext' sElementMessage.Info(sMessage)End' btnGetDesktopName_Click()
```


Figure 15.6.4.1: Display of desktop names (identifiers)


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Desktop



# Chapters



# 15.7 Class Screens (gb. qt4)

The Screens class has only one property. Count returns the number of monitors connected to your system's graphics card.

Figure 15.7.1: Display of the number of monitors on the graphics card
Good to know you're using screens[ Index As Integer] As Screen a screen object that allows you to read the screen geometry of a particular monitor. The standard monitor has the index 0:


```
PublicSubbtnGetMonitorGeometry_Click()DimsMessageAsStringsMessage="<hr><b>Monitor-Eigenschaften</b><hr>"sMessage&="Monitor-Höhe = "&Screens[0].Height&" Pixel"sMessage&="<br>Monitor-Breite = "&Screens[0].Width&" Pixel"sMessage&="<br><br>Nutzbare Desktop-Höhe = "&Screens[0].AvailableHeight&" Pixel"sMessage&="<br>Nutzbare Desktop-Breite = "&Screens[0].AvailableWidth&" Pixel<br>"sMessage&="<br>Auflösung = "&Desktop.Resolution&" DPI <hr>"Message.Info(sMessage)' Alternativer Quelltext:' sMessage = "<hr><b>Standard-Monitor-Eigenschaften</b><hr>"' sMessage &= "Monitor-Höhe = " & Screen.Height & " Pixel"' sMessage &= "<br>Monitor-Breite = " & Screen.Width & " Pixel"' sMessage &= "<br>Auflösung = " & Desktop.Resolution & " DPI <hr>"' sMessage &= "Nutzbare Desktop-Höhe = " & Screens[0].AvailableHeight & " Pixel"' sMessage &= "<br>Nutzbare Desktop-Breite = " & Screens[0].AvailableWidth & " Pixel<br>"' Message.Info(sMessage)End' btnGetMonitorGeometry_Click()
```


Figure 15.7.2: Display of selected monitor properties
The following procedure provides information about the selected properties of the monitors if several monitors are connected to the same graphics card. Pay particular attention to the sections in the source code that are highlighted in blue, which can be extended by additional properties for k monitors:


```
PublicSubbtnGetMonitorGeometry_Click()DimiCountAsIntegerDimsMessageAsStringDimhScreenAsScreen
 
  sMessage="<hr><b>Monitor-Eigenschaften</b><hr>"ForEachhScreenInScreens
        sMessage&="Höhe Monitor "&Str(iCount+1)&"  = "&Screens[iCount].Height&" Pixel"sMessage&="<br>Breite Monitor "&Str(iCount+1)&" = "&Screens[iCount].Width&" Pixel <hr>"InciCountNext' hScreenMessage.Info(sMessage)End' btnGetMonitorGeometry_Click()
```


Figure 15.7.3: Displaying Selected Monitor Properties for Multiple Monitors


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.2 Separator

You will always use the Separator component if you want to delimit sections of the form with horizontal or vertical lines. You only need to place the component Separator on the form in the required orientation and length during development.

Figure 17.2.1: Use of 3 horizontal separators
Figure 17.2.1 shows 3 separators to discreetly separate the three displays.
Since revision #5432 the color set withSeparator.Foregroundis no longer ignored. In order for it to be displayed, the height or width of the separator must be set to the value 1.


# Download

Articles
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.7.1 Preparation of data

The formatting of the data that you want to display in the GridView is essentially determined by the source from which the data originates. The sources are seen above all:
For data from a database table, you should use the proven combination of the two componentsDataSourceandDataBrowserto display the data. You can also sort the data in the DataBrowser column by column and in a flash.

Figure 17.7.1.1: Displaying DB data in the DataBrowser
A recommendation for very large amounts of data can be considered: Try to store the data in a string array of individual records or in a two-dimensional array. You are then able to fill the GridView very quickly with the data from the array using theGridView_Data event. If only a few rows in the GridView have to be filled with data with a small number of columns, you can, for example, insert the data to be displayed row by row - column value for column value - into the grid.


# Download

Article
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.7.2 Selected GridView Properties

These are the main grid properties that you can set or read:
Table: 17.7.2.1 Description Grid property .Header.
The properties can apply to all columns or only to selected columns:
Table: 17.7.2.2 Description of selected grid properties - columns
The same applies to the rows in the GridView:
Table: 17.7.2.3 Description of selected grid properties - rows
The description of further properties of the GridView follows:
Table: 17.7.2.4 Description of selected grid properties
These two methods are of particular interest:
Table: 17.7.2.5 Description of selected methods
It has proved to be advantageous to set the grid properties in a separate procedure, as shown in the following excerpts from two different source texts. The number of columns is known in the first section:


```
PRIVATESUBSetGridProperty()GridView1.Resizable=TRUE' Muss vor allen anderen Eigenschaften gesetzt werdenGridView1.Mode=Select.SingleGridView1.Columns.Count=4GridView1.Header=GridView1.BothGridView1.Columns[0].Width=110GridView1.Columns[0].Title="Zahl"GridView1.Columns[1].Width=120GridView1.Columns[1].Title="Wahrheitswert"...END' SetGridProperty()
```

In the second source code excerpt, the number of columns is determined and the column headers are generated dynamically:


```
PUBLICSUBSetGridViewProperty()DIMiDatensatzNummer, iSpaltenNummerASIntegerGridView.Header=1' GridView.HorizontalGridView.Columns.Count=rDBResult.Fields.CountGridView.Columns[0].Width=25GridView.Columns[0].Resizable=FALSE' Nur diese Feldbreite ist fix' GridView-Spalten-Bezeichner ermitteln und eintragenFORiSpaltenNummer=0TOrDBResult.Fields.Count-1GridView.Columns[iSpaltenNummer].Title=rDBResult.Fields[iSpaltenNummer].NameNEXT' FeldnameEND' SetGridViewProperty
```

The following sections describe projects that use a GridView to display data from different sources and offer various options for inserting the data:
The next two projects only make sense if you can save the manipulated data in the grid view, for example, in a csv file or read it in again:
The final project requires Gambas 3 - at least in revision 4715:
The source code is only fully specified and explained for those procedures and functions that are necessary for understanding the properties and methods used in GridView.


# Download

Article
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.7.3 Project 1 - Direct display of data in the GridView

In the first project presented, the number of columns in the GridView is known, constant and is 5. randomly generated data (data types: String, Float, Date and Boolean) are immediately inserted into the grid cells row by row - column by column - without buffering and displayed in the grid view. After all data has been entered, which takes some time even with the few data, the display changes to the first data line after one second. Here you can find the (almost) complete source code:


```
[1]' Gambas class file[2][3]PUBLICSUBForm_Open()[4]FMain.Center[5]FMain.Border=1[6]SetGridProperty()[7]GridView1.Rows.Count=0' Es wird KEIN Daten-Gitter angezeigt[8]END' Form_Open()[9][10]PRIVATESUBSetGridProperty()[11]GridView1.Header=GridView1.Horizontal' Kopfzeile wird angezeigt[12]GridView1.Mode=Select.Single' Die selektierte Zeile wird farbig markiert[13]GridView1.Columns.Count=5' Anzahl der Spalten[14]GridView1.Columns[0].Resizable=FALSE' Die erste Spalte-Breite ist fix[15]GridView1.Columns[0].Width=40[16]GridView1.Columns[0].Title="N"[17]GridView1.Columns[1].Width=90[18]GridView1.Columns[1].Title="Zahl"[19]GridView1.Columns[2].Width=110[20]GridView1.Columns[2].Title="Wahrheitswert"[21]GridView1.Columns[3].Width=110[22]...[23]END' SetGridProperty()[24][25]PRIVATESUBGenerateAndDisplayGridValues()[26]DIMiCountASInteger[27]DIMaNamesASString[]=["Hans","Maria","Peter","Anna","Robert","Stefan","Emma","Yvonne"][28][29]FMain.Mouse=Mouse.Wait[30]FORiCount=1TO200' Datensätze mit Zufallsdaten[31]INCGridView1.Rows.Count' Anzeige der bereits generierten Datensätze/Zeilen in der GridView[32]GridView1.MoveTo(GridView1.Rows.Count-1,0)' Optional[33]GridView1[iCount-1,0].Text=Str(GridView1.Rows.Count)[34]GridView1[iCount-1,1].Text=Str(Round(Rnd(-100,100),-3))[35]GridView1[iCount-1,2].Text=Str(CBool(Round(Rnd())))[36]GridView1[iCount-1,3].Text=aNames[CInt(Rnd(0, aNames.Count))][37]GridView1[iCount-1,4].Text=Format$(Date(Rnd(0,2200)+CFloat(Now())),"dd.mm.yyyy")[38]NEXT' iCount[39]FMain.Mouse=Mouse.Default[40]END' CreateGridValues()[41][42]PUBLICSUBbtnGridViewShow_Click()[43]GridView1.SetFocus[44]GridView1.Clear[45]GridView1.Rows.Count=0[46]GenerateAndDisplayGridValues()[47]WAIT1[48]GridView1.MoveTo(0,0)' Sprung in die Daten-Zelle[0,0][49]END' GridViewShow_Click()[50][51]PUBLICSUBbtnClose_Click()[52]FMain.Close[53]END' Close
```


Figure 17.7.3.1: Direct display of data in the GridView - without buffering
The grid properties can already be set at program start with SetGridProperty (lines 33 to 37), since they do not change at runtime. If the number of rows in the GridView is greater than zero, the cells filled with the data become visible (row 31).
In row 30, try other values for the number of rows to be generated in the grid view and compare the times until the data grid is completely filled with this instant display method.
You have at least these options for navigation in the GridView:


# 17.7.3 Download

Article
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.7.4 GridView - Sorting the data

The GridView component does not have its own method for sorting the data in the grid column by column, although the Sorted property exists for the GridView. You have to program the missing sorting method yourself, as a look in the help shows: Sorting the data is not done automatically. It must be done by user code. In chapter 7.4 Array you will find the basic procedures for sorting a derived array. The basic idea is to store all rows of the GridView in an array, sort the array by a given column and then fill the GridView with the elements of the sorted array using the'ArrayToGrid' procedure.
The main program uses the two classes Variant[].class and CSort.class from chapter 7 to display the columns in the grid view in ascending or descending order. The corresponding places are highlighted in color in the (complete) source text:


```
[1]' Gambas class file[2][3]PrivatehSortAsNewCSort[4]PrivateiLastAsInteger=-1[5]PrivateiCountAsInteger[6][7]PublicSubForm_Open()[8][9]GridView1.Header=GridView1.Horizontal[10]GridView1.Sorted=True[11][12]GridView1.Columns.Count=6[13][14]GridView1.Columns[0].Width=90[15]GridView1.Columns[0].Title="Number"[16]GridView1.Columns[1].Width=90[17]GridView1.Columns[1].Title="Boolean"[18]GridView1.Columns[2].Width=80[19]GridView1.Columns[2].Title="String"[20]GridView1.Columns[3].Width=160[21]GridView1.Columns[3].Title="Date1"[22]GridView1.Columns[4].Width=90[23]GridView1.Columns[4].Alignment=Align.Center[24]GridView1.Columns[4].Title="Number2"[25]GridView1.Columns[5].Title="Date2"[26][27]FMain.Center[28]FMain.Resizable=False[29]iCount=999[30]FMain.Text="Ausgabe von "&Str((iCount+1)*Str(GridView1.Columns.Count))&" Zufallsdaten,\\die sortiert werden können!"[31]End' Form_Open[32][33]PublicSubbtnFillGrid_Click()[34]DimiAsInteger[35]DimvMatrixAsVariant[][36]DimaStrsAsString[]=["Merkur", ...,"Mars","Jupiter","Saturn","Uranus","Neptun","Pluto"][37][38]hSort.Clear()' Spaltensortierung zurücksetzen[39]iLast=-1[40][41]GridView1.Clear[42]Randomize[43][44]Fori=0ToiCountStep1[45]vMatrix=NewVariant[][46]vMatrix.Add(Round(Rnd(0,10),-2))' Reelle Zahl[47]vMatrix.Add(CBool(Round(Rnd(0,1))))' Wahrheitswert[48]vMatrix.Add(aStrs[CInt(Rnd(0, aStrs.Count))])' Zeichenkette[49]vMatrix.Add(CDate(Rnd(CFloat(Now()),CFloat(Now()+1000))))' Datum 1[50]vMatrix.Add(CInt(Rnd(-10,10)))' Ganze Zahl[51]vMatrix.Add(CDate(Rnd(CFloat(Now()),CFloat(Now()+2000))))' Datum 2[52]hSort.Add(vMatrix)[53]Next' i[54][55]ArrayToGrid()[56][57]End' FillGrid[58][59]PublicSubArrayToGrid()[60]DimiAsInteger[61]DimvMatrixAsVariant[][62][63]GridView1.Rows.Count=hSort.Count[64]Fori=0TohSort.Count-1Step1[65]vMatrix=hSort[i][66]GridView1[i,0].Text=Str$(vMatrix[0])[67]GridView1[i,1].Text=Str$(vMatrix[1])[68]GridView1[i,2].Text=Str$(vMatrix[2])[69]GridView1[i,3].Text=Str$(vMatrix[3])[70]GridView1[i,4].Text=Str$(vMatrix[4])[71]GridView1[i,5].Text=Str$(vMatrix[5])[72]Next' i[73][74]End'  ArrayToGrid[75][76]PublicSubGridView1_ColumnClick(ColumnAsInteger)[77]' Beim wiederholten Klick auf die gleiche Spalte wird die Sortierung invertiert[78]IfiLast=ColumnThen[79]hSort.Reverse()' Optimierung, um nicht mit gb.Descent wiederholt zu sortieren[80]Else[81]hSort.SortField(Column)[82]Endif' iLast[83][84]ArrayToGrid()[85]iLast=Column[86]End' GridView1_ColumnClick(..)
```


Figure 17.7.4.1: Sorting by the 1st column in the GridView - ascending

Figure 17.7.4.2: Sorting by the 1st column in the GridView - descending


# 17.7.4 Download

Article
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.7.5 GridView - Data import from a database table

This project demonstrates the display of data from a database table in a GridView. When the program starts, the number of rows and columns in the grid view is not known, but depends on the SQL query. The structure of the result of data records (rows) and fields (columns), which is returned by the database server as a matrix, is of great advantage. Since there is no need to convert or temporarily store the delivered data, it can be inserted and displayed in the GridView immediately. A SQLite3 database table is used in the project:

Figure 17.7.5.1: Display of DB data in SQLite Database Browser
With this program source code you can display data from a database table in a GriDView:


```
[1]' Gambas class file[2][3]PUBLICrDBResultASResult[4]PUBLICcDBVerbindungASNEWConnection[5][6]PUBLICSUBForm_Open()[7]FMain.Center[8]FMain.Border=1[9]GridView.Rows.Count=0' Beim Programmstart wird KEIN Gitter angezeigt[10]END' Form_Open[11][12]PUBLICSUBbtnDBDatenImGitterAnzeigen_Click()[13]GridView.Clear[14]GridView.Rows.Count=0[15]TRYDBDatenAuslesen()[16]IFERRORTHEN[17]Message.Error("Es konnten keine DB-Daten ausgelesen werden!")[18]RETURN[19]ENDIF' ERROR ?[20][21]IFrDBResult.Count=0THEN[22]Message.Info("Die Anzahl der selektierten Datensätze ist Null!")[23]RETURN[24]ELSE[25]SetGridViewProperty()[26]GridView.Rows.Count=rDBResult.Count' Jetzt wird das Gitter gezeichnet![27]GridView.SetFocus[28]' Sprung in die letzte Datenzeile ---> GridView.MoveTo(rDBResult.Count - 1, 0)[29]' Sprung in die erste Datenzeile ---> GridView.MoveTo(0, 0)[30]GridView.MoveTo(0,0)[31]ENDIF' rDBResult.Count = 0 ?[32]END' DBDatenImGitterAnzeigen[33][34]PUBLICSUBSetGridViewProperty()[35]DIMiDatensatzNummer, iSpaltenNummerASInteger[36][37]GridView.Header=1[38]GridView.Columns.Count=rDBResult.Fields.Count[39]GridView.Columns[0].Width=25[40]GridView.Columns[0].Resizable=FALSE' Die Feldbreite ID ist fix[41]' GridView-Spalten-Bezeichner ermitteln und eintragen[42]FORiSpaltenNummer=0TOrDBResult.Fields.Count-1[43]GridView.Columns[iSpaltenNummer].Title=rDBResult.Fields[iSpaltenNummer].Name[44]NEXT' Feldname[45]END' SetGridViewProperty[46][47]PUBLICSUBDBDatenAuslesen()[48]DIMsSQL_AnweisungASString[49][50]cDBVerbindung.Close()[51]cDBVerbindung.Type="sqlite3"' Der Typ muss klein geschrieben werden![52]cDBVerbindung.Host=Application.Path&/"SQL/GVT"' User.Home &/ "GVT"[53]cDBVerbindung.Name="Liste"' Das ist der Datenbank-Name[54]cDBVerbindung.User=""' ---> Nur bei MySQL und PostgreSQL erforderlich[55]cDBVerbindung.Password=""' ---> Nur bei MySQL und PostgreSQL erforderlich[56]cDBVerbindung.Port=""' ---> Nur bei MySQL und PostgreSQL erforderlich[57][58]' Versuch, eine DB-Verbindung herzustellen[59]TRYcDBVerbindung.Open()[60]IFERRORTHEN[61]Message.Error("Eine DB-Verbindung zum DB-Server konnte NICHT hergestellt werden!")[62]ENDIF[63][64]sSQL_Anweisung="SELECT * FROM "&"liste"&" ORDER BY Nachname"[65]rDBResult=cDBVerbindung.Exec(sSQL_Anweisung)[66][67]END' DBDatenAuslesen[68][69]PUBLICSUBGridView_Data(RowASInteger, ColumnASInteger)[70]rDBResult.MoveTo(Row)[71]GridView.Data.Text=rDBResult[Column][72]IFrowMOD2=0THENGridView.Data.Background=Color.RGB(224,224,224)[73]END' grdWerteTabelle_Data[74][75]PUBLICSUBForm_Close()[76]TRYcDBVerbindung.Close()[77]IFERRORTHENMessage.Error("Fehler bei Trennen der DB-Verbindung!")[78]END' Form_Close[79][80]PUBLICSUBbtnProgrammEnde_Click()[81]FMain.Close[82]END' Programm-Ende
```

The source code contains no surprises except for the procedure GridView_Data(..) in rows 69 to 73, which can be used to insert and display the data'en bloc' in the GridView:

Figure 17.7.5.2: Display of DB data in a GridView
The difference in the two figures results from the last part of the SQL statement, in which sorting by last name is required. Figure 17.7.5.1 shows the records as they were inserted into the database table.


# 17.7.5 Download

Article
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.7.6 GridView - Data export to a csv file

This project is not primarily concerned with displaying data in a GridView, but with backing up data that is displayed in a GridView. The data is saved in a csv file.
This text file format is used as a transfer format for simply structured data. Each row contains a data record, where the individual data fields are separated from the other fields by a field separator and a field value is enclosed by a text separator. Optionally, the first line can also contain the field labels.

Figure 17.7.6.1: Saving data in a csv file
Here you see a section with the data stored in a csv file - please compare with figure 17.7.6.1 - where the 4 field names are stored in the first data set:


```
"Number","Boolean","String","Date"
"76,987","True","Emma","01.11.2012"
"-90,454","False","Hans","29.03.2013"
"-16,513","False","Anna","25.06.2012"
"-98,831","True","Robert","17.08.2013"
"-63,46","True","Stefan","03.11.2013"
```

The comma serves as field separator and the quotation mark '' is used as text separator. In the export form, you can select both the field separator and the text separator from a predefined character set. You can also specify whether the field names are to be saved in the first data record.

Figure 17.7.6.2: Specifying storage options in a separate form
You determine the storage location and the file name for the csv file in a dialog:

Figure 17.7.6.3: save dialog
To use the source code for saving data in a csv file in other projects, a separate form for setting the saving options and a module were used.
The complete source code for the module can be found here:


```
' Gambas module filePUBLICsFeldTrennzeichenASStringPUBLICsTextTrennzeichenASStringPUBLICbSaveTitelASBooleanPUBLICbErrorASBooleanPUBLICSUBExportGridView2CSV(GridASGridView,pFeldTrennerASString, pTextTrennerASString,/pSaveTitelASBoolean)DIMiCount, rCount, cCountASIntegerDIMsZeileASStringDIMhFileASFileDialog.Title="Speichern Sie die Daten in einer csv-Datei!"Dialog.Filter=["*.csv","csv-Dateien"]IFDialog.SaveFile()=TRUETHENMessage.Warning("Der Daten-Export wurde abgebrochen!")RETURN' Cancel-ButtonELSE' Die CSV-Datei wird neu angelegt oder geleertIFFile.Ext(Dialog.Path)<>"csv"ANDFile.Ext(Dialog.Path)<>"txt"THENDialog.Path=File.SetExt(Dialog.Path,"csv")ENDIFhFile=OPENDialog.PathFORWRITECREATEIFERRORTHENMessage.Error(Error.Text&Error.Where)RETURNENDIF' ERRORseek">SEEK#hFile,0' Spaltenüberschriften speichern (optional)IFpSaveTitel=TRUETHENIFGrid.Header=Grid.HorizontalORGrid.Header=Grid.BothTHENFORiCount=0TOGrid.Columns.Count-1IFiCount>0THENsZeile&=pFeldTrenner&pTextTrenner&Grid.Columns[iCount].Title&pTextTrennerELSEsZeile&=pTextTrenner&Grid.Columns[iCount].Title&pTextTrennerENDIF' iCount > 0NEXTPRINT#hFile, sZeileENDIF' Grid.Horizontal OR Grid.Header?ENDIF' bTitel = TRUE?' GridView-Daten speichernsZeile=""FORrCount=0TOGrid.Rows.Count-1FORcCount=0TOGrid.Columns.Count-1IFcCount>0THENsZeile&=pFeldTrenner&pTextTrenner&Grid[rCount, cCount].Text&pTextTrennerELSEsZeile&=pTextTrenner&Grid[rCount, cCount].Text&pTextTrennerENDIF' cCount > 0NEXT' cCountPRINT#hFile, sZeile 
         sZeile=""NEXT' rCountENDIF' Dialog.SaveFile() = TRUE?CLOSE#hFileEND' GridViewExport2CSV
```

In the main program, the procedure with which a data export is started is of particular interest:


```
PUBLICSUBExportGridView2CSV()FExport.ShowModalIFMCSV.bError=FALSETHENMCSV.GridView2CSV(GridView1, MCSV.sFeldTrennzeichen, MCSV.sTextTrennzeichen, MCSV.bSaveTitel)btnGridViewExportCSV.Enabled=TRUEELSEMessage.Warning("Der Daten-Export wurde abgebrochen!")btnGridViewExportCSV.Enabled=TRUEENDIF' MCSV.bError = FALSE?END' ExportGridView2CSV()
```



# Download

Article
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.8 TableView

Good to know that a TableView (gb.form) is a GridView with editing function. In the object-oriented sense, a TableView inherits all constants, properties, methods and events from a GridView. Therefore, this chapter only describes the properties, methods and events by which a TableView has been enhanced compared to a GridView and are designed to edit a cell in the grid.


# 17.8.1 Example

The (special) MarkDown syntax used by Gambas for inserting tables is very simple, but due to the many necessary rows with the row and column separators you quickly lose the overview.
It would be more elegant to insert the contents of the individual cells directly into a TableView grid and then convert the table contents into MarkDown syntax:

Figure 17.8.1.1: Generating tables in MarkDown syntax


# 17.8.2 Properties

The TableView class has these special properties:
Table 17.8.2.1: Special Properties of the TableView Class


# 17.8.3 Methods

The class TableView has these special methods:
Table 17.8.3.1: Special methods of the class TableView
Hints:


# 17.8.4 Events

The following two special events are required to save edited text in a TableView cell in the grid:
Insert\This event is triggered when the user requests insertion by pressing the RETURN key.{Ü_DB}
Save( Row As Integer, Column As Integer, Value As String )This event is triggered when an edited text (string) is to be stored in a specific cell (row, column).


# 17.8.5 Project 1

Project 1 shows you how to use the special properties, methods and events of the TableView to edit and save text in a selected TableView cell with a specific editor. The editing mode is activated with every click on a TableView cell. The complete source code is specified and commented.
Only in the IDE you see the inserted alternative editor 'Editor1', which is not used in the project:

Figure 17.8.5.1: Form
Full source code:


```
[1]' Gambas class file[2][3]PublicaMaxArrayAsNewInteger[][][4]PublicaArrayAsInteger[][5][6]PublicSubForm_Open()[7][8]FTable.Center[9]FTable.Arrangement=Arrange.Vertical[10]FTable.Margin=True[11]FTable.Spacing=True[12]FTable.Padding=8[13]HBox1.Spacing=True[14]HBox1.H=24[15]panSpace.Expand=True[16]cmbMode.Index=1[17][18]TableView1.Expand=True[19]TableView1.Mode=cmbMode.Index[20]TableView1.Header=TableView1.Both' Anzeige der beiden Header – wenn das erforderlich ist[21]TableView1.Resizable=True' Die Spaltenbreite kann mit der Maus geändert werden[22]TableView1.AutoResize=True' Die letzte Spalte verfügt über vorhandene (Rest-)Breite[23]TableView1.Background=&HF5FFE6[24][25]TableView1.Rows.Count=5[26]TableView1.Columns.Count=3[27][28]' Feste Werte für die Weite, die Überschriften und die Ausrichtung der drei Spalten[29]TableView1.Columns[0].Width=200[30]TableView1.Columns[0].Title="Betriebssytem"[31]TableView1.Columns[0].Alignment=Align.Center[32]TableView1.Columns[1].Width=200[33]TableView1.Columns[1].Title="Version"[34]TableView1.Columns[1].Alignment=Align.Center[35]TableView1.Columns[2].Title="Computer"[36]TableView1.Columns[2].Alignment=Align.Center[37]TableView1.Rows[1].Selected=True' Selektion der 2. Zeile[38]TableView1.NoKeyboard=True' Pfeiltasten OHNE Wirkung zum Navigieren in Gitter-Spalten[39][40]' TableView1.EditWith(Editor1)[41][42]cbxEditModus.Value=False[43]FillArray(TableView1)[44][45]End' Form_Open()[46][47]' Nur für Testzwecke[48]PublicSubTableView1_Data(RowAsInteger, ColumnAsInteger)[49]TableView1.Data.Text="Zeile "&(Row+1)&", Spalte "&(Column+1)[50]End[51][52]PublicSubTableView1_Click()[53]IfcbxEditModus.Value=FalseThen[54]TableView1.Edit()[55]Else[56]SelectCaseTableView1.Column[57]Case0[58]TableView1.Edit(["Linux","Windows","OS-X"])[59]Case1[60]TableView1.Edit(["Ubuntu 12.04","Mint 17","Win 7","Win 8.1","X.10"],False)[61]Case2[62]TableView1.Edit(["Desktop-PC","NoteBook","NetBook","Tablet PC"],True)[63]EndSelect[64]Endif' cbxEditModus.Value = False ?[65]End' TableView1_Click()[66][67]PublicSubTableView1_Save(RowAsInteger, ColumnAsInteger, ValueEditAsString)[68]TableView1[Row, Column].Text=ValueEdit[69]IfaMaxArray[Row][Column]<TableView1.Font.TextWidth(ValueEdit)Then[70]aMaxArray[Row][Column]=TableView1.Font.TextWidth(ValueEdit)[71]TableView1.Columns[Column].Width=TableView1.Font.TextWidth(ValueEdit)+8[72]Else[73]TableView1.Columns[Column].Width=aMaxArray[Row][Column][74]Endif[75][76]End' TableView1_Save(..)[77][78]PublicSubTableView1_ColumnResize(ColumnAsInteger)[79]FillArray(TableView1)[80]End' TableView1_ColumnResize(..)[81][82]PrivateSubFillArray(oTableViewAsTableView)[83]Dimr, cAsInteger[84][85]aMaxArray.Resize(oTableView.Rows.Count)[86]Forr=0ToaMaxArray.Max[87]aMaxArray[r]=NewInteger[][88]aMaxArray[r].Resize(oTableView.Columns.Count)[89]Forc=0ToaMaxArray[r].Max[90]aMaxArray[r][c]=oTableView.Columns[c].Width[91]Next[92]Next[93]End' FillArray(..)[94][95]PublicSubcmbMode_Click()[96]TableView1.Mode=cmbMode.Index[97]IfcmbMode.Index<>0ThenTableView1.Rows[1].Selected=True[98]End' cmbMode_Change()[99][100]PublicSubbtnCancel_Click()[101]TableView1.Cancel()[102]End' btnCancel_Click()[103][104]PublicSubbtnExit_Click()[105]FTable.Close[106]End' btnExit_Click()
```

Comment:

Figure 17.8.5.2: Edit method without optional parameters

Figure 17.8.5.3: Edit method with optional'List' parameter
The array aMaxArray is used to adjust the column width of the edited cell after saving the length of the contents (lines 3, 46, 81-83, 85-98). With the combo box 'cmbMode' you have the possibility to set the selection of one line, several lines (+CTRL) or no line at runtime (lines 100 to 103) By clicking on the Cancel button with the label 'C' you can cancel the editing of a cell immediately - without changing the content (lines 105 to 107).


# 17.8.6 Project 2

Project 2 demonstrates how you can sort data in a TableView in ascending or descending columns by clicking on the table column header:

Figure 17.8.6.1: Sorting data in a TableView


# Download

Article
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.9.0 TreeView

The TreeView control implements a tree view of a structure.
The class _TreeView is the internal base class for the TreeView control, but also for the ListView and ColumnView controls. TreeView is no longer implemented in gb.qt4, but in gb.gui.base. The →http://gambaswiki.org/wiki/comp/gb.qt4/treeviewdocumentation nevertheless lists the TreeView in gb.qt4 because gb.gui.base is a hidden component that collects controls that can be written in Gambas and should be shared between gb.gtk* and gb.qt*. TreeView is written in Gambas and therefore you have the option to view the source code of the control.
You can move the internal pointer with the various Move methods. MoveParent(), for example, sets the internal pointer to its parent element - if there is a parent element. Note that these Move methods return True if the move of the internal pointer could not be executed because:


# 17.9.0.1 Properties

The TreeView class has these properties, among others:


# 17.9.0.2 Properties and methods of the _TreeView_Item_class

The _TreeView_Item virtual class represents an item in a TreeView.


# 17.9.0.3 Properties of the _TreeView_Item class

Table 17.9.0.3.1 : Selected properties of the virtual class _TreeView_Item


# 17.9.0.4 Methods of the _TreeView_Item class

Table 17.9.0.4.1 : Selected methods of the virtual class _TreeView_Item


# 17.9.0.5 Methods

The TreeView class has these methods, among others:
Table 17.9.0.5.1 : Selected methods of the class TreeView
The Add(…) method adds a new item to the TreeView:


```
Function Add ( Key As String, Text As String [ , Picture As Picture, Parent As String, After As String ] )
               As _TreeView_Item
```

Example from the POP3 client project → Chapter 24.5.4:


```
For Each sElement In aAccounts
    TreeView1.Add(sElement, sElement, Picture["icon:/32/mail"])
    TreeView1.Add(sElement & "SMTP", "SMTP", Picture["Icons/smtp.png"], sElement)
    TreeView1.Add(sElement & "POP3", "POP3", Picture["Icons/pop3.png"], sElement)
  Next
```

For three email accounts, this then results in the following view in the TreeView:

Figure 17.9.0.5.1: TreeView with selected entry


# 17.9.0.6 Events

The TreeView class further has the following events:
Table 17.9.0.6.1 : Selected events of the class TreeView
You use an application of the class TreeView extensively whenever you start the IDE of Gambas. There, the physical structure of the project directory is mapped to a logical structure in a TreeView:

Figure 17.9.0.6.1: TreeView in the Gambas IDE


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.9.1 Project - Excursus TreeView


Figure 17.9.1.1: TreeView with item selected.
The project demonstrates how you can work with the contents in a TreeView:
When clicking on an item in the TreeView, selected information about the marked item is displayed in the console of the Gambas IDE:


```
Key = Y | Text = Y-ROOT | Das Element hat kein Parent-Element! | Y-ROOT hat 3 Elemente.
  Key = Y3 | Text = Y3 | Parent = Y | Y3 hat 2 Elemente.
  Key = Y31 | Text = Y31 | Parent = Y3 | Y31 hat 2 Elemente.
  Key = Y312 | Text = Y312 | Parent = Y31 | Y312 hat keine Elemente.
  Key = Z | Text = Z-ROOT | Das Element hat kein Parent-Element! | Z-ROOT hat 5 Elemente.
  ...
```

The rather extensive source code can be found in the project 'TreeViewE' in the download area. The source code is sufficiently commented. For your own projects you have to pick out the parts you need. Note: The property Current represents the item selected by the user in a TreeView, while the property Item of type _TreeView_Item is an internal, invisible pointer that is independent of the property Current. Current is used to evaluate user input in a TreeView and Item is used for all algorithms that pass through a TreeView.
The dynamic mapping of the TreeView hierarchy to a menu hierarchy is achieved by these procedures:


```
PrivateFunctionTreeViewToMenu(hTreeAsTreeView)AsMenuDimhMenuAsNewMenu(Me,True)hTree.MoveFirst()' Setzt den internen Zeiger auf das erste Element_TreeViewToMenu(hTree, hMenu)ReturnhMenuEnd
```



```
PrivateSub_TreeViewToMenu(hTreeAsTreeView, hParentAsMenu)DimhMenuAsMenuDohMenu=NewMenu(hParent)As"mnuLast"' Ein neues Menü anlegen - Event-Name 'mnuLast'' Der Menü-Text ist der Text des Elements, auf den der interne Zeiger zeigthMenu.Text=hTree.Item.TextPrinthTree.Item.Text' Der Text des Elements auf den der interne Zeiger zeigt, wird in der Eigenschaft Menu.Tag gespeicherthMenu.Tag=hTree.Item.Key' Wenn der interne Zeiger *nicht* weitergesetzt werden kann,' dann wird der interne Zeiger auf die letzte Position (zurück-)gesetzt' sonst' erfolgt ein *rekursiver* Aufruf der aktuellen Prozedur' und dann wird der interne Zeiger auf das übergeordnete Element (Parent) gesetztIfhTree.MoveChild()ThenhTree.MoveBack()Else_TreeViewToMenu(hTree, hMenu)hTree.MoveParent()EndifLoopUntilhTree.MoveNext()' ... bis kein Element mehr durchlaufen werden kannhTree.MoveBack()' Der interne Zeiger wird auf die letzte Position (zurück-)gesetztEnd
```

This is how the current menu is called for the menu button:


```
PublicSubMenuButton1_Click()mnuMenu=NewMenu(Me,True)mnuMenu=TreeViewToMenu(TreeView1)MenuButton1.Menu=mnuMenu.NameEnd
```

and here you can see part of the menu structure:

Figure 17.9.1.2: Menu button with current menu section


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# 17.9.2 Project - Demonstrating the use of the TreeView class


Figure 17.9.2.1: TreeView with item selected.
At appropriate points in the following sections, parts of the source code of the 'Image Viewer' project are given to demonstrate the use of the TreeeView class and briefly commented on:
When starting the programme for the first time, you can use the menu item 'File > Select Base Directory' in a dialogue to select a directory in which images are also stored.This base directory from the system directory structure is mapped with all its sub-directories to a TreeView. Note the recursion in the procedure:


```
PrivateSubDirTree2TreeView(BaseDirAsString)DimsDir, sBaseDir, sPatternAsStringDimiFilterAsIntegersBaseDir=BaseDir
  sPattern="*"iFilter=gb.DirectoryIfExist(sBaseDir)ThenForEachsDirInDir(sBaseDir, sPattern, iFilter).Sort(gb.Descent)TreeView1.Add(sBaseDir&/sDir, sDir,Picture["icon:/16/directory"], sBaseDir,Null)DirTree2TreeView(sBaseDir&/sDir)' recursive loopNext' DirectoryEndif' Exist() ?End
```

When selecting a directory in the TreeView with a mouse click, a list (array) of all image files in the selected directory is generated:


```
PublicSubTreeView1_Select()' Bild-Liste für das ausgewählte Verzeichnis in der TreeView erzeugenGetImagePaths(TreeView1.Current.Key)IfaImagePaths.Count>0ThenSetEnabled()iPictureIndex=0PictureBoxD.Picture=Picture.Load(aImagePaths[0])' Anzeige des 1. Bildes in der Bild-Liste' Einschalten der Bild-Navigation, wenn die Bild-Liste mehr als ein Bild enthältIfaImagePaths.Count>1ThenbtnNext.Enabled=TrueElsebtnNext.Enabled=FalseEndifEndifEnd
```

A pattern filter (sPattern) ensures that only image files (iFilter = gb.File) with specified extensions (→ JPG, JPEG, jpeg, jpg, png, gif, .svg) are included in the image list. The list contains the (absolute) image file paths.


```
PrivateSubGetImagePaths(sDirAsString)DimsFile, sPatternAsStringDimiFilterAsIntegersPattern="*{.JPG,.png,.JEPG,.jpeg,.jpg,.gif,.svg}"iFilter=gb.FileaImagePaths=NewString[]' Neue Bild-ListeIfExist(sDir)ThenForEachsFileInDir(sDir, sPattern, iFilter).Sort(gb.Ascent)aImagePaths.Add(sDir&/sFile)Next' FileEndif' Exist() ?End
```

The first picture in the list is immediately displayed in a picture box. Then you can navigate through the picture list with the two navigation buttons. If the picture list is empty, a default picture is displayed.You can completely expand and collapse the TreeView entries by using the two buttons below the TreeView.
If the number of items in the TreeView is at least one, the internal pointer of the TreeView is set to the first item (lines 1 and 2). Then, in a repeat-until control structure in lines 4 to 6, each parent item is expanded until the internal cursor reaches the bottom TreeView end. However, this causes the function value of the TreeView method trvTreeView.MoveBelow() to become positive (!) and thus the loop to be aborted. Analogous considerations also apply to collapsing:


```
[1]PrivateSubExpandAll(trvTreeViewAsTreeView)[2]IftrvTreeView<>NullAndtrvTreeView.Count>0Then[3]trvTreeView.MoveFirst()[4]Repeat[5]trvTreeView.Item.Expanded=True' → ausklappen[6]UntiltrvTreeView.MoveBelow()[7]Endif[8]End
```



```
[1]PrivateSubContractAll(trvTreeViewAsTreeView)[2]IftrvTreeView<>NullAndtrvTreeView.Count>0Then[3]trvTreeView.MoveFirst()[4]Repeat[5]trvTreeView.Item.Expanded=False' → einklappen[6]UntiltrvTreeView.MoveBelow()[7]Endif[8]End
```

Collapsing and expanding the items in the TreeView is only intended to demonstrate selected methods of the TreeView in the project.
If the programme is terminated, then the current directory is entered as the start directory in the settings file dir.conf. Example:


```
# Start-Directory
  [Base]
  BasePath="/home/hans/11-Buchprojekt/K17_KomF2/17.9_TreeView/URLAUB"
```

The default language for the project is English. There is a German language file for the project.
In the project → Chapter 24.3.4 Manager for email accounts you will find another example for the use of a TreeView as navigation in a tree structure.
Note:The project only serves to demonstrate the use of the TreeView class. Therefore, the 'Picture Viewer' programme is still missing some details such as thumbnails or automatic recognition of the picture format that you would have expected for a picture viewer.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.10 LCDNumber

The class LCDNumber (gb.qt4.ext) implements a component that displays the digits (digits) to be displayed like an LCD screen. In a 7-segment display element, each segment can be switched on or off. Each digit is displayed in a separate 7-segment display element. The digits 0 to 9 and a dot as well as the letters A, b, C, d, E and F are displayed in hexadecimal display mode.
The LCDNumber component is considered obsolete since Gambas 3.4. It is recommended to use the LCDLabel component → Chapter 17.16 LCDLabel instead of the LCDNumber component. The author does not share this opinion, because at least the following reasons speak for the use of the LCDNumber component - in view of the possibilities of the LCDLabel component:

Figure 17.10.1: Binary display of integers with LCDNumber


# 17.10.1 Properties LCDNumber

The following table describes selected properties of the LCDNumber component:
Table 17.10.1.1: Selected Properties
3 constants are provided for the display mode:


# 17.10.2 Example LCDNumber

In the project, the number (LCDNumber1.Value) is generated from the range [0,10] by a rotary knob (Dial component) and displayed in a component LCDNumber in decimal display mode.  The same applies to the project extension where the display element LCDNumber was exchanged for an LCDLabel:

Figure 17.10.2.1: Decimal display with LCDNumber

Figure 17.10.2.2: Decimal display with LCDLabel


```
' Gambas class filePrivate$iRatioAsInteger=10PublicSubForm_Open()FMain.CenterDial1.MinValue=0Dial1.MaxValue=100Dial1.PageStep=10Dial1.Step=1Dial1.Value=25Dial1.Wrap=FalseLCDNumber1.Digits=3LCDNumber1.SmallDecimalPoint=FalseLCDNumber1.Mode=LCDNumber1.DecimalForm2.ShowEnd'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PublicSubDial1_Change()GetOverflow()LCDNumber1.Value=Dial1.Value/$iRatioIfLCDNumber1.Value>=9ThenLCDNumber1.Background=&HFFBFBFElseLCDNumber1.Background=&HF5FFE6EndifEndPrivateSubGetOverflow()IfLCDNumber1.Overflow=TrueThenMessage.Error("Die Zahl ist zu groß, um exakt angezeigt zu werden.")IncLCDNumber1.DigitsReturnEndifEnd
```

The procedure GetOverflow() takes effect depending on the preset number of digits and the mode used. In the event handler Dial1.Change(), the background colour of the display element LCDNumber is changed from light green to light red when the value to be displayed reaches or exceeds the limit value 9:

Figure 17.10.2.3: Display in the limit range with LCDNumber


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.11 Dial - Rotary Knob

The class provides a rotary knob - similar to a potentiometer. With the rotary knob you can generate numerical values (type integer) in a certain definition range [ Zmin | Zmax ].

Figure 17.11.1: Gambas rotary knob
In contrast, a rotary knob by Daniel Fuchs looks much fancier. This one not only has a neat rotary knob, but also a scale that you can label freely:

Figure 17.11.2: Rotary knob with scale (potentiometer class)


# 17.11.1 Properties Dial

Properties of the Dial component are described in the following table:
Table 17.11.1.1: Dial properties


# 17.11.2 Event Dial

The Dial component has only one specific event:
InChapter 17.10.2a project is presented that converts the generated values of a rotary knob into real numbers (type Float) and displays them in the components LCDNumber as well as LCDLabel.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.12 Slider - Slider

The Slider component of Gambas provides averticalorhorizontalslider. The slider is vertical if its height is greater than its width; otherwise it is horizontal. With a slider you can generate numerical values (type integer) in a certain definition range [ Zmin | Zmax ].

Figure 17.12.1: Three sliders with markers
The minimum value is always on the left for a horizontal slider and on the bottom for a vertical slider. With a slider, a (formal) scale with markers can be displayed, but the current values are not shown. You must take over this task with suitable displays such as a label, progress bar or self-designed LevelBar.
17.12.1 Properties Slider
Properties of the Slider component are described in the following table:
Table 17.12.1.1: Slider Properties


# 17.12.2 Events Slider

The Slider component has only one specific event - Change. The Change event is fired every time the value of the slider changes.


# 17.12.3 Project 1 Slider

The Slider project deploys three sliders with markers and appropriate displays of each of the minimum, maximum and current values.

Figure 17.12.3.1: Three sliders with markers
Figure 17.12.3.1 shows the programme window for the project presented, whose source code is given in full and commented on in selected passages:


```
[1]' Gambas class file[2][3]PublicSub_new()[4]sldVertical1.MinValue=0[5]sldVertical1.MaxValue=360[6]sldVertical1.Mark=True[7]sldVertical1.PageStep=30[8]sldVertical1.Step=1[9]sldVertical1.Value=270[10]txbVSlider1.Text=Str(sldVertical1.Value)&"°"[11]sldVertical2.MinValue=30[12]sldVertical2.MaxValue=100[13]sldVertical2.Mark=True[14]sldVertical2.PageStep=10[15]sldVertical2.Step=5[16]sldVertical2.Value=50[17]txbVSlider2.Text=Str(sldVertical2.Value)&" kN"[18]sldHorizontal1.MinValue=0[19]sldHorizontal1.MaxValue=100[20]sldHorizontal1.Mark=True[21]sldHorizontal1.PageStep=5[22]sldHorizontal1.Step=1[23]sldHorizontal1.Value=82[24]End[25][26]PublicSubForm_Open()[27]FMain.Center[28]FMain.Resizable=False[29]txbVSlider1.ReadOnly=True[30]txbVSlider2.ReadOnly=True[31]ProgressBar1.Label=True[32]ProgressBar1.Value=sldHorizontal1.Value*0.01[33]DrawLevelBar()[34]End[35][36]PublicSubsldVertical1_Change()[37]txbVSlider1.Text=Str(sldVertical1.Value)&"°"[38]End[39][40]PublicSubsldVertical2_Change()[41]DimiInvertedValueAsInteger[42][43]iInvertedValue=-sldVertical2.Value+sldVertical2.MinValue+sldVertical2.MaxValue[44]txbVSlider2.Text=Str(iInvertedValue)&" kN"[45][46]IfiInvertedValue>=80Then[47]txbVSlider2.Foreground=Color.Red[48]Else[49]txbVSlider2.Foreground=Color.Default[50]Endif' iInvertedValue >= 80 ?[51]End[52][53]PublicSubsldHorizontal1_Change()[54]ProgressBar1.Value=sldHorizontal1.Value*0.01[55]DrawLevelBar()[56]End' hSlider1_Change[57][58]PublicFunctionu(iArgumentAsInteger)AsFloat[59]Return((DrawingArea1.H/DrawingArea1.W)*iArgument)[60]End[61][62]PublicSubDrawLine(iArgumentAsInteger, fOrdinateAsFloat)[63]Draw.Foreground=Color.red[64]Draw.Point(iArgument, fOrdinate)[65]Draw.Line(iArgument,0, iArgument, fOrdinate)[66]End[67][68]PublicSubLevelBar(iValueAsInteger)[69]DimiCountAsInteger[70][71]ForiCount=0ToiValueStep2' Alternativen: 1 und 3[72]DrawLine(iCount, u(iCount))[73]Next' iCount[74]End' LevelBar(iValue As Integer)[75][76]PublicSubDrawLevelBar()[77]Draw.Begin(DrawingArea1)[78]Draw.Translate(0, DrawingArea1.H)' Erst verschieben und dann skalieren![79]Draw.Scale(1,-1)[80]Draw.Clear[81]LevelBar(sldHorizontal1.Value*(DrawingArea1.W/sldHorizontal1.MaxValue))[82]Draw.End[83]End[84][85]PublicSubbtnClose_Click()[86]FMain.Close[87]End
```

Comments:


# 17.12.4 Project 2 Slider

Work is only really fun with the classes forSlider by Daniel Fuchs (FH Eberswalde). This slider component has a labelled scale that can be displayed above or below a horizontal slider, for example.
The horizontal slider can be used to change the solarisation of the image in the range from 0 (complete reversal) to 100 (no reversal). The left vertical slider displays positive temperatures in the programme window on a light red background, while all temperatures in the interval [-20°C | 0°C] are displayed on a light blue background. For the 2nd vertical slider, aninvertedrepresentation is used.

Figure 17.12.4.1: Slider by Daniel Fuchs (1)

Figure 17.12.4.2: Slider by D. Fuchs (2)


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.13 DateChooser

TheDateChooser(gb.form) component implements a calendar. This calendar allows the user to select a date, time or both in a calendar → mode property. The display properties for a selected date in the DateChooser can be defined via the Data property and via the Data event. The ideal width of a DateChooser component is at least 296 pixels, because only then you have access to all the selection and navigation options offered.

Figure 17.13.1: DateChooser component and DateBox (display)
No separate chapter has been devoted to the DateBox component. The class DateBox contains only one ButtonBox → Chapter 16.8 ButtonBox, whose mask has been set to date and time information and opens a dialogue with DateChooser. By using the DateChooser component, you are on the safe side when it comes to using valid values for a date or time specifications (in the 30-minute grid) in a Gambas project. If you want it to be small and fine, then you cannot avoid using a DateBox.


# 17.13.1 Properties and methods DateChooser

Selected properties are listed and described in the following table:
Table 17.13.1.1: Selected properties of the DateChooser component
The _DateChooser_Data virtual class defines:
The DateChooser class has only one designated, special method, DateChooser.SetFocus(), which sets the focus on the DateChooser component.


# 17.13.2 DateChooser events

Special events of the DateChooser component can be found here:
Table 17.13.2.1: Overview of the 4 special events of the DateChooser component.


# 17.13.3 Project 1 DateChooser

The main focus of the presented project is, on the one hand, to introduce you to the use of the 2 virtual classes with their properties and methods in connection with the event DateChooser1_Data(dValue As Date) and, on the other hand, to show you how to store a selected date in the calendar in a variable or how to display it in suitable components.
Figure 17.13.1 shows the programme interface. The source code for project 1 is given in full and commented on in detail:


```
[1]' Gambas class file[2][3]PublicdDatumAsDate[4][5]PublicSubForm_Open()[6]FMain.Center()[7]FMain.Resizable=False[8]' Mode-Konstanten stehen in der DateChooser-Klasse und nicht in der DateBox-Klasse![9]DateBox1.Mode=DateChooser.DateOnly[10]DateChooser1.Mode=DateChooser.DateOnly[11]DateBox1.Value=Now()[12]GetDateValues()[13][14]DateChooser1.Colors["9/21/2013"]=Color.Orange' Datum in englischer Notation![15]DateChooser1.Colors["9/11/2013"]=Color.Yellow[16]DateChooser1.Colors["9/24/2013"]=Color.Red[17][18]End[19][20]PublicSubbtnClearColors_Click()[21]DateChooser1.Colors.Clear()[22]DateChooser1.SetFocus()[23]End[24][25]PublicSubDateChooser1_Activate()' Einfach-Klick[26]DateChooser1_Change()[27]End[28][29]PublicSubDateChooser1_Change()[30]GetDateValues()[31]DateBox1.Value=DateChooser1.Value[32]End[33][34]PublicSubDateBox1_Activate()' Doppel-Klick![35]DateBox1_Change[36]End[37][38]PublicSubDateBox1_Change()[39]GetDateValues()[40]DateChooser1.Value=DateBox1.Value' Synchronisation DateChooser → DateBox[41]End[42][43]PrivateSubGetDateValues()[44]DimaWochentageAsString[][45][46]dDatum=DateChooser1.Value[47][48]txtDate.Text=Format(DateChooser1.Value,"dd.mm.yyyy")[49]txtDate2.Text=Format(DateChooser1.Value,"dd. mmm yyyy")[50]txtDate3.Text=Format(DateChooser1.Value,"d. mmmm yyyy")[51][52]txtDateDay.Text=DateChooser1.Day[53]txtDateMonth.Text=DateChooser1.Month[54]txtDateYear.Text=DateChooser1.Year[55][56]' aWochentage=["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"][57]' txtDateDayOfWeek.Text = aWochentage[WeekDay(DateChooser1.Value)] ' Sonntag = 0[58]txtDateDayOfWeek.Text=Format(DateChooser1.Value,"dddd")[59]txtDateWeekNumber.Text=Week(DateChooser1.Value, gb.Monday,False)[60][61]End[62][63]PublicSubDateChooser1_Data(dValueAsDate)' dValue frei gewählter Variablenname[64][65]' If Month(dValue) = 12 And If Day(dValue) = 7 Then ' Genau 1 Wert[66]' If Day(dValue) = 12 Then ' Genau 12 Werte[67]IfWeekDay(dValue)=gb.FridayThen' Mehr als 50 Werte ...[68]DateChooser1.Data.Background=&HC3DDFF[69]DateChooser1.Data.Foreground=Color.Red[70]DateChooser1.Data.Font=Font["Italic"][71]Endif[72][73]End[74][75]PublicSubbtnClose_Click()[76]FMain.Close[77]End
```

Comments:


# 17.13.4 Project 2 DateChooserT

If you set theDateChooser.Modeproperty toDateChooser.DateTime, the DateChooser component is the first choice for setting dates and times:

Figure 17.13.4.1: DateChooser component - Date 1
You select the date with a (single) click and the start for the time interval with a double click. In addition, you can set the appointment to the minute in this project, if this is required. The selected appointment (date, start time interval, minutes in the SpinBox (optional)) is displayed in a DateBox and stored in the variabledEventof thedata type Date.

Figure 17.13.4.1: DateChooser component - Date 2
Project 2 can be found in the download area.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.14 ColorButton

Colour values as valid data in a programme require secure inputs. The ColorButton component is available for direct but discreet input of colour values. The colour button (gb.form) allows the user to select a colour. The component has two notable properties and has only one special event.


# 17.14.1 Properties and Event

A ColorButton has ColorButton.Color (type Integer) as its dominant property, whose value you can read or set. The property ColorButton.Value is a synonym for the property ColorButton.Color.The event ColorButton_Change() is triggered when you change the colour in the colour dialogue.

Figure 17.14.1.1: Safe input of colours → ColorButton
After clicking on the ColorButton, a colour selection dialogue opens. You can select the colour and then accept the colour value by clicking OK.

Illustration 17.14.1.2: ColorButton Dialogue
In the following source code, the colour value is displayed hexadecimally (→ Figure 17.14.1.1) and stored in a (global) variable iColourValue. This allows the colour value to be used further in the project:


```
' Gambas class filePubliciFarbWertAsIntegerPublicSubForm_Open()FMain.CenterFMain.Resizable=FalsePictureBox1.Stretch=TruePictureBox1.Picture=Picture["Symbols/color.png"]ColorButton.Color=Color.OrangetxtColor.Text="&H"&Hex(ColorButton.Color,6)EndPublicSubbtnClose_Click()FMain.CloseEnd'******************************************************PublicSubColorButton_Change()iFarbWert=ColorButton.ColortxtColor.Text="&H"&Hex(ColorButton.Color,6)End
```



# 17.14.2 Deployment ColorButton

In the Gambas sample editor, two ColorButtons are used to set the text colour and to set the text background colour.
In the procedure Form_Open() the initialisation of the text colour and the text background colour is done:


```
Object.Lock(ColorButton1)Object.Lock(ColorButton2)ColorButton1.Color=TextEdit1.Format.ColorColorButton2.Color=TextEdit1.Format.BackgroundObject.UnLock(ColorButton1)Object.UnLock(ColorButton2)
```

Changes to the text colour and the text background colour are implemented in the editor source text like this:


```
PublicSubColorButton1_Change()TextEdit1.Format.Color=ColorButton1.ColorEndPublicSubColorButton2_Change()TextEdit1.Format.Background=ColorButton2.ColorEnd
```



# 17.14.3 Alternative ColorButtonBox

With a ColorButton, only the selected colour is visible in the original. If, on the other hand, you use a ButtonBox, you can read the (hexadecimal) colour value in the TextBox and see the colour in the recoloured icon:

Figure 17.14.3.1: ColorButtonBox in action
The source code is quite simple:


```
PublicSubColorButtonBox_Click()DimpicColorAsPictureIfDialog.SelectColor()ThenColorButtonBox.Text="Farbwert"ColorButtonBox.Picture=Picture["Symbols/color.png"]Else' ColorButtonBox.Text = Dialog.Color ' Anzeige dezimalColorButtonBox.Text="&H"&Hex(Dialog.Color,6)picColor=NewPicture(16,12,False)picColor.Fill(Dialog.Color)ColorButtonBox.Picture=picColorEndifEnd
```

The original colour selection dialogue (→ Dialog.SelectColor) of the ColorButton is used.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.15 ColorChooser

TheColorChooser (gb.form)component is a colour selector. It allows the user to select a colour from the RGB colour space or the HSV colour space or from a palette of predefined colours.

Figure 17.15.1: ColorChooser
On the ColorChooser there is a toggle button with the tool tip text “Follow colour grid” at the top right of the colour palette. If the toggle button is activated and you trigger the MouseMove event, i.e. you move the mouse with the left mouse button pressed on the so-called colour chart - the rectangle in which all possible colours can be selected with the mouse (mouse pointer cross +) - you move on a 15-pixel grid. If the button is deactivated, you move pixel by pixel. Note: The colour map only appears from a minimum height of the ColorChooser (depending on the value of the properties .ShowAlpha and .ShowColorMap).


# 17.15.1 ColorChooser properties

Selected properties of the ColorChooser component are described in the following table:
Table 17.15.1.1: ColorChooser Properties
For example, you can set the start colour in ColorChooser:


```
ColorChooser1.Value=Color.RGB(220,20,180)ColorChooser1.SelectedColor=Color.HSV(312,231,220)ColorChooser1.Value=&HDC1418
```

The display of the colour value in the ButtonBox in the ColorChooser is always inhexadecimalnotation!


# 17.15.2 Events ColorChooser

TheColorChoosercomponent has only 2 specific events - Activate and Change.
ActivateThe event is triggered when the userdoublesclicks on a colour.
ChangeThe Change event is triggered every time the selected colour changes.
It changes when you


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.17 ScrollBar - Slider

The ScrollBar component provides a vertical or horizontal slider. The slider is vertical if its height is greater than its width; otherwise it is horizontal. With a ScrollBar you can generate numerical values (type Integer) in a certain definition range [ Zmin | Zmax ].

Figure 17.17.1: Selection of colour components (RGB) with a ScrollBar
The minimum value is always on the left for a horizontal slider and on the bottom for a vertical version. A ScrollBar has no scale and the current values are not displayed. This task must be handled by the developer in an appropriate way.


# 17.17.1 Properties ScrollBar

Properties of the ScrollBar component are described in the following table:
Table 17.17.1.1: ScrollBar Properties


# 17.17.2 ScrollBar - Events

The ScrollBar component has only one specific event: change.


# 17.17.3 Project ScrollBar

The following section presents a project that stores the generated values of three ScrollBars in a colour value as a combination and colours a panel with this colour value. The colour components RGB are displayed decimally and the colour hexadecimally. You can also enter the colour as a hexadecimal colour value and accept the colour with Enter. If the colour value is incorrect, no error message is displayed, but the colour is internally set to red.
You will not find a special feature in the source code, because the definition of the Group property for all three scrollbars can only be done in the IDE! Since the colour for the panel is composed of the three colour components (red, green and blue (RGB)), the specification of acolour grouplent itself to this, so that onlyanevent handling routine (RGB_Change()) had to be written whenoneof the three ScrollBars changes value. Figure 17.17.1 shows the programme window for the project presented, the source code of which is given in full:


```
' Gambas class filePublicSub_new()scbColorRed.MinValue=0scbColorRed.MaxValue=255scbColorRed.PageStep=10scbColorRed.Step=1scbColorRed.Value=127scbColorGreen.MinValue=0scbColorGreen.MaxValue=255scbColorGreen.PageStep=10scbColorGreen.Step=1scbColorGreen.Value=127scbColorBlue.MinValue=0scbColorBlue.MaxValue=255scbColorBlue.PageStep=10scbColorBlue.Step=1scbColorBlue.Value=127End' _new()PublicSubForm_Open()FMain.CenterFMain.Resizable=FalsetxbColorHex.MaxLength=6RGB_Change()End' Form_Open()PublicSubRGB_Change()SetPanelColor()SetRGBLabel()txbColorHex.Text=Hex$(Color.RGB(scbColorRed.Value, scbColorGreen.Value, scbColorBlue.Value),6)End' RGB_Change()PublicSubtxbColorHex_Activate()TrypanColor.Background=Val("&H"&txbColorHex.Text&"&")IfErrorThenpanColor.Background=Color.RedtxbColorHex.Text=Hex$(Color.Red,6)SetRGB(panColor.Background)ElseSetRGB(panColor.Background)Endif' ERROR ?End' txbColorHex_Activate()PublicSubSetPanelColor()panColor.Background=Color.RGB(scbColorRed.Value, scbColorGreen.Value, scbColorBlue.Value)panColor.RefreshWaitEnd' SetColor()PrivateSubSetRGB(iColorAsInteger)Object.Lock(scbColorRed)scbColorRed.Value=Color[iColor].RedObject.Unlock(scbColorRed)Object.Lock(scbColorGreen)scbColorGreen.Value=Color[iColor].GreenObject.Unlock(scbColorGreen)Object.Lock(scbColorBlue)scbColorBlue.Value=Color[iColor].BlueObject.Unlock(scbColorBlue)SetRGBLabel()End' SetRGB(aColor As Integer)PublicSubSetRGBLabel()lblValueRed.Text=Str(scbColorRed.Value)lblValueGreen.Text=Str(scbColorGreen.Value)lblValueBlue.Text=Str(scbColorBlue.Value)End' SetRGBLabel()PublicSubbtnClose_Click()FMain.CloseEnd' btnClose_Click()
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Control elements 2



# Chapters



# Table of Contents



# 17.18 ImageView

The ImageView (gb.form) component implements an image viewer.

Figure 17.18.1: Image display in an ImageView.

Figure 17.18.1: Image section with grid shown ( zoom factor = 10 )


# 17.18.1 Properties

The following table describes selected properties of an ImageView:
Table 17.18.1.1: Properties of the ImageView component


# 17.18.2 Methods

Table 17.18.2.1: Overview of selected methods of the class ImageView


# 17.18.3 Project 1

In project 1, you are presented with a simple image viewer → Figure 17.18.1. An image in grey tones is displayed as the start image. Via a dialogue (MultiSelect) you can select one picture or several pictures (picture list) in a directory.


# 17.18.4 Project 2

In the second project you can learn about the close relationship between the two components ImageView and ScrollArea:

Figure 17.18.4.1: ScrollArea and ImageView


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.0 Containers

Chapter 18 introduces you to containers as the components that hold other components. Containers include:
The most important properties and methods of the various containers are described, with a separate chapter 12 devoted to the most important container - the form.

Figure 18.0.1: Programme interface for the GBTT project with the Splitter and VBox containers.


# 18.0.1 Properties Container

The following properties can be found with all containers:
Table 18.0.1.1: Overview of container properties


# 18.0.2 Notes on the relationship between the Margin, Spacing and Padding properties

★If you set the Margin property to True and also set the Padding property to k (pixels), then the Margin property is ignored! As a recommendation: Select the Margin property for a fixed distance with the constant distance Desktop.Scale between the container edge and the elements in the container and the Padding property to define a variable distance with the distance k ( k ≥ 1, k ∈ Integer) pixels.
The Padding property defines the distance and thus for a container C:


# 18.0.3 Examples

In this section only examples of the effects of the container properties Margin, Spacing, Indent and Invert are presented and another container is inserted - illustrated by the container HBox:

Figure 18.0.3.1: Two identical containers of the type HBox with 4 buttons each; unordered


# 18.0.3.1 Settings Example 1



```
HBox1.Margin = False HBox1.Spacing = False HBox1.Indent = False HBox1.Invert = False
HBox2.Margin = True  HBox2.Spacing = False HBox2.Indent = False HBox2.Invert = False
```


Figure 18.0.3.1.1: Result Example 1 - Content of HBox2 with constant distance to the border.


# 18.0.3.2 Settings Example 2



```
HBox1.Margin = False HBox1.Spacing = False HBox1.Indent = False HBox1.Invert = False
  HBox2.Margin = True  HBox2.Spacing = True HBox2.Indent = False HBox2.Invert = False
```


Figure 18.0.3.2.1: Result example 2 - content of HBox2 additionally with constant distance between the 4 buttons


# 18.0.3.3 Settings Example 3



```
HBox1.Margin = True  HBox1.Spacing = True HBox1.Indent = False HBox1.Invert = False
  HBox2.Margin = True  HBox2.Spacing = True HBox2.Indent = False HBox2.Invert = True
```


Figure 18.0.3.3.1: Result example 3 - alignment in container HBox2 inverted


# 18.0.3.4 Settings Example 4



```
HBox1.H = 40          HBox2.H = 40
  HBox1.Margin = False  HBox1.Spacing = False HBox1.Indent = False HBox1.Invert = False
  HBox2.Margin = False  HBox2.Spacing = False HBox2.Indent = True  HBox2.Invert = False
```


Figure 18.0.3.4.1: Result Example 4 - Indentation by Desktop.Scale Pixel to the Right in Container HBox2


# 18.0.3.5 Settings Example 5


Figure 18.0.3.5.1: Example 5 - Height of containers 56px


```
HBox1.H = 56
  HBox2.H = 56
  panSpace.Expand = True
  HBox1.Margin = False  HBox1.Spacing = False HBox1.Indent = False HBox1.Invert = False
  HBox2.Margin = True   HBox2.Spacing = True  HBox2.Indent = True  HBox2.Invert = False
```


Figure 18.0.3.5.2: Example 5 - Height of containers 56px.
The panel 'pushes' the last button to the right edge because, due to the property panSpace.Expand = True being set, the panel takes up all the available space between the 3rd and 4th buttons.
For example, with all other properties set to the same value, place the panel named panSpace between the second and third buttons and observe the result!
In the GeoMap project → chapter 17.15.1, the intentions for example 5 are practically implemented:

Figure 18.0.3.5.3: Project GeoMap


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# 18.7 HSplit and VSplit

The two containers are presented here together with their properties and methods, which differ little from each other.

Figure 18.7.1 Deployment of the HSplit component with 2 components inserted.


# 18.7 Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.7.1 HSplit and VSplit

The HSplit component is a container that arranges the inserted components horizontally; in the case of 2 components into a left and a right area. The VSplit component, on the other hand, is a container that arranges the inserted components vertically; for example, into an upper and a lower area. If, for example, you insert not only two but three components into the container component VSplit, then at runtime you will see 3 areas below each other, each of which can be resized by 2 horizontal dividers. The containers HSplit and VSplit are not visible at runtime.
The horizontal or vertical arrangement of the inserted components is only determined by the positioning of the components on the form at design time! There is no method that performs this arrangement at runtime. However, you can change the division of horizontal areas at runtime by moving a vertical divider to the left or right with the mouse or change the size of vertical areas when you move a horizontal divider. The size of the inserted components in the container - which includes the Form container - are determined only by the properties set at runtime, so you only need to position the components as shown in Figure 18.7.1.1.
The use of containers such as HSplit and VSplit requires more detailed preliminary considerations about the form than if you only want to arrange some components freely on a form. Once you have decided which containers you want to use and which components should be inserted into them, it is a good plan to record the arrangement with paper and pencil - yes, even a fountain pen does a good job. This is recommended if you are developing a multiply nested form design with containers, as presented in Example 2.


# 18.7.1.1 Example 1 - HSplit

The following example is well suited to familiarise you with the use of the HSplit container.  Create a new projectHSplit. Enlarge the form to a width of about 570 and a height of 350. Insert a menu into the form with CTRL+E. After pressing Insert, leave the dialogue immediately with OK. Then include the container HSplit as HSplit1 in the form and subsequently place the two components DirView1 and FileView1 in the container HSplit1. Set the property FileView1.ShowDetailed to True.


```
HSplit
```

Use the following illustration as a guide for the arrangement of the 2 components in the HSplit1 container so that the DirView1 component actually occupies the left-hand area:

Figure 18.7.1.1: Arrangement of the components DirView1 and FileView1 in the container HSplit1 (draft)
Then check whether the following properties of the components below are set or change the values accordingly:
Only with these values is it guaranteed that the HSplit1 component will completely fill the remaining space on the form; without taking its place from the menu. Try it out by starting the programme:

Figure 18.7.1.2: Two components in the container HSplit1 (runtime)


# 18.7.1.2 Example project VSplit

You should try out the use of the VSplit component in another project.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# 18.7.2  Beispiel 2 – GBTT

Das folgende Beispiel stellt Ihnen ein Programm zur Verfügung, mit dem Sie auf individuelle Art Ihr Wissen zu Gambas übersichtlich festhalten und pflegen können. Es nutzt neben den vorgestellten Komponenten HSplit und VSplit auch weitere Struktur bestimmende Container und Komponenten. Die folgenden 2 Abbildungen zeigen die Anordnung der einzelnen Komponenten auf dem Formular zur Entwicklungszeit und zur Laufzeit:

Abbildung 18.7.2.1: Anordnung der Komponenten in mehreren Containern (Entwurfzeit)

Abbildung 18.7.2.2: Programm GBTT (Gambas-ToolTipp) zur Laufzeit
Die Komponente HSplit1 vergibt zwei horizontal geteilte Bereiche – links DirView1 und rechts VBox1 – mit einstellbarer Breite durch den senkrechten Teiler. 
Die Komponente VBox1 musste eingefügt werden, da das Panel mit den 7 Button eine feste Höhe und Lage hat und nur die beiden Komponenten TextArea1 (oben mit der grünen Schreibfläche) sowie die Komponente FileView1 im Container VSplit1 durch einen waagerechten Teiler in 2 unterschiedlich große Bereiche geteilt werden.
In den weiteren Abschnitten wird nur auf einige Besonderheiten des Projekts GBTT eingegangen und der entsprechende Quelltext kommentiert.


```
(1)PUBLICSUBForm_Open()(2)(3)gbttSettings=NEWSettings(User.Home&/"GBTTT"&/"gbtt.conf")(4)HSplit1.Layout=gbttSettings["HSplit/HSplitLayout","20,80"](5)VSplit1.Layout=gbttSettings["VSplit/VSplitLayout","70,30"](6)gbttSettings.Read(ME,"Form")
```

Mit den Vorgaben “20,80” = “20%,80%” für den horizontalen Splitter und “70,30” als Teilungsverhältnis für den vertikalen Splitter startet das Programm, da ja beim ersten Start noch keine Konfigurationsdatei existiert. Alle Vorgabe-Werte können als Teilungsverhältnis angegeben werden. Später werden die (absoluten) Werte für das Teilungsverhältnis in Pixeln in die Konfigurationsdatei eingetragen und auch so ausgelesen.


```
(7)IFFMain.W<=863ORFMain.H<512THEN(8)IFFMain.W<863THENFMain.W=863(9)IFFMain.H<512THENFMain.H=512(10)FMain.Center(11)ENDIF' FMain.W FMain.H?
```

Wenn das Programm mit sehr kleinen Werten für die Breite oder Höhe geschlossen wird, dann werden diese unpraktischen Werte auch in der Ereignisbehandlungsroutine von Form_Close gespeichert und ergeben zum Beispiel folgenden Inhalt der Konfigurationsdatei gbtt.conf :


```
[FMain/Form] 
Geometry=[408,269,377,251] 

[HSplit] 
HSplitLayout="89,282" 

[VSplit] 
VSplitLayout="134,45"
```

Beim Auslesen der Formulargrößen nach dem Programmstart – sehen Sie bitte in die Zeile 6 –  werden nach einer Werte-Prüfung vernünftige Startwerte zugewiesen.


```
(12)FMain.Center(13)FMain.Arrangement=Arrange.Fill' HSplit1 füllt das Formular im Container Formular vollständig aus(14)VBox1.Ignore=FALSE(15)HSplit1.Ignore=FALSE(16)VSplit1.Ignore=FALSE(17)VSplit1.Expand=TRUE' VSplit1 füllt den verbleibenden Raum in VBox1, den Panel1 nicht belegt(18)Panel1.Arrangement=Arrange.Horizontal' Horizontale Ausrichtung der Button auf dem Panel1(19)Panel1.Padding=10' Abstand der 7 Button zum Panel1-Rand(20)Panel1.Spacing=5' (Horizontaler) Abstand zwischen den 7 Button(21)Panel1.Height=41' (Original-)Höhe 21 + 2x Panel1.Padding = 10(22)Panel1.Border=Border.Sunken' ... weil es gut ausschaut
```

Für eine fehlerfreie Funktion der Anordnung der Container und der Anordnung ausgewählter Komponenten im Container sind alle Zeilen wichtig! Durchdenken Sie in aller Ruhe die Wirkung jeder einzelnen der 10 Zeilen!


```
(23)IFNOTExist(User.Home&/"GBTTT")THEN(24)TRYMKDIRUser.Home&/"GBTTT"(25)IFERRORTHEN(26)Message.Error("Das Verzeichnis ../GBTTT konnte nicht angelegt werden!")(27)RETURN(28)ENDIF' ERROR(29)ENDIF' Exist?(30)(31)' ACHTUNG: Das O im Wort 0riginal ist eine Null wegen der Sortierung(32)IFNOTExist(User.Home&/"GBTTT/0riginalSearch")THEN(33)TRYMKDIRUser.Home&/"GBTTT/0riginalSearch"(34)IFERRORTHEN(35)Message.Error("Das Verzeichnis ../GBTTT/0riginalSearch konnte nicht angelegt werden!")(36)RETURN(37)ENDIF' ERROR(38)ENDIF' NOT Exist?
```

Das Verzeichnis GBTTT sowie die Konfigurationsdatei gbtt.conf werden im Home-Verzeichnis beim ersten Programmstart angelegt, wenn sie nicht existieren.


```
(39)DirView1.Root=User.Home&/"GBTTT"(40)FileView1.Dir=DirView1.Root(41)FileView1.Filter=["*.tip","GAMBAS-Tool-Tipp-Dateien"](42)(43)curZeiger1=NEWCursor(Picture["Icon/vonrechts.png"])(44)FileView1.Mouse=Mouse.Custom(45)FileView1.Cursor=curZeiger1
```

Nur für die Dateiansicht wird ein neuer, benutzer-spezifischer Maus-Zeiger in der IDE als Bild im PNG-Format entworfen, gespeichert und in das Programm eingebunden.


```
(46)btnTTSuchen.Enabled=FALSE(47)TextArea1.Wrap=FALSE(48)bModifiziert=FALSE(49)(50)END' Form_Open
```

Das Word-Wrapping kann ein- und ausgeschaltet werden und ermöglicht eine bessere Lesbarkeit, vor allem bei Tipps, die Sie aus anderen Quellen übernehmen.


```
(1)PUBLICSUBForm_Close()(2)DIMsToolTippDateiASString(3)(4)gbttSettings["HSplit/HSplitLayout"]=HSplit1.Layout(5)gbttSettings["VSplit/VSplitLayout"]=VSplit1.Layout(6)gbttSettings.Write(ME,"Form")(7)gbttSettings.Save(8)(9)FOREACHsToolTippDateiINDir(User.Home&"/GBTTT/0riginalSearch","*.*")(10)TRYKILLUser.Home&"/GBTTT/0riginalSearch/"&sToolTippDatei(11)NEXT' File(12)(13)END' FormClose
```

Hier ist das .Save in der Zeile 7 NICHT zwingend erforderlich, weil beim Programmende die Settings-Einstellungen automatisch in der Konfigurationsdatei gespeichert werden. Dazu gehören die Werte der aktuellen Teilungsverhältnisse des horizontalen und vertikalen Splitters genauso wie die Formulargröße und dessen Lage-Koordinaten.
Das Programm GBTT verfügt neben einem Menü auch über eine kurze Hilfe im PDF-Format. Über die Suche können Sie gezielt nach Tipps suchen, in denen ein bestimmtes Wort vorkommt. Dazu müssen Sie den Ordner 0riginalSearch anklicken, damit die Suche über den dann freigegebenen Button mit der kleinen Lupe möglich wird. Alle (temporären) Suchergebnisse finden Sie in der Dateiansicht.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.8 HBox and VBox

The two classes HBox and VBox present containers in which objects are automatically arranged horizontally or vertically:

Figure 18.8.1: HBox (3) and VBox (1) in a container HSplit
Container (2) in container HSplit (horizontal splitter) is a panelwithoutframe and with propertyPanel.Arrangement = Arrange.Verticaland thus behaves like a VBox.

Figure 18.8.2: HBoxes and VBoxes and a panel with special properties in an application.


# 18.8.1 The properties HBox

Table 18.8.1.1: Overview Properties HBox
The properties of the two containers HBox and VBox differ only very slightly and the VBox lacks the property .Invert.


# 18.8.2 VBox properties

Table 18.8.2.1: Overview of VBox properties


# 18.8.3 Project EMail Client

In this project, the focus is not on the client functions but on the design of the components on the form (IDE). To arrange the containers on the form as shown in Figure 18.8.2, some properties of the containers used and their contents have to be specified in a special way. These requirements should be met:
In the next section, you will only see the excerpt from the source code that implements the above requirements:


```
PublicSubForm_Open()FMain.CenterFMain.Arrangement=Arrange.VerticalFMain.Expand=FalseFMain.Margin=TrueFMain.Spacing=True' Container HSplitHSplit1.Layout=[100,0]' Man sieht nach dem Programmstart die Box für die Anhänge zunächst nicht' Container VBox links im Container HSplitvboxLeft.Margin=True' Fester Abstand zwischen VBox-Rand und den 4 inneren HBoxenvboxLeft.Spacing=True' Fester vertikaler Abstand zwischen den 4 inneren HBoxenhboxTo.Spacing=True' Fester Abstand zwischen TextLabel und TextBox in der HBox (Empfänger)txlTo.W=120' Feste Breite des TextLabels. Gilt für alle 4 TextLabel!txlTo.Alignment=Align.Right' Text-Ausrichtung auf dem TextLabel ist "rechts"txbTo.Expand=True' Die Weite der Textbox passt sich dynamisch an die Container-Weite von VBox anhboxCC.Spacing=TruetxlCC.W=120txlCC.Alignment=Align.RighttxbCC.Expand=TruehboxBCC.Spacing=TruetxlBCC.W=120txlBCC.Alignment=Align.RighttxbBCC.Expand=TruehboxSubject.Spacing=TruelblSubject.W=120lblSubject.Alignment=Align.RighttxbSubject.Expand=True' Container rechts im Container HSplit' vboxSubstitute ist ein Panel mit spezifischen Eigenschaftswerten (ohne Rand, Anordnung vertikal)vboxSubstitute.Border=Border.None' Panel ohne RandvboxSubstitute.Arrangement=Arrange.Vertical' Vertikale Anordnung der 2 inneren KomponentenvboxSubstitute.Margin=True' Fester Abstand zwischen VBox-Substitute und den zwei inneren HBoxenvboxSubstitute.Spacing=True' Fester (vertikaler) Abstand zwischen den zwei inneren HBoxenlblAttachment.Alignment=Align.TopLeft' Textanzeige in der linken, oberen EckehboxLIstBox.Expand=True' Maximale AusdehnungListBox1.Expand=True' Maximale AusdehnungListBox1.ScrollBar=Scroll.Both' Komponente TextAreatxaMailBody.Expand=True' Füllt automatisch die Fläche, die HSplit und HBox (unten) frei lassen' Container HBox untenhboxBottom.Height=24hboxBottom.Margin=FalsehboxBottom.Spacing=TruepanelSpace.Expand=True' Schiebt die 2 Button an den linken bzw. an den rechten Rand des ContainersEnd
```

All colour values have been set in the IDE. These have nothing to do with the arrangement of the containers and their contents.


# Download

Projects
download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.9 HPanel and VPanel

The HPanel class presents a container that arranges its child elements from top to bottom and then from left to right. HPanel is like a panel without a border with its Arrange property set to 'Arrange.Row'.
This class can be created. To create a new HPanel:


```
Dim hHPanel As HPanel
hHPanel = New HPanel ( Parent As Container ) [ As "EventName" ]
```

The VPanel class presents a container that arranges its child elements from left to right and then from top to bottom. It is like a panel without a frame, but with its Arrange property set to 'Arrange.Column'.
This class can be created. To create a new VPanel:


```
Dim hVPanel As VPanel
hVPanel = New VPanel ( Parent As Container ) [ As "EventName" ]
```

Since the classes HPanel and VPanel are specialised panels only with regard to the Arrangement property, please refer to the description of the class Panel in chapter '18.2 Panel'.
Note: You should note that no well-defined, static design in the form is possible with the two controls HPanel and VPanel, because the arrangement of the subordinate elements in these two controls always depends on the size of the programme window - it is therefore dynamic.


# 18.9.1 Example

In the example, a HPanel (marked in blue) and a VPanel (marked in light green) are used and different window sizes - in relation to its height - are raised:

Figure 18.9.1.1: Example 1
The window size is then reduced:

Figure 18.9.1.2: Example 2
Finally, the window size is adjusted so that all three controls in the VPanel are vertically aligned and can be fully displayed:

Figure 18.9.1.3: Example 3


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.10 ScrollView

When the layout for a programme interface is static, if the window size is too small, you get into the situation where some components are no longer fully visible and others are completely invisible. A way out of this is to use a ScrollView that is placed on the form with theForm.Arrangementproperty set toArrange.Fill. Now you can safely reach all the components using the scrollbars.
The ScrollView class implements a container in which you can scroll through its contents. Scroll bars are automatically displayed when components in the ScrollView are not visible or only partially visible.


# 18.10.1 Properties ScrollView

Table 18.10.1.1: Overview of ScrollView properties


# 18.10.2 Methods ScrollView

Use the following 2 special methods of a ScrollView to control the visible areas in a ScrollView:


# 18.10.3 Events ScrollView

The ScrollView has only one specific event:
The ScrollView_Scroll( ) event is fired when scrolling through the contents of the ScrollView.


# 18.10.4 Project Database Manager with ScrollView

One use for a ScrollView in the project presented is a form to which components are added dynamically, and the number of these components can change constantly at programme runtime. In the project, the content of a database table (MySQL, PostgreSQL or SQLite3) is read out and displayed.
For each field of the table schema of the database table selected in a dialogue, a component pair (label,DB component) is created in a ScrollView. Internally, each component pair is bound to the components DataSource and DataBrowser, so that the field contents can also beedited! The label displays the field name. For the field types Boolean and Date, ComboBoxes and DateBoxes respectively are provided as DataControl. The data is thus entered in a controlled manner. For the other types, Gambas automatically performs a check - depending on the database data type.

Figure 18.10.4.1: Universal DB Manager
In Figure 18.10.4.1 you can see how you can scroll through the table on the one hand and also through the contents of the ScrollView on the other. The procedure in which the above-mentioned component pairs are generated in the ScrollView (svwControl) now becomes the focus of our considerations:


```
PrivateSubGenerateControls()DimhFieldAsFieldDimhLabelAsLabelDimhControlAsDataControlForEachhFieldIn$hConn.Tables[srcData.Table].Fields' LABELhLabel=NewLabel(svwControl)hLabel.Text=hField.NamehLabel.Move(0,0,100,24)' DB-COMPONENThControl=NewDataControl(svwControl)hControl.Move(100,0,100,24)hControl.Expand=TruehControl.Field=hField.NameNextsvwControl.Visible=TrueEnd
```

The complete project of the universal database manager byTobias Boegecan be found in the download area. It contains in the folderDBMusteran SQLite3 databaseKontakte.sqlite, whose database tablekontaktyou can use when testing the universal DB manager.


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.11.0   Klasse DrawingArea

Dieses Steuerelement implementiert eine Zeichenfläche, auf die von der Anwendung gezeichnet werden kann. Es hat zwei Zeichen-Modi, Standard und Cached, die durch die Cached-Eigenschaft definiert werden.
Im Standard-Modus löst das DrawingArea das Draw-Ereignis jedes Mal aus, wenn es aktualisiert werden muss. Im Cached-Modus wird das Zeichnen einmal ausgeführt. Die aktuelle Zeichnung wird in einem internen Bild gespeichert, das von der DrawingArea verwendet wird, um sich selbst zu aktualisieren. Anders formuliert: Im gecacheten Modus kann man sie als Paint-Device benutzen, das heißt man kann direkt auf ihr zeichnen, wann immer es benötigt wird – so wie in diesem Beispiel:


```
PublicSubDrawingAreaCanvas_Draw()Paint.Begin(DrawingAreaCanvas)DrawBarChart()Paint.End()End
```

Im nicht-gecacheten Modus dagegen entscheiden andere interne Instanzen, wann eine DrawingArea neu gezeichnet werden muss. Das ist zum Beispiel der Fall, wenn sie durch ein Fenster überdeckt war. Dann muss sie neu gezeichnet werden, sobald sie wieder sichtbar ist. In solchem Fall wird das Draw-Event der DrawingArea aufgerufen. Ein Quelltext wie der o.a. würde zu einem Fehler führen.
So erzeugen Sie ein neues DrawingArea-Steuerelement:


```
Dim hDrawingArea As DrawingArea
hDrawingArea = New DrawingArea ( Parent As Container ) [ As "EventName" ]
```



# 23.4.6.0.1 Eigenschaften

Die Klasse DrawingArea verfügt über die folgenden relevanten Eigenschaften:
Tabelle 23.4.6.0.1 : Eigenschaften der Klasse DrawingArea
Hinweise


# 23.4.6.0.2 Methoden

Die Klasse DrawingArea verfügt nur über zwei relevante Methoden:
Tabelle 23.4.6.0.2 : Methode der Klasse DrawingArea


# 23.4.6.0.3 Ereignisse

Die Klasse DrawingArea besitzt diese Ereignisse:
Tabelle 23.4.6.0.3 : Ereignisse der Klasse DrawingArea
In den folgenden Kapiteln werden Projekte beschrieben, die auf unterschiedliche Art die DrawingArea als Zeichenfläche nutzen.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.11.1   Projekte – Streifen-Diagramme

Grundlegend für das Zeichnen auf einer Zeichenfläche (Canvas, Device) wie einer DrawingArea sind die Betrachtungen im Buch-Kapitel '3.3.3 Zeichnen mit Paint' sowie die folgenden Kapitel 'Paint-Projekte 1' und 'Paint-Projekte 2'.


# 18.11.1.0 Projekt 1

Im ersten Projekt wird auf der Basis einer Datenreihe ein Streifen-Diagramm gezeichnet und passend beschriftet. Als Zeichenfläche dient eine DrawingArea:

Abbildung 18.11.1.0.1:GUIBarChart – Streifen-Diagramm – 'Finanzbericht 2023'
Der hinreichend kommentierte Quelltext mit allen Zeichnen-Prozeduren wird komplett angegeben:


```
' Gambas class filePublicxTranslateAsFloatPublicyTranslateAsFloatPublicxScaleAsFloat=1PublicyScaleAsFloat=-1PublicSubForm_Open()FMain.Resizable=FalseFMain.Arrangement=Arrange.VerticalFMain.Margin=TrueFMain.Spacing=TrueDrawingAreaCanvas.Expand=TrueEndPublicSubDrawingAreaCanvas_Draw()'-- Draw the bar chart. The canvas is a DrawingArea.DrawBarChart()EndPublicSubDrawBarChart()DimiAsIntegerDimfDeltaX, fDeltaY, fOffsetX, fEndX, fEndY, fMaxValueAsFloatDimaData, aDataCAsFloat[]DimsCaptionAsStringDimiBarColorAsIntegerDimaColorMatrixAsNewInteger[]aColorMatrix=[16691968,14682169,3673255,10666574,7840196,15165856,652969,/4340047,12119436,14775582,4752276,160484]'-- Inline array with the barchart values to be displayedaData=[2.2,4,2.4,5.4,3,5.0,5.7,3.6,4.5,2.0,1.6,3.2]aDataC=aData.Copy()'-- Copy of the array of original valuesaDataC.Sort(gb.Descent)'-- Descending sorting of the copy elementsfMaxValue=aDatac[0]'-- The 1st element is now the largest value in the copied arrayfOffsetX=10'-- Definition of the abscissa offset ► +10fEndX=540'-- Definition of fixed coordinates for the sizefEndY=240fDeltaX=Round((fEndX-fOffsetX)/aData.Count,0)'-- Normalised strip width  (unit)fDeltaY=Round(fEndY/fMaxValue,0)'-- Normalised strip height (unit)xTranslate=40.0yTranslate=320.0Paint.Translate(xTranslate, yTranslate)Paint.Scale(1,-1)' +y ▲SetOrigin()Draw_X_Axis()Draw_Y_Axis()Draw_Y_AxisArrow()'-- Labelling CaptionPaint.Scale(1,-1)' +y ▼sCaption=("Financial Report 2023")Paint.Font=Font["Monospace, 12"]Paint.DrawText(sCaption,385,-290)Paint.Scale(1,-1)' +y ▲'-- All 12 financial values are drawn as stripesFori=0ToaData.Max'-- Calculation and drawn of all stripes (rectangles) in the diagram with stripe coloriBarColor=aColorMatrix[i]Paint.FillRect(fOffsetX+i*fDeltaX,1.3, fDeltaX, fDeltaY*aData[i], iBarColor)Paint.Scale(1,-1)' +y ▼Paint.Brush=Paint.Color(Color.Black)Paint.Font=Font["Monospace, 10"]Paint.DrawText(Str(aData[i]), fOffsetX+i*fDeltaX,-fDeltaY*aData[i]-30, fDeltaX,30, Align.Center)Paint.Font=Font["Monospace, 10"]Paint.DrawText(Str(i+1), fOffsetX+i*fDeltaX,1, fDeltaX,30, Align.Center)Paint.Scale(1,-1)Next'-- Labelling the y-axisPaint.Scale(1,-1)' +y ▼sCaption=("Value in 10^4 €")Paint.Font=Font["Monospace, 9"]IfPaint.TextSize(sCaption).W/2>xTranslateThenPaint.DrawText(sCaption,0-xTranslate/2,-290)ElsePaint.DrawText(sCaption,0-Paint.TextSize(sCaption).W/2,-290)EndifPaint.Scale(1,-1)EndPublicSubDrawingAreaCanvas_MouseDown()'-- Display of the (relative) coordinates - for tests onlyPrintStr(Mouse.X-xTranslate)&" | "&Str(-Mouse.Y+yTranslate)End'--------------------------------------------------------------------------------------PrivateSubSetOrigin()'-- Origin of coordinatesPaint.Brush=Paint.Color(Color.Red)Paint.MoveTo(0,0)Paint.Arc(0,0,4)Paint.Fill()Paint.Brush=Paint.Color(Color.Black)EndPrivateSubDraw_X_Axis()'-- x-axisPaint.AntiAlias=FalsePaint.MoveTo(-20,0)Paint.LineTo(560,0)Paint.Stroke()Paint.AntiAlias=TrueEndPrivateSubDraw_Y_Axis()'-- y-axisPaint.AntiAlias=FalsePaint.MoveTo(0,-20)Paint.LineTo(0,270)Paint.MoveTo(0,0)Paint.Stroke()Paint.AntiAlias=TrueEndPrivateSubDraw_Y_AxisArrow()DimiAsInteger'-- y-axis (arrow)Paint.AntiAlias=FalseFori=1To5Paint.MoveTo(-6+i,264+i)Paint.LineTo(7-i,264+i)Paint.Stroke()NextPaint.AntiAlias=TrueEnd'--------------------------------------------------------------------------------------PublicSubButtonClose_Click()FMain.Close()End
```

Hinweise


# 18.11.1.1 Projekt 2

Das Besondere an diesem Projekt sind die erweiterten Forderungen gegenüber dem ersten Projekt, denn der Inhalt der DrawingArea mit dem Streifen-Diagramm soll
Auf den Inhalt einer DrawingArea können Sie nicht direkt zugreifen.
Sie können beim Druck in eine Datei im Dialog als Ausgabeformat PDF oder PostScript oder SVG auswählen oder das Image auf einem Drucker wie einem Laserdrucker ausdrucken.

Abbildung 18.11.1.1.1:GUIBarChart – Streifen-Diagramm in der DrawingArea

Abbildung 18.11.1.1.2: Ausdruck in eine Datei – 3 Formate

Abbildung 18.11.1.1.3: (Druck-)Vorschau

Abbildung 18.11.1.1.4: Ausdruck auf einen Drucker – FS-1030D

Abbildung 18.11.1.1.5: Drucken – Seite einrichten
Der hinreichend kommentierte Quelltext wird auch für das zweite Projekt komplett angegeben, um die Umsetzung des o.a. Konzeptes zu verdeutlichen. Anschließende Hinweise ergänzen die Kommentare:


```
(1)' Gambas class file(2)(3)PublichPictureAsPicture(4)PublichImageAsImage(5)(6)PublicxTranslateAsFloat(7)PublicyTranslateAsFloat(8)PublicxScaleAsFloat=1(9)PublicyScaleAsFloat=-1(10)(11)(12)PublicSubForm_Open()(13)(14)FMain.Resizable=False(15)FMain.Arrangement=Arrange.Vertical(16)FMain.Margin=True(17)FMain.Spacing=True(18)(19)DrawingAreaCanvas.Expand=True(20)(21)'-- Draw the bar chart. The canvas is a picture (hPicture)!(22)DrawBarChart()(23)'-- Draw the picture in the DrawingArea by raising its _Draw event(24)DrawingAreaCanvas.Refresh()(25)(26)End(27)(28)PublicSubDrawingAreaCanvas_Draw()(29)(30)Paint.DrawPicture(hPicture,0,0)(31)(32)End(33)(34)PublicSubDrawBarChart()(35)(36)DimiAsInteger(37)DimfDeltaX, fDeltaY, fOffsetX, fEndX, fEndY, fMaxValueAsFloat(38)DimaData, aDataCAsFloat[](39)DimsCaptionAsString(40)DimiBarColorAsInteger(41)DimaColorMatrixAsInteger[](42)(43)aColorMatrix=[16691968,14682169,3673255,10666574,7840196,15165856,652969,4340047,12119436,14775582,4752276,160484](44)(45)'-- Creation of a object with defined size of type Picture(46)hPicture=NewPicture(DrawingAreaCanvas.W, DrawingAreaCanvas.H)(47)hPicture.Fill(&HF0F0F0)(48)(49)Paint.Begin(hPicture)(50)'-- Inline array with the values to be displayed(51)aData=[2.2,4,2.4,5.4,3,5.0,5.7,3.6,4.5,2.0,1.6,3.2](52)aDataC=aData.Copy()'-- Copy of the array of original values(53)aDataC.Sort(gb.Descent)'-- Descending sorting of the copy elements(54)fMaxValue=aDatac[0]'-- The 1st element is now the largest value in the copied array(55)(56)fOffsetX=10'-- Definition of the abscissa offset ↦ +10(57)fEndX=540'-- Definition of fixed coordinates for the size(58)fEndY=240(59)fDeltaX=Round((fEndX-fOffsetX)/aData.Count,0)'-- Normalised strip width (unit)(60)fDeltaY=Round(fEndY/fMaxValue,0)'-- Normalised strip height (unit)(61)(62)xTranslate=40.0(63)yTranslate=320.0(64)Paint.Translate(xTranslate, yTranslate)(65)Paint.Scale(1,-1)' +y ▲(66)(67)SetOrigin()(68)Draw_X_Axis()(69)Draw_Y_Axis()(70)Draw_Y_AxisArrow()(71)(72)'-- Labelling Caption(73)Paint.Scale(1,-1)' +y ▼(74)sCaption=("Financial Report 2023")(75)Paint.Font=Font["Monospace, 12"](76)Paint.DrawText(sCaption,385,-290)(77)Paint.Scale(1,-1)' +y ▲(78)(79)'-- All 12 financial values are drawn as stripes(80)Fori=0ToaData.Max(81)'-- Calculation and drawn of all stripes (rectangles) in the diagram with stripe color(82)iBarColor=aColorMatrix[i](83)Paint.FillRect(fOffsetX+i*fDeltaX,1.2, fDeltaX, fDeltaY*aData[i], iBarColor)(84)Paint.Scale(1,-1)' +y ▼(85)Paint.Brush=Paint.Color(Color.Black)(86)Paint.Font=Font["Monospace, 10"](87)Paint.DrawText(Str(aData[i]), fOffsetX+i*fDeltaX,-fDeltaY*aData[i]-30, fDeltaX,30, Align.Center)(88)Paint.Font=Font["Monospace, 10"](89)Paint.DrawText(Str(i+1), fOffsetX+i*fDeltaX,1, fDeltaX,30, Align.Center)(90)Paint.Scale(1,-1)(91)Next(92)(93)'-- Labelling the y-axis(94)Paint.Scale(1,-1)' +y ▼(95)sCaption=("Value in 10^4 €")(96)Paint.Font=Font["Monospace, 9"](97)IfPaint.TextSize(sCaption).W/2>xTranslateThen(98)Paint.DrawText(sCaption,0-xTranslate/2,-290)(99)Else(100)Paint.DrawText(sCaption,0-Paint.TextSize(sCaption).W/2,-290)(101)Endif(102)Paint.Scale(1,-1)(103)Paint.End()(104)(105)'-- The content of the Picture (current canvas) is assigned to an image that is used for printing(106)hImage=hPicture.Image(107)(108)End(109)(110)PublicSubButtonSaveBarChart_Click()(111)(112)hPicture.Save(Application.Path&/"chart/barchart.png")(113)(114)End(115)(116)PublicSubButtonPrintBarChart_Click()(117)(118)Printer1.Paper=Printer1.A4(119)Printer1.Orientation=Printer.Landscape(120)(121)'-- Color printing is standard and therefore not required as a specification(122)Printer1.GrayScale=False(123)Printer1.FullPage=True'-- Should always be used!(124)(125)Printer1.NumCopies=1(126)IfPrinter1.NumCopies>1Then(127)Printer1.ReverseOrder=True(128)Printer1.CollateCopies=True(129)Else(130)Printer1.ReverseOrder=False(131)Printer1.CollateCopies=False(132)Endif(133)(134)'-- Definition of the 4 margins with fixed margin values(135)Printer1.MarginLeft=30(136)Printer1.MarginTop=30(137)Printer1.MarginRight=100(138)Printer1.MarginBottom=10(139)(140)Printer1.OutputFile=User.Home&/"bilanz_bc_2023.pdf"(141)(142)IfPrinter1.Configure()ThenReturn(143)Printer1.Print()(144)(145)End(146)(147)PublicSubPrinter1_Begin()(148)(149)Printer1.Count=1'-- This specification ( > 0 ) is required(150)(151)End(152)(153)PublicSubPrinter1_Draw()(154)(155)DimfPrintW, fPrintHAsFloat(156)DimfRatioImageAsFloat(157)(158)Paint.Scale(Paint.Width/Printer1.PaperWidth, Paint.Height/Printer1.PaperHeight)(159)Paint.Translate(Printer1.MarginLeft, Printer1.MarginTop)(160)(161)fRatioImage=hImage.W/hImage.H(162)fPrintW=Printer1.PaperWidth-(Printer1.MarginLeft+Printer1.MarginRight)(163)fPrintH=Printer1.PaperHeight-(Printer1.MarginTop+Printer1.MarginBottom)(164)(165)'-- Match diagram rectangle into the target format(166)IffRatioImage>(Paint.W/Paint.H)Then(167)Paint.DrawImage(hImage,0,0, fPrintW, fPrintW/fRatioImage)(168)Else(169)Paint.DrawImage(hImage,0,0, fPrintH/fRatioImage, fPrintH)(170)Endif(171)(172)End(173)(174)'--------------------------------------------------------------------------------------(175)(176)PrivateSubSetOrigin()(177)(178)'-- Origin of coordinates(179)Paint.Brush=Paint.Color(Color.Red)(180)Paint.MoveTo(0,0)(181)Paint.Arc(0,0,4)(182)Paint.Fill()(183)Paint.Brush=Paint.Color(Color.Black)(184)(185)End(186)(187)PrivateSubDraw_X_Axis()(188)(189)'-- x-axis(190)Paint.AntiAlias=False(191)Paint.MoveTo(-20,0)(192)Paint.LineTo(560,0)(193)Paint.Stroke()(194)Paint.AntiAlias=True(195)(196)End(197)(198)PrivateSubDraw_Y_Axis()(199)(200)'-- y-axis(201)Paint.AntiAlias=False(202)Paint.MoveTo(0,-20)(203)Paint.LineTo(0,270)(204)Paint.MoveTo(0,0)(205)Paint.Stroke()(206)Paint.AntiAlias=True(207)(208)End(209)(210)PrivateSubDraw_Y_AxisArrow()(211)(212)DimiAsInteger(213)(214)'-- y-axis (arrow)(215)Paint.AntiAlias=False(216)Fori=1To5(217)Paint.MoveTo(-6+i,264+i)(218)Paint.LineTo(7-i,264+i)(219)Paint.Stroke()(220)Next(221)Paint.AntiAlias=True(222)(223)End(224)(225)'--------------------------------------------------------------------------------------(226)(227)(228)PublicSubForm_Close()(229)(230)DimhWindowAsWindow(231)(232)'-- Close all open windows(233)ForEachhWindowInWindows(234)hWindow.Close()(235)Next(236)(237)End
```

Die Hinweise beziehen sich auf die Zeilen 265 bis 270 im o.a. Quelltext


```
'-- Match diagram rectangle into the target formatIFfRatioImage>(Paint.W/Paint.H)THENPaint.DrawImage(hImage,0,0, fPrintW, fPrintW/fRatioImage)ELSEPaint.DrawImage(hImage,0,0, fPrintH/fRatioImage, fPrintH)ENDIF
```

Für den ersten Fall gilt: Die Breite des BarChart entspricht der verfügbaren Breite des Druckbereichs. Die Höhe wird entsprechend der Original-Proportionen errechnet:

Abbildung 18.11.1.1.6: BarChart – Druckbreite
Für den zweiten Fall gilt: Die Höhe des BarChart entspricht der verfügbaren Höhe des Druckbereichs. Die Breite wird entsprechend der Original-Proportionen errechnet:

Abbildung 18.11.1.1.7: BarChart – Druckhöhe
Den Quelltext für die beiden Projekte finden Sie in zwei Projekt-Archiven im Download-Bereich.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# DRAWINGAREA PROJEKT 2



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Container



# Chapters



# Table of Contents



# 18.12 ListContainer

TheListContainerclass (gb.form) provides a modified container (ListBox) that can hold and display other components. These components can also be containers.
You will use the container componentListContainerabove all if you want to display a lot of data with the same structure, which is read in anew each time the programme is started or which can change at programme runtime. The application purpose determines the selection of the components that are inserted into the ListContainer.

Figure 18.12.1: Use of the ListContainer component (Gambas start screen (detail))


# 18.12.1 Properties

The following table describes the properties of the ListContainer component:
Table 18.12.1.1: ListContainer properties


# 18.12.2 Methods

The container component has five special methods, the description of which can be found in the next table:
Table 18.12.2.1: Methods ListContainer


# 18.12.3 Events

The container component has three special events: Activate, Click and Scroll.


# 18.12.4 Adding Components to a ListContainer

You will not find anAdd method- which you surely expected to find in the documentation - to add the components of your choice to a ListContainer. However, the following approach leads to the goal - be sure to try it out in a small project!


```
PublicSubbtnExample_Click()DimhCtrlAsControlDimbButtonAsButtonDimtxbTextBoxAsTextBoxDimtxtTextareaAsTextAreaDimhFormAsFormbButton=NewButton(ListContainer2)As"B1"bButton.H=24bButton.Text="Button 1 oben"txbTextBox=NewTextBox(ListContainer2)As"TB1"txbTextBox.H=24txbTextBox.Text="** TextBox **"hCtrl=NewPanel(ListContainer2)As"P1"hCtrl.H=32txtTextarea=NewTextArea(ListContainer2)As"TA"txtTextarea.H=80txtTextarea.Text="Die ListContainer-Komponente besitzt ein Click-Ereignis."txtTextarea.Text&=gb.NewLine&"Es wird ausgelöst, wenn sich die Auswahl ändert."txtTextarea.Wrap=TruebButton=NewButton(ListContainer2)As"B2"bButton.H=24bButton.Text="Button 2 unten"hForm=NewForm(ListContainer2)As"F1"hForm.H=48hForm.Border=TruehForm.Background=&HDFA08B
    bButton=NewButton(hform)As"F1Button1"bButton.H=24bButton.X=8bButton.Y=16bButton.W=88bButton.Text="Mitteilung"ListContainer2.Index=3EndPublicSubF1Button1_Click()Message.Info("Ich fühle mich unter-drückt!")End
```

The TextBox and the TextArea are writable and also a click on the 2 buttons as well as on the F1Button1 button in the inserted form works.


# 18.12.5 RSS reader project

Information onRSScan be found athttp://www.rssboard.org/rss-specification. In the foreground of the presented project RSS-Reader, however, is the use of the ListContainer component.
A click on a (feed) form in the ListContainer selects the form, returns an index and launches the link matching this index in a WebView.
Hint:
In response to the author's enquiry in connection with this feed reader project for the online book, ARD wrote:In principle, you may use XML that we offer anywhere. However, images may … not be published anywhere, because some of them are agency images for which we only pay for our own platforms.Hence the image retouching in the following image:

Figure 18.12.5.1: Project RSS reader - programme runtime

Figure 18.12.5.2: (Feed) form for the RSS reader project - development time.
Notes:


# Download

Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# ﻿19.7.1   Klasse Desktop (gb.desktop)

Die Klasse Desktop der gleichnamigen Komponente erlaubt Ihnen auf der Basis der xdg-utils-Skripte des Portland-Projekts die Verwendung von auf den Desktop bezogenen Routinen. Die Anzahl der Eigenschaften und Methoden ist überschaubar. Ausgewählte Eigenschaften und Methoden werden jeweils in einer Tabelle aufgeführt und beschrieben:
Tabelle 19.7.1.1: Übersicht zu Eigenschaften der Klasse Desktop (gb.desktop)
Die virtuelle Klasse _Desktop_ScreenSaver erlaubt Ihnen die Manipulation des Bildschirmschoners und hat die folgende Eigenschaft:
Es folgt eine Aufzählung der Methoden der virtuellen Klasse _Desktop_ScreenSaver und eine kurze Erläuterung der ausgelösten Aktion:
Eine kurze Beschreibung der Methoden der Klasse Desktop finden Sie in der folgenden Tabelle, der u.a. eine ausführliche Darstellung ausgewählter Methoden in weiteren (Unter-)Kapiteln folgt:
Tabelle 19.7.1.2: Übersicht zu Methoden der Klasse Desktop (gb.desktop)
(1)
Die Methode FindWindow(..) gibt als Funktionswert ein Array von X11-Fenster-Kennungen zurück. Für die optionalen Parameter in der Methode gilt:


```
Desktop.FindWindow ( [ Title As String, Application As String, Role As String ] ) As Integer[]
```

Die Argumente Title, Application und Role sind reguläre Ausdrücke, wie sie im Zusammenhang mit dem LIKE-Operator (→ Kapitel 19.6.3 Exkurs LIKE und Kapitel 8.6 Spezielle Operatoren) definiert sind.


```
[1]PublicSubGetDTWindowsList()[2]DimiCountAsInteger[3]DimDTWindowAsDesktopWindow[4]DimaDTWindowsListAsInteger[][5][6]txaWindowList.Clear[7]aDTWindowsList=Desktop.FindWindow(txbPatternBox.Text)[8]lblWindowCount.Text=aDTWindowsList.Count[9]ForiCount=0ToaDTWindowsList.Max[10]DTWindow=NewDesktopWindow(aDTWindowsList[iCount])[11]IfDTWindow.Id=aDTWindowsList[iCount]Then[12]txaWindowList.Text&=Str(iCount+1)&"\t"&(DTWindow.Desktop+1)&"      "&DTWindow.Id&"\t"&DTWindow.Name&gb.NewLine[13]Endif' DTWindow.Id = aDTWindowsList[iCount] ?[14]Next' iCount[15][16]End' GetDTWindowsList()[17][18]PublicSubbtnGetDTWList_Click()[19]GetDTWindowsList()[20]End' btnGetDTWList_Click()
```

Folgende Ergebnisse konnten in einer TextArea angezeigt werden. Zuerst wurde als Suchmuster der reguläre Ausdruck [DGM]* ( →  Zeile 7 ) verwendet (Fenstername beginnt mit D, G oder M):


```
Nummer	        Desktop	Desktop.ID		Fenster-Name 
----------------------------------------------------------------------------------------------
1		3      	52428816		DesktopWatcher 0.0.6 - Gambas 3 
2		1      	62914563		GHex 
3		4      	65011850		Mozilla Firefox 
4		3      	37748751		DesktopWatcher
```

Anschließend wurde das Suchmuster auf * festgesetzt und ergab folgende, erweiterte Liste von X11-Top-Level-Fenstern:


```
Nummer	        Desktop	Desktop.ID		Fenster-Name 
----------------------------------------------------------------------------------------------
1		0      	23068676		Schreibtisch 
2		3      	52428816		DesktopWatcher 0.0.6 - Gambas 3 
3		1      	62914563		GHex 
4		1      	60817454		Unbenanntes Dokument 1 - gedit 
5		2      	48234565		19.7.1.odt - LibreOffice Writer 
6		4      	65011850		Mozilla Firefox 
7		3      	37748751		DesktopWatcher 
8		0      	14680084		Unteres Kanten-Panel, ausgedehnt 
9		0      	14680067		Oberes Kanten-Panel, ausgedehnt
```

(2)
Die Methode GetFileIcon(..) gibt das Icon zurück, das der ausgewählten Datei zugeordnet wurde:


```
Desktop.GetFileIcon (Path As String, Size As Integer [ , Preview As Boolean ] ) As Picture
```



```
' Gambas class filePublicpicFileIconAsPicturePublicSubForm_Open()picFileIcon=Desktop.GetFileIcon(User.Home&/"DesktopWatcher.gambas",32,False)' Speicherung des Icons in der globalen Variablen picFileIcon vom Typ PicturePictureBox1.W=72PictureBox1.H=PictureBox1.WPictureBox1.Stretch=TruePictureBox1.Picture=Desktop.GetFileIcon(User.Home&/"Arbeitsfläche/GetFileIcon/
                        GetFileIcon.gambas",32,False)End' Form_Open
```

(5)
Mit der Methode RunAsRoot(..) verbanden viele Gambas-Programmierer die Hoffnung, nun recht einfach aus einem Gambas-Programm heraus ein Kommando ausführen zu können, das Root-Rechte erfordert. Die Umsetzung in ein Projekt ist einfach:


```
PublicSubRunAsRoot(sCommandAsString)Desktop.RunAsRoot(sCommand)End' RunAsRoot(sCommand As String)PublicSubbtnRunAsRoot_Click()RunAsRoot("apt-get install bluefish")End' btnRunAsRoot_Click()
```

Es öffnet sich ein Terminal-Fenster und man wird zur (verdeckten) Eingabe des Root-Passwortes aufgefordert:

Abbildung 19.7.1.1: Terminal
Aber gegenwärtig (→ 13.4.2013) passiert nach der Eingabe des Root-Passwortes nichts. Das Terminal-Fenster schließt sich und man kehrt zum Programm-Fenster zurück.
Das was es auch schon – zumindest unter Ubuntu 12.04.
Intern wird die Instruktion Exec() verwendet und auf den folgenden Befehl – hier im Zusammenhang mit dem Befehl zur Installation des Programms 'bluefish' – zurückgegriffen:


```
hans@linux:~$/tmp/gambas.1000/10857/xdg-utils/xdg-su-c"apt-get install bluefish"
```

Für die virtuelle Klasse _Desktop_ScreenSaver sowie für die Klasse Desktop mit den u.a. Methoden erfolgen die Beschreibungen und die Vorstellung relevanter Quelltext-Ausschnitte in eigenen Kapiteln 17.1.1 bis 17.1.5:


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# ﻿19.7.2   Klasse DesktopFile (gb.desktop)

Diese Klasse befindet sich gegenwärtig noch in der Entwicklung. Mit dieser Klasse können Sie später die so genannten “Desktop-Einträge” als Desktop-Konfigurationsdateien (application/x-desktop) anlegen und bearbeiten. Diese Konfigurationsdateien beschreiben zum Beispiel wie ein Programm gestartet wird oder wie ein Programm in einem Menü erscheint. Einige Distributionen verfügen über Menüeditoren, andere wie Lubuntu besitzen diese nicht. Offensichtlich ist die Klasse DesktopFile deshalb in die Komponente gb.desktop aufgenommen worden.
Sie können sich aber bereits schon jetzt die genaue Spezifikation von Dateien für Desktop-Einträge unter dem Link:http://standards.freedesktop.org/desktop-entry-spec/latest/in der aktuellen Version ansehen, weil Gambas dieser Spezifikation folgt.


# 19.7.2.1   Format einer Konfigurationsdatei

Eine Desktop-Konfigurationsdatei besteht aus folgenden Elementen:


# 19.7.2.2   Beispiel für eine Konfigurationsdatei:



```
#
# Starter für die IDE von Gambas 3
# Pfad: ~/.local/share/applications/gambas341.desktop
#
[Desktop Entry]
# Erforderliche Einträge
Type=Application
Name=Gambas 3.4.1
Exec=/usr/bin/gambas3
# Optionale Einträge
Icon=/home/hans/gb341/app/src/gambas3/img/logo/logo-64.png
Categories=Development
Comment=Start der GAMBAS-IDE
Version=3.4.1
Terminal=false
```

Sie können die o.a. Zeilen mit einem Editor der Wahl schreiben und die Datei im Benutzerverzeichnis:


```
~/.local/share/applications/gambas341.desktop
```

abspeichern. Root-Rechte sind nicht erforderlich. Soll die Desktop-Konfigurationsdatei systemweit gelten, dann muss sie im folgenden Verzeichnis mit Root-Rechten abgespeichert werden:


```
/usr/share/applications/gambas341.desktop
```

Nach dem Speichern sehen Sie im Menü der Anwendungen in der Rubrik 'Software-Entwicklung' das Unter-Menü 'Gambas 341'.
Wenn der Starter auch auf dem Desktop zu sehen sein soll, dann muss die Desktop-Konfigurationsdatei auch in das Desktop-Verzeichnis ~/Arbeitsfläche unter Ubuntu 12.04 kopiert werden. Sie sollten dort in den Eigenschaften der Konfigurationsdatei noch den Namen in eine Kurzform wie 'GB3.4.1' ändern und die Datei unter Ubuntu ausführbar machen!
Es bleibt abzuwarten, wann diese Klasse zur Nutzung freigegeben wird.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# ﻿19.7.3   Klasse DesktopMime (gb.desktop)

Diese Klasse erlaubt es, die Daten in der Dateimimeapps.list(MIME-Datenbank) zu verarbeiten, wie sie durch den freedesktop-Standard definiert wird. Anhand des Mime-Typs wird eine zu dem Typ passende Anwendung gestartet. Nach der u.a. Datei wird zum Beispiel bei einerTextdateimit der Extension.csvdas Programmbluefishgestartet.
Das ist – unter Ubuntu 12.04 – der Inhalt der Datei~/.local/share/applications/mimeapps.list:


```
[Default Applications]
x-scheme-handler/mailto=thunderbird.desktop

[Added Associations]
x-scheme-handler/mailto=thunderbird.desktop;
application/x-java=gedit.desktop;bluefish.desktop;
application/x-trash=gedit.desktop;
text/csv=bluefish.desktop;
text/plain=bluefish.desktop;libreoffice-writer.desktop;
application/octet-stream=libreoffice-writer.desktop;ghex.desktop;gedit.desktop;bluefish.desktop;
image/jpeg=ghex.desktop;bluefish.desktop;
application/x-gambas3=gedit.desktop;
```

Im engen Zusammenhang damit steht offensichtlich die Datei /usr/share/applications/mimeinfo.cache, die systemweit gilt, während die Datei mimeapps.list nur für einen bestimmten System-Benutzer verwendet wird.
Diese Klasse befindet sich noch in der Entwicklung. Es ist gegenwärtig nicht bekannt, wann man diese Klasse einsetzen kann.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# ﻿19.7.4  DesktopWindow

Die KlasseDesktopWindow(gb.desktop) repräsentiert ein Top-Level-Fenster. Objekte der Klasse können Sie so anlegen:


```
Dim hDesktopWindow As DesktopWindow
hDesktopWindow = New DesktopWindow(Window As Integer)
```

Es wird aber empfohlen, DesktopWindow-Objekte nichtdirektanzulegen, sondern Zugriff auf ein Top-Level-Fenster über die EigenschaftDesktop.Windowszu bekommen. Zwei Beispiele sollen das belegen:


```
PrivateFunctionDesktop_FindWindow(sPatternAsString)AsDesktopWindow[]DimdtWindowAsDesktopWindowDimdtWListAsNewDesktopWindow[]Desktop.Windows.Refresh()' Desktop.Windows präsentiert als virtuelles Objekt eine Liste aller Top-Level-FensterForEachdtWindowInDesktop.WindowsIfdtWindow.NameLikesPatternThendtWList.Add(dtWindow)Endif'  dtWindow.Name Like sPattern ?Next' dtWindowReturndtWListEnd' Function Desktop_FindWindow(..)
```



```
PublicSubbtnExample_Click()DimdtWindowAsDesktopWindowDesktop.Windows.Refresh()ForEachdtWindowInDesktop.WindowsIfdtWindow.SkipTaskbar=FalseThenPrint"Window.Name =\""&dtWindow.Name&"\", X = "&dtWindow.X&" , Y = "&dtWindow.YEndif' dtWindow.SkipTaskbar = FalseNext' dtWindowEnd' btnExample_Click()
```

Der letzte Quelltext-Ausschnitt liefert beispielsweise folgende Ausgabe in der Konsole (IDE):


```
Window.Name = "Gambas Documentation - Desktop.Windows[] (gb.desktop) - Mozilla Firefox" , X = 0 , Y = 24 
Window.Name = "19.7.4.odt - LibreOffice Writer" , X = 0 , Y = 24 
Window.Name = "19.7_Desktop" , X = 0 , Y = 24 
Window.Name = "k19:start [GAMBAS-BUCH 3.5.1] - Mozilla Firefox" , X = 0 , Y = 24 
Window.Name = "propertytest 0.0.15 - Gambas 3" , X = 0 , Y = 24 
Window.Name = "PropertyTest" , X = 304 , Y = 213
```



# 19.7.4.1   Eigenschaften

AusgewählteEigenschaftenundMethodender Klasse werden in den folgenden zwei Tabellen aufgeführt und beschrieben:
Tabelle 19.7.4.1.1: Übersicht ausgewählter Eigenschaften der Klasse DesktopWindow


# 19.7.4.2   Methoden

Tabelle 19.7.4.2.1: Ausgewählten Methoden der Klasse DesktopWindow
Weitere Ausführungen zur Klasse DesktopWindow (gb.desktop) finden Sie im nächsten Kapitel 19.7.5, das neben der Beschreibung der Klasse DesktopWatcher vor allem das praktische Zusammenspiel der beiden Klassen in einem Projekt demonstriert.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# ﻿19.7.5   DesktopWatcher

Die KlasseDesktopWatcher(gb.desktop) implementiert ein Objekt, das Ereignisse des Fenster-Managers überwacht.


# 19.7.5.1   Eigenschaften

Die KlasseDesktopWatcherbesitzt nur dieeineEigenschaft .RootWindow (Boolean) und gibtTruezurück, wenn nur das RootWindow überwacht werden soll oder setzt mit True das Root-Window als zu beobachtendes Fenster.


# 19.7.5.2   Ereignisse

Methoden besitzt die Klasse nicht – aber acht Ereignisse. Das ist verständlich, denn die Klasse hat vor allem überwachende Aufgaben.
Tabelle 19.7.5.2.1: Übersicht ausgewählter Events der Klasse DesktopWatcher


# 19.7.5.3   Projekt

Das vorgestellte Projekt wurde 2012 vonRichard Walkerals WindowExplorer entwickelt. Die Adaption beschränkt sich auf die Demonstration des Zusammenspiels der Klassen DesktopWindow, Desktop → Kapitel 19.7.1 und DesktopWatcher. Der Quelltext wurde um einige Funktionen erweitert und erfordert dann aber, dass das Programm 'wmctrl' installiert sein muss.


```
' Gambas class filePrivateaDTWindowsListAsDesktopWindow[]PrivateaDTWindowsList2AsInteger[]PublicDTWatcherAsDesktopWatcherPublicSub_new()DTWatcher=NewDesktopWatcher(True)As"MyDTWatcher"txbPatternBox.Text="*"End' _new()PublicSubForm_Open()FMain.CenterGetWindowInfo()GetDesktopInfo()GetWindowsList()End' Form_Open()PublicSubGetWindowsList()DimiCountAsIntegertxaWindowList.ClearaDTWindowsList=Desktop_FindWindow(txbPatternBox.Text)lblWindowCount.Text=aDTWindowsList.CountForiCount=0ToaDTWindowsList.Count-1txaWindowList.Text&=Str(iCount+1)&"\t"&(1+aDTWindowsList[iCount].Desktop)txaWindowList.Text&="      "&aDTWindowsList[iCount].Id&"\t"txaWindowList.Text&=aDTWindowsList[iCount].Name&gb.NewLineNext' iCountaDTWindowsList=NullEnd' btnGetWindowsList1_Click()PublicFunctionGetCurrentDesktopName()AsStringDimsOutput, sZeile, sElementAsStringDimaMatrixAsString[]' Ausgabe der Namen der virtuellen Desktops (VDesktop)Exec["wmctrl","-d"]TosOutputForEachsZeileInSplit(sOutput, gb.NewLine)IfInStr(sZeile,"*")Then' Der aktuelle Desktop wird durch ein * gekennzeichnetaMatrix=Split(sZeile," ")ReturnaMatrix[aMatrix.Max]Endif' InStr(sZeile, "*") ?Next' FOR EACH sZeileEnd' Function GetDesktopName()PublicSubGetDesktopInfo()lblDesktopCount.Text=Str(Desktop.Count)lblDTCurrentValue.Text=Str(Desktop.Current+1)lblDesktopType.Text=Desktop.TypelblCurrentDesktopName.Text=GetCurrentDesktopName()End' GetDesktopInfo()PublicSubGetActiveWindow()DimDTWindowAsDesktopWindow
 
  lblActiveWindowValue.Text=Str(Desktop.ActiveWindow)DTWindow=NewDesktopWindow(Val(lblActiveWindowValue.Text))lblActiveWindowName.Text=DTWindow.NameEnd' GetActiveWindow()PublicSubGetWindowInfo()lblRootWindowID.Text=Str(Desktop.RootWindow)GetActiveWindow()End' GetWindowInfo()PrivateFunctionDesktop_FindWindow(sPatternAsString)AsDesktopWindow[]DimDTWindowAsDesktopWindowDimDTWListAsNewDesktopWindow[]ForEachDTWindowInDesktop.Windows' Desktop.Windows enthält die Liste aller FensterIfDTWindow.NameLikesPatternThenDTWList.Add(DTWindow)Endif' DTWindow.Name Like sPattern ?Next' DTWindowReturnDTWListEnd' Function Desktop_FindWindow(..)PublicFunctionSetTime()AsStringReturnFormat(Now(),"hh:nn:ss")&"\t"End' SetTime()PublicSubMyDTWatcher_ActiveWindow()txaDTWatcherEvents.Text&=SetTime()&"* Das aktive Fenster hat sich geändert!"&gb.NewLineGetActiveWindow()End' MyWindowWatcher_ActiveWindow()PublicSubMyDTWatcher_Windows()txaDTWatcherEvents.Text&=SetTime()&"~ Die Fenster-Liste hat sich geändert."&gb.NewLineGetWindowsList()End' MyDTWatcher_Windows()PublicSubbtnRefresh_Click()GetWindowInfo()GetDesktopInfo()GetWindowsList()End' btnRefresh_Click()PublicSubbtnEnde_Click()FMain.CloseEnd' btnEnde_Click()
```


Abbildung 19.7.5.3.1: WindowExplorer mit geändertem Suchmuster
Es ist schon beachtlich, welche Vielfalt an Informationen das Programm anzeigt. DerRefresh-Button wird benötigt zur Anzeige der Fensterliste bei beändertem Suchmuster → Abbildung 19.7.5.3.1 und nach einer Verschiebung des Programmfensters auf einen anderen (virtuellen) Desktop, damit der aktuelle Desktop mit Nummer und Namen neu abgefragt und angezeigt werden kann.
Diese sechs Prozeduren könnten Sie dem WindowExplorer noch hinzufügen. Der Quelltext muss noch erweitert werden, da Sie die Werte der Parameter der ersten drei Prozeduren bereitstellen müssen.


```
Public Sub MyDTWatcher_WindowGeometry(w As DesktopWindow)
  txaDTWatcherEvents.Text &= SetTime() & w.Name & ": VDesktop-Geometrie geändert." & gb.NewLine
End ' MyDTWatcher_WindowGeometry(w As DesktopWindow)

Public Sub MyDTWatcher_WindowIcon(w As DesktopWindow)
  txaDTWatcherEvents.Text &= SetTime() & w.Name & ": VDesktop-Icon geändert." & gb.NewLine
End ' MyDTWatcher_WindowGeometry(w As DesktopWindow)

Public Sub MyDTWatcher_WindowName(w As DesktopWindow)
  txaDTWatcherEvents.Text &= SetTime() & w.Name & ": VDesktop-Name geändert." & gb.NewLine
End ' MyDTWatcher_WindowName(w As DesktopWindow)

Public Sub MyDTWatcher_Change()
  txaDTWatcherEvents.Text &= SetTime() & "Aktueller VDesktop hat sich geändert." & gb.NewLine
End ' MyDTWatcher_Change()

Public Sub MyDTWatcher_Count()
  txaDTWatcherEvents.Text &= SetTime() & "Die VDesktop-Anzahl hat sich geändert." & gb.NewLine
End ' MyDTWatcher_Count()

Public Sub MyDTWatcher_Geometry()
  txaDTWatcherEvents.Text &= SetTime() & "Die VDesktop-Geometrie hat sich geändert." & gb.NewLine
End ' MyDTWatcher_Geometry()
```



# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# Table of Contents



# 19.8.0 Eval component and Eval() function

If you turn to the subject, you will discover on the one hand thefunction Eval()and on the other hand thecomponent Eval (gb.eval)with its 3 classes. The connection is not immediately obvious, but using the properties of the Expression (gb.eval) class and its Compile method accomplish the same thing as the Eval() function.


# 19.8.0.1 Component Eval gb.eval

You can use this component to evaluate Gambas expressions at runtime. It contains the classes:
The description of the properties, methods and constants of the last two classes can be found in chapters 19.8.3 and 19.8.4.


# 19.8.0.2 Eval() function

When you call this functionEval(..)to evaluate Gambas expressions at runtime, the gb.eval component is automatically loaded:


```
Value = Eval ( Expression AS String [ , Context AS Collection ] ) AS Variant
```



# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.8.1 Eval() function

In a “function plotter” project, problems arose at a point that had not been in view before. While the plotter of a function y = f(x), which is hard-coded in the source code


```
Public Function f(x As Float) As Float ' Das Argument ist x
  RETURN (9 / Sqr(2 * pi)) * Exp(- (x * x) / 1.66)
End
```

with zoom and shift worked well, the interactive input of the function to be drawn and the calculation of the function values proved to be a problem in order to be able to use the function plotter universally!

Figure 19.8.1.1: Density function (normal distribution)
First promising approaches emerged in connection with the direct evaluation of (Gambas) expressions. Hints and examples for the evaluation of (Gambas) expressions can be found in chapter 25.5.3.
The Gambas help for the interpreter states:
If you call the Gambas interpreter gbx3 in a terminal with the option -e, then you can evaluate an <expression> passed as a parameter and display the result:


```
Verwendung:	gbx3 -e <Ausdruck>
  Option: 	-e   einen Ausdruck auswerten
```

Here follows a tried and tested example:


```
hans@linux:~$ gbx3 -e "2.44-sin(pi/3)"
1,57397459621556
```

Here the -e option stands for the use of the function Eval(..) . When you call this function, the gb.eval component is automatically loaded:


```
Value = Eval ( Expression AS String [ , Context AS Collection ] ) AS Variant
```

The text in the Gambas help supports this view:
Eval(..) evaluates an expression and returns its value. This expression can contain almost all of Gambas' operators and subroutines. The optional context is a collection that must contain the value of each of the undefined symbols.
However, the most interesting part is the last sentence! If you look closely at the assignment rule in another function y = g(x) = e*sin(x) + x^3 - cbr(x) - pi, the algebraic expression also contains the functions sin(x), power function x^3 and the root function cbr(x) with the root exponent (1/3) known in Gambas. The symbol pi is also known! The parameter e as Euler's number and the variable x are obviously the symbols not defined above. These have to be defined p.d. via the context. This results in the following first solution approach for the calculation of the value table for the function g(x). With its value pairs, the image of the function can later be drawn iteratively in the project “Function Plotter”.
The following source code belongs to a test project that proved to realise an interactive input of a function and to use the function Evel() successfully to calculate function values. Here is the complete and sufficiently commented source code:


```
' Gambas class filePublicSubForm_Open()FMain.CenterFMain.Resizable=FalsetxbFunction.Text="e*Sin(x) + x^3 - Cbr(x) - Pi"' Default-FunctionEndPublicSubbtnComputeTOV_Click()' TOV → TableOfValuesDimyAsFloatDimContextAsNewCollectiontxaTableOfValues.ClearContext["e"]=Exp(1)' Dem Symbol e wird der Wert e=Exp(1) (= e^1)zugewiesenContext["x"]=-3' Dem Symbol x wird der Wert -3 zugewiesenRepeatTryy=Eval(txbFunction.Text, Context)' Interaktive Eingabe von f(x) in txbFunction.TextIfErrorThenMessage.Error("Das ging in die Hose...!")ReturnEndif' ERRORtxaTableOfValues.Insert(gb.Tab&Round(CFloat(Context["x"]),-3)&gb.Tab&"         "\&Round(CFloat(y),-4)&gb.NewLine)Context["x"]=Context["x"]+0.01' Dem Symbol x wird ein erhöhter Wert zugewiesenUntilContext["x"]>3.001' Abbruch, wenn das Symbol x einen Wert > 3.001 hatEndPublicSubtxbFunction_Change()txaTableOfValues.ClearEndPublicSubbtnClose_Click()FMain.CloseEnd
```


Figure 19.8.1.2: Value table - function Eval(..)
You see - it works! But I think the following extensions have to be made for use in the “function plotter” project:
The above extensions have been implemented in a project called “Funktionsplotter”, which uses several of its own classes and is described in chapter 26.


# Download

Chapter
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# 19.8.2 Class Expression

This class represents a dynamic Gambas expression. In this context, dynamic refers to the possibility of specifying one's own symbols in the expression and assigning values to these undefined symbols only at runtime of the Gambas programme.
The number of properties of the Expression class is quite manageable. Besides the three properties mentioned below, it has only one method Compile, which you will mostly use indirectly.
Table 19.8.2.1: Properties of the Expression class
The following project shows how to use the Expression class to evaluate an expression. The following concept has proved successful:
The source code consistently implements the above concept:


```
' Gambas class filePublicSubForm_Open()FMain.Center()FMain.Resizable=FalsevlbParameterA.Type=vlbParameterA.NumbervlbParameterA.SetFocus()vlbParameterB.Type=vlbParameterB.NumbervlbArgumentX.Type=vlbArgumentX.NumbervlbFunktionswert.Type=vlbFunktionswert.NumbervlbFunktionswert.ReadOnly=True'-- Initialisierung:txbExpression.Text="a*sin(x)+cos(b*x)"'-- Default-ExpressionvlbParameterA.Value=+0.125vlbParameterB.Value=-2.5vlbArgumentX.Value=0.525EndPrivateFunctionCompute(sExpressionAsString, fParameterAAsFloat, fParameterBAsFloat, fArgumentXAsFloat)AsFloatDimfFunktionswertYAsFloatDimcEnvironmentAsNewCollectionDimmyExpressionAsNewExpression' cEnvironment.Add(fParameterA, "a") '-- ALTERNATIVE' cEnvironment.Add(fParameterB, "b")' cEnvironment.Add(fArgumentX, "x")cEnvironment["a"]=fParameterA'-- Dem Symbol a wird der Wert vlbParameterA.Value zugewiesencEnvironment["b"]=fParameterB'-- Dem Symbol b wird der Wert vlbParameterB.Value zugewiesencEnvironment["x"]=fArgumentX'-- Dem Symbol x wird der Wert vlbArgumentX.Value zugewiesenmyExpression.Environment=cEnvironment
  myExpression.Text=txbExpression.TextfFunktionswertY=myExpression.ValueReturnfFunktionswertYEndPublicSubbtnComputeY_Click()vlbFunktionswert.Value=Compute(txbExpression.Text, vlbParameterA.Value, vlbParameterB.Value, vlbArgumentX.Value)EndPublicSubbtnClose_Click()FMain.Close()End
```


Figure 19.8.2.1: Calculation of the function value (function coulter)
Have you noticed that this project is quite dynamic? You can change not only the expression, but also the values of the two parameters of the function chart f(a,b,x) and the argument x. You implement simple error handling if you add the following lines to the source code:


```
...fFunktionswertY=myExpression.ValueReturnfFunktionswertY
...
```

with these lines:


```
TRYfFunktionswertY=myExpression.ValueIfERRORThenMessage.Error(Error.Where&gb.NewLine&"Fehlertext: "&Error.Text)ElseReturnfFunktionswertYEndif
```

This will give you the following error message for the expression 'a*sin(x)+cos(b*x)+c', for example:

Figure 19.8.2.2: Error message 1
and for the expression 'a/(sin(x-b))' with parameter value b=2 and argument x=2 this message:

Figure 19.8.2.3: Error message 2


# Download

Chapter & Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Controls 4



# Chapters



# ﻿19.9   Komponente gb.gsl

Die Komponentegb.gslzielt darauf ab, die meisten Features derGNUScientificLibrary umzusetzen. 
Gegenwärtig fügt sie die Unterstützung für komplexe Zahlen, Vektoren, Matrizen und Polynome ein.
Die Koeffizienten der Vektoren, Matrizen und Polynome können reelle Zahlen oder komplexe Zahlen sein. Darüber hinaus ermöglicht die Komponente die Standard-Rechenoperatoren wie zum Beispiel +, -, *, /, ^, Abs() oder die Relationen = und <> für alle diese o.a. Objekte und bietet automatische Konvertierungen zwischen ihnen. Vektoren und Polynome werden transparent zu und in Arrays umgewandelt.
Hinweis
Die Komponentegb.gslenthält die folgenden Klassen:
Beispiel für die Erzeugung einer Matrix und Anzeige der Elemente sowie der Determinante:


```
PublicSubbtnCreateMatrix_Click()DimhMatrixAsMatrixDimaRowAsArrayDimiCountAsIntegerDimvDeterminanteAsVarianthMatrix=Matrix.Identity(5,5,False)' hMatrix = New Matrix(5, 5, False) ' Alternative über ConstructorhMatrix.SetRow(0,[1.2,2.0,3.5,-4,5])hMatrix.SetRow(1,[6,-7,8,-9,0])hMatrix.SetRow(2,[11,-2,23,4,8])hMatrix.SetRow(3,[1.5,2.6,4,6.3,-3])hMatrix.SetRow(4,[-1,-2,-3,4,-33])PrinthMatrix.ToString(True)' Ausgabe mit Komma (Locale DE)ForiCount=0TohMatrix.Height–1PrinthMatrix.Row(icount)Next' iCountvDeterminante=hMatrix.Det()Print"Wert der Determinante = "; vDeterminante' Print hMatrix.Det() '' AlternativeEnd' btnCreateMatrix_Click()
```

Ausgabe in der Konsole:


```
[[1,2 2 3,5 -4 5][6 -7 8 -9 0][11 -2 23 4 8][1,5 2,6 4 6,3 -3][-1 -2 -3 4 -33]]

[1,2 2 3,5 -4 5]
[6 -7 8 -9 0]
[11 -2 23 4 8]
[1,5 2,6 4 6,3 -3]
[-1 -2 -3 4 -33]

Wert der Determinante = 21956,95
```



# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# 20.6.2 Task projects 3 and 4

The realisation of the data transmission is interesting in both projects. Although both projects send the data with the print or error statement, project 4 focuses on the serialisation and de-serialisation functions that enable the transmission of data with different native data types.


# 20.6.2.1 Project 3

Project 3 is a variant of project 1. Data is continuously sent to the (main) programme from the started task.
The day of the week, the current date and the local time for New York are calculated one after the other with a fixed clock pulse and sent to the (main) programme as a string. The clock time is passed once to the task as an argument.

Figure 20.6.2.1.1: Normal operation with analogue and digital (local) time

Figure 20.6.2.1.2: Main programme with started task
You can read the source code of the (task) classTripleTask.classin full:


```
' Gambas class fileInheritsTask' Start-Argument für die Wartezeit zwischen den drei AnzeigenPubliciWaitTimeAsIntegerPublicSubMain()DimaTagesListeAsString[]DimdTNY, dDateAsDateaTagesListe=Split("Sonntag,Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag",",")'-- Continuous but clocked output of data (Task → Programme)DodDate=Now()' ZeitstempelPrintaTagesListe[WeekDay(dDate)]&"  (Tag "&Str(WeekDay(dDate))&" der Woche)"'-- DataType = StringWaitiWaitTime' WartezeitPrintFormat$(dDate,"dd. mmmmm yyyy")'-- DataType = StringWaitiWaitTime
      dTNY=Time(DateAdd(Now, gb.Hour,-6))' NewYork-LocalTimePrint"New York:  "&Format(dTNY,"hh:nn")&" Uhr"'-- DataType = StringWaitiWaitTimeLoopEnd
```

The source code for the (main) programme is only given in excerpts:


```
PublicSubbtnTaskStart_Click()If$hTaskThen$hTask=Null'-- An existing task object is destroyed$hTask=NewTripleTaskAs"TripleTask"'-- => Task class name$hTask.iWaitTime=3'-- Assignment of a global variable in the class TripleTask...EndPublicSubTripleTask_Read(DataAsString)lblAdditionalInformations.Text=Replace(Data, gb.NewLine,"")EndPublicSubTripleTask_Error(DataAsString)lblAdditionalInformations.Text=Replace(Data, gb.NewLine,"")EndPublicSubTripleTask_Kill()SetLEDColor("red")btnTaskStopp.Enabled=FalseFMain.Text="TASK"lblAdditionalInformations.Text="Task error!"End
```



# 20.6.2.2 Project 4

At the heart of project 4 is this module:


```
' Gambas module filePublicFunctionEncode(vValueAsVariant)AsStringDimhStreamAsStreamDimsBinaryAsStringhStream=OpenStringForWrite'-- Dynamically growing bufferWrite#hStream, vValueAsVariantsBinary=Close#hStreamReturnBase64$(sBinary)'-- Newline-free codingEndPublicSubSend(vValueAsVariant)PrintEncode(vValue)EndPublicFunctionDecode(sCodeAsString)AsVariantDimsBinaryAsStringDimhStreamAsStreamDimvValueAsVariantsBinary=UnBase64$(sCode)hStream=OpenStringsBinaryForReadvValue=Read#hStreamAsVariantReturnvValueEnd
```

The module's power will only become apparent to you if you try out Project 4 intensively and send data with different data types - for example, string, boolean, float or collection - to the higher-level process in the task class.


```
' Gambas class fileInheritsTaskPublicSubMain()DoTaskIPC.Send(22/7)TaskIPC.Send(["Now":Now(),"timer":Timer()])TaskIPC.Send(["Key":"stringvalue","log2":Log(2),"YD":DateAdd(Now, gb.Day,-1),"User":User.Name])TaskIPC.Send([Pi(3),(1001/1000)^1000,10,(355/113)-Pi])TaskIPC.Send(["Produkt = ":6.66*34.78])TaskIPC.Send(6<Day(Now()))TaskIPC.Send("Task - Background process")Wait2LoopEnd
```


Figure 20.6.2.2.1: Demonstration programs
Some data changes periodically (time values), while others do not change - like the string 'Task - Background Process'.


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Selected Classes



# Chapters



# Table of Contents



# ﻿20.13   Komplexe Zahlen

Auch wenn die Verwendung von komplexen Zahlen nicht zum täglichen Rechnen mit Zahlen gehört – für bestimmte Anwendungen aus der Elektrotechnik oder der Quantenphysik sind komplexe Zahlen aber die erste Wahl. Ein Blick auf diese Seitehttp://de.wikipedia.org/wiki/Komplexe_Zahlliefert wertvolle Informationen und Grundlagenwissen.
Die Klasse Complex (gb.complex) implementiert komplexe Zahlen. In diesem Zahlenbereich werden die folgenden arithmetischen Operatoren und Funktionen: +, -, *, /, ^, =, <> und Abs() unterstützt, wobei der Absolutwert einer komplexen Zahl auch Modul genannt wird.
Eine komplexe Zahl repräsentiert einen Zeiger in der komplexen Zahlenebene. Senkrecht zum reellen Zahlenstrahl mit der Einheit 1 steht der imaginäre Zahlenstrahl im Zentrum der Ebene. Für die komplexe Zahl ist die Schreibweise z = a +bi = üblich. Dabei sind i die imaginäre Einheit i, für die i² = -1 gilt, a der Realteil und b der Imaginärteil.
Wenn einer reellen Zahl in Gambas unmittelbar ein “i” oder “I” folgt, dann wird angenommen, das es sich um eine komplexe Zahl(-Konstante) handelt. In diesem Fall wird die Komponente gb.complex automatisch geladen und fügt eine neue Complex-Klasse zum Interpreter hinzu. Ein 'i' oder 'I' allein als komplexe Zahl ohne Realteil wird als ungültiger Bezeichner erkannt! Schreiben Sie deshalb für i stets 1i. Die Schreibweise mit dem Großbuchstaben I ist offenbar gambas-spezifisch.


# 20.13.1   Eigenschaften

Die Klasse Complex verfügt über zwei Eigenschaften:
Tabelle 20.13.1.1 : Eigenschaften der Klasse Complex


# 20.13.2   Methoden

Die Klasse Complex verfügt über eine statische Methode und mehrere weitere Methoden, deren Beschreibung Sie in der nächsten Tabelle finden, wobei auf die unterschiedlichen Rückgabetypen zu achten ist:
Tabelle 20.13.2.1 : Methoden der Klasse Complex
Methode Complex.Polar()
Die statische Methode Complex.Polar( [ Abs As Float, Arg As Float ] ) As Complex gibt eine komplexe Zahl zurück. Als Argumente werden die Daten des Zeigers (Betrag Abs und Winkel Arg (Bogenmaß) gegen die positive reelle Achse) eingesetzt, der die komplexe Zahl in der komplexen Zahlenebene repräsentiert.


# 20.13.3   Erzeugen komplexer Zahlen

Es gibt mehrere Möglichkeiten komplexe Zahlen zu erzeugen:
Beispiel für die Nutzung der Methoden Polar(..), Conj(), Inv(), Copy(), Complex(..) und ToString(..):


```
Dim cZ1, cZ2 As Complex
 
 cZ1 = Complex(4, -3)
 cZ2 = Complex.Polar(4.66, Pi / 3)

 Print cZ1 + cZ2		' Summe von 2 komplexen Zahlen Z1 und Z2
 Print cZ1 - cZ2		' Differenz von 2 komplexen Zahlen Z1 und Z2
 Print cZ1 * cZ2		' Produkt von 2 komplexen Zahlen Z1 und Z2
 Print cZ1 ^ 3		' 3. Potenz der komplexen Zahl Z1
 Print Abs(cZ1)		' Betrag der komplexen Zahl Z1
 Print cZ1.Abs2()		' Quadrat des Betrages der komplexen Zahl Z1
'Winkel zwischen Zeiger von Z1 und der positiven reellen Achse (im Bogenmaß)
 Print cZ1.Arg() & String.Chr(8596) & Deg(cZ1.Arg() + 2 * Pi) & "°"		
 Print cZ1.Conj()		' Konjugiert komplexe Zahl zu Z1
 Print cZ1.Copy()		' Kopie der komplexen Zahl Z1 als neue komplexe Zahl
 Print cZ1.Inv()		' Inverse komplexe Zahl zu Z1
 Print cZ1.Real		' Real-Teil der komplexen Zahlen Z1
 Print cZ1.Imag		' Imaginär-Teil der komplexen Zahlen Z1
 Print cZ2.ToString(True)  ' Konvertierung Z2 in einen String (lokalisiert – Komma als Dezimaltrennzeichen)
 Print cZ2.ToString()      ' Konvertierung Z2 in einen String 
 Print Complex(-cZ1.Real,-cZ1.Imag) ' Komplexe Zahl aus dem invertierten Real- und Imaginär-Teil von Z1
```

Das sind die Ausgaben in der Konsole der Gambas-IDE:


```
[1] 6,33+1,03567838163548i
[2] 1,67-7,03567838163548i
[3] 21,4270351449065+9,15271352654193i
[4] -44-117i
[5] 5
[6] 25
[7] -0.64350110879328 ↔ 323.130102354156°
[8] 4+3i
[9] 4-3i
[10] 0,16+0,12i
[11] 4
[12] -3
[13] 2,33+4,03567838163548i
[14] 2.33+4.03567838163548i
[15] -4+3i
```



# 20.13.4   Beispiele

Die folgenden Beispiele sind erprobt und gewähren einen ersten Einblick in die Arbeit mit komplexen Zahlen. Im Download-Bereich finden Sie ein Projekt.


# 20.13.4.1   Beispiel 1 – Lösungen von quadratischen Gleichungen in der Normalform

Ein klassisches Beispiel ist die Berechnung der Lösungen einer quadratischen Gleichung in der allgemeinen Form a·x²+b·x+c = 0. Diese wird zuerst in die Normalform x²+p·x+q = 0 transformiert, um die Probe nach Vieta für die beiden Lösungen x1 und x2 mit x1+x2 = -p und x1·x2 = q einfach zu gestalten. Danach bestimmen Sie deren Lösungsvielfalt mit Hilfe der Diskriminante D mit D = (p²/4-q) und kommen auf genau 3 unterscheidbare Fälle:
Anschließend müssen Sie – je nach Wert der Diskriminante D – jeweils genau 2 Lösungen berechnen; entweder die zwei reellen oder die zwei komplexen. Mit dem Einsatz der Klasse gb.complex können Sie den o.a. Ansatz schnell umsetzen. Hier ein Auszug aus dem verwendeten Quelltext:


```
PublicFunctionCalculate(fPAsFloat, fQAsFloat)AsVariant[]DimfDiskriminanteAsFloat=0DimfX1, fX2AsFloatDimfXC1, fXC2AsComplex 
 
  fDiskriminante=(fP*fP)/4-fQSelectSgn(fDiskriminante)Case1' D>0fX1=-fP/2-Sqr(fDiskriminante)fX2=-fP/2+Sqr(fDiskriminante)Return[fX1, fX2]Case0' D=0fX1=-fP/2fX2=fX1Return[fX1, fX2]CaseElse' D<0fXC1=Complex(-fP/2,-Sqr(-fDiskriminante))fXC2=fXC1.Conj()Return[fXC1, fXC2]EndSelectEnd' Calculate(fP As Float, fQ As Float) As Variant[]
```



```
PublicSubbtnQG_Click()DimvElementAsVariantDimiCountAsInteger=1' Randomize' For Each vElement In Calculate(Rnd(-2, 2), Rnd(-9, 9)) ' Zufallswerte für die ParameterForEachvElementInCalculate(-4,13)Print"x"&Str(iCount)&" = "&vElementInciCountNext' vElement' Alternative:' Print "x1 = " & Calculate(-4, 13)[0]' Print "x2 = " & Calculate(-4, 13)[1]End' btnQG_Click()
```

Die Lösungen der quadratischen Gleichung x²-4·x+13 = 0 sind die zwei konjugiert komplexen Zahlen:


```
x1 = 2-3i , x2 = 2+3i
```

Da die reellen in den komplexen Zahlen enthalten sind, könnte man statt Variant[] auch Complex[] zurückgeben. Damit wird der Quelltext etwas reduziert. In den ersten beiden Fällen haben dann die komplexen Nullstellen einen Imaginärteil von 0.


```
' Gambas module filePublicSubMain()' Diskriminante positivPrint"Lösungen von x²+4x-21"PrintRoots(4,-21)' Diskriminante 0Print"Lösungen von x²-4x+4"PrintRoots(-4,4)' Diskriminante negativPrint"Lösungen von x²+4x+21"PrintRoots(4,21)End' Main()PublicSubPrintRoots(fPAsFloat, fQAsFloat)' Es sind immer *genau* zwei komplexe Nullstellen (Fundamentalsatz der Algebra)Print"----------------------------"WithCalculateRoots(fP, fQ)Print"z1 = "; .[0]Print"z2 = "; .[1]EndWithPrintEnd' PrintRoots(..)PublicFunctionCalculateRoots(fPAsFloat, fQAsFloat)AsComplex[]' Array komplexer Zahlen (!)DimfDAsFloat' DiskriminanteDimzRootAsComplex' Komplexe WurzelnfD=(fP^2)/4-fQ
  zRoot=NewComplex(Sqr(0.5*(Abs(fD)+fD)),Sqr(0.5*(Abs(fD)-fD)))Return[-fP/2+zRoot,-fP/2-zRoot]End' CalculateRoots(..)
```

Ausgabe der Lösungen:


```
Lösungen von x²+4x-21
----------------------------
z1 = 3
z2 = -7

Lösungen von x²-4x+4
----------------------------
z1 = 2
z2 = 2

Lösungen von x²+4x+21
----------------------------
z1 = -2+4,12310562561766i
z2 = -2-4,12310562561766i
```



# 20.13.4.2   Beispiel 2 – Einsatz einer eigenen Funktion IsComplex(..)

Für die interaktive Eingabe einer komplexen Zahl können Sie einen String aus einer geeigneten Eingabe-Komponente – wie zum Beispiel einer TextBox – auslesen. Es ist vorteilhaft, vor der Konvertierung String « Komplexe Zahl zu prüfen, ob die eingelesene Zeichenkette auf das Muster a+bi passt, wobei a und b reelle Zahlen sind.  Mit der Funktion IsComplex(string) können Sie prüfen, ob es sich bei der eingelesenen Zeichenkette um eine komplexe Zahl a+bi handelt. Mit Erfolg können Sie die neue – seit Gambas 3.5 verfügbare – Syntax (→ If sInput MATCH sPattern Then) der Komponentegb.pcreeinsetzen:


```
PublicFunctionIsComplex(sInputAsString)AsBooleanDimsPatternAsStringsInput=Trim(sInput)IfsInput="0-0i"OrsInput="0+0i"ThenReturnFalse' Sonderfälle behandeln ...sPattern="^([-+]?[0-9]+(,[0-9]+)?)[-+][0-9]+(,[0-9]+)?[i]$"IfsInput Match sPatternThenReturnTrueElseReturnFalseEndif' Match PatternEnd' Function IsComplex(sInput As String) As Boolean
```

Es ist von Vorteil, wenn Sie einEingabe-AlphabetalsMenge der zulässigen Eingabe-Zeichenverwenden, denn es reduziert mögliche Fehleingaben:


```
PublicSubtxbInputComplex1_KeyPress()CheckInput("+-,i0123456789")End' txbInputComplex_KeyPress()PublicSubCheckInput(sAllowedAsString)' Idee von Charles Guerin + Benoît MinisiniDimiAllowAsInteger=0IfKey.Code=Key.LeftTheniAllow=1IfKey.Code=Key.RightTheniAllow=1IfKey.Code=Key.BackSpaceTheniAllow=1IfKey.Code=Key.DeleteTheniAllow=1IfKey.Code=Key.EndTheniAllow=1IfKey.Code=Key.HomeTheniAllow=1IftxbInputComplex1.TextAnd(Key.Code=Key.EnterOrKey.Code=Key.Return)TheniAllow=1EndifIfKey.TextAnd(InStr(sAllowed,Key.Text)>0)TheniAllow=1IfiAllow=0ThenStopEventEnd' CheckInput(sAllowed As String)
```

Die KonvertierungString → Komplexe Zahlerfolgt mit der Funktion ValComplex(sInput As String), die als Funktionswert eine komplexe Zahl liefert, wennsInputals komplexe Zahl interpretiert werden kann:


```
PublicFunctionValComplex(sInputAsString)AsComplexDimcomplexNumberAsComplexDimiCountAsIntegerDimsReal, sImaginaryAsStringsInput=Trim(sInput)ForiCount=Len(sInput)To1Step-1' Invertierte IterationIf(Mid(sInput, iCount,1)="+")Or(Mid(sInput, iCount,1)="-")ThensReal=Left(sInput, iCount-1)sImaginary=Mid(sInput, iCount,Len(sInput)-iCount)complexNumber=Complex(Val(sReal),Val(sImaginary))ReturncomplexNumberEndif' + oder - ?Next' iCountEnd' Function ValComplex(sInput As String) As Complex
```

Mit den beiden vorgestellten Funktionen können Sie prüfen, ob eine eingelesene Zeichenkette formal eine komplexe Zahl a+bi repräsentiert und anschließend die valide Zeichenkette in eine komplexe Zahl konvertieren und nach Bedarf in einer geeigneten Variablen speichern.


# 20.13.4.3   Beispiel 3 – Rechnen mit komplexen Zahlen


Abbildung 20.13.4.3.1: Test-Programm zum Rechnen mit komplexen Zahlen
Der folgende Quelltext-Ausschnitt zeigt Ihnen den Einsatz der beiden vorgestellten FunktionenIsComplex(..)undValComplex(..)in zwei Varianten:


```
PublicSubbtnConvert_Click()IftxbInputComplex1.TextThentxbOutputComplex.ClearIfIsComplex(txbInputComplex1.Text)=TrueThentxbOutputComplex.Text=ValComplex(txbInputComplex1.Text).ToString(True)ElseMessage.Error("Der Eingabe-String kann\nnicht\nals komplexe Zahl interpretiert werden!")txbInputComplex1.SetFocusEndif' IsComplex(..) ?Endif' txbInputComplex.TextEnd' btnConvert_Click()
```

Hier eine Variante zum o.a. Quelltext-Ausschnitt, in der die Funktion IsComplex(..) nicht genutzt wird. Dafür kommt die Try-Anweisung aus dem Fehler-Management von Gambas zum Einsatz, um Fehler abzufangen. Der tritt mit Sicherheit genau dann auf, wenn der Eingabe-String nicht als komplexe Zahl interpretiert werden kann:


```
PublicSubbtnConvert_Click()IftxbInputComplex1.TextThentxbOutputComplex.ClearTrytxbOutputComplex.Text=ValComplex(txbInputComplex1.Text).ToString(True)IfErrorThenMessage.Error("Der Eingabe-String kann\nnicht\nals komplexe Zahl interpretiert werden!")txbInputComplex1.SetFocusEndif' ERROR ?Endif' txbInputComplex.TextEnd' btnConvert_Click()
```

Das vollständige Projekt 'Complex' finden Sie im Download-Bereich.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# ﻿23.1.1 Klassen Color

Diese statische KlasseColor (gb.qt4)hat Eigenschaften, welche die System-Farben zurückgeben. Beachten Sie, dass in Gambas neben der Klasse Color (gb.qt4) auch eine KlasseColor (gb.image)existiert. Diese statische Klasse Color (gb.image) definiert Konstanten vordefinierter Farben und enthält einige nützliche Methoden, um mit Farben umzugehen. Es ist so, dass in Color (gb.image) die angesprochenen Farb-Konstanten und die nützlichen Methoden sind und in Color (gb.qt4) die Systemfarben. Die Klasse Color (gb.image) enthält Konstanten und Methoden, dienichtvon bestimmten Bibliotheken abhängen. Die Konstanten liegen im RGB-Format vor. Die Methoden nutzen von Minisini geschriebene oder adaptierte Algorithmen. DieSystemfarbenhingegen sind an das aktuelle System gebunden und werden vom aktuellen Toolkit bereitgestellt. Die Klasse Color (gb.qt4) muss also in der gb.qt4-Komponente enthalten sein, um auf diese Farbkonstanten zugreifen zu können.


# 23.1.1.1 Klasse Color (gb.qt4) – Eigenschaften

Es werden diese (statischen) Eigenschaften in der folgenden Tabelle beschrieben →Background, ButtonBackground,  ButtonForeground, Foreground, LightBackground, LightForeground, SelectedBackground, SelectedForeground, TextBackground, TextForeground, TooltipBackgroundundTooltipForeground:
Tabelle 23.1.1.1.1: Farbkonstanten Klasse Color (gb.qt4)


# 23.1.1.2 Klasse Color (gb.image) – Konstanten

Diese Klasse Color (gb.image) ist statisch und definiert diese Farb-Konstanten:
Tabelle 23.1.1: Farbkonstanten


# 23.1.1.3 Klasse Color (gb.image) – Methoden

Die zahlreichen Methoden der Klasse Color (gb.image) ermöglichen dem Benutzer eine qualifizierte Arbeit mit Farben in Gambas.
Tabelle 23.1.1.3.1: Methoden der Klasse Color (gb.image)


# 23.1.1.4 Beispiele für den Einsatz von Methoden der Klasse Color (gb.image)

Es werden in den ausgewählten Beispielen die Originalfarben und die geänderten Farben in zwei ColorButton oder drei ColorChooser angezeigt sowie der verwendete Quelltext angegeben.
Beispiel 1 – Color.Darker(..)



```
PublicSubbtnDarker_Click()DimiSourceColor, iResultColorAsIntegeriSourceColor=ColorButton1.ColoriResultColor=Color.Darker(iSourceColor)ColorButton2.Color=iResultColor' ColorButton2.Color = Color.Darker(ColorButton1.Color) ' KurzversionEnd' btnDarker_Click()
```

Beispiel 2 – Color.Lighter(..)



```
PublicSubbtnLighter_Click()ColorButton2.Color=Color.Lighter(ColorButton1.Color)End' btnLighter_Click()
```

Beispiel 3 – Color.Desaturate(..)



```
PublicSubbtnDesaturate_Click()ColorButton2.Color=Color.Desaturate(ColorButton1.Color)End' btnDesaturate_Click()
```

Beispiel 4 – Color.Distance(..)



```
PublicSubbtnDistance_Click()DimiColor1, iColor2AsIntegerDimfDistanceAsFloatiColor1=ColorButton1.ColoriColor2=ColorButton2.ColorfDistance=Color.Distance(iColor1, iColor2)PrintfDistanceEnd' btnDistance_Click()
```

Mit den beiden Farben Rot (Color.RGB(255,0,0)) und Grün (Color.HSV(120,255,255)) ergibt sich ein Distance-Wert von 0,70710678118655. Ist das nicht schön! Der Autor jedenfalls ist begeistert – kann aber mit diesem Wert nichts anfangen.
Beispiel 5 – Color.Merge(..)



```
PublicSubbtnMerge_Click()DimiColor1, iColor2, iResultColorAsIntegerDimfWeightAsFloat' Weight is the relative weight of the first color, between 0 and 1.iColor1=ColorButton1.ColorfWeight=0.3iColor2=ColorButton2.ColoriResultColor=Color.Merge(iColor1, iColor2, fWeight)' iResultColor = Color.Merge(iColor1, iColor2) ' ---> fWeight = 0.5 (Default)ColorButton3.Color=iResultColorEnd' btnMerge_Click()
```

Beispiel 6 – Color.Gradient(..)



```
PublicSubbtnGradient_Click()DimiColor1, iColor2, iResultColorAsIntegerDimfWeightAsFloatiColor1=ColorButton1.ColoriColor2=ColorButton2.Color' fWeight = 0.0 ' Sonderfall 1' fWeight = 1.0 ' Sonderfall 2fWeight=0.4iResultColor=Color.Gradient(iColor1, iColor2, fWeight)' iResultColor = Color.Gradient(iColor1, iColor2) ' ---> fWeight = 0.5 (Default)ColorButton3.Color=iResultColorEnd' btnGradient_Click()
```

Beispiel 7 – Color.Blend(..)



```
PublicSubbtnBlend_Click()DimiSourceColor, iDestinationColor, iResultColorAsIntegeriSourceColor=ColorButton1.ColoriSourceColor=Color.SetAlpha(iSourceColor,190)ColorChooser1.SelectedColor=iSourceColor
 
  iDestinationColor=ColorButton2.ColoriDestinationColor=Color.SetAlpha(iDestinationColor,90)ColorChooser2.SelectedColor=iDestinationColor
 
  iResultColor=Color.Blend(iSourceColor, iDestinationColor)PrintColor.GetAlpha(iResultColor)' Alternative: Print Color[iResultColor].AlphaColorChooser3.SelectedColor=iResultColorEnd' btnBlend_Click()
```



# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# ﻿23.1.2   Klasse ColorInfo

Die Klasse ColorInfo (gb.image) präsentiert u.a. detaillierte Informationen zu einer Farbe. Die Klasse verfügt über die EigenschaftenAlpha, Color, Red, Green, Blue, Hue, Saturation undValue, die Sie auslesen oder setzen können. Der Datentyp für alle Eigenschaften ist Integer.


# 23.1.2.1   Eigenschaften

In der folgenden Tabelle werden die o.a. Eigenschaften der Klasse beschrieben:
Tabelle 23.1.2.1.1 : Eigenschaften Klasse ColorInfo (gb.image)


# 23.1.2.2   Beispiele

Sie bekommen für eine beliebige FarbeiColormit


```
Color[iColor]
```

ein ColorInfo-Objekt, von welchem Sie einerseits die RGB- und HSV-Informationen des verwendeten Farbraums sowie den Wert für den Alpha-Kanal auslesen können oder andererseits die RGB- und HSV-Farbanteile setzen. 
Anschließend müssen Sie die geänderte Farbe aus den Farb-Anteilen generieren, wobei die nicht geänderten Farb-Anteile entweder mitColor[iColor].GreenundColor[iColor].Blueoder mithColorInfo.GreenundhColorInfo.Blueausgelesen und übernommen werden:


```
PublicSubbtnColorChange_Click()DimiColorAsIntegerDimhColorInfoAsColorInfo
 
  iColor=CChooser1.SelectedColor' Synonym für CChooser1.SelectedColor ist CChooser1.ValuehColorInfo=Color[iColor]' Ein ColorInfo-Objekt wird zurückgegeben' Print Color[iColor].Red ' Rot-Farbanteil auslesen mit dem []-Operator' Print hColorInfo.Red ' Rot-Farbanteil auslesen (Alternative)hColorInfo.Red=180' Rot-Farbanteil ändernhColorInfo.Alpha=140' Alpha-Wert ändern' Print hColorInfo.Red ' Aktuellen Rot-Farbanteil auslesen' Print hColorInfo.Alpha ' Aktuellen Alpha-Wert auslesenCChooser1.Value=Color.RGB(hColorInfo.Red, Color[iColor].Green, hColorInfo.Blue, hColorInfo.Alpha)' Gute Alternative:' CChooser1.Value = hColorInfo.ColorEnd' btnColorChange_Click()
```

Hinweis:Die komplexen Methoden SetRGB(..) und SetHSV(..) der Klasse Color (gb.image) – mit deren Hilfe Sie den RGB(A)-Farbanteil oder HSV(A)-Farbanteil für jede Farbe einzeln(!) ändern –  sind schneller und deshalb vorzuziehen:


```
PublicSubbtnSetRGB_Click()DimiColorAsIntegeriColor=CChooser1.SelectedColorCChooser1.SelectedColor=Color.SetRGB(iColor,180, Color[iColor].Green, Color[iColor].Blue,140)End' btnSetRGB_Click()
```



# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# ﻿23.1.3   ColorButton

Farb-Werte als valide Daten in einem Programm erfordern sichere Eingaben. Für die direkte, aber dezente Eingabe von Farb-Werten steht die Komponente ColorButton zur Verfügung. Mit dem Color-Button (gb.form) kann der Benutzer eine Farbe auswählen. Die Komponente hat zwei bemerkenswerte Eigenschaften und verfügt nur über ein spezielles Ereignis.


# 23.1.3.1   Eigenschaften und Ereignis

Ein ColorButton hat ColorButton.Color (Typ Integer) als dominante Eigenschaft, dessen Wert Sie auslesen oder setzen können. Die Eigenschaft ColorButton.Value ist ein Synonym für die Eigenschaft ColorButton.Color.
Das Ereignis ColorButton_Change() wird ausgelöst, wenn Sie die Farbe im Farb-Dialog ändern.

Abbildung 23.1.3.1.1: Sichere Eingabe von Farben → ColorButton
Nach einem Klick auf den ColorButton öffnet sich ein Farbauswahl-Dialog. Sie können die Farbe auswählen sowie den Farbwert anschließend mit OK übernehmen.

Abbildung 23.1.3.1.2: ColorButton-Dialog
Im folgenden Quelltext wird der Farbwert hexadezimal angezeigt (→ Abbildung 23.1.3.1.1) und in einer (globalen) Variablen iFarbWert gespeichert. Damit kann der Farbwert im Projekt weiter verwendet werden:


```
' Gambas class filePubliciFarbWertAsIntegerPublicSubForm_Open()FMain.CenterFMain.Resizable=FalsePictureBox1.Stretch=TruePictureBox1.Picture=Picture["Symbols/color.png"]ColorButton.Color=Color.OrangetxtColor.Text="&H"&Hex(ColorButton.Color,6)End' Form_Open()PublicSubbtnClose_Click()FMain.CloseEnd' btnClose_Click()'******************************************************PublicSubColorButton_Change()iFarbWert=ColorButton.ColortxtColor.Text="&H"&Hex(ColorButton.Color,6)End' ColorButton_Change()
```



# 23.1.3.2   Einsatz ColorButton

Im Gambas-Beispiel Editor werden zwei ColorButton zur Festlegung der Text-Farbe und zur Festlegung der Text-Hintergrundfarbe eingesetzt.
In der Prozedur Form_Open() erfolgt die Initialisierung der Text-Farbe und der Text-Hintergrundfarbe:


```
Object.Lock(ColorButton1)Object.Lock(ColorButton2)ColorButton1.Color=TextEdit1.Format.ColorColorButton2.Color=TextEdit1.Format.BackgroundObject.UnLock(ColorButton1)Object.UnLock(ColorButton2)
```

Änderungen der Text-Farbe und der Text-Hintergrundfarbe werden im Editor-Quelltext so realisiert:


```
PublicSubColorButton1_Change()TextEdit1.Format.Color=ColorButton1.ColorEndPublicSubColorButton2_Change()TextEdit1.Format.Background=ColorButton2.ColorEnd
```



# 23.1.3.3   Alternative ColorButtonBox

Bei einem ColorButton sieht man im Original nur die ausgewählte Farbe. Nutzt man dagegen eine ButtonBox, so können Sie den (hexadezimalen) Farbwert in der TextBox lesen und die Farbe im umgefärbten Icon sehen:

Abbildung 23.1.3.3.1: ColorButtonBox in Aktion
Der Quelltext ist recht einfach:


```
PublicSubColorButtonBox_Click()DimpicColorAsPictureIfDialog.SelectColor()ThenColorButtonBox.Text="Farbwert"ColorButtonBox.Picture=Picture["Symbols/color.png"]Else' ColorButtonBox.Text = Dialog.Color ' Anzeige dezimalColorButtonBox.Text="&H"&Hex(Dialog.Color,6)picColor=NewPicture(16,12,False)picColor.Fill(Dialog.Color)ColorButtonBox.Picture=picColorEndif' Dialog.SelectColor() ?End' ColorButtonBox_Click()
```

Es wird der originale Farbauswahl-Dialog (→ Dialog.SelectColor) des ColorButton eingesetzt.


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# ﻿23.1.4   ColorChooser

Die KomponenteColorChooser (gb.form)ist ein Farben-Wähler. Sie erlaubt dem Benutzer, eine Farbe aus dem RGB-Farbraum oder dem HSV-Farbraum oder aus einer Palette vordefinierter Farben auszuwählen.

Abbildung 23.1.4.1: ColorChooser
Auf dem ColorChooser gibt es rechts oben neben der Farben-Palette einenToggleButtonmit dem Tooltipp-Text “Farbraster folgen”. Ist der Toggle-Button aktiviert und man löst das MouseMove-Event aus, das heißt man bewegt die Maus bei gedrückter linker Maustaste auf der so genannten Farbkarte – dem Rechteck, in dem alle möglichen Farben mit der Maus (Mauszeiger Cross +) wählbar sind –  so bewegt man sich auf einem 15-Pixel-Raster. Wenn der Button deaktiviert ist, bewegt man sich pixelweise. Beachten Sie: Die Farbkarte erscheint erst ab einer Mindesthöhe des ColorChoosers (in Abhängigkeit vom Wert der Eigenschaften .ShowAlpha und .ShowColorMap).


# 23.1.4.1   Eigenschaften ColorChooser

Ausgewählte Eigenschaften der Komponente ColorChooser werden in der folgenden Tabelle beschrieben:
Tabelle 23.1.4.1.1: ColorChooser-Eigenschaften
So können Sie zum Beispiel die Start-Farbe im ColorChooser einstellen:


```
ColorChooser1.Value=Color.RGB(220,20,180)ColorChooser1.SelectedColor=Color.HSV(312,231,220)ColorChooser1.Value=&HDC1418
```

Die Anzeige des Farbwertes in der ButtonBox im ColorChooser erfolgt stets inhexadezimalerSchreibweise!


# 23.1.4.2   Ereignisse ColorChooser

Die KomponenteColorChooserbesitzt nur 2 spezifische Ereignisse – Activate und Change.
ActivateDas Ereignis wird ausgelöst, wenn der User doppelt auf eine Farbe klickt.
ChangeDas Change-Ereignis wird jedes Mal ausgelöst, wenn sich die ausgewählte Farbe ändert.
Sie ändert sich, wenn Sie


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# ﻿23.1.5   Arbeit mit Farben

In diesem Kapitel erfahren Sie exemplarisch, wie Sie in Gambas die Klassen Color (gb.image), Color (gb.qt4) und ImageStat (gb.image) einsetzen, um
Die Reihenfolge der Anwendungen widerspiegelt keine Rangfolge. Farbe und Farbwert werden synonym verwendet.


# 23.1.5.1   Farbwerte ermitteln

Folgende Klassen verfügen über die Farb-Eigenschaften Background und Foreground, die Sie auslesen oder setzen können:
Button, ButtonBox, CheckBox, ColorButton, ColorChooser, ColumnView, ComboBox, Container, Control, DateBox, DateChooser, Dial, DirChooser, DirView, DrawingArea, Editor, Embedder, Expander, FMain, FileChooser, FileProperties, FileView, FontChooser, Form, Frame, GridView, HBox, HPanel, HSplit, IconPanel, IconView, ImageView, LCDLabel, LCDNumber, Label, ListBox, ListContainer, ListView, MaskBox, MenuButton, MovieBox, Panel, PictureBox, ProgressBar, RadioButton, ScrollArea, ScrollBar, ScrollView, Separator, SidePanel, Slider, SliderBox, SpinBox, TabPanel, TabStrip, TableView, TextArea, TextBox, TextEdit, TextLabel, ToggleButton, ToolButton, ToolPanel, TrayIcon, TreeView, UserContainer, UserControl, VBox, VPanel, VSplit, ValueBox, Window, Wizard, _IconPanelContainer, _Split, _TabPanelContainer, _TreeView, _WizardContainer.


```
iColor=ColorButton.ColoriColor=PictureBox1.Picture.Image[Mouse.X,Mouse.Y]iColorHex=Hex(Color.Background,6)
```



# 23.1.5.2   Farben zuweisen

Farben aus den beiden Farbräumen RGB und HSV können Sie unmittelbar zuweisen oder als sichere Eingaben über ColorButton sowie ColorChooser oder den direkten Aufruf des Farbauswahl-Dialogs Dialog.SelectColor(). Genauso zuverlässig ist die Verwendung von Farb-Konstanten. Die Farbwerte (Datentyp Integer) können Sie als dezimale oder hexadezimale Zahl schreiben. Der hexadezimalen Zahl ist der Präfix & oder &H oder &h voranzustellen.


```
Textarea.Background=Color.SelectedBackgroundTextarea.Background=&H86ABD9Textarea.Background=8825817Textarea.Background=Color.RGB(134,171,217)' » Rot: 86→ 134, Grün: AB→ 171, Blau: D9→ 217Textarea.Background=Color.HSV(213,97,217)iBGColor=Color.RGB(134,171,217)' Farbwert generierenTextarea.Background=iBGColor' Farbwert zuweisenTextarea.Foreground=Color.Red
```



# 23.1.5.3   Farben analysieren

Bei einer Farbanalyse interessieren sowohl der Farbwert als auch die Rot-Grün-Blau-Farbanteile und optional auch der Alpha-Wert. Sie können die Klassen Color (gb.image) und ColorInfo (gb.image) nutzen, um die aufgeführten Farbinformation im interessierenden Farbraum (RGBA und HSVA) zu ermitteln. 
Setzen Sie die KlasseColorInfoein, dann ist es ein guter Plan, mit einemObjekt vom Typ ColorInfozu arbeiten. Es wird davon ausgegangen, dass die zu analysierende Farbe in der Variablen iColor in der Analyse-Prozedur bereitgestellt wird (→ ColorChooser) und die Farbanteile in iRed, iGreen, IBlue, IHue, iSaturation, iValue sowie iAlpha.


```
DimiColorAsIntegerDimhColorInfoAsColorInfoDimiRed, iGreen, iBlue, iHue, iSaturation, iValue, iAlphaAsIntegeriColor=ColorChooser1.SelectedColor' Variante 1 im RGB-Farbraum hilft immer ...iRed=CInt(iColor/256/256)Mod256iGreen=CInt(iColor/256)Mod256iBlue=iColorMod256' Variante 2 – Sie nutzen den []-Operator der Color-KlasseiRed=Color[iColor].Red' Rot-Farbanteil ausleseniGreen=Color[iColor].Green' Green-Farbanteil ausleseniBlue=Color[iColor].Blue' Blau-Farbanteil ausleseniAlpha=Color[iColor].Alpha' Alpha-Wert ausleseniHue=Color[iColor].HueiSaturation=Color[iColor].SaturationfValue=Color[iColor].Value' Variante 3 – Klasse ColorInfohColorInfo=Color[iColor]' Ein ColorInfo-Objekt wird zurückgegebeniRed=hColorInfo.RediGreen=hColorInfo.GreeniBlue=hColorInfo.BlueiAlpha=hColorInfo.AlphaiHue=hColorInfo.HueiSaturation=hColorInfo.SaturationfValue=hColorInfo.Value' Variante 3b' Möchten Sie keine Variable für hColorInfo anlegen, ist auch die Verwendung von WITH denkbarWithColor[iColor]iRed=.RediRed+=20' Auch Zuweisungen funktionieren hier wie erwartet.Red=iRed' Am Ende kann die veränderte Farbe zugewiesen werdenColorChooser1.SelectedColor=.ColorEnd' With
```



# 23.1.5.4   Farbpaletten generieren

Eine Farb-Palette ist eine Auswahl bestimmter Farben aus dem verfügbaren Farbraum. Zwei Farbpaletten und deren Generatoren werden vorgestellt: Palette mit Grautönen und eine Palette websicherer Farben.
Die Palette der Grautöne generieren Sie mit diesem Quelltext, bei der die RGB-Farbanteile stets den gleichen Wert haben:


```
PublicSubbtnSetGrayPalette_Click()DimpanStartX, panX, panY, iRow, iColumn, iCountAsIntegerDimpPanelAsPanelpanStartX=424panX=panStartX 
  panY=16iCount=0ForiRow=1To16ForiColumn=1To16pPanel=NewPanel(FMain)pPanel.X=panX 
          pPanel.Y=panY 
          pPanel.H=12pPanel.W=12pPanel.Background=Color.RGB(iCount, iCount, iCount)panX+=16InciCountNext' iColumnpanX=panStartX 
      panY+=16Next' iRowEnd' btnSetGrayPalette_Click()
```

Hier das Ergebnis:

Abbildung 23.1.5.4.1: Farbpalette Grautöne
Hier der Quelltext für die websicheren Farben …


```
PublicSubbtnSetWebFarbPalette_Click()DimR, G, B, panStartX, panStartY, panX, panY, iCountAsIntegerDimpPanelAsPanelpanX=16panStartY=16panY=panStartYForR=0To255Step51ForG=0To255Step51ForB=0To255Step51pPanel=NewPanel(FMain)pPanel.X=panX 
          pPanel.Y=panY 
          pPanel.H=12pPanel.W=12pPanel.Background=Color.RGB(R, G, B)panY+=16Next' BluepanY=panStartY 
      panX+=16Next' GreenpanY=panStartY 
    panX+=16Next' RedEnd' btnSetWebFarbPalette_Click()
```

… und so sehen die 216 (6x6x6) Farben aus:

Abbildung 23.1.5.4.2: Web-Farb-Palette


# 23.1.5.5   Bestimmung der Farbtiefe eines Bildes

Nachhttp://www.e-teaching.org/wird 'Farbtiefe' so festgelegt: “Die Farbtiefe gibt an, wie viele unterschiedliche Farbstufen für jeden einzelnen Bildpunkt einer Grafik zur Verfügung stehen. Da die “Feinheit” der Abstufungen davon abhängt, wie viel Speicherplatz pro Bildpunkt verwendet wird, gibt man die Farbtiefe in Bits an. Mit 8 Bit lassen sich z. B. 256 Farbnuancen für einen Farbkanal unterscheiden. Eine Farbe entsteht dabei durch Mischung mehrere Farbkanäle eines Farbraumes. Bei Computergrafiken wird dabei üblicherweise der RGB -Farbraum verwendet, in dem sich Farben durch additive Mischung der drei Grundfarben Rot, Grün und Blau zusammensetzen.”


```
PublicSubbtnGetDepth_Click()DimhImageStatAsImageStat
 
  hImageStat=ImageStat("Images/color.png")' BildpfadPrint"Farbtiefe = "&hImageStat.Depth&" Bits"Print"Farbtiefe = "&ImageStat("Images/color.png").Depth&" Bits"' Klasse ImageStat (gb.image)' Wechsel der Klasse!Print"Farbtiefe = "&PictureBox1.Picture.Image.Depth&" Bits"' Klasse Image (gb.image)End' btnGetDepth_Click()
```



# 23.1.5.6   Farben mischen

Im Kapitel23.1.1 Klassen Colorfinden Sie weitere Hinweise für das Mischen von Farben sowie deren Veränderung:


```
PublicSubbtnMerge_Click()DimfWeightAsFloatfWeight=0.3ColorButton3.Color=Color.Merge(ColorButton1.Color, ColorButton2.Color, fWeight)End' btnMerge_Click()
```



# 23.1.5.7   Farb-Manipulationen für ein Bild-Pixel

Mit diesem Quelltext lesen Sie Farbinformationen für ein Bild-Pixel aus und setzen eine neue Farbe für das selektierte Pixel. Die neue Farbe können Sie in einem Farbauswahl-Dialog (ColorButton) festlegen. Das Projekt finden Sie im Download-Bereich.


```
' Gambas class filePublicSubForm_Open()FMain.CenterFMain.Resizable=FalseColorButton1.Color=Color.WhiteEnd' Form_OpenPublicSubGetSetPixelColor(xAsInteger, yAsInteger)DimiColor, hColorAsIntegerDimhImageAsImage' Print "Mouse.X = " & Mouse.X' Print "Mouse.Y " & Mouse.Y' GetPixelColoriColor=PictureBox1.Picture.Image[x, y]' Print "Aktuelle Pixel-Farbe = " & iColor' Print "Rot-Anteil  = " & Color[iColor].Red' Print "Grün-Anteil = " & Color[iColor].Green' Print "Blau-Anteil = " & Color[iColor].Blue' SetPixelColor' Konvertieren nach Image, da nur die Image-Klasse den Zugriff auf Pixel gestattet.hImage=PictureBox1.Picture.Image' Pixel-Farbe setzen -> Block-Pixel aus 9 PixelnhColor=ColorButton1.ColorIfx>1Andy>1Fori=-1To1Fork=-1To1hImage[x+i, y+k]=hColorNext' kNext' iEndif' x > 1 And y > 1 ?' Verändertes Image wieder in ein Picture umwandeln und in die PictureBox setzenPictureBox1.Picture=hImage.PictureEnd' GetSetPixelColor(x As Integer, y As Integer)PublicSubPictureBox1_MouseDown()GetSetPixelColor(Mouse.X,Mouse.Y)End' PictureBox1_MouseDown()PublicSubPictureBox1_MouseMove()IfMouse.Left=TrueThenGetSetPixelColor(Mouse.X,Mouse.Y)Endif' Mouse.Left = True ?End' PictureBox1_MouseMove()PublicSubbtnClose_Click()FMain.CloseEnd' btnClose_Click()
```

Sie können mit einem Mausklick ein Pixel – genauer ein Blockpixel aus 9 einzelnen Pixeln – umfärben (grüne Punkte), wobei das Block-Pixel nur den Effekt hervorheben soll. 
Mit gedrückter linker Maustaste können Sie auf dem Bild mit einem 3Pixelx3Pixel-Pinsel malen (gelbe Linie). 
Sie können sich die (absoluten) Maus-Koordinaten (bezogen auf die PictureBox) und die Farbinformationen des Originalpixels in der Konsole ausgeben lassen.

Abbildung 23.1.5.7.1: Originalbild und manipuliertes Bild


# Download

Artikel
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.2.0 Description of the Border and Font classes and the control element

In the following three sections, you will be introduced to the two classes Border and Font as well as the FontChosser control element:

Figure 23.2.0.1: Font chooser


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.2.1 Border class

The static Border class provides constants that are used to define the border property of many controls, provided they have a Border property:
Table 23.2.1: Border properties
Some controls have a Border property that only allows you to specify whether a border is drawn or not. For others, the border property can be used to define the style of the border in 5 variants. If a border is set, you can specify whether the border is fixed or can be changed at runtime.
Examples:


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.2.2 Font class (gb.qt4)

This class is static and provides several font properties and methods. The most important font properties are presented first, which are used
Table: 23.2.2.1 Description of selected font properties
Table: 23.2.2.2 Description of the font styles


# 23.2.2.1 Specification of font properties

Defining font properties or changing them for a component or text in a drawing is always carried out in full. Specified font properties overwrite the default values. If specifications are missing, the corresponding default values apply.
1st variant:


```
TextArea1.Font.Name = "Verdana"
TextArea1.Font.Size = 22
TextArea1.Font.Bold = TRUE
TextArea1.Font.Italic = FALSE    '-- Can also be omitted because default value
TextArea1.Font.Underline = FALSE '-- Can also be omitted because default value
```

2nd variant:
The compact assignment TextArea1.Font = Font[“-3,Italic”] is therefore equivalent to:


```
TextArea1.Font.Name = "Sans Serif" 	'-- Standard
TextArea1.Font.Size = 6 		'-- Set to -3, standard size 9 is overwritten
TextArea1.Font.Bold = FALSE 		'-- Standard
TextArea1.Font.Italic = TRUE 		'-- The default value FALSE is overwritten
TextArea1.Font.Underline = FALSE 	'-- Standard
TextArea1.Font.StrikeOut = FALSE 	'-- Standard
```

Pay attention to the order of the entries in the font string Font[“Name, Size, Bold, Italic, Underline, Strikeout”] if you want to specify certain font properties:
3rd variant:
Use of the FontChooser control. You can find information on this control and a complete project in chapter 23.2.3.


# 23.2.2.2 Reading font properties

Font properties of a control can be read out in compact form using the .ToString() method or in individual properties, for example:


```
PublicSubFontAuslesen()TextBox1.Text=TextArea1.Font.ToString()End
```

Note the data type of the property whose value is returned:


```
DIMsFontnameAsStringDIMiFontSizeAsFloatDIMbFontBoldAsBooleansFontname=TextArea1.Font.NameiFontSize=TextArea1.Font.SizebFontBold=TextArea1.Font.Bold...
```

Font styles cause a change in the display in a control element - here in a TextArea - and you can read these styles via the elements of the styles array:


```
DIMsElementASVariantFOREACHsElementINTextArea1.Font.StylesPRINTsElementNEXT
```



# 23.2.2.3 Font colour

Although you would expect it, the font colour is <uuuu>not a font property. For the TextArea1 control element, for example, the font colour 'red' is defined with TextArea1.Foreground = Color.Red.
Further information on colours - especially in connection with the Color class - can be found in chapter 23.1.1.


# 23.2.3 Class Fonts

This class is static and only has one property that provides information about the number of installed fonts in the system.


```
DIMiFontCountASIntegeriFontCount=Fonts.Count
```

The names of all fonts can be read from the (virtual) compilation:


```
PUBLICSUBForm_Open()DIMsFontNameASStringcmbFonts.Clear()cmbFonts.ReadOnly=TrueForEachsFontNameInFonts
      cmbFonts.Add(sFontName)NextEND
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.2.3 FontChooser

This component allows you to quickly select a font from the fonts installed in the system and assign it to a text processing or text displaying component.


# 23.2.3.1 Properties

You will almost always call up the FontChooser component in a separate modal form. You can overwrite the default settings in individual properties, but this does not seem necessary. The default value is True for all three properties and ensures that relevant information about the fonts is displayed optimally in the FontChooser component:
The FontChooser.FixedOnly property is an exception. It specifies whether only fonts with a fixed font size are displayed in the selection. This property should be freely selectable. However, the processing of the return value of the FontChooser component is probably the most interesting. The following assignment transfers the selected font to the font property of a component:


```
Komponente.Font = Font[FontChooser.SelectedFont]
```



# 23.2.3.2 Example

The project presented implements the theoretical elements mentioned above. It consists of the start form, the 2nd form with the FontChooser component and a module. As the source text is quite compact, both source texts are given.

Figure 23.2.3.2.1: Start form
Source code 1:


```
' Gambas class filePrivatesTextAreaFontAsStringPublicSubForm_Open()FMain.Center()FMain.Resizable=FalseMG.bShowLabel=TrueMG.bShowPreView=TrueMG.bShowStyle=TruecboxFixedFont.Value=False'-- Save original fontsTextAreaFont=TextArea1.Font.ToString()EndPublicSubbtnDisplayFC_Click()IfcboxFixedFont.Value=TrueThenMG.bFixedOnly=True'-- The default value is overwrittenEndifFormFC.ShowModal()IfMG.SelectedFont<>NullThenTextArea1.Font=Font[MG.SelectedFont]EndifEndPublicSubbtnReset_Click()TextArea1.Font=Font[sTextAreaFont]cboxFixedFont.Value=FalseEndPublicSubbtnClose_Click()FMain.Close()End
```

A module has been inserted to maintain the relevant variables in one place:


```
' Gambas module filePublicbShowLabelAsBooleanPublicbShowPreViewAsBooleanPublicbShowStyleAsBooleanPublicbFixedOnlyAsBooleanPublicSelectedFontAsString
```

Form 2

Figure 23.2.3.2.2: Font selection (font family, font style and font size)
Source text 3:


```
' Gambas class filePublicSubForm_Open()FormFC.Resizable=FalseFontChooser1.ShowLabel=MG.bShowLabelFontChooser1.ShowPreview=MG.bShowPreViewFontChooser1.ShowStyle=MG.bShowStyleFontChooser1.FixedOnly=MG.bFixedOnlyEndPublicSubbtnCancel_Click()MG.SelectedFont=NullFormFC.Close()EndPublicSubbtnSetFont_Click()MG.SelectedFont=FontChooser1.SelectedFont'-- Alternative:  FontChooser1.ValueFormFC.Close()End
```

As only fonts with a fixed width can be selected, only these fonts are displayed in the font selection component. With the selected properties, the font image now looks like this:

Figure 23.2.3.2.3: TextArea with the selected font properties
With an elegant click on the button labelled R, you can reassign the saved original font of the TextArea to the font of the TextArea and reset the checkbox to the initial value for displaying all fonts.


# 23.3.3.3 Download

Article
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.3.0 Paint class (gb.qt4)

Drawing under Gambas with the Paint class (gb.qt4/5) has something of a technical drawing feel - of construction with compass and ruler, because it is not freehand drawing. Firstly, the essential properties of the Paint class are presented and then the methods are described and their effects for selected methods are commented on. The projects presented and their description take up a lot of space.
The results that can be achieved are illustrated by the example of Nelson Hoover's speedometer component:

Figure 23.3.0.1: Speedometer and rev counter
or theGUIof a function plotter with interactive input of the function equation:

Figure 23.3.0.2: Plotter
The image display with a magnifying glass function was developed by Fabien Bodard and only uses properties and methods of the Paint class:

Figure 23.3.0.3: Image display with magnifying glass function
Drawing with the methods of the Paint class sets clear accents in the visualisation of numerical values:

Figure 23.3.0.4: Bar chart
Please bear in mind that the QT4/5 toolkit is consistently used as the 'Graphical User Interface' in all projects in the Gambas book. The alternative use of the components gb.gtk or gb.gtk3 is usually possible, but unfortunately does not always lead to the same result. There are also dependencies on the desktop used - even if you do not use the gb.gui component. These dependencies also apply when using the Paint class. The Gambas developers are endeavouring to eliminate such incompatibilities - especially those between GTK and QT.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.3.1 Properties and constants of the Paint class

This chapter presents properties and selected constants of the Paint class (gb.qt4).


# 23.3.1.1 Properties

The Paint class has these properties:
Table 23.3.1.1.1 : Properties of the Paint class


# 23.3.1.2 Selected constants

Only a few selected constants are described for the Paint class. For more information, it is worth taking a look at the pages athttp://gambaswiki.org/wiki/comp/gb.qt4/paint.
Table 23.3.1.2.1 : Selected constants of the Paint class
Note: You can only pass the Extend constants as parameters to thePaint.LinearGradient()andPaint.RadialGradient()methods.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.3.3 Drawing with Paint



# 23.3.3.1 Drawing areas

To draw with Paint in Gambas, you need an artboard and a pen or brush - just like in the real world. The following drawing areas (devices) are available to you:


# 23.3.3.2 Geometric shapes

You can draw these geometric shapes (lines or areas or text) in six categories on the drawing area:
Yes, text is also drawn, whereby you must specify the font, the font colour and the (start) point at which the font is inserted into the drawing area after calling special methods.


# 23.3.3.3 Paint coordinate system

All artboards have a (non-visible) coordinate system to which all coordinate specifications in the properties or in the arguments of the methods of the Paint class refer. Please observe these notes:

Figure 23.3.3.3.1: Paint coordinate system with shifted coordinate origin
In order to draw the names of the two axes and the values legibly if required, the coordinate origin of the coordinate system can be permanently shifted using the Translate method of the Paint class.


```
Paint.Begin(hPicture)    
  Paint.Translate(40, 45) ' Verschiebung um +40.0 in x-Richtung und um +45.0 in y-Richtung 
  ...
Paint.End
```

The shift does not change the direction of the two coordinate axes!
You could also omit the display of the coordinate system in the following illustration, as it has no influence on the effect of the image:

Figure 23.3.3.3.2: Paint image
The next figure shows the correct image of a function in a shifted paint coordinate system with clearly legible designations:

Figure 23.3.3.3.3: Image of a function y = f(x)
You will certainly recognise that the function has no zeros in the specified interval and also has a local high point in addition to the local minimum in the vicinity of 2. To realise the usual view, you can scale the coordinate system so that the positive y-axis points upwards. A translation of the coordinate origin O(0|0), combined with a mirroring of the y-axis at the abscissa - realised by using the scale method - can be implemented in this way:


```
Paint.Begin(hPicture)    
  Paint.Translate(40, 45) 	'-- Shift by +40.0 in the x-direction and by +45.0 in the y-direction
  Paint.Scale(1, -1)	      	'-- The -1 causes the direction of the y-axis to be inverted → +y ▲
  ...
Paint.End
```


Figure 23.3.3.3.4: Image of a function y = f(x)


# 23.3.3.4 Drawing with methods of the Paint class

Admittedly, the concept of drawing geometric shapes with Paint takes some getting used to, as a geometric shape is always drawn in three steps on the drawing area used:
The following example takes up the last step with the reference to theoptional argument A. A circle with a red border and yellow circle area is to be drawn on a picture (object) as a drawing area (device).


```
PublichPictureAsPicturePublicSubForm_Open()daCanvas.Cached=False'-- Standard for a DrawingAreahPicture=NewPicture(daCanvas.Width, daCanvas.Height,True)hPicture.Fill(&HC3DDFF)PaintScriptCircle()EndPublicSubPaintScriptCircle()Paint.Begin(hPicture)Paint.Translate(30,300)'-- Shifting the coordinate systemPaint.Scale(1,-1)'-- Inversion of the direction of the y-axis → +y ▲Paint.Brush=Paint.Color(Color.Red)'-- Colour arcPaint.LineWidth=5'-- Thickness of the circular arcPaint.Arc(200,150,70)'-- Centre of circle M(200|150), radius 70Paint.Stroke(True)'-- (Re)draw arc → path is retained!Paint.Brush=Paint.Color(Color.Yellow)'-- Colour circular areaPaint.Fill()'-- Fill circular area with colour → Path is deletedPaint.End()End
```

To see the result of the drawing, the picture - which is currently only in memory - is drawn in a DrawingArea (daCanvas) and thus becomes visible:


```
PublicSubdaCanvas_Draw()Paint.Begin(daCanvas)IfhPictureThenPaint.DrawPicture(hPicture,0,0)Paint.EndEnd
```

This flexible way of drawing has proved its worth. If you want to print the picture, the following additional lines are sufficient to draw the picture on the printer (myPrinter):


```
PublicSubmyPrinter_Draw()Paint.Begin(myPrinter)IfhPictureThenPaint.DrawPicture(hPicture,0,0)Paint.EndEnd
```

Start the printout of the picture after aprinter dialoguewith 'myPrinter.Print'.
If, on the other hand, you want to save the image and process it further, for example to present figures as data in a text, save the picture as an image file:


```
PublicSubbtnSaveCurPicture_Click()DimsPictureFileNameAsStringsPictureFileName=Lower(cmbPictures.Text&".png")hPicture.Save(sPicturePath&/sPictureFileName)End
```


Figure 23.3.3.4.1: Pie chart with 12 values
In chapter → 23.3.4.1 Projects1, 11 further examples are presented in a project and commented on in detail.
If you are drawing with Gambas for the first time, please follow these instructions:


# 23.3.3.5 Default values

For drawing with Paint, there are fixed (default) start values that you can set:
A test results in these values:


```
Print Paint.Background	     '-- 0 → black
Print Paint.LineWidth	     '-- 1 
Print Paint.AntiAlias	     '-- TRUE 
Print Paint.Font.ToString()  '-- Ubuntu, 11
```



# 23.3.3.6 Notes on the DrawingArea as a drawing area

The DrawingArea provides a drawing area that can be drawn on from the application in two modes. The key to drawing on a DrawingArea is understanding the relationship between the value of the DrawingArea.Cached property and the use of the DrawingArea_Draw() event.
Conclusion: The Draw event is used or not used depending on the value of the DrawingArea.Cached property.
As the Draw class has been considered obsolete since Gambas version 3.4, you should only use the Paint class in future. This is why the DrawingArea.Painted property no longer exists in the Paint class!
It is interesting to take a look at the module Draw.module, which you will find in the Gambas source files. It reveals that the Draw class is redefined via the Paint class. This ensures that your existing drawing projects can still be used with the Draw class.

Figure 23.3.3.6.1: Start project
In the download area you will find a project that implements the aboveprinciple approaches1:1. The view of the complete source code is particularly advantageous for those who are drawing with methods of the Paint class for the first time.
Source code:


```
' Gambas class filePrivatehPictureAsPicturePrivateiPrinterDPIAsIntegerPrivatefDesktopresolutionProInchAsFloat=(Desktop.Resolution/25.4)PrivatebPaintedAsBoolean=FalsePublicSubForm_Open()FMain.CenterFMain.Resizable=FalsepboxPreView.Stretch=TruedaCanvas.Cached=True'-- `daCanvas` is a DrawingAreaEnd' Form_Open()PublicSubPaintScriptCircle()TryhPicture=NewPicture(daCanvas.Width, daCanvas.Height,True)'-- A new Picture object is createdhPicture.Fill(&HC3DDFF)'-- The picture gets a light blue background colourPaint.Begin(hPicture)'-- The picture is now drawn on ...Paint.Translate(30,200)'-- Shifting the coordinate systemPaint.Scale(1,-1)'-- Inversion of the direction of the y-axis → +y ▼Paint.Brush=Paint.Color(Color.Red)'-- Colour arc → redPaint.LineWidth=5'-- Thickness of the circular arcPaint.Arc(270,100,70)'-- Centre of circle M(270|100), radius 70Paint.Stroke(True)'-- (Re)draw arc → path is retained!Paint.Brush=Paint.Color(Color.Yellow)'-- Colour circular area → yellowPaint.Fill()'-- Fill circular area with colour → Path is deletedPaint.EndEndPublicSubdaCanvas_Draw()Paint.Begin(daCanvas)IfhPictureThenPaint.DrawPicture(hPicture,0,0)'-- The picture is drawn in the DrawingAreaPaint.EndEndPublicSubmyPrinter_Draw()DimiDruckBreite, iDruckHoehe, iDruckrandLinks, iDruckrandObenAsIntegerDimimgToPrintAsImageiDruckrandLinks=25'-- Millimetre - tested valueiDruckrandOben=20'-- Millimetre - tested valueIfNothPictureThenReturnElse'-- The hPicture converted into an image is assigned to the imgToPrint imageimgToPrint=hPicture.ImageEndif'-- Automatic changeover from landscape to portrait format when Picture.W > Picture.HIfimgToPrint.Width>imgToPrint.HeightThenimgToPrint=imgToPrint.Rotate(Pi(0.5))'-- Conversion from DA point unit to millimetre unitPaint.Scale(Paint.Width/myPrinter.PaperWidth, Paint.Height/myPrinter.PaperHeight)'-- The values used, 170 (width) and 260 (height), have been tested for A4IfPixelToMillimeter(imgToPrint.W)>170TheniDruckBreite=170iDruckHoehe=CInt(iDruckBreite*(imgToPrint.Height/imgToPrint.Width))IfiDruckHoehe>260TheniDruckHoehe=260iDruckBreite=CInt(iDruckHoehe/(imgToPrint.Height/imgToPrint.Width))EndifPaint.DrawImage(imgToPrint, iDruckrandLinks, iDruckrandOben, iDruckBreite, iDruckHoehe)ReturnEndifIfPixelToMillimeter(imgToPrint.H)>260TheniDruckHoehe=260iDruckBreite=CInt(iDruckHoehe/(imgToPrint.Height/imgToPrint.Width))IfiDruckBreite>170TheniDruckBreite=170iDruckHoehe=CInt(iDruckBreite/(imgToPrint.Height/imgToPrint.Width))EndifPaint.DrawImage(imgToPrint, iDruckrandLinks, iDruckrandOben, iDruckBreite, iDruckHoehe)ReturnEndifiDruckBreite=PixelToMillimeter(imgToPrint.W)iDruckHoehe=CInt(iDruckBreite*(imgToPrint.Height/imgToPrint.Width))'-- The image to be printed - now as Image imgToPrint - is printed in the printerPaint.DrawImage(imgToPrint, iDruckrandLinks, iDruckrandOben, iDruckBreite, iDruckHoehe)End' myPrinter_Draw()PublicSubbtnDrawPicture_Click()PaintScriptCircle()'-- The picture - circle with red border and yellow area - is drawn on the PicturebPainted=TruepboxPreView.Picture=hPicture'-- Mini preview image, as the hPicture object only exists in memory!EndPublicSubbtnShowPicture_Click()IfbPaintedThendaCanvas_Draw()'-- The picture is drawn in the DrawingAreaEndifEndPublicSubbtnSavePicture_Click()DimsPictureFileNameAsStringsPictureFileName=Lower("startfrei.png")IfExist(Application.Path&/sPictureFileName)ThenKillApplication.Path&/sPictureFileNameWaitIfbPaintedThenhPicture.Save(Application.Path&/sPictureFileName)' Das Picture wird als Bild-Datei gespeichertWaitEndifpboxPreView.Enabled=FalseWait0.3pboxPreView.Enabled=TrueEndPublicSubbtnPrintPicture_Click()IfbPaintedThenIfmyPrinter.Configure()ThenReturn'-- Printer dialogueMe.Enabled=False'-- The form is deactivatedIncApplication.Busy'-- The programme no longer accepts any input ...myPrinter.Print'-- The printout is startedDecApplication.Busy'-- The programme is accepting entries again...Me.Enabled=True'-- The form is activatedEndifEndPublicSubbtnClearPicture_Click()hPicture=Null'-- The Picture object is deleteddaCanvas.Clear()pboxPreView.Picture=hPicture
  bPainted=FalseEnd' ---------------------------------------------------------------------------------------------------------PrivateFunctionPixelToMillimeter(iPixelAsInteger)AsFloatReturniPixel/fDesktopresolutionProInchEnd
```



# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.3.4.0 Paint projects 1

In this chapter, the explanations on the topic of 'Drawing with methods of the Paint class' are implemented in two specific projects. Almost all drawings are based on script-like Paint command sequences, as the methods of the Paint class are designed more for use as a construction description for lines, shapes and text than for free drawing on a suitable drawing area such as a DrawingArea.
The presentation of the projects is supplemented by comments on the specified project source text and numerous images.

Figure 23.3.4.0.1: Tangent array
Source code excerpt:


```
PublicSubPaintScriptBezierApproximation()DimPS, P1, P2, P3, PEAsNewPointFDimi, kAsIntegerDimdx1, dx2, tAsFloatGenerateNewPicture()SetPictureBorder()Paint.Begin(hPicture)Paint.Translate(xTranslate, yTranslate)Paint.Scale(xScale, yScale)'-- +y ▲DrawCoordinateSystem()P1.x=30P1.y=240P2.x=150P2.y=30P3.x=500P3.y=270k=30'-- Number of tangentsdx1=(P2.x-P1.x)/k
    dx2=(P3.x-P2.x)/k
    ...Paint.LineWidth=1Fori=1Tok+1Paint.MoveTo(P1.x+(i-1)*dx1, a(P1.x+(i-1)*dx1))Paint.LineTo(P2.x+(i-1)*dx2, b(P2.x+(i-1)*dx2))NextPaint.Stroke()'-- TEXTPaint.NewPathPaint.Scale(1,-1)'-- ATTENTION: y-axis now with *positive* values downwards!Paint.Font=Font["Monospace, 10, bold"]Paint.Brush=Paint.Color(Color.Red)Paint.DrawText("P1(30|240)",10,-250)Paint.DrawText("P2(150|30)",120,-10)Paint.DrawText("P3(500|270)",455,-285)Paint.Scale(1,-1)Paint.End()End
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.3.5.0 Paint projects 2

This chapter presents 8 different projects, each of which highlights a specific aspect of the topic 'Drawing with methods of the Paint class'. One project also introduces you to a fractal - a Hilbert curve:

Figure 23.3.5.0.1: Fractal - Hilbert curve
Source code snippet:


```
PublicSubdwgKurve_Draw()$iX=0$iY=0IncApplication.BusyFMain.Title="HilbertCurve - N = "&$iOrder 
    HilbertCurve($iOrder)DecApplication.BusyEnd
```



# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.3.6 PaintExtents

This PaintExtents (gb.qt4/5) class represents a (rectangular) bounding box as returned by the Paint.ClipExtents property.


# 23.3.6.1 Properties

The PaintExtents class has these six properties of data type Float:
Table 23.3.6.1.1 : Properties of the PaintExtents class


# 23.3.6.2 Method

The PaintExtents class has only one method:


```
Function Merge ( Extents As PaintExtents ) As PaintExtents
```

The Merge(arg) method returns the smallest rectangle of the PaintExtents type in which the union of the two extents fits.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.3.7 PaintBrush

The PaintBrush (gb.qt4/5) class represents a brush for drawing lines and areas, as returned by the following methods:
Note that the boundaries of gradient brushes are drawn without anti-aliasing when the coordinate system is scaled, as you can see in Figure 23.3.7.1 Scaled, rotated LinearGradient (ExtendRepeat) with visibly missing anti-aliasing at the lower boundary:

Figure 23.3.7.1: Without anti-aliasing


# 23.3.7.1 Property PaintBrush.Matrix

The class has only one property:PaintBrush.Matrixof typePaintMatrix. It sets the brush transformation matrix or reads this matrix. This matrix describes the transformation between the brush space and the user space.
When a brush is created for the first time, a transformation matrix is always generated as an identity matrix, whereby the brush space is initially identical to the user space. Please note that the transformation matrix always maps the brush space to the user space.
For example, you duplicate anexistingbrush that is twice the size of the standard brush in both dimensions, because Scale modifies the existing object to which it is applied:


```
DimmyBrushAsPaintBrush 
myBrush.Scale(2.0,2.0)
```

23.3.7.2 Methods
The PaintBrush class has these methods:
Table 23.3.7.2.1 : Methods of the PaintBrush class


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.3.8 PaintMatrix

The PaintMatrix (gb.qt4) class represents a transformation matrix that is used, among other things, to execute affine mappings (translation, scaling, rotation).
Please note that all methods return the result matrix so that you can perform several transformations in one line of code by chaining method calls.


# 23.3.8.1 Creating a PaintMatrix

A new PaintMatrix can be generated with New PaintMatrix ([…]):


```
Dim hPaintMatrix As PaintMatrix 
hPaintMatrix = New PaintMatrix ([XX As Float,XY As Float,YX As Float,YY As Float,X0 As Float,Y0 As Float])
```

If the matrix elements are not specified, a unit matrix (identity) is created. You can also use the class like a static function that has a function value of type PaintMatrix:


```
Function PaintMatrix ([XX As Float,XY As Float,YX As Float,YY As Float,X0 As Float,Y0 As Float])
```



# 23.3.8.2 Methods

The PaintMatrix class only has methods.
Table 23.3.8.2.1 : Methods of the PaintMatrix class


# 23.3.8.3 Notes

For a translation of a point P(x0|y0) → P'(x1|y1) in a Cartesian coordinate system (xy plane E), these transformation equations result for P(x0|y0) as the original point and with P'(x1|y1) as the image point. The equation on the right is the equivalent matrix notation for the description of a translation or displacement:

For all other points of the coordinate plane E, this equation also applies for a displacement by the displacement distance of Tx in the x-direction and Ty in the y-direction.
A scaling of the coordinate axes can be described with these two transformation equations, whereby the factors Sx and Sy are the scaling factors in both coordinate directions:

For the rotation of a point P(x0|y0) around the coordinate origin O(0|0) with a rotation angle ß, use the following transformation equations for the original and image point:

The following image shows the effects that can be achieved by translating a simple graphic:

Figure 23.3.8.3.1: Displacement of a rectangle


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.3.9 Bézier curve basics

The CurveTo method of the Paint class uses third-degree Bézier curves, which are determined by 4 points, to draw → Chapter 23.3.5.3 'Bézier curves'. Two points (A and D) determine the start and end points of the curve, whose curvature behaviour is determined by the position of all 4 points A, B, C and D → Figure 23.3.8.1. Points B and C are called support points.

Figure 23.3.9.1: Bézier curve of the 3rd degree (4 points)
In this chapter, an attempt is made to develop an analytical description of a 2nd order Bézier curve from the geometric definition of a 2nd order Bézier curve - for which there is no method in the Paint class. This is linked to the expectation that you will better understand the work with 3rd degree Bézier curves because the theory is based on similar approaches.
Using the explicit parameter equations obtained and the methods of the Paint class, some 2nd degree Bézier curves will be drawn.


# 23.3.9.1 Geometric definition of a 2nd degree Bézier curve

Given three (different) points A, B and C in a (coordinate) plane with a (normalised) vector basis. The points A, B and C are connected in the manner shown. The two division points T1 and T2 exist on the connecting lines AB and BC, on whose connecting line T1T2 the point T lies:

Figure 23.3.9.1.1: Bézier curve - 2nd degree definition (3 points)
The following definition applies to the three division points T1, T2 and T, which determines their position on the connecting lines:

For each real parameter value p from the interval [0|1], T is a so-called Bézier point. The set of all points T=T(p) results in the Bézier curve AC from A to C with T(0) = A and T(1) = C. The dotted green line consists of selected points of the Bézier curve AC. If you draw the connecting lines of the points TiTj for selected parameters p, this image is created:

Figure 23.3.9.1.2: Representation of connecting lines TiTj
You can already 'see' the envelope curve of all connecting lines of the points TiTj very clearly. The impression is further emphasised if the defined Bézier points T on the connecting lines are also drawn in red:

Figure 23.3.9.1.3: Bézier points


# 23.3.9.2 Analytical description of a 2nd degree Bézier curve

We are looking for an analytical description for the coordinates of the Bézier points T = T(p) for each parameter value p from the interval 0 ≤ p ≤ 1 on the Bézier curve from A to C:

Equations 4 and 5 are obtained from the two vector equations 1 and 2 by substituting equations 1 and 2 into 3:

Equation 5 gives rise to the two (explicit) parameter equations 6 and 7 for calculating the x and y coordinates of a Bézier point of the quadratic Bézier curve (2nd degree) between points A and C, whose curvature behaviour is defined by the position of point B:



# 23.3.9.3 Examples of 2nd degree Bézier curves

Example 1
The Bézier curve AB with support point B is drawn using equations 6 and 7 and methods of the Paint class:

Figure 23.3.9.3.1: Bézier curve AC - B(150|30)
In the following source code, the points A, B and C are declared using global variables of data type PointF and the two equations 6 and 7 are implemented as functions:


```
[1]PublicAAsPointF[2]PublicBAsPointF[3]PublicCAsPointF[4][5]PublicSubForm_Open()[6]…[7]A=NewPointF[8]A.x=30[9]A.y=240[10]B=NewPointF(150,30)'-- Alternative specification of the coordinates of a point[11]C=NewPointF(500,270)[12]…[13]End[14][15]PublicFunctionBézierX(pAsFloat, AXAsFloat, BXAsFloat, CXAsFloat)AsFloat[16]' Analytical description x(p) of a 2nd degree Bézier curve (3 points)[17]Return(1-p)*(1-p)*AX+2*(1-p)*p*BX+p*p*CX[18]End[19][20]PublicFunctionBézierY(pAsFloat, AYAsFloat, BYAsFloat, CYAsFloat)AsFloat[21]' Analytical description y(p) of a 2nd degree Bézier curve (3 points)[22]Return(1-p)*(1-p)*AY+2*(1-p)*p*BY+p*p*CY[23]End
```

The procedure PaintScriptBézier3Points() for drawing a 2nd degree Bézier curve uses the procedures that were already used in the project examples in → Chapter 23.3.3:


```
[1]PublicSubPaintScriptBezier3Points()[2]DimkAsInteger[3]DimpAsFloat[4]DimvPAsVector[5][6]GenerateNewPicture()[7]SetPictureBorder()[8]Paint.Begin(hPicture)[9]Paint.Translate(xTranslate, yTranslate)[10]Paint.Scale(xScale, yScale)' +y ▲[11]DrawCoordinateSystem()[12][13]' PARABLE PIECE[14]Paint.Brush=Paint.Color(Color.Red)[15]Paint.Brush=Paint.Color(Color.Red)[16]Fork=0To(C.x-A.x)[17]p=k/470[18]Paint.Arc(BézierX(p, A.x, B.x, C.x), BézierY(p, A.y, B.y, C.y),2)[19]Next[20]Paint.Fill()[21][22]' Connecting lines A-B-C[23]Paint.Brush=Paint.Color(Color.Blue)[24]Paint.LineWidth=1[25]Paint.Dash=[1,1][26]Paint.MoveTo(A.x, A.y)[27]Paint.LineTo(B.x, B.y)[28]Paint.LineTo(C.x, C.y)[29]Paint.Stroke()[30]Paint.Dash=Null[31][32]' Points A, B and C[33]Paint.Arc(A.x, A.y,3)[34]Paint.Arc(B.x, B.y,3)[35]Paint.Arc(C.x, C.y,3)[36]Paint.Fill()[37][38]' TEXT[39]Paint.NewPath[40]Paint.Scale(1,-1)' +y ▼[41]Paint.Font=Font["Monospace, 11"][42]Paint.Brush=Paint.Color(Color.DarkBlue)[43]Paint.DrawText("A",25,-255)[44]Paint.DrawText("B",145,-10)[45]Paint.DrawText("C",495,-285)[46]Paint.Scale(1,-1)' +y ▲[47]Paint.End[48][49]End
```

Comment:
Example 2

Figure 23.3.9.3.2: Bézier curve - B(400|60)
In the second example, the coordinates of support point B are changed. The coordinates of the start point A and the end point C remain unchanged compared to example 1. The influence of point B on the course of the Bézier curve can be seen very clearly. In the 'BézierExkurs' project, you can change the coordinates of B within wide limits to see the effect of the change immediately.


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.4.0 Colours, colour spaces, images and image editing

The following chapter describes components and classes that can be used to create, load, save and edit images.

Figure 23.4.0: Colour image


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.4.1 Class SvgImage

The SvgImage class represents an SVG graphic that is loaded from a file into memory. You can create this class and receive a new SVG document:


```
Dim hSvgImage As SvgImage
hSvgImage = New SvgImage ( [ Width As Float, Height As Float ] )
```

Width and Height are the dimensions of the SVG document in points. If they are not specified, they must be specified later before you can draw on them. The actual dimension of the SVG document is calculated by assuming a resolution of 72 DPI.
The free open source editor Inkscape has the best support for SVG. Athttps://inkscape.org/de/entwickeln/das-svg-format/you will find a simple description of the SVG format:
SVG (abbreviation for “Scalable Vector Graphics”) is a free, open source, standardised file format for vector graphics. It is developed and maintained by theW3C(World Wide Web Consortium), the most important international standardisation body for the Internet. It is based on XML (Extensible Markup Language), also aW3Cstandard format, which is a generic markup language developed to represent any data in a human- and machine-readable format.
If you use the following (XML) text


```
<svg xmlns="http://www.w3.org/2000/svg" width="300" height="200">

  <rect x="50" y="50" width="200" height="100" style="fill:red"/>

</svg>
```

into the empty file red.svg using a text editor, you will see the following display - for example with the image viewer XViewer:

Figure 23.4.1.1: Display of the red.svg file


# 23.4.1.1 Properties

The SvgImage class only has two properties:
Table 23.4.1.1.1 : Properties of the SvgImage class


# 23.4.1.2 Methods

The SvgImage class provides you with the following four methods:0
Table 23.4.1.2.1 : Methods of the SvgImage class
The following static method loads an SVG document from the file with the specified file path and returns it as a new SVGImage:


```
Static Function Load ( Path As String ) As SvgImage
```

Example 1
Public Sub DrawingArea1_Draw()


```
'-- Paint the Gambas logoDimhSvgImageAsSvgImage' (1)hSvgImage=SvgImage.Load("gambas.svg")' (2)hSvgImage.Paint()' (3)End
```

Example 2 - Drawing is performed on an SVG image and the modified image is saved.


```
DimhSvgImageAsSvgImage
 
  hSvgImage=SvgImage.Load("~/gambas.svg")Paint.Begin(hSvgImage)Paint.Brush=Paint.RadialGradient(200,140,40,215,115,[Color.RGB(255,0,0,64),
                  Color.White],[1.0,0.1])Paint.Arc(200,140,40)Paint.Fill()Paint.End()hSvgImage.Save("~/gambas_with_red_ball.svg")
```

Note: Qt's SVG support has had some bugs for years. It is not known whether it will be better with Qt5.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.4.2.0 Component gb.image

The gb.image component implements image and colour management routines. The following table briefly describes the content of the four classes:
Table 23.4.2.0.1: Classes of the gb.image component
The above classes are described in detail in the following four chapters.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.4.3 Class Picture

This class (gb.qt4) represents a picture. The data of a Picture object (in gb.qt4) is not stored in the address space of the Gambas process, but is located in the address space of the X server. In contrast, an Image object has its content in the address space of the Gambas process. Further information can be found in the QT documentation at:


```
http://sourceforge.net/p/gambas/code/HEAD/tree/gambas/trunk/comp/src/gb.gui.base/.src/Picture.class.
```

The Picture class behaves like a (static) array (Picture[]) that can be read and written to.


```
Dim hPicture As Picture
hPicture = Picture [ Path As String ]
```

The second instruction returns a Picture object from the internal picture cache. If the picture is not available in the cache, it is automatically loaded from the specified file. If the path begins with “icon: /”, it means that a stock icon is to be loaded. To access these icons, use the Stock class (→ Chapter 20.8). How to insert a picture as an icon in a button. The following image formats are supported: JPEG, PNG, BMP, GIF, SVG, ICO and XPM:


```
'-- Read
btnClose.Picture = Picture["icon:/16/close"]
```

With this instruction:


```
'-- Write
Dim hPicture As Picture
…
Picture[Path As String] = hPicture
```

you insert a picture into the internal picture cache. The Path parameter is only a key that is used internally for a collection. However, you should note that the key prefix “icon:/” is reserved for Gambas icons.


# 23.4.3.1 Creating a new picture



```
Dim hPicture As Picture
hPicture = New Picture ( [ Width As Integer, Height As Integer, Transparent As Boolean ] )
```

A new picture is created. If the two optional parameters Width and Height are not specified, a new picture exists - but it is empty! You can use the optional parameter Transparent to specify whether the picture has an alpha channel or not. The default value is False.
Properties and methods of the Picture class are presented in the following two sections.


# 23.4.3.2 Static methods

The Picture class has two static methods: Picture.Load and Picture.Flush.


```
Static Function Load ( Path As String ) As Picture →Loads a picture from the data carrier.
Static Sub Flush ( ) → Flushes the internal picture cache.
```



# 23.4.3.3 Properties

The Picture class has these properties:
Table 23.4.3.3.1 : Properties of the Picture class


# 23.4.3.4 Methods

The Picture class has the following methods. Note the optional parameters:
Table 23.4.3.4.1 : Methods of the Picture class


# 23.4.3.5 Project

All properties and methods are used in the project. The relevant source code excerpts are presented for all parts of the programme. The results achieved are displayed.


# Create picture



```
[1]' Gambas class file[2][3]PublichPicture1AsPicture[4][5]PublicSubForm_Open()[6]FMain.Center[7]FMain.Resizable=False[8]PictureBox1.Stretch=False[9]PictureBox1.Picture=Picture["Symbols/intro.jpg"][10]btnClearPic.Picture=Picture["icon:/16/clear"][11]Picture.Flush[12]End[13][14]PublicSubbtnGeneratePic_Click()[15]TextArea1.Clear[16]hPicture1=NewPicture(PictureBox1.W, PictureBox1.H,True)[17]hPicture1.Fill(ColorButton1.Value)[18]PictureBox1.Picture=hPicture1[19]ShowPropertiesPic(hPicture1)[20]End
```

Comment:

Figure 23.4.3.5.1: A new picture (monochrome) is displayed


# Create picture from image file


Figure 23.4.3.5.2: Picture display
The picture (width 640 pixels, height 390 pixels) is only displayed incompletely (top left corner) in a PictureBox because this has a fixed size, which is smaller than the picture here.


```
[1]PublicSubbtnPictureFromFile_Click()[2]TextArea1.Clear()[3]hPicture1=Picture.Load("Images/b1.png")[4]PictureBox1.Picture=hPicture1[5]ShowPropertiesPic(hPicture1)[6]End
```

Comment:


# Display the complete picture in the correct aspect ratio in a PictureBox

You can eliminate the disadvantage of displaying the last picture. If the picture is to be enlarged or reduced to scale, you must first convert the picture into an image, then resize it and finally convert the image back into a picture. There is no stretch method for a picture!


```
[1]PublicSubbtnStretch_Click()[2]DoStretch("Images/b1.png")[3]End[4][5]PrivateSubDoStretch(sPathAsString)[6]DimtransImageAsImage[7]DimfRatio, fStretchAsFloat[8][9]TextArea1.Clear()[10]hPicture1=Picture.Load(sPath)[11][12]transImage=hPicture1.Image[13]IfhPicture1.W>hPicture1.HThen[14]fRatio=hPicture1.W/hPicture1.H[15]PictureBox1.Picture=transImage.Stretch(PictureBox1.W, PictureBox1.W/fRatio).Picture[16]fStretch=PictureBox1.W/hPicture1.W[17]Else[18]fRatio=hPicture1.H/hPicture1.W[19]PictureBox1.Picture=transImage.Stretch(PictureBox1.H/fRatio, PictureBox1.H).Picture[20]fStretch=PictureBox1.H/hPicture1.H[21]Endif[22][23]TextArea1.Clear[24]TextArea1.Insert("Picture-Original-Width = "&hPicture1.W&"px"&gb.NewLine)[25]TextArea1.Insert("Picture-Original-Height = "&hPicture1.H&"px"&gb.NewLine)[26]TextArea1.Insert("Stretch factor = "&Str(Round(100*(fStretch),-1))&" %"&gb.NewLine)[27]TextArea1.Insert("Picture with alpha channel? "&" → "&IIf(hPicture1.Transparent,"Yes","No"))[28][29]End
```


Figure 23.4.3.5.3: True-to-scale display of the picture
Comment:


# Create picture copy

You can create a 1:1 copy of a picture or a copy of a picture section if you set the 4 optional parameters with the correct arguments. In the example, the copy of an image section is created and the width and height are selected so that the copy fits exactly into the PictureBox:


```
[1]PublicSubbtnPartCopyPic_Click()[2]CopyPic(100,110, PictureBox1.Width, PictureBox1.Height)[3]End[4][5]PrivateSubCopyPic(iX0AsInteger, iY0AsInteger, iWAsInteger, iHAsInteger)[6]DimcoPictureAsPicture[7][8]TextArea1.Clear[9]hPicture1=Picture.Load("Images/b1.png")[10]coPicture=hPicture1.Copy(iX0, iY0, iW, iH)[11]PictureBox1.Picture=coPicture[12]IfcoPictureThen[13]TextArea1.Clear[14]TextArea1.Insert("Xo = "&iX0&"px "&" |  Yo = "&iY0&"px"&gb.NewLine)[15]…[16]Endif[17][18]End
```


Figure 23.4.3.5.4: Picture copy as image section


# Clear a picture

You can clear a picture using the Clear method.


```
[1]PrivateSubClearPic(hPicAsPicture)[2]IfhPicThen[3]hPic.Clear[4]PictureBox1.Picture=hPic[5]ShowPropertiesPic(hPic)[6]Endif[7]End
```

Comment:


# Saving a picture in a file

In the project, the current picture is always saved in a file in a folder within the project folder at the end of the programme:


```
[1]PublicSubForm_Close()[2]IfhPicture1Then[3]IfhPicture1.W*hPicture1.H<>0Then[4]hPicture1.Save("Backup/backup.png",100)[5]Endif[6]Endif[7]End
```

Comment:
With 'Stretch 2' and 'Stretch 3', pictures are displayed where the height is greater than the width or both values are equal. For the display, the heights are normalised to the height of the PictureBox:

Figure 23.4.3.5.5: Scaled display of pictures
ToolTips with the following content exist for the two buttons 'Stretch 2' and 'Stretch 3':


```
With 'Stretch 2' a picture is displayed,
where the height is greater than the width.
For the display, the picture height is normalised to
the height of the PictureBox.
```



```
With 'Stretch 3' a picture is displayed,
where the height and width are the same.
For the display, the picture height is standardised to
the height of the PictureBox.
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.4.4 Class PictureBox

The PictureBox class (gb.qt4) implements a control element for displaying a picture → Chapter 23.4.3 Picture class.


# 23.4.4.1 Creating a new PictureBox



```
Dim hPictureBox As PictureBox
hPictureBox = New PictureBox ( Parent As Container )  As "event name"
```

A new PictureBox is created. The Parent parameter specifies the container into which the PictureBox is inserted.


# 23.4.4.2 Properties

The following selected properties are interesting for the use of a PictureBox:
Table 23.4.4.2.1: Selected properties of the PictureBox class


# 23.4.4.3 Project

An image is displayed in a PictureBox in the project. The paths of selected images are loaded from a data carrier in a dialogue (MulitSelect) and saved in an array.

Figure 23.4.4.3.1: Display of a loaded image in a PictureBox
Source code snippet:


```
[1]' Gambas class file[2][3]PrivatesImagePathsAsString[][4]PrivateiPictureIndexAsInteger[5][6]PublicSubForm_Open()[7]FMain.Center()[8]FMain.Utility=True'-- Minimum window[9]FMain.Text="Dialog.OpenFile(True)  Multi-Select"[10][11]PictureBoxD.W=512'-- Start value only for picture format 4:3[12]PictureBoxD.H=384'-- Start value only for picture format 4:3[13]PictureBoxD.Border=Border.Solid[14]PictureBoxD.Alignment=Align.Center[15]PictureBoxD.Stretch=True[16]PictureBoxD.Padding=6[17]PictureBoxD.Background=&FFFFFF[18]PictureBoxD.Picture=Picture["Symbols/intro.jpg"][19][20]SetEnabled()[21]End[22][23]PublicSubbtnOpenFileImage_Click()[24]OpenFileImage()[25]End[26][27]PublicSubbtnNext_Click()[28]GoNext()[29]End[30][31]PublicSubbtnPrevious_Click()[32]GoPrevious()[33]End[34][35]PublicSubbtnClose_Click()[36]PictureBoxD.Picture=Null[37]Wait0.5'-- For visual control only: Empty the PictureBox[38]FMain.Close()[39]End[40][41]'---------------------------------------------------------------------------------------------------[42][43]PrivateSubOpenFileImage()[44]DimsMessage1, sMessage2AsString[45][46]Dialog.Title="Select image files (image list)..."[47]Dialog.Filter=["*.png;*.jpg;*.gif;*.jpeg;*.svg;*.ico"," Image files "," * "," All files"][48]Dialog.ShowHidden=False[49]Dialog.Path=Application.Path&/"Images"[50][51]' Select images on a data carrier (True -> Multiselect activated)[52]IfDialog.Openfile(True)Then[53]Return[54]Endif[55][56]SetEnabled()[57]sImagePaths=NewString[]'-- New picture list[58]sImagePaths=Dialog.Paths'-- Save image list (navigation)[59]iPictureIndex=0[60]PictureBoxD.Picture=Picture.Load(Dialog.Paths[0])'-- Display of the first image[61][62]sMessage1="The image list contains exactly"&Dialog.Paths.Count&" Image"[63]sMessage2="The image list contains "&Dialog.Paths.Count&" Images"[64]FMain.Text=IIf(Dialog.Paths.Count=1, sMessage1, sMessage2)[65][66]' Switch on image navigation if the image list contains more than one image[67]IfDialog.Paths.Count>1Then[68]btnNext.Enabled=True[69]Else[70]btnNext.Enabled=False[71]Endif[72][73]Catch[74]Message.Info(Error.Text)[75]End[76][77]PrivateSubGoNext()[78]IfiPictureIndex<sImagePaths.Count[79]InciPictureIndex[80]IfiPictureIndex=1ThenbtnPrevious.Enabled=True[81]IfiPictureIndex=sImagePaths.MaxThen[82]PictureBoxD.Picture=Picture.Load(sImagePaths[iPictureIndex])[83]btnNext.Enabled=False[84]Return[85]Endif[86]PictureBoxD.Picture=Picture.Load(sImagePaths[iPictureIndex])[87]Endif[88]End[89][90]PrivateSubGoPrevious()[91]IfiPictureIndex<sImagePaths.Count[92]DeciPictureIndex[93]IfiPictureIndex=sImagePaths.Max-1ThenbtnNext.Enabled=True[94]IfiPictureIndex=0Then[95]PictureBoxD.Picture=Picture.Load(sImagePaths[iPictureIndex])[96]btnPrevious.Enabled=False[97]Return[98]Endif[99]PictureBoxD.Picture=Picture.Load(sImagePaths[iPictureIndex])[100]Endif[101]End[102][103]PrivateSubSetEnabled()[104]btnPrevious.Enabled=False[105]btnNext.Enabled=False[106]End
```

Comment:

Figure 23.4.4.3.2: Start image (intro.jpg)


# 23.4.4.4 Delete PictureBox content

The Picture property of PictureBox only returns a copy of the internal picture. This means that


```
PictureBox.Picture
```

is a different Picture object than the one displayed in the PictureBox - but with the same content. If you clear the copy with your Clear() method, this has no effect on the Picture in the PictureBox. This means that the instruction


```
PictureBox.Picture.Clear()
```

is not sufficient to clear the PictureBox. You can do this with :


```
PictureBox.Picture = NULL
```



# Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.4.5 Moviebox


Figure 23.3.5.1: GIF image on the websitehttp://gambasdoc.org/help/comp/gb.qt/moviebox
This class provides a control that displays animated GIF images or MNG images. GIF images or MNG images consist of several individual images that are displayed one after the other for an adjustable period of time, just like a film.


# 23.3.5.1 Properties

These are the most important properties of the container component Moviebox that you can query or set:


# 23.4.5.2 Methods

The.Rewindmethod resets the film to the beginning. After stopping a film, you can either let the film continue or restart it.


# 23.4.5.3 Project

In the following programme, you can start, stop and continue animated graphics in two different formats or reset the film to the first frame. However, you will only recognise the reset if the film has a length of a few seconds. A film legolok.gif is included with the project, which you can use for your own experiments with the Moviebox.

Figure 23.4.5.2: Moviebox with 2 image formats


# 23.4.5.4 Source code



```
' Gambas class filePUBLICSUBForm_Open()FMain.Center()FMain.Border=1MovieBox1.Path="Images/tanzen.gif"MovieBox2.Path="Images/tanzen.mng"MovieBox1.Visible=TRUEMovieBox2.Visible=TRUEMovieBox1.Border=Border.SunkenMovieBox2.Border=Border.Raised' … the visual difference is minimalStartAnimation()ENDPRIVATESUBStartAnimation()MovieBox1.Playing=TRUEMovieBox2.Playing=TRUEbtnStart.Enabled=FALSEENDPUBLICSUBbtnStart_Click()IFcheckBox1.Value=TRUETHENMovieBox1.Rewind()MovieBox1.Playing=TRUEMovieBox2.Playing=TRUEbtnStart.Enabled=FALSEbtnStopp.Enabled=TRUEENDPUBLICSUBbtnStopp_Click()MovieBox1.Playing=FALSEMovieBox2.Playing=FALSEbtnStopp.Enabled=FALSEbtnStart.Enabled=TRUEENDPUBLICSUBbtnClose_Click()btnStopp_Click()btnStart.Enabled=FALSEWAIT0.8FMain.CloseEND
```



# 23.4.5.5 Notes

When compiling the programme, you will receive various error messages in the console of the Gambas IDE, which obviously have to do with the format of the animated MNG images:


```
MNG error 4: Encountered unexpected end-of-file; chunk vpAg; subcode 0:0
MNG error 11: Function is invalid at this point; chunk vpAg; subcode 0:0
```

You can use theconvertprogramme to create a film in MNG format from several individual images in a directory or convert an image in GIF format to MNG format - without an error message if the syntax is correct:


```
hans@linux:~$ convert -delay 10 b-*.png film.mng
hans@linux:~$ animate film.mng

hans@linux:~$ convert /home/hans/bild.gif /home/hans/bild.mng
hans@linux:~$ animate film.mng
```

Obviously the programmeconvertdoes NOT convert correctly to the MNG format, which is neitherW3C-compliant nor otherwise supported - not even by Firefox. The Gimp programme also cannot do anything with the MNG format, as the following error message shows:

Figure 23.4.5.3: GIMP error message


# 23.4.5.6 Download

Project
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.5 Screen copy - screenshot

A project is presented with which you can make a screen copy and print it out immediately. A report is used into which the screen copy is inserted. Printing is carried out by the print module in the report. This makes the source text short and very clear. Among other things, you can specify in the dialogue whether you want to print the screen in colour or greyscale. It is also possible to save the screen copy as a PDF file.
Complete source code:


```
' Gambas class file' Adaption: Hans Lehmann + Osterburg + 2021/2024PublicSubForm_Open()FMain.Center()FMain.Resizable=FalseEndPublicSubbtnMake_Click()DimhScreenshotImageAsImageDimhReportAsNewReportDimhReportLabelAsNewReportLabel(hreport)DimhReportImageAsNewReportImage(hReport)'-- Printout: DIN A4 landscape format (default setting)hReport.Paper=Printer.A4hreport.Orientation=Printer.Landscapehreport.Padding=ReportPadding["2 cm"]hReport.Spacing="1 cm"hReportLabel.Text="Printing a screen copy (screenshot)"hReportLabel.Autoresize=TruehReportLabel.Alignment=Align.CenterhReportLabel.Font.Size=24'-- The programme window is hiddenFMain.Hide()Wait0.2hScreenshotImage=Desktop.Screenshot().Image'-- The programme window is displayed againFMain.Show()'-- The screenshot image is inserted into the reporthReportImage.Image=hScreenshotImage
    hReportImage.Autoresize=TruehReportImage.Stretch=Report.ProportionalhReportImage.Expand=True'-- Print dialogue ⇉ Preview of the reporthReport.Preview()End
```


Figure 23.5.1: Print dialogue
The programme window only shows one button:

Figure 23.5.2: Programme window


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.6 Printing

If you want to print something, you need a printer on your PC or access to a printer shared on the network. Alternatively, you can print your data to a file, preferably in PostScript format. PostScript is a page description language for printers from Adobe, among others. The client-server system CUPS (Common Unix Printer System) takes care of printing under Linux by default. If an application wants to print (or have printed), it transfers the data to be printed, for example documents or images, to CUPS. The print system sends the data either via the server using IP protocol to a network printer or to the local printer in the queue (spooler). When it is a print job's turn, CUPS pushes it into a filter that converts the data into PostScript format. A filter contains all the information about a printer that is stored in a file with the extension .ppd (PostScript Printer Description). These filters are often incorrectly referred to as printer drivers. A printer that can handle data in PostScript format prints this data immediately or converts it into the printer-specific page description and then prints.
If you connect a printer directly to a Linux PC and it is recognised, a printer configuration dialogue will open under Ubuntu, for example. Make sure that the settings marked in red are activated, otherwise printing will not be possible:

Figure 23.6.1: Configuration of printer properties (Ubuntu)
Specifying whether the printer should be shared is optional. When a printer is installed, it is configured so that the most important applications can print. However, you also have the option - regardless of your Linux distribution - of calling up the web-based interface of Cups at the web addresshttp://localhost:631and administering yourlocalprinter there.

Figure 23.6.2: The web-based interface of CUPS
Under Ubuntu, you can access a CUPS configuration tool in the session display in the menu list under 'Printers', which you can also call up via the console with the commandsystem-config-printer:

Figure 23.6.3: CUPS configuration tool (Ubuntu)
After right-clicking on the printer icon, a configuration dialogue opens → Figure 23.6.1 You can find suggestions and tips on the topic of 'Printing' on the Internet at the following addresses:
On the last website you will find the graphical frontendGtkLPfor CUPS which helps to find the optimal settings for the selected printer.
One of the most interesting tools for printing is the a2ps programme, which not only converts text files into PostScript format. The programme is permanently installed under Ubuntu:


```
hans@linux:~$ sudo apt-get install a2ps
```

The syntax is a2ps [options] source file [-o target file]. Without specifying the target option, the converted file is printed immediately. The only drawback: Unicode is currently not supported. Extensive help is available with a2ps -h. In conjunction with the print programme lp, a2ps fulfils all wishes if you want to print a filedirectly. The authors use the a2ps programme to print Gambas source texts:


```
hans@linux:~$ a2ps --line-numbers=1 --columns=1 --rows=1 --portrait /home/hans/FMain.class
```

In conjunction with the Process class and the EXEC and SHELL instructions from Gambas, a2ps can also be used to conveniently print files from a Gambas application. Only if you have special requirements, such as printing the contents of a GridView, should you use the Print, Draw and Printer classes from Gambas.


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.7 Component gb.scanner

The Gambas scanner component gb.scanner consists of the three classes
It enables the simple management and control of scanner devices in Gambas code. The classes use the ScanImage programme, which is provided in the SANE project as a line command-oriented front-end tool.


# 23.7.1 Class Scanners

To be able to create scanner objects and work with them, you must first find out how the scanner used has registered as a device in the system. The Scanners class is available for this purpose. You can create the class and it acts as a read-only array that contains a list of the Scanner object type and can be enumerated using FOR-EACH. It does not provide any properties, but has two methods and an event.


# 23.7.1.1 Methods

The methods of the Scanners class:
Table 23.7.1.1.1 : Methods of the Scanners class


# 23.7.1.2 Events

The Scanners class only has this event:
Table 23.7.1.2.1 : Event of the Scanners class
The search process initiated by the Search method takes place in the background and ends in the Scanners_Found() event, in which the evaluation can take place. So that the class can trigger this event in the parent class, it must be registered accordingly with the Object.Attach instruction:


```
'-- Attach Scanner static class to the form class to catch eventsObject.Attach(Scanners,Me,"Scanners")'-- Start searching for scannersScanners.Search...'' End of search and enumeration of scannersPublicSubScanners_Found()DimsAsStringForEachsInScanners
    ComboBoxScanners.Add(Scanners[s].name)NextIfComboBoxScanners.count>0ThenComboBoxScanners.Index=0ElseMessage.Error("No scanner found.")QuitEndifEnd
```

Alternatively, this can also be implemented in the usual way:


```
DimMyScannersAsScanners
 
MyScanners=NewScannersAs"MyScanners"MyScanners.Search()...'' End of search and enumeration of scannersPublicSubMyScanners_Found()DimsAsStringForEachsInScanners
    ComboBoxScanners.Add(Scanners[s].Name)NextIfComboBoxScanners.count>0ThenComboBoxScanners.Index=0ElseMessage.Error("No scanner found.")QuitEndifEnd
```



# 23.7.2 Scanner class

The Scanner class represents a scanner as a device and provides the basis for working with the device with the Scanner object.


# 23.7.2.1 Properties

The Scanner class has these properties:
Table 23.7.2.1.1 : Properties of the Scanner class
To create a new Scanner object:


```
Dim hScanner As Scanner
hScanner = New Scanner ( sDevice As String )  As "EventName"
```

Based on the recognition of existing scanners described above, this could look as follows:


```
Dim hScanner As Scanner
hScanner = New Scanner(ComboBoxScanners.Text) As "hScanner"
hScanner.Async = True
```

The class is enumerable with FOR-EACH and provides the names of all available scanner options:


```
Dim sOption As String

For Each sOption In hScanner
  Print sOption
Next
```



# 23.7.2.2 Methods

The Scanner class has the following methods:
Table 23.7.2.2.1 : Methods of the Scanner class
You can use the Scanner class to determine, among other things, whether the scanner used offers the brightness setting:


```
If hScanner.Exist("Brightness") Then
   Print hScanner["Brightness"].MinValue	' Minimum value of this option
   Print hScanner["Brightness"].MaxValue    	' Maximum value of this option
   Print hScanner["Brightness"].Value	   	' Default value of this option
Endif
```

Alternative:


```
Print hScanner.Find("Brightness").MinValue
Print hScanner.Find("Brightness").MaxValue
Print hScanner.Find("Brightness").Value
```



# 23.7.2.3 Events

The Scanner class has these events:
Table 23.7.2.3.1 : Events of the Scanner class
Here is an example of how to read and display the scanned image in the PageEnd event routine:


```
PublicSubhScanner_PageEnd()DimhImageAsImageTryhImage=Last.Peek()IfNothImageThenMessage.Error("Can't load image")ReturnEndifPictureBoxScan.Picture=hImage.PictureEnd
```



# 23.7.3 ScannerOption class

Experience has shown that the options available for a scanner vary greatly between models and manufacturers. It is up to the programmer to determine these and use them accordingly. The ScannerOptions class is available for this purpose, which attempts to provide all available options as corresponding properties with the help of a parser.
For this purpose, the parser receives a scanner-specific data record from the ScanImage programme. This looks like this for a (fictitious) scanner, for example


```
All options specific to device `quickscan:QS2000_192.xxx.xxx.xxx':
  Scan mode:
    --resolution 75|150|300|600|1200|2400|4800dpi [75]
        Sets the resolution of the scanned image.
    --mode auto|Color|Gray|Lineart [Color]
        Selects the scan mode (e.g., lineart, monochrome, or color).
    --source Flatbed [Flatbed]
        Selects the scan source (such as a document-feeder). Set source before
        mode and resolution. Resets mode and resolution to auto values.
  Geometry:
    -l auto|0..216.069mm [0]
        Top-left x position of scan area.
    -t auto|0..297.011mm [0]
        Top-left y position of scan area.
    -x auto|0..216.069mm [216.069]
        Width of scan-area.
    -y auto|0..297.011mm [297.011]
        Height of scan-area.
  Extras:
    --threshold auto|0..100% (in steps of 1) [inactive]
...
```

and provides the parser with values for adjustable resolutions (marked in red), which are made available as properties, in addition to many other parameters.
In contrast to the discrete values in the example above, values for the available resolutions can also be specified as a range, as the following example shows:


```
...
  --resolution 50..1200dpi [50]
...
```

To use the resolution values, it is therefore necessary to differentiate between these cases. The class provides the IsRange property for this purpose.
The options of the “Geometry” data group are intended for defining the section to be scanned. The class provides fixed names for this:


# 23.7.3.1 Properties

The ScannerOption class has the following properties, whereby its values can only be read with the exception of the Value property:
Table 23.7.3.1.1 : Properties of the ScannerOption class
Notes:


# 23.7.4 The gb.Scan project

In the gb.Scan project, whose source code archive is available for download, only native Gambas resources are used in order to present a scanning application that is as versatile as possible for everyday use.
The gb.Scan application has the following functions:
Display of the scans in a multi-select list with

Figure 23.7.4.1: Main window of the gb.Scan application
Notes:


# Download

Chapter & Projects
Download


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# Table of Contents



# 23.8.0 Component gb.chart


If you want to present data graphically in an impressive way, then the chart component gb.chart is just the thing. Unfortunately, the component is not stable and not error-free. Nevertheless, simple but meaningful charts such as line charts can be created with just a few instructions. It may therefore be worth experimenting with this component. This is also true in view of the fact that the developer has announced that the component will be revised.


# 23.8.0.1 Chart class

The Chart class can be used like an object by creating a hidden instance if required. This class behaves like a read-only array. The Chart class represents a chart object that can be drawn in a DrawingArea or on a picture of type Picture. You can also constantly update the data - unlike most other chart libraries.
You can create the class:


```
Dim hChart As Chart
hChart = New Chart()
```

You can then define the values of selected chart properties:


```
With hChart
  .Title = "Temperature time diagram (Berlin 2020)"
  ... 
End With
```



# 23.8.0.2 Properties

The Chart class has the following properties:
Table 23.8.0.2.1 : Properties of the Chart class
Here you can see an overview of the chart types, of which only a few provide usable () charts:


# 23.8.0.3 Class _Colours

The colours for the individual parts, for example in a bar chart, pie chart or ring chart, are defined in an integer array. The _Colors virtual class has these properties:
Table 23.8.0.3.1 : Properties of the _Colors class
The _Colors class has an Add() method with which you can specify individual colours. If a data set consists of 3 values, then you also need 3 colours:


```
WithChart.Colors.Values.Add(Color.Red).Add(Color.Blue).Add(Color.Green)EndWith
```

Example:


```
PublicSubbtnColors_Click()IfbtnColors.Text=("Custom colors")Then'--  The colours are read from a self-defined colour arrayChart.Colors.Style=Chart.Colors.CustombtnColors.Text=("Default colors")ElseChart.Colors.Style=Chart.Colors.Auto'-- The colours are generated automaticallybtnColors.Text=("Custom colors")EndifDrawingArea1.Refresh()End
```



# 23.8.0.4 Class _CHeaders

Use the class to define the names of the values on the x-axis in a string array. The _CHeaders virtual class has the following properties:
Table 23.8.0.4.1 : Properties of the _CHeaders class
The class has an Add() method with which you can specify individual identifiers. For example, if 4 values are to be displayed on the x-axis, then you also need 4 identifiers:


```
WithChart.Headers.Values.Add("Frühjahr").Add("Sommer").Add("Herbst").Add("Winter")EndWithChart.Headers.Values=["Frühjahr","Sommer","Herbst","Winter"]'-- Alternative
```



# 23.8.0.5 Class _CLegend

The properties for the diagram legend are set in this class. The virtual class _CLegend has these properties:
Table 23.8.0.5.1 : Properties of the _CLegend class
Example:


```
'-- Defines the legend of the diagram.Chart.Legend.Title="Information"Chart.Legend.Font=Font["Arial,+5"]'-- Font for the legend - relativeChart.Legend.Position=Align.Bottom'-- Alternative: Align.RightChart.Legend.Visible=True
```



# 23.8.0.6 Class _CTitle

The _CTitle virtual class has three properties that you can use to describe the font, the text and the visibility for the diagram title:
Table 23.8.0.6.1 : Properties of the _CTitle class
Example:


```
'-- Visibility, title and font of the diagramChart.Title.Visible=TrueChart.Title.Text="Spannung-Zeit-Diagramm"Chart.Title.Font=Font["Arial,24"]'-- Font for the title - absolute in px
```



# 23.8.0.7 Class _CXAxe

The properties of the x-axis (abscissa) of the diagram are set via its properties. The virtual class _CXAxe has these properties:
Table 23.8.0.7.1 : Properties of the _CXAxe class


# 23.8.0.8 Class _CYAxe

The properties of the y-axis (ordinate) of the diagram are set via the class properties. The virtual class _CYAxe has these properties:
Table 23.8.0.8.1 : Properties of the _CYAxe class
Example:


```
Chart.YAxe.AutoScale=FalseChart.YAxe.MinValue=0Chart.YAxe.MaxValue=5Chart.YAxe.Step=1Chart.YAxe.ShowIntervalLines=FalseChart.YAxe.Visible=True
```

Note:
A complete project for a line-symbol chart that uses selected classes of the gb.chart component can be found in the next chapter. The special feature is that the data to be displayed is read from an SQLite database table in three series!


# Page Tools



# GAMBAS BOOK 3.19.3



# User Tools



# Site Tools



# Sidebar



# Multimedia



# Chapters



# 23.8.1 Line chart project

The following project shows you how to use classes of the chart component gb.chart to create a line symbol chart → Figure 23.8.1.1 SWR line chart:

Figure 23.8.1.1: SWR line-symbol diagram
This is the complete, sufficiently commented source code:


```
' Gambas class filePublichChartAsNewChartPublicSubForm_Open()FChart.Resizable=True'-- Creates a diagram with the given properties and data.CreateChart()EndPublicSubCreateChart()SetChartGeneral()SetChartType()SetChartColors()SetChartLegend()SetChartXAxis()SetChartYAxis()SetChartValues()EndPublicSubDrawingArea1_Draw()'-- Sets the height and width of the diagram.hChart.Width=DrawingArea1.ClientWidthhChart.Height=DrawingArea1.ClientHeight'-- The chart object can be rendered on a form in a DrawingArea.hChart.Draw()EndPublicSubForm_Close()FChart.Close()End'-- Private Procedure ------------------------------------------------------------------PrivateSubSetChartGeneral()'-- Sets the color for the background of the diagramhChart.BackGround=Color.White' &HC3DDFF'-- Sets a border around the diagramhChart.Border=True'-- Sets the diagram description (titel)hChart.Title.Visible=TruehChart.Title.Text=("SWR frequency diagrams for different antennas")hChart.Title.Font=Font["NotoSans,24"]' Font for the title - absolute in px'-- Sets the diagram stylehChart.Style=ChartStyle.DefaulthChart.Proportionnal=TrueEndPrivateSubSetChartColors()'-- Sets the user-defined colorshChart.Colors.Style=Chart.Colors.CustomhChart.Colors.Values=[Color.Red, Color.Blue, Color.Green]'-- Alternative: Sets the colors automatically'   Chart.Colors.Style = Chart.Colors.AutoEndPrivateSubSetChartType()'-- Sets the diagram typehChart.Type=ChartType.LinesSymbolsEndPrivateSubSetChartValues()DimhDBResultAsResultDimiAsInteger'-- Sets the number of data series.hChart.CountDataSets=3'-- Returns the result of a database query as a database resulthDBResult=DBCS.DBConnection.Exec("SELECT frequenz, fb3320, yagi20, loop20 FROM "&"testseries1")'-- Sets the values on the X-axis as a character string for each data series!Fori=1TohDBResult.CounthDBResult.MoveTo(i-1)'-- Sets the x-values in a string arrayhChart.Headers.Values.Add(CStr(hDBResult!frequenz))'-- Sets the y-values as float valueshChart[0].Values.Add(hDBResult!fb3320)'-- Text to display in the legendhChart[0].Text="FB33"hChart[1].Values.Add(hDBResult!yagi20)'-- Text to display in the legendhChart[1].Text="2-Element-Monoband-Yagi"hChart[2].Values.Add(hDBResult!loop20)'-- Text to display in the legendhChart[2].Text="2-Element-Monoband-Loop"NextEndPrivateSubSetChartLegend()hChart.Legend.Visible=TruehChart.Legend.Position=Align.Bottom' Position either .Bottom or .RighthChart.Legend.Font=Font["NotoSans,14"]' Font for the title - absolute in pxhChart.Legend.Title=("Antenna type:")EndPrivateSubSetChartXAxis()'-- X-AxishChart.XAxe.Visible=TruehChart.XAxe.MinValue=14.00hChart.XAxe.MaxValue=14.40hChart.XAxe.Step=0.25EndPrivateSubSetChartYAxis(OptionalargAutoAsString)'-- Y-AxishChart.YAxe.Visible=TruehChart.YAxe.ShowIntervalLines=TrueIfargAutoAndIfLower(argAuto)="auto"ThenhChart.XAxe.AutoScale=TrueElsehChart.YAxe.MinValue=1hChart.YAxe.MaxValue=3.25hChart.YAxe.Step=0.25EndifEnd
```

Notes:
The gb.chart component must be integrated into the project and the data to be displayed comes from an SQLite database table. The database is included in the project:

Figure 23.8.1.2: Database table (frequency and SWR)
There isnooption in the gb.chart component to


# Download

Project
Download


# Page Tools

